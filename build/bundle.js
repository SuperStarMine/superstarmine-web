
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
var app = (function () {
    'use strict';

    function noop() { }
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {
        const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function exclude_internal_props(props) {
        const result = {};
        for (const k in props)
            if (k[0] !== '$')
                result[k] = props[k];
        return result;
    }
    function compute_rest_props(props, keys) {
        const rest = {};
        keys = new Set(keys);
        for (const k in props)
            if (!keys.has(k) && k[0] !== '$')
                rest[k] = props[k];
        return rest;
    }
    function null_to_empty(value) {
        return value == null ? '' : value;
    }
    function set_store_value(store, ret, value = ret) {
        store.set(value);
        return ret;
    }
    function action_destroyer(action_result) {
        return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
    }

    function append$1(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text$1(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text$1(' ');
    }
    function empty() {
        return text$1('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr$1(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function set_attributes(node, attributes) {
        // @ts-ignore
        const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);
        for (const key in attributes) {
            if (attributes[key] == null) {
                node.removeAttribute(key);
            }
            else if (key === 'style') {
                node.style.cssText = attributes[key];
            }
            else if (key === '__value') {
                node.value = node[key] = attributes[key];
            }
            else if (descriptors[key] && descriptors[key].set) {
                node[key] = attributes[key];
            }
            else {
                attr$1(node, key, attributes[key]);
            }
        }
    }
    function children$1(element) {
        return Array.from(element.childNodes);
    }
    function set_style(node, key, value, important) {
        node.style.setProperty(key, value, important ? 'important' : '');
    }
    function custom_event(type, detail) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, false, false, detail);
        return e;
    }
    class HtmlTag {
        constructor(anchor = null) {
            this.a = anchor;
            this.e = this.n = null;
        }
        m(html, target, anchor = null) {
            if (!this.e) {
                this.e = element(target.nodeName);
                this.t = target;
                this.h(html);
            }
            this.i(anchor);
        }
        h(html) {
            this.e.innerHTML = html;
            this.n = Array.from(this.e.childNodes);
        }
        i(anchor) {
            for (let i = 0; i < this.n.length; i += 1) {
                insert(this.t, this.n[i], anchor);
            }
        }
        p(html) {
            this.d();
            this.h(html);
            this.i(this.a);
        }
        d() {
            this.n.forEach(detach);
        }
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function beforeUpdate(fn) {
        get_current_component().$$.before_update.push(fn);
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function afterUpdate(fn) {
        get_current_component().$$.after_update.push(fn);
    }
    function onDestroy(fn) {
        get_current_component().$$.on_destroy.push(fn);
    }
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail);
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
            }
        };
    }
    // TODO figure out if we still want to support
    // shorthand events, or if we want to implement
    // a real bubbling mechanism
    function bubble(component, event) {
        const callbacks = component.$$.callbacks[event.type];
        if (callbacks) {
            callbacks.slice().forEach(fn => fn(event));
        }
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function tick() {
        schedule_update();
        return resolved_promise;
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update$1(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update$1($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);

    function get_spread_update(levels, updates) {
        const update = {};
        const to_null_out = {};
        const accounted_for = { $$scope: 1 };
        let i = levels.length;
        while (i--) {
            const o = levels[i];
            const n = updates[i];
            if (n) {
                for (const key in o) {
                    if (!(key in n))
                        to_null_out[key] = 1;
                }
                for (const key in n) {
                    if (!accounted_for[key]) {
                        update[key] = n[key];
                        accounted_for[key] = 1;
                    }
                }
                levels[i] = n;
            }
            else {
                for (const key in o) {
                    accounted_for[key] = 1;
                }
            }
        }
        for (const key in to_null_out) {
            if (!(key in update))
                update[key] = undefined;
        }
        return update;
    }
    function get_spread_object(spread_props) {
        return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : options.context || []),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children$1(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.38.2' }, detail)));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append$1(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr$1(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev('SvelteDOMSetProperty', { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    /**
     * @typedef {Object} WrappedComponent Object returned by the `wrap` method
     * @property {SvelteComponent} component - Component to load (this is always asynchronous)
     * @property {RoutePrecondition[]} [conditions] - Route pre-conditions to validate
     * @property {Object} [props] - Optional dictionary of static props
     * @property {Object} [userData] - Optional user data dictionary
     * @property {bool} _sveltesparouter - Internal flag; always set to true
     */

    /**
     * @callback AsyncSvelteComponent
     * @returns {Promise<SvelteComponent>} Returns a Promise that resolves with a Svelte component
     */

    /**
     * @callback RoutePrecondition
     * @param {RouteDetail} detail - Route detail object
     * @returns {boolean|Promise<boolean>} If the callback returns a false-y value, it's interpreted as the precondition failed, so it aborts loading the component (and won't process other pre-condition callbacks)
     */

    /**
     * @typedef {Object} WrapOptions Options object for the call to `wrap`
     * @property {SvelteComponent} [component] - Svelte component to load (this is incompatible with `asyncComponent`)
     * @property {AsyncSvelteComponent} [asyncComponent] - Function that returns a Promise that fulfills with a Svelte component (e.g. `{asyncComponent: () => import('Foo.svelte')}`)
     * @property {SvelteComponent} [loadingComponent] - Svelte component to be displayed while the async route is loading (as a placeholder); when unset or false-y, no component is shown while component
     * @property {object} [loadingParams] - Optional dictionary passed to the `loadingComponent` component as params (for an exported prop called `params`)
     * @property {object} [userData] - Optional object that will be passed to events such as `routeLoading`, `routeLoaded`, `conditionsFailed`
     * @property {object} [props] - Optional key-value dictionary of static props that will be passed to the component. The props are expanded with {...props}, so the key in the dictionary becomes the name of the prop.
     * @property {RoutePrecondition[]|RoutePrecondition} [conditions] - Route pre-conditions to add, which will be executed in order
     */

    /**
     * Wraps a component to enable multiple capabilities:
     * 1. Using dynamically-imported component, with (e.g. `{asyncComponent: () => import('Foo.svelte')}`), which also allows bundlers to do code-splitting.
     * 2. Adding route pre-conditions (e.g. `{conditions: [...]}`)
     * 3. Adding static props that are passed to the component
     * 4. Adding custom userData, which is passed to route events (e.g. route loaded events) or to route pre-conditions (e.g. `{userData: {foo: 'bar}}`)
     * 
     * @param {WrapOptions} args - Arguments object
     * @returns {WrappedComponent} Wrapped component
     */
    function wrap$1(args) {
        if (!args) {
            throw Error('Parameter args is required')
        }

        // We need to have one and only one of component and asyncComponent
        // This does a "XNOR"
        if (!args.component == !args.asyncComponent) {
            throw Error('One and only one of component and asyncComponent is required')
        }

        // If the component is not async, wrap it into a function returning a Promise
        if (args.component) {
            args.asyncComponent = () => Promise.resolve(args.component);
        }

        // Parameter asyncComponent and each item of conditions must be functions
        if (typeof args.asyncComponent != 'function') {
            throw Error('Parameter asyncComponent must be a function')
        }
        if (args.conditions) {
            // Ensure it's an array
            if (!Array.isArray(args.conditions)) {
                args.conditions = [args.conditions];
            }
            for (let i = 0; i < args.conditions.length; i++) {
                if (!args.conditions[i] || typeof args.conditions[i] != 'function') {
                    throw Error('Invalid parameter conditions[' + i + ']')
                }
            }
        }

        // Check if we have a placeholder component
        if (args.loadingComponent) {
            args.asyncComponent.loading = args.loadingComponent;
            args.asyncComponent.loadingParams = args.loadingParams || undefined;
        }

        // Returns an object that contains all the functions to execute too
        // The _sveltesparouter flag is to confirm the object was created by this router
        const obj = {
            component: args.asyncComponent,
            userData: args.userData,
            conditions: (args.conditions && args.conditions.length) ? args.conditions : undefined,
            props: (args.props && Object.keys(args.props).length) ? args.props : {},
            _sveltesparouter: true
        };

        return obj
    }

    const subscriber_queue = [];
    /**
     * Creates a `Readable` store that allows reading by subscription.
     * @param value initial value
     * @param {StartStopNotifier}start start and stop notifications for subscriptions
     */
    function readable(value, start) {
        return {
            subscribe: writable(value, start).subscribe
        };
    }
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = [];
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (let i = 0; i < subscribers.length; i += 1) {
                        const s = subscribers[i];
                        s[1]();
                        subscriber_queue.push(s, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.push(subscriber);
            if (subscribers.length === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                const index = subscribers.indexOf(subscriber);
                if (index !== -1) {
                    subscribers.splice(index, 1);
                }
                if (subscribers.length === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }
    function derived(stores, fn, initial_value) {
        const single = !Array.isArray(stores);
        const stores_array = single
            ? [stores]
            : stores;
        const auto = fn.length < 2;
        return readable(initial_value, (set) => {
            let inited = false;
            const values = [];
            let pending = 0;
            let cleanup = noop;
            const sync = () => {
                if (pending) {
                    return;
                }
                cleanup();
                const result = fn(single ? values[0] : values, set);
                if (auto) {
                    set(result);
                }
                else {
                    cleanup = is_function(result) ? result : noop;
                }
            };
            const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {
                values[i] = value;
                pending &= ~(1 << i);
                if (inited) {
                    sync();
                }
            }, () => {
                pending |= (1 << i);
            }));
            inited = true;
            sync();
            return function stop() {
                run_all(unsubscribers);
                cleanup();
            };
        });
    }

    function regexparam (str, loose) {
    	if (str instanceof RegExp) return { keys:false, pattern:str };
    	var c, o, tmp, ext, keys=[], pattern='', arr = str.split('/');
    	arr[0] || arr.shift();

    	while (tmp = arr.shift()) {
    		c = tmp[0];
    		if (c === '*') {
    			keys.push('wild');
    			pattern += '/(.*)';
    		} else if (c === ':') {
    			o = tmp.indexOf('?', 1);
    			ext = tmp.indexOf('.', 1);
    			keys.push( tmp.substring(1, !!~o ? o : !!~ext ? ext : tmp.length) );
    			pattern += !!~o && !~ext ? '(?:/([^/]+?))?' : '/([^/]+?)';
    			if (!!~ext) pattern += (!!~o ? '?' : '') + '\\' + tmp.substring(ext);
    		} else {
    			pattern += '/' + tmp;
    		}
    	}

    	return {
    		keys: keys,
    		pattern: new RegExp('^' + pattern + (loose ? '(?=$|\/)' : '\/?$'), 'i')
    	};
    }

    /* node_modules/svelte-spa-router/Router.svelte generated by Svelte v3.38.2 */

    const { Error: Error_1, Object: Object_1$3, console: console_1$1 } = globals;

    // (209:0) {:else}
    function create_else_block$7(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;
    	const switch_instance_spread_levels = [/*props*/ ctx[2]];
    	var switch_value = /*component*/ ctx[0];

    	function switch_props(ctx) {
    		let switch_instance_props = {};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props());
    		switch_instance.$on("routeEvent", /*routeEvent_handler_1*/ ctx[7]);
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = (dirty & /*props*/ 4)
    			? get_spread_update(switch_instance_spread_levels, [get_spread_object(/*props*/ ctx[2])])
    			: {};

    			if (switch_value !== (switch_value = /*component*/ ctx[0])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props());
    					switch_instance.$on("routeEvent", /*routeEvent_handler_1*/ ctx[7]);
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$7.name,
    		type: "else",
    		source: "(209:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (202:0) {#if componentParams}
    function create_if_block$e(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;
    	const switch_instance_spread_levels = [{ params: /*componentParams*/ ctx[1] }, /*props*/ ctx[2]];
    	var switch_value = /*component*/ ctx[0];

    	function switch_props(ctx) {
    		let switch_instance_props = {};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props());
    		switch_instance.$on("routeEvent", /*routeEvent_handler*/ ctx[6]);
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = (dirty & /*componentParams, props*/ 6)
    			? get_spread_update(switch_instance_spread_levels, [
    					dirty & /*componentParams*/ 2 && { params: /*componentParams*/ ctx[1] },
    					dirty & /*props*/ 4 && get_spread_object(/*props*/ ctx[2])
    				])
    			: {};

    			if (switch_value !== (switch_value = /*component*/ ctx[0])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props());
    					switch_instance.$on("routeEvent", /*routeEvent_handler*/ ctx[6]);
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$e.name,
    		type: "if",
    		source: "(202:0) {#if componentParams}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$k(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$e, create_else_block$7];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*componentParams*/ ctx[1]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error_1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$k.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function wrap(component, userData, ...conditions) {
    	// Use the new wrap method and show a deprecation warning
    	// eslint-disable-next-line no-console
    	console.warn("Method `wrap` from `svelte-spa-router` is deprecated and will be removed in a future version. Please use `svelte-spa-router/wrap` instead. See http://bit.ly/svelte-spa-router-upgrading");

    	return wrap$1({ component, userData, conditions });
    }

    /**
     * @typedef {Object} Location
     * @property {string} location - Location (page/view), for example `/book`
     * @property {string} [querystring] - Querystring from the hash, as a string not parsed
     */
    /**
     * Returns the current location from the hash.
     *
     * @returns {Location} Location object
     * @private
     */
    function getLocation() {
    	const hashPosition = window.location.href.indexOf("#/");

    	let location = hashPosition > -1
    	? window.location.href.substr(hashPosition + 1)
    	: "/";

    	// Check if there's a querystring
    	const qsPosition = location.indexOf("?");

    	let querystring = "";

    	if (qsPosition > -1) {
    		querystring = location.substr(qsPosition + 1);
    		location = location.substr(0, qsPosition);
    	}

    	return { location, querystring };
    }

    const loc = readable(null, // eslint-disable-next-line prefer-arrow-callback
    function start(set) {
    	set(getLocation());

    	const update = () => {
    		set(getLocation());
    	};

    	window.addEventListener("hashchange", update, false);

    	return function stop() {
    		window.removeEventListener("hashchange", update, false);
    	};
    });

    const location$1 = derived(loc, $loc => $loc.location);
    const querystring = derived(loc, $loc => $loc.querystring);

    async function push(location) {
    	if (!location || location.length < 1 || location.charAt(0) != "/" && location.indexOf("#/") !== 0) {
    		throw Error("Invalid parameter location");
    	}

    	// Execute this code when the current call stack is complete
    	await tick();

    	// Note: this will include scroll state in history even when restoreScrollState is false
    	history.replaceState(
    		{
    			scrollX: window.scrollX,
    			scrollY: window.scrollY
    		},
    		undefined,
    		undefined
    	);

    	window.location.hash = (location.charAt(0) == "#" ? "" : "#") + location;
    }

    async function pop() {
    	// Execute this code when the current call stack is complete
    	await tick();

    	window.history.back();
    }

    async function replace(location) {
    	if (!location || location.length < 1 || location.charAt(0) != "/" && location.indexOf("#/") !== 0) {
    		throw Error("Invalid parameter location");
    	}

    	// Execute this code when the current call stack is complete
    	await tick();

    	const dest = (location.charAt(0) == "#" ? "" : "#") + location;

    	try {
    		window.history.replaceState(undefined, undefined, dest);
    	} catch(e) {
    		// eslint-disable-next-line no-console
    		console.warn("Caught exception while replacing the current page. If you're running this in the Svelte REPL, please note that the `replace` method might not work in this environment.");
    	}

    	// The method above doesn't trigger the hashchange event, so let's do that manually
    	window.dispatchEvent(new Event("hashchange"));
    }

    function link$1(node, hrefVar) {
    	// Only apply to <a> tags
    	if (!node || !node.tagName || node.tagName.toLowerCase() != "a") {
    		throw Error("Action \"link\" can only be used with <a> tags");
    	}

    	updateLink(node, hrefVar || node.getAttribute("href"));

    	return {
    		update(updated) {
    			updateLink(node, updated);
    		}
    	};
    }

    // Internal function used by the link function
    function updateLink(node, href) {
    	// Destination must start with '/'
    	if (!href || href.length < 1 || href.charAt(0) != "/") {
    		throw Error("Invalid value for \"href\" attribute: " + href);
    	}

    	// Add # to the href attribute
    	node.setAttribute("href", "#" + href);

    	node.addEventListener("click", scrollstateHistoryHandler);
    }

    /**
     * The handler attached to an anchor tag responsible for updating the
     * current history state with the current scroll state
     *
     * @param {HTMLElementEventMap} event - an onclick event attached to an anchor tag
     */
    function scrollstateHistoryHandler(event) {
    	// Prevent default anchor onclick behaviour
    	event.preventDefault();

    	const href = event.currentTarget.getAttribute("href");

    	// Setting the url (3rd arg) to href will break clicking for reasons, so don't try to do that
    	history.replaceState(
    		{
    			scrollX: window.scrollX,
    			scrollY: window.scrollY
    		},
    		undefined,
    		undefined
    	);

    	// This will force an update as desired, but this time our scroll state will be attached
    	window.location.hash = href;
    }

    function instance$k($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Router", slots, []);
    	let { routes = {} } = $$props;
    	let { prefix = "" } = $$props;
    	let { restoreScrollState = false } = $$props;

    	/**
     * Container for a route: path, component
     */
    	class RouteItem {
    		/**
     * Initializes the object and creates a regular expression from the path, using regexparam.
     *
     * @param {string} path - Path to the route (must start with '/' or '*')
     * @param {SvelteComponent|WrappedComponent} component - Svelte component for the route, optionally wrapped
     */
    		constructor(path, component) {
    			if (!component || typeof component != "function" && (typeof component != "object" || component._sveltesparouter !== true)) {
    				throw Error("Invalid component object");
    			}

    			// Path must be a regular or expression, or a string starting with '/' or '*'
    			if (!path || typeof path == "string" && (path.length < 1 || path.charAt(0) != "/" && path.charAt(0) != "*") || typeof path == "object" && !(path instanceof RegExp)) {
    				throw Error("Invalid value for \"path\" argument - strings must start with / or *");
    			}

    			const { pattern, keys } = regexparam(path);
    			this.path = path;

    			// Check if the component is wrapped and we have conditions
    			if (typeof component == "object" && component._sveltesparouter === true) {
    				this.component = component.component;
    				this.conditions = component.conditions || [];
    				this.userData = component.userData;
    				this.props = component.props || {};
    			} else {
    				// Convert the component to a function that returns a Promise, to normalize it
    				this.component = () => Promise.resolve(component);

    				this.conditions = [];
    				this.props = {};
    			}

    			this._pattern = pattern;
    			this._keys = keys;
    		}

    		/**
     * Checks if `path` matches the current route.
     * If there's a match, will return the list of parameters from the URL (if any).
     * In case of no match, the method will return `null`.
     *
     * @param {string} path - Path to test
     * @returns {null|Object.<string, string>} List of paramters from the URL if there's a match, or `null` otherwise.
     */
    		match(path) {
    			// If there's a prefix, check if it matches the start of the path.
    			// If not, bail early, else remove it before we run the matching.
    			if (prefix) {
    				if (typeof prefix == "string") {
    					if (path.startsWith(prefix)) {
    						path = path.substr(prefix.length) || "/";
    					} else {
    						return null;
    					}
    				} else if (prefix instanceof RegExp) {
    					const match = path.match(prefix);

    					if (match && match[0]) {
    						path = path.substr(match[0].length) || "/";
    					} else {
    						return null;
    					}
    				}
    			}

    			// Check if the pattern matches
    			const matches = this._pattern.exec(path);

    			if (matches === null) {
    				return null;
    			}

    			// If the input was a regular expression, this._keys would be false, so return matches as is
    			if (this._keys === false) {
    				return matches;
    			}

    			const out = {};
    			let i = 0;

    			while (i < this._keys.length) {
    				// In the match parameters, URL-decode all values
    				try {
    					out[this._keys[i]] = decodeURIComponent(matches[i + 1] || "") || null;
    				} catch(e) {
    					out[this._keys[i]] = null;
    				}

    				i++;
    			}

    			return out;
    		}

    		/**
     * Dictionary with route details passed to the pre-conditions functions, as well as the `routeLoading`, `routeLoaded` and `conditionsFailed` events
     * @typedef {Object} RouteDetail
     * @property {string|RegExp} route - Route matched as defined in the route definition (could be a string or a reguar expression object)
     * @property {string} location - Location path
     * @property {string} querystring - Querystring from the hash
     * @property {object} [userData] - Custom data passed by the user
     * @property {SvelteComponent} [component] - Svelte component (only in `routeLoaded` events)
     * @property {string} [name] - Name of the Svelte component (only in `routeLoaded` events)
     */
    		/**
     * Executes all conditions (if any) to control whether the route can be shown. Conditions are executed in the order they are defined, and if a condition fails, the following ones aren't executed.
     * 
     * @param {RouteDetail} detail - Route detail
     * @returns {bool} Returns true if all the conditions succeeded
     */
    		async checkConditions(detail) {
    			for (let i = 0; i < this.conditions.length; i++) {
    				if (!await this.conditions[i](detail)) {
    					return false;
    				}
    			}

    			return true;
    		}
    	}

    	// Set up all routes
    	const routesList = [];

    	if (routes instanceof Map) {
    		// If it's a map, iterate on it right away
    		routes.forEach((route, path) => {
    			routesList.push(new RouteItem(path, route));
    		});
    	} else {
    		// We have an object, so iterate on its own properties
    		Object.keys(routes).forEach(path => {
    			routesList.push(new RouteItem(path, routes[path]));
    		});
    	}

    	// Props for the component to render
    	let component = null;

    	let componentParams = null;
    	let props = {};

    	// Event dispatcher from Svelte
    	const dispatch = createEventDispatcher();

    	// Just like dispatch, but executes on the next iteration of the event loop
    	async function dispatchNextTick(name, detail) {
    		// Execute this code when the current call stack is complete
    		await tick();

    		dispatch(name, detail);
    	}

    	// If this is set, then that means we have popped into this var the state of our last scroll position
    	let previousScrollState = null;

    	if (restoreScrollState) {
    		window.addEventListener("popstate", event => {
    			// If this event was from our history.replaceState, event.state will contain
    			// our scroll history. Otherwise, event.state will be null (like on forward
    			// navigation)
    			if (event.state && event.state.scrollY) {
    				previousScrollState = event.state;
    			} else {
    				previousScrollState = null;
    			}
    		});

    		afterUpdate(() => {
    			// If this exists, then this is a back navigation: restore the scroll position
    			if (previousScrollState) {
    				window.scrollTo(previousScrollState.scrollX, previousScrollState.scrollY);
    			} else {
    				// Otherwise this is a forward navigation: scroll to top
    				window.scrollTo(0, 0);
    			}
    		});
    	}

    	// Always have the latest value of loc
    	let lastLoc = null;

    	// Current object of the component loaded
    	let componentObj = null;

    	// Handle hash change events
    	// Listen to changes in the $loc store and update the page
    	// Do not use the $: syntax because it gets triggered by too many things
    	loc.subscribe(async newLoc => {
    		lastLoc = newLoc;

    		// Find a route matching the location
    		let i = 0;

    		while (i < routesList.length) {
    			const match = routesList[i].match(newLoc.location);

    			if (!match) {
    				i++;
    				continue;
    			}

    			const detail = {
    				route: routesList[i].path,
    				location: newLoc.location,
    				querystring: newLoc.querystring,
    				userData: routesList[i].userData
    			};

    			// Check if the route can be loaded - if all conditions succeed
    			if (!await routesList[i].checkConditions(detail)) {
    				// Don't display anything
    				$$invalidate(0, component = null);

    				componentObj = null;

    				// Trigger an event to notify the user, then exit
    				dispatchNextTick("conditionsFailed", detail);

    				return;
    			}

    			// Trigger an event to alert that we're loading the route
    			// We need to clone the object on every event invocation so we don't risk the object to be modified in the next tick
    			dispatchNextTick("routeLoading", Object.assign({}, detail));

    			// If there's a component to show while we're loading the route, display it
    			const obj = routesList[i].component;

    			// Do not replace the component if we're loading the same one as before, to avoid the route being unmounted and re-mounted
    			if (componentObj != obj) {
    				if (obj.loading) {
    					$$invalidate(0, component = obj.loading);
    					componentObj = obj;
    					$$invalidate(1, componentParams = obj.loadingParams);
    					$$invalidate(2, props = {});

    					// Trigger the routeLoaded event for the loading component
    					// Create a copy of detail so we don't modify the object for the dynamic route (and the dynamic route doesn't modify our object too)
    					dispatchNextTick("routeLoaded", Object.assign({}, detail, { component, name: component.name }));
    				} else {
    					$$invalidate(0, component = null);
    					componentObj = null;
    				}

    				// Invoke the Promise
    				const loaded = await obj();

    				// Now that we're here, after the promise resolved, check if we still want this component, as the user might have navigated to another page in the meanwhile
    				if (newLoc != lastLoc) {
    					// Don't update the component, just exit
    					return;
    				}

    				// If there is a "default" property, which is used by async routes, then pick that
    				$$invalidate(0, component = loaded && loaded.default || loaded);

    				componentObj = obj;
    			}

    			// Set componentParams only if we have a match, to avoid a warning similar to `<Component> was created with unknown prop 'params'`
    			// Of course, this assumes that developers always add a "params" prop when they are expecting parameters
    			if (match && typeof match == "object" && Object.keys(match).length) {
    				$$invalidate(1, componentParams = match);
    			} else {
    				$$invalidate(1, componentParams = null);
    			}

    			// Set static props, if any
    			$$invalidate(2, props = routesList[i].props);

    			// Dispatch the routeLoaded event then exit
    			// We need to clone the object on every event invocation so we don't risk the object to be modified in the next tick
    			dispatchNextTick("routeLoaded", Object.assign({}, detail, { component, name: component.name }));

    			return;
    		}

    		// If we're still here, there was no match, so show the empty component
    		$$invalidate(0, component = null);

    		componentObj = null;
    	});

    	const writable_props = ["routes", "prefix", "restoreScrollState"];

    	Object_1$3.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$1.warn(`<Router> was created with unknown prop '${key}'`);
    	});

    	function routeEvent_handler(event) {
    		bubble($$self, event);
    	}

    	function routeEvent_handler_1(event) {
    		bubble($$self, event);
    	}

    	$$self.$$set = $$props => {
    		if ("routes" in $$props) $$invalidate(3, routes = $$props.routes);
    		if ("prefix" in $$props) $$invalidate(4, prefix = $$props.prefix);
    		if ("restoreScrollState" in $$props) $$invalidate(5, restoreScrollState = $$props.restoreScrollState);
    	};

    	$$self.$capture_state = () => ({
    		readable,
    		derived,
    		tick,
    		_wrap: wrap$1,
    		wrap,
    		getLocation,
    		loc,
    		location: location$1,
    		querystring,
    		push,
    		pop,
    		replace,
    		link: link$1,
    		updateLink,
    		scrollstateHistoryHandler,
    		createEventDispatcher,
    		afterUpdate,
    		regexparam,
    		routes,
    		prefix,
    		restoreScrollState,
    		RouteItem,
    		routesList,
    		component,
    		componentParams,
    		props,
    		dispatch,
    		dispatchNextTick,
    		previousScrollState,
    		lastLoc,
    		componentObj
    	});

    	$$self.$inject_state = $$props => {
    		if ("routes" in $$props) $$invalidate(3, routes = $$props.routes);
    		if ("prefix" in $$props) $$invalidate(4, prefix = $$props.prefix);
    		if ("restoreScrollState" in $$props) $$invalidate(5, restoreScrollState = $$props.restoreScrollState);
    		if ("component" in $$props) $$invalidate(0, component = $$props.component);
    		if ("componentParams" in $$props) $$invalidate(1, componentParams = $$props.componentParams);
    		if ("props" in $$props) $$invalidate(2, props = $$props.props);
    		if ("previousScrollState" in $$props) previousScrollState = $$props.previousScrollState;
    		if ("lastLoc" in $$props) lastLoc = $$props.lastLoc;
    		if ("componentObj" in $$props) componentObj = $$props.componentObj;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*restoreScrollState*/ 32) {
    			// Update history.scrollRestoration depending on restoreScrollState
    			history.scrollRestoration = restoreScrollState ? "manual" : "auto";
    		}
    	};

    	return [
    		component,
    		componentParams,
    		props,
    		routes,
    		prefix,
    		restoreScrollState,
    		routeEvent_handler,
    		routeEvent_handler_1
    	];
    }

    class Router extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$k, create_fragment$k, safe_not_equal, {
    			routes: 3,
    			prefix: 4,
    			restoreScrollState: 5
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Router",
    			options,
    			id: create_fragment$k.name
    		});
    	}

    	get routes() {
    		throw new Error_1("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set routes(value) {
    		throw new Error_1("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prefix() {
    		throw new Error_1("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prefix(value) {
    		throw new Error_1("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get restoreScrollState() {
    		throw new Error_1("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set restoreScrollState(value) {
    		throw new Error_1("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const globalSettings = {
      standardWidths: [
        {
          mediaQuery: 'min-aspect-ratio: 16/9',
          value: 70
        },
        {
          mediaQuery: 'default',
          value: 80
        },
        {
          mediaQuery: 'max-aspect-ratio: 3/4',
          value: 90
        },
      ],
      imageDirectory: '/img/',
      imageExtensionsShort: ['webp', 'png'],
      imageSizes: [250, 500, 750, 1000, 1250, 1500, 1750, 2000],
      tinyImageSize: 15,
      tinyImageExtensionsShort: ['webp', 'jpg'],
      transitionDuration: 500, //ms
    };

    const sync = writable({});

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getDefaultExportFromCjs (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function createCommonjsModule(fn) {
      var module = { exports: {} };
    	return fn(module, module.exports), module.exports;
    }

    var colorName = {
    	"aliceblue": [240, 248, 255],
    	"antiquewhite": [250, 235, 215],
    	"aqua": [0, 255, 255],
    	"aquamarine": [127, 255, 212],
    	"azure": [240, 255, 255],
    	"beige": [245, 245, 220],
    	"bisque": [255, 228, 196],
    	"black": [0, 0, 0],
    	"blanchedalmond": [255, 235, 205],
    	"blue": [0, 0, 255],
    	"blueviolet": [138, 43, 226],
    	"brown": [165, 42, 42],
    	"burlywood": [222, 184, 135],
    	"cadetblue": [95, 158, 160],
    	"chartreuse": [127, 255, 0],
    	"chocolate": [210, 105, 30],
    	"coral": [255, 127, 80],
    	"cornflowerblue": [100, 149, 237],
    	"cornsilk": [255, 248, 220],
    	"crimson": [220, 20, 60],
    	"cyan": [0, 255, 255],
    	"darkblue": [0, 0, 139],
    	"darkcyan": [0, 139, 139],
    	"darkgoldenrod": [184, 134, 11],
    	"darkgray": [169, 169, 169],
    	"darkgreen": [0, 100, 0],
    	"darkgrey": [169, 169, 169],
    	"darkkhaki": [189, 183, 107],
    	"darkmagenta": [139, 0, 139],
    	"darkolivegreen": [85, 107, 47],
    	"darkorange": [255, 140, 0],
    	"darkorchid": [153, 50, 204],
    	"darkred": [139, 0, 0],
    	"darksalmon": [233, 150, 122],
    	"darkseagreen": [143, 188, 143],
    	"darkslateblue": [72, 61, 139],
    	"darkslategray": [47, 79, 79],
    	"darkslategrey": [47, 79, 79],
    	"darkturquoise": [0, 206, 209],
    	"darkviolet": [148, 0, 211],
    	"deeppink": [255, 20, 147],
    	"deepskyblue": [0, 191, 255],
    	"dimgray": [105, 105, 105],
    	"dimgrey": [105, 105, 105],
    	"dodgerblue": [30, 144, 255],
    	"firebrick": [178, 34, 34],
    	"floralwhite": [255, 250, 240],
    	"forestgreen": [34, 139, 34],
    	"fuchsia": [255, 0, 255],
    	"gainsboro": [220, 220, 220],
    	"ghostwhite": [248, 248, 255],
    	"gold": [255, 215, 0],
    	"goldenrod": [218, 165, 32],
    	"gray": [128, 128, 128],
    	"green": [0, 128, 0],
    	"greenyellow": [173, 255, 47],
    	"grey": [128, 128, 128],
    	"honeydew": [240, 255, 240],
    	"hotpink": [255, 105, 180],
    	"indianred": [205, 92, 92],
    	"indigo": [75, 0, 130],
    	"ivory": [255, 255, 240],
    	"khaki": [240, 230, 140],
    	"lavender": [230, 230, 250],
    	"lavenderblush": [255, 240, 245],
    	"lawngreen": [124, 252, 0],
    	"lemonchiffon": [255, 250, 205],
    	"lightblue": [173, 216, 230],
    	"lightcoral": [240, 128, 128],
    	"lightcyan": [224, 255, 255],
    	"lightgoldenrodyellow": [250, 250, 210],
    	"lightgray": [211, 211, 211],
    	"lightgreen": [144, 238, 144],
    	"lightgrey": [211, 211, 211],
    	"lightpink": [255, 182, 193],
    	"lightsalmon": [255, 160, 122],
    	"lightseagreen": [32, 178, 170],
    	"lightskyblue": [135, 206, 250],
    	"lightslategray": [119, 136, 153],
    	"lightslategrey": [119, 136, 153],
    	"lightsteelblue": [176, 196, 222],
    	"lightyellow": [255, 255, 224],
    	"lime": [0, 255, 0],
    	"limegreen": [50, 205, 50],
    	"linen": [250, 240, 230],
    	"magenta": [255, 0, 255],
    	"maroon": [128, 0, 0],
    	"mediumaquamarine": [102, 205, 170],
    	"mediumblue": [0, 0, 205],
    	"mediumorchid": [186, 85, 211],
    	"mediumpurple": [147, 112, 219],
    	"mediumseagreen": [60, 179, 113],
    	"mediumslateblue": [123, 104, 238],
    	"mediumspringgreen": [0, 250, 154],
    	"mediumturquoise": [72, 209, 204],
    	"mediumvioletred": [199, 21, 133],
    	"midnightblue": [25, 25, 112],
    	"mintcream": [245, 255, 250],
    	"mistyrose": [255, 228, 225],
    	"moccasin": [255, 228, 181],
    	"navajowhite": [255, 222, 173],
    	"navy": [0, 0, 128],
    	"oldlace": [253, 245, 230],
    	"olive": [128, 128, 0],
    	"olivedrab": [107, 142, 35],
    	"orange": [255, 165, 0],
    	"orangered": [255, 69, 0],
    	"orchid": [218, 112, 214],
    	"palegoldenrod": [238, 232, 170],
    	"palegreen": [152, 251, 152],
    	"paleturquoise": [175, 238, 238],
    	"palevioletred": [219, 112, 147],
    	"papayawhip": [255, 239, 213],
    	"peachpuff": [255, 218, 185],
    	"peru": [205, 133, 63],
    	"pink": [255, 192, 203],
    	"plum": [221, 160, 221],
    	"powderblue": [176, 224, 230],
    	"purple": [128, 0, 128],
    	"rebeccapurple": [102, 51, 153],
    	"red": [255, 0, 0],
    	"rosybrown": [188, 143, 143],
    	"royalblue": [65, 105, 225],
    	"saddlebrown": [139, 69, 19],
    	"salmon": [250, 128, 114],
    	"sandybrown": [244, 164, 96],
    	"seagreen": [46, 139, 87],
    	"seashell": [255, 245, 238],
    	"sienna": [160, 82, 45],
    	"silver": [192, 192, 192],
    	"skyblue": [135, 206, 235],
    	"slateblue": [106, 90, 205],
    	"slategray": [112, 128, 144],
    	"slategrey": [112, 128, 144],
    	"snow": [255, 250, 250],
    	"springgreen": [0, 255, 127],
    	"steelblue": [70, 130, 180],
    	"tan": [210, 180, 140],
    	"teal": [0, 128, 128],
    	"thistle": [216, 191, 216],
    	"tomato": [255, 99, 71],
    	"turquoise": [64, 224, 208],
    	"violet": [238, 130, 238],
    	"wheat": [245, 222, 179],
    	"white": [255, 255, 255],
    	"whitesmoke": [245, 245, 245],
    	"yellow": [255, 255, 0],
    	"yellowgreen": [154, 205, 50]
    };

    var isArrayish = function isArrayish(obj) {
    	if (!obj || typeof obj === 'string') {
    		return false;
    	}

    	return obj instanceof Array || Array.isArray(obj) ||
    		(obj.length >= 0 && (obj.splice instanceof Function ||
    			(Object.getOwnPropertyDescriptor(obj, (obj.length - 1)) && obj.constructor.name !== 'String')));
    };

    var simpleSwizzle = createCommonjsModule(function (module) {



    var concat = Array.prototype.concat;
    var slice = Array.prototype.slice;

    var swizzle = module.exports = function swizzle(args) {
    	var results = [];

    	for (var i = 0, len = args.length; i < len; i++) {
    		var arg = args[i];

    		if (isArrayish(arg)) {
    			// http://jsperf.com/javascript-array-concat-vs-push/98
    			results = concat.call(results, slice.call(arg));
    		} else {
    			results.push(arg);
    		}
    	}

    	return results;
    };

    swizzle.wrap = function (fn) {
    	return function () {
    		return fn(swizzle(arguments));
    	};
    };
    });

    /* MIT license */

    var colorString = createCommonjsModule(function (module) {
    var reverseNames = {};

    // create a list of reverse color names
    for (var name in colorName) {
    	if (colorName.hasOwnProperty(name)) {
    		reverseNames[colorName[name]] = name;
    	}
    }

    var cs = module.exports = {
    	to: {},
    	get: {}
    };

    cs.get = function (string) {
    	var prefix = string.substring(0, 3).toLowerCase();
    	var val;
    	var model;
    	switch (prefix) {
    		case 'hsl':
    			val = cs.get.hsl(string);
    			model = 'hsl';
    			break;
    		case 'hwb':
    			val = cs.get.hwb(string);
    			model = 'hwb';
    			break;
    		default:
    			val = cs.get.rgb(string);
    			model = 'rgb';
    			break;
    	}

    	if (!val) {
    		return null;
    	}

    	return {model: model, value: val};
    };

    cs.get.rgb = function (string) {
    	if (!string) {
    		return null;
    	}

    	var abbr = /^#([a-f0-9]{3,4})$/i;
    	var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
    	var rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
    	var per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
    	var keyword = /(\D+)/;

    	var rgb = [0, 0, 0, 1];
    	var match;
    	var i;
    	var hexAlpha;

    	if (match = string.match(hex)) {
    		hexAlpha = match[2];
    		match = match[1];

    		for (i = 0; i < 3; i++) {
    			// https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19
    			var i2 = i * 2;
    			rgb[i] = parseInt(match.slice(i2, i2 + 2), 16);
    		}

    		if (hexAlpha) {
    			rgb[3] = parseInt(hexAlpha, 16) / 255;
    		}
    	} else if (match = string.match(abbr)) {
    		match = match[1];
    		hexAlpha = match[3];

    		for (i = 0; i < 3; i++) {
    			rgb[i] = parseInt(match[i] + match[i], 16);
    		}

    		if (hexAlpha) {
    			rgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;
    		}
    	} else if (match = string.match(rgba)) {
    		for (i = 0; i < 3; i++) {
    			rgb[i] = parseInt(match[i + 1], 0);
    		}

    		if (match[4]) {
    			rgb[3] = parseFloat(match[4]);
    		}
    	} else if (match = string.match(per)) {
    		for (i = 0; i < 3; i++) {
    			rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
    		}

    		if (match[4]) {
    			rgb[3] = parseFloat(match[4]);
    		}
    	} else if (match = string.match(keyword)) {
    		if (match[1] === 'transparent') {
    			return [0, 0, 0, 0];
    		}

    		rgb = colorName[match[1]];

    		if (!rgb) {
    			return null;
    		}

    		rgb[3] = 1;

    		return rgb;
    	} else {
    		return null;
    	}

    	for (i = 0; i < 3; i++) {
    		rgb[i] = clamp(rgb[i], 0, 255);
    	}
    	rgb[3] = clamp(rgb[3], 0, 1);

    	return rgb;
    };

    cs.get.hsl = function (string) {
    	if (!string) {
    		return null;
    	}

    	var hsl = /^hsla?\(\s*([+-]?(?:\d{0,3}\.)?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
    	var match = string.match(hsl);

    	if (match) {
    		var alpha = parseFloat(match[4]);
    		var h = (parseFloat(match[1]) + 360) % 360;
    		var s = clamp(parseFloat(match[2]), 0, 100);
    		var l = clamp(parseFloat(match[3]), 0, 100);
    		var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);

    		return [h, s, l, a];
    	}

    	return null;
    };

    cs.get.hwb = function (string) {
    	if (!string) {
    		return null;
    	}

    	var hwb = /^hwb\(\s*([+-]?\d{0,3}(?:\.\d+)?)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
    	var match = string.match(hwb);

    	if (match) {
    		var alpha = parseFloat(match[4]);
    		var h = ((parseFloat(match[1]) % 360) + 360) % 360;
    		var w = clamp(parseFloat(match[2]), 0, 100);
    		var b = clamp(parseFloat(match[3]), 0, 100);
    		var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
    		return [h, w, b, a];
    	}

    	return null;
    };

    cs.to.hex = function () {
    	var rgba = simpleSwizzle(arguments);

    	return (
    		'#' +
    		hexDouble(rgba[0]) +
    		hexDouble(rgba[1]) +
    		hexDouble(rgba[2]) +
    		(rgba[3] < 1
    			? (hexDouble(Math.round(rgba[3] * 255)))
    			: '')
    	);
    };

    cs.to.rgb = function () {
    	var rgba = simpleSwizzle(arguments);

    	return rgba.length < 4 || rgba[3] === 1
    		? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')'
    		: 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';
    };

    cs.to.rgb.percent = function () {
    	var rgba = simpleSwizzle(arguments);

    	var r = Math.round(rgba[0] / 255 * 100);
    	var g = Math.round(rgba[1] / 255 * 100);
    	var b = Math.round(rgba[2] / 255 * 100);

    	return rgba.length < 4 || rgba[3] === 1
    		? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)'
    		: 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';
    };

    cs.to.hsl = function () {
    	var hsla = simpleSwizzle(arguments);
    	return hsla.length < 4 || hsla[3] === 1
    		? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)'
    		: 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';
    };

    // hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
    // (hwb have alpha optional & 1 is default value)
    cs.to.hwb = function () {
    	var hwba = simpleSwizzle(arguments);

    	var a = '';
    	if (hwba.length >= 4 && hwba[3] !== 1) {
    		a = ', ' + hwba[3];
    	}

    	return 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';
    };

    cs.to.keyword = function (rgb) {
    	return reverseNames[rgb.slice(0, 3)];
    };

    // helpers
    function clamp(num, min, max) {
    	return Math.min(Math.max(min, num), max);
    }

    function hexDouble(num) {
    	var str = num.toString(16).toUpperCase();
    	return (str.length < 2) ? '0' + str : str;
    }
    });

    /* MIT license */

    var conversions = createCommonjsModule(function (module) {
    // NOTE: conversions should only return primitive values (i.e. arrays, or
    //       values that give correct `typeof` results).
    //       do not use box values types (i.e. Number(), String(), etc.)

    var reverseKeywords = {};
    for (var key in colorName) {
    	if (colorName.hasOwnProperty(key)) {
    		reverseKeywords[colorName[key]] = key;
    	}
    }

    var convert = module.exports = {
    	rgb: {channels: 3, labels: 'rgb'},
    	hsl: {channels: 3, labels: 'hsl'},
    	hsv: {channels: 3, labels: 'hsv'},
    	hwb: {channels: 3, labels: 'hwb'},
    	cmyk: {channels: 4, labels: 'cmyk'},
    	xyz: {channels: 3, labels: 'xyz'},
    	lab: {channels: 3, labels: 'lab'},
    	lch: {channels: 3, labels: 'lch'},
    	hex: {channels: 1, labels: ['hex']},
    	keyword: {channels: 1, labels: ['keyword']},
    	ansi16: {channels: 1, labels: ['ansi16']},
    	ansi256: {channels: 1, labels: ['ansi256']},
    	hcg: {channels: 3, labels: ['h', 'c', 'g']},
    	apple: {channels: 3, labels: ['r16', 'g16', 'b16']},
    	gray: {channels: 1, labels: ['gray']}
    };

    // hide .channels and .labels properties
    for (var model in convert) {
    	if (convert.hasOwnProperty(model)) {
    		if (!('channels' in convert[model])) {
    			throw new Error('missing channels property: ' + model);
    		}

    		if (!('labels' in convert[model])) {
    			throw new Error('missing channel labels property: ' + model);
    		}

    		if (convert[model].labels.length !== convert[model].channels) {
    			throw new Error('channel and label counts mismatch: ' + model);
    		}

    		var channels = convert[model].channels;
    		var labels = convert[model].labels;
    		delete convert[model].channels;
    		delete convert[model].labels;
    		Object.defineProperty(convert[model], 'channels', {value: channels});
    		Object.defineProperty(convert[model], 'labels', {value: labels});
    	}
    }

    convert.rgb.hsl = function (rgb) {
    	var r = rgb[0] / 255;
    	var g = rgb[1] / 255;
    	var b = rgb[2] / 255;
    	var min = Math.min(r, g, b);
    	var max = Math.max(r, g, b);
    	var delta = max - min;
    	var h;
    	var s;
    	var l;

    	if (max === min) {
    		h = 0;
    	} else if (r === max) {
    		h = (g - b) / delta;
    	} else if (g === max) {
    		h = 2 + (b - r) / delta;
    	} else if (b === max) {
    		h = 4 + (r - g) / delta;
    	}

    	h = Math.min(h * 60, 360);

    	if (h < 0) {
    		h += 360;
    	}

    	l = (min + max) / 2;

    	if (max === min) {
    		s = 0;
    	} else if (l <= 0.5) {
    		s = delta / (max + min);
    	} else {
    		s = delta / (2 - max - min);
    	}

    	return [h, s * 100, l * 100];
    };

    convert.rgb.hsv = function (rgb) {
    	var rdif;
    	var gdif;
    	var bdif;
    	var h;
    	var s;

    	var r = rgb[0] / 255;
    	var g = rgb[1] / 255;
    	var b = rgb[2] / 255;
    	var v = Math.max(r, g, b);
    	var diff = v - Math.min(r, g, b);
    	var diffc = function (c) {
    		return (v - c) / 6 / diff + 1 / 2;
    	};

    	if (diff === 0) {
    		h = s = 0;
    	} else {
    		s = diff / v;
    		rdif = diffc(r);
    		gdif = diffc(g);
    		bdif = diffc(b);

    		if (r === v) {
    			h = bdif - gdif;
    		} else if (g === v) {
    			h = (1 / 3) + rdif - bdif;
    		} else if (b === v) {
    			h = (2 / 3) + gdif - rdif;
    		}
    		if (h < 0) {
    			h += 1;
    		} else if (h > 1) {
    			h -= 1;
    		}
    	}

    	return [
    		h * 360,
    		s * 100,
    		v * 100
    	];
    };

    convert.rgb.hwb = function (rgb) {
    	var r = rgb[0];
    	var g = rgb[1];
    	var b = rgb[2];
    	var h = convert.rgb.hsl(rgb)[0];
    	var w = 1 / 255 * Math.min(r, Math.min(g, b));

    	b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

    	return [h, w * 100, b * 100];
    };

    convert.rgb.cmyk = function (rgb) {
    	var r = rgb[0] / 255;
    	var g = rgb[1] / 255;
    	var b = rgb[2] / 255;
    	var c;
    	var m;
    	var y;
    	var k;

    	k = Math.min(1 - r, 1 - g, 1 - b);
    	c = (1 - r - k) / (1 - k) || 0;
    	m = (1 - g - k) / (1 - k) || 0;
    	y = (1 - b - k) / (1 - k) || 0;

    	return [c * 100, m * 100, y * 100, k * 100];
    };

    /**
     * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
     * */
    function comparativeDistance(x, y) {
    	return (
    		Math.pow(x[0] - y[0], 2) +
    		Math.pow(x[1] - y[1], 2) +
    		Math.pow(x[2] - y[2], 2)
    	);
    }

    convert.rgb.keyword = function (rgb) {
    	var reversed = reverseKeywords[rgb];
    	if (reversed) {
    		return reversed;
    	}

    	var currentClosestDistance = Infinity;
    	var currentClosestKeyword;

    	for (var keyword in colorName) {
    		if (colorName.hasOwnProperty(keyword)) {
    			var value = colorName[keyword];

    			// Compute comparative distance
    			var distance = comparativeDistance(rgb, value);

    			// Check if its less, if so set as closest
    			if (distance < currentClosestDistance) {
    				currentClosestDistance = distance;
    				currentClosestKeyword = keyword;
    			}
    		}
    	}

    	return currentClosestKeyword;
    };

    convert.keyword.rgb = function (keyword) {
    	return colorName[keyword];
    };

    convert.rgb.xyz = function (rgb) {
    	var r = rgb[0] / 255;
    	var g = rgb[1] / 255;
    	var b = rgb[2] / 255;

    	// assume sRGB
    	r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);
    	g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);
    	b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);

    	var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
    	var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
    	var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

    	return [x * 100, y * 100, z * 100];
    };

    convert.rgb.lab = function (rgb) {
    	var xyz = convert.rgb.xyz(rgb);
    	var x = xyz[0];
    	var y = xyz[1];
    	var z = xyz[2];
    	var l;
    	var a;
    	var b;

    	x /= 95.047;
    	y /= 100;
    	z /= 108.883;

    	x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
    	y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
    	z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

    	l = (116 * y) - 16;
    	a = 500 * (x - y);
    	b = 200 * (y - z);

    	return [l, a, b];
    };

    convert.hsl.rgb = function (hsl) {
    	var h = hsl[0] / 360;
    	var s = hsl[1] / 100;
    	var l = hsl[2] / 100;
    	var t1;
    	var t2;
    	var t3;
    	var rgb;
    	var val;

    	if (s === 0) {
    		val = l * 255;
    		return [val, val, val];
    	}

    	if (l < 0.5) {
    		t2 = l * (1 + s);
    	} else {
    		t2 = l + s - l * s;
    	}

    	t1 = 2 * l - t2;

    	rgb = [0, 0, 0];
    	for (var i = 0; i < 3; i++) {
    		t3 = h + 1 / 3 * -(i - 1);
    		if (t3 < 0) {
    			t3++;
    		}
    		if (t3 > 1) {
    			t3--;
    		}

    		if (6 * t3 < 1) {
    			val = t1 + (t2 - t1) * 6 * t3;
    		} else if (2 * t3 < 1) {
    			val = t2;
    		} else if (3 * t3 < 2) {
    			val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
    		} else {
    			val = t1;
    		}

    		rgb[i] = val * 255;
    	}

    	return rgb;
    };

    convert.hsl.hsv = function (hsl) {
    	var h = hsl[0];
    	var s = hsl[1] / 100;
    	var l = hsl[2] / 100;
    	var smin = s;
    	var lmin = Math.max(l, 0.01);
    	var sv;
    	var v;

    	l *= 2;
    	s *= (l <= 1) ? l : 2 - l;
    	smin *= lmin <= 1 ? lmin : 2 - lmin;
    	v = (l + s) / 2;
    	sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);

    	return [h, sv * 100, v * 100];
    };

    convert.hsv.rgb = function (hsv) {
    	var h = hsv[0] / 60;
    	var s = hsv[1] / 100;
    	var v = hsv[2] / 100;
    	var hi = Math.floor(h) % 6;

    	var f = h - Math.floor(h);
    	var p = 255 * v * (1 - s);
    	var q = 255 * v * (1 - (s * f));
    	var t = 255 * v * (1 - (s * (1 - f)));
    	v *= 255;

    	switch (hi) {
    		case 0:
    			return [v, t, p];
    		case 1:
    			return [q, v, p];
    		case 2:
    			return [p, v, t];
    		case 3:
    			return [p, q, v];
    		case 4:
    			return [t, p, v];
    		case 5:
    			return [v, p, q];
    	}
    };

    convert.hsv.hsl = function (hsv) {
    	var h = hsv[0];
    	var s = hsv[1] / 100;
    	var v = hsv[2] / 100;
    	var vmin = Math.max(v, 0.01);
    	var lmin;
    	var sl;
    	var l;

    	l = (2 - s) * v;
    	lmin = (2 - s) * vmin;
    	sl = s * vmin;
    	sl /= (lmin <= 1) ? lmin : 2 - lmin;
    	sl = sl || 0;
    	l /= 2;

    	return [h, sl * 100, l * 100];
    };

    // http://dev.w3.org/csswg/css-color/#hwb-to-rgb
    convert.hwb.rgb = function (hwb) {
    	var h = hwb[0] / 360;
    	var wh = hwb[1] / 100;
    	var bl = hwb[2] / 100;
    	var ratio = wh + bl;
    	var i;
    	var v;
    	var f;
    	var n;

    	// wh + bl cant be > 1
    	if (ratio > 1) {
    		wh /= ratio;
    		bl /= ratio;
    	}

    	i = Math.floor(6 * h);
    	v = 1 - bl;
    	f = 6 * h - i;

    	if ((i & 0x01) !== 0) {
    		f = 1 - f;
    	}

    	n = wh + f * (v - wh); // linear interpolation

    	var r;
    	var g;
    	var b;
    	switch (i) {
    		default:
    		case 6:
    		case 0: r = v; g = n; b = wh; break;
    		case 1: r = n; g = v; b = wh; break;
    		case 2: r = wh; g = v; b = n; break;
    		case 3: r = wh; g = n; b = v; break;
    		case 4: r = n; g = wh; b = v; break;
    		case 5: r = v; g = wh; b = n; break;
    	}

    	return [r * 255, g * 255, b * 255];
    };

    convert.cmyk.rgb = function (cmyk) {
    	var c = cmyk[0] / 100;
    	var m = cmyk[1] / 100;
    	var y = cmyk[2] / 100;
    	var k = cmyk[3] / 100;
    	var r;
    	var g;
    	var b;

    	r = 1 - Math.min(1, c * (1 - k) + k);
    	g = 1 - Math.min(1, m * (1 - k) + k);
    	b = 1 - Math.min(1, y * (1 - k) + k);

    	return [r * 255, g * 255, b * 255];
    };

    convert.xyz.rgb = function (xyz) {
    	var x = xyz[0] / 100;
    	var y = xyz[1] / 100;
    	var z = xyz[2] / 100;
    	var r;
    	var g;
    	var b;

    	r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
    	g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
    	b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

    	// assume sRGB
    	r = r > 0.0031308
    		? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)
    		: r * 12.92;

    	g = g > 0.0031308
    		? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)
    		: g * 12.92;

    	b = b > 0.0031308
    		? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)
    		: b * 12.92;

    	r = Math.min(Math.max(0, r), 1);
    	g = Math.min(Math.max(0, g), 1);
    	b = Math.min(Math.max(0, b), 1);

    	return [r * 255, g * 255, b * 255];
    };

    convert.xyz.lab = function (xyz) {
    	var x = xyz[0];
    	var y = xyz[1];
    	var z = xyz[2];
    	var l;
    	var a;
    	var b;

    	x /= 95.047;
    	y /= 100;
    	z /= 108.883;

    	x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
    	y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
    	z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

    	l = (116 * y) - 16;
    	a = 500 * (x - y);
    	b = 200 * (y - z);

    	return [l, a, b];
    };

    convert.lab.xyz = function (lab) {
    	var l = lab[0];
    	var a = lab[1];
    	var b = lab[2];
    	var x;
    	var y;
    	var z;

    	y = (l + 16) / 116;
    	x = a / 500 + y;
    	z = y - b / 200;

    	var y2 = Math.pow(y, 3);
    	var x2 = Math.pow(x, 3);
    	var z2 = Math.pow(z, 3);
    	y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
    	x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
    	z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

    	x *= 95.047;
    	y *= 100;
    	z *= 108.883;

    	return [x, y, z];
    };

    convert.lab.lch = function (lab) {
    	var l = lab[0];
    	var a = lab[1];
    	var b = lab[2];
    	var hr;
    	var h;
    	var c;

    	hr = Math.atan2(b, a);
    	h = hr * 360 / 2 / Math.PI;

    	if (h < 0) {
    		h += 360;
    	}

    	c = Math.sqrt(a * a + b * b);

    	return [l, c, h];
    };

    convert.lch.lab = function (lch) {
    	var l = lch[0];
    	var c = lch[1];
    	var h = lch[2];
    	var a;
    	var b;
    	var hr;

    	hr = h / 360 * 2 * Math.PI;
    	a = c * Math.cos(hr);
    	b = c * Math.sin(hr);

    	return [l, a, b];
    };

    convert.rgb.ansi16 = function (args) {
    	var r = args[0];
    	var g = args[1];
    	var b = args[2];
    	var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization

    	value = Math.round(value / 50);

    	if (value === 0) {
    		return 30;
    	}

    	var ansi = 30
    		+ ((Math.round(b / 255) << 2)
    		| (Math.round(g / 255) << 1)
    		| Math.round(r / 255));

    	if (value === 2) {
    		ansi += 60;
    	}

    	return ansi;
    };

    convert.hsv.ansi16 = function (args) {
    	// optimization here; we already know the value and don't need to get
    	// it converted for us.
    	return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
    };

    convert.rgb.ansi256 = function (args) {
    	var r = args[0];
    	var g = args[1];
    	var b = args[2];

    	// we use the extended greyscale palette here, with the exception of
    	// black and white. normal palette only has 4 greyscale shades.
    	if (r === g && g === b) {
    		if (r < 8) {
    			return 16;
    		}

    		if (r > 248) {
    			return 231;
    		}

    		return Math.round(((r - 8) / 247) * 24) + 232;
    	}

    	var ansi = 16
    		+ (36 * Math.round(r / 255 * 5))
    		+ (6 * Math.round(g / 255 * 5))
    		+ Math.round(b / 255 * 5);

    	return ansi;
    };

    convert.ansi16.rgb = function (args) {
    	var color = args % 10;

    	// handle greyscale
    	if (color === 0 || color === 7) {
    		if (args > 50) {
    			color += 3.5;
    		}

    		color = color / 10.5 * 255;

    		return [color, color, color];
    	}

    	var mult = (~~(args > 50) + 1) * 0.5;
    	var r = ((color & 1) * mult) * 255;
    	var g = (((color >> 1) & 1) * mult) * 255;
    	var b = (((color >> 2) & 1) * mult) * 255;

    	return [r, g, b];
    };

    convert.ansi256.rgb = function (args) {
    	// handle greyscale
    	if (args >= 232) {
    		var c = (args - 232) * 10 + 8;
    		return [c, c, c];
    	}

    	args -= 16;

    	var rem;
    	var r = Math.floor(args / 36) / 5 * 255;
    	var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
    	var b = (rem % 6) / 5 * 255;

    	return [r, g, b];
    };

    convert.rgb.hex = function (args) {
    	var integer = ((Math.round(args[0]) & 0xFF) << 16)
    		+ ((Math.round(args[1]) & 0xFF) << 8)
    		+ (Math.round(args[2]) & 0xFF);

    	var string = integer.toString(16).toUpperCase();
    	return '000000'.substring(string.length) + string;
    };

    convert.hex.rgb = function (args) {
    	var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
    	if (!match) {
    		return [0, 0, 0];
    	}

    	var colorString = match[0];

    	if (match[0].length === 3) {
    		colorString = colorString.split('').map(function (char) {
    			return char + char;
    		}).join('');
    	}

    	var integer = parseInt(colorString, 16);
    	var r = (integer >> 16) & 0xFF;
    	var g = (integer >> 8) & 0xFF;
    	var b = integer & 0xFF;

    	return [r, g, b];
    };

    convert.rgb.hcg = function (rgb) {
    	var r = rgb[0] / 255;
    	var g = rgb[1] / 255;
    	var b = rgb[2] / 255;
    	var max = Math.max(Math.max(r, g), b);
    	var min = Math.min(Math.min(r, g), b);
    	var chroma = (max - min);
    	var grayscale;
    	var hue;

    	if (chroma < 1) {
    		grayscale = min / (1 - chroma);
    	} else {
    		grayscale = 0;
    	}

    	if (chroma <= 0) {
    		hue = 0;
    	} else
    	if (max === r) {
    		hue = ((g - b) / chroma) % 6;
    	} else
    	if (max === g) {
    		hue = 2 + (b - r) / chroma;
    	} else {
    		hue = 4 + (r - g) / chroma + 4;
    	}

    	hue /= 6;
    	hue %= 1;

    	return [hue * 360, chroma * 100, grayscale * 100];
    };

    convert.hsl.hcg = function (hsl) {
    	var s = hsl[1] / 100;
    	var l = hsl[2] / 100;
    	var c = 1;
    	var f = 0;

    	if (l < 0.5) {
    		c = 2.0 * s * l;
    	} else {
    		c = 2.0 * s * (1.0 - l);
    	}

    	if (c < 1.0) {
    		f = (l - 0.5 * c) / (1.0 - c);
    	}

    	return [hsl[0], c * 100, f * 100];
    };

    convert.hsv.hcg = function (hsv) {
    	var s = hsv[1] / 100;
    	var v = hsv[2] / 100;

    	var c = s * v;
    	var f = 0;

    	if (c < 1.0) {
    		f = (v - c) / (1 - c);
    	}

    	return [hsv[0], c * 100, f * 100];
    };

    convert.hcg.rgb = function (hcg) {
    	var h = hcg[0] / 360;
    	var c = hcg[1] / 100;
    	var g = hcg[2] / 100;

    	if (c === 0.0) {
    		return [g * 255, g * 255, g * 255];
    	}

    	var pure = [0, 0, 0];
    	var hi = (h % 1) * 6;
    	var v = hi % 1;
    	var w = 1 - v;
    	var mg = 0;

    	switch (Math.floor(hi)) {
    		case 0:
    			pure[0] = 1; pure[1] = v; pure[2] = 0; break;
    		case 1:
    			pure[0] = w; pure[1] = 1; pure[2] = 0; break;
    		case 2:
    			pure[0] = 0; pure[1] = 1; pure[2] = v; break;
    		case 3:
    			pure[0] = 0; pure[1] = w; pure[2] = 1; break;
    		case 4:
    			pure[0] = v; pure[1] = 0; pure[2] = 1; break;
    		default:
    			pure[0] = 1; pure[1] = 0; pure[2] = w;
    	}

    	mg = (1.0 - c) * g;

    	return [
    		(c * pure[0] + mg) * 255,
    		(c * pure[1] + mg) * 255,
    		(c * pure[2] + mg) * 255
    	];
    };

    convert.hcg.hsv = function (hcg) {
    	var c = hcg[1] / 100;
    	var g = hcg[2] / 100;

    	var v = c + g * (1.0 - c);
    	var f = 0;

    	if (v > 0.0) {
    		f = c / v;
    	}

    	return [hcg[0], f * 100, v * 100];
    };

    convert.hcg.hsl = function (hcg) {
    	var c = hcg[1] / 100;
    	var g = hcg[2] / 100;

    	var l = g * (1.0 - c) + 0.5 * c;
    	var s = 0;

    	if (l > 0.0 && l < 0.5) {
    		s = c / (2 * l);
    	} else
    	if (l >= 0.5 && l < 1.0) {
    		s = c / (2 * (1 - l));
    	}

    	return [hcg[0], s * 100, l * 100];
    };

    convert.hcg.hwb = function (hcg) {
    	var c = hcg[1] / 100;
    	var g = hcg[2] / 100;
    	var v = c + g * (1.0 - c);
    	return [hcg[0], (v - c) * 100, (1 - v) * 100];
    };

    convert.hwb.hcg = function (hwb) {
    	var w = hwb[1] / 100;
    	var b = hwb[2] / 100;
    	var v = 1 - b;
    	var c = v - w;
    	var g = 0;

    	if (c < 1) {
    		g = (v - c) / (1 - c);
    	}

    	return [hwb[0], c * 100, g * 100];
    };

    convert.apple.rgb = function (apple) {
    	return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];
    };

    convert.rgb.apple = function (rgb) {
    	return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];
    };

    convert.gray.rgb = function (args) {
    	return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
    };

    convert.gray.hsl = convert.gray.hsv = function (args) {
    	return [0, 0, args[0]];
    };

    convert.gray.hwb = function (gray) {
    	return [0, 100, gray[0]];
    };

    convert.gray.cmyk = function (gray) {
    	return [0, 0, 0, gray[0]];
    };

    convert.gray.lab = function (gray) {
    	return [gray[0], 0, 0];
    };

    convert.gray.hex = function (gray) {
    	var val = Math.round(gray[0] / 100 * 255) & 0xFF;
    	var integer = (val << 16) + (val << 8) + val;

    	var string = integer.toString(16).toUpperCase();
    	return '000000'.substring(string.length) + string;
    };

    convert.rgb.gray = function (rgb) {
    	var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
    	return [val / 255 * 100];
    };
    });

    /*
    	this function routes a model to all other models.

    	all functions that are routed have a property `.conversion` attached
    	to the returned synthetic function. This property is an array
    	of strings, each with the steps in between the 'from' and 'to'
    	color models (inclusive).

    	conversions that are not possible simply are not included.
    */

    function buildGraph() {
    	var graph = {};
    	// https://jsperf.com/object-keys-vs-for-in-with-closure/3
    	var models = Object.keys(conversions);

    	for (var len = models.length, i = 0; i < len; i++) {
    		graph[models[i]] = {
    			// http://jsperf.com/1-vs-infinity
    			// micro-opt, but this is simple.
    			distance: -1,
    			parent: null
    		};
    	}

    	return graph;
    }

    // https://en.wikipedia.org/wiki/Breadth-first_search
    function deriveBFS(fromModel) {
    	var graph = buildGraph();
    	var queue = [fromModel]; // unshift -> queue -> pop

    	graph[fromModel].distance = 0;

    	while (queue.length) {
    		var current = queue.pop();
    		var adjacents = Object.keys(conversions[current]);

    		for (var len = adjacents.length, i = 0; i < len; i++) {
    			var adjacent = adjacents[i];
    			var node = graph[adjacent];

    			if (node.distance === -1) {
    				node.distance = graph[current].distance + 1;
    				node.parent = current;
    				queue.unshift(adjacent);
    			}
    		}
    	}

    	return graph;
    }

    function link(from, to) {
    	return function (args) {
    		return to(from(args));
    	};
    }

    function wrapConversion(toModel, graph) {
    	var path = [graph[toModel].parent, toModel];
    	var fn = conversions[graph[toModel].parent][toModel];

    	var cur = graph[toModel].parent;
    	while (graph[cur].parent) {
    		path.unshift(graph[cur].parent);
    		fn = link(conversions[graph[cur].parent][cur], fn);
    		cur = graph[cur].parent;
    	}

    	fn.conversion = path;
    	return fn;
    }

    var route = function (fromModel) {
    	var graph = deriveBFS(fromModel);
    	var conversion = {};

    	var models = Object.keys(graph);
    	for (var len = models.length, i = 0; i < len; i++) {
    		var toModel = models[i];
    		var node = graph[toModel];

    		if (node.parent === null) {
    			// no possible conversion, or this node is the source model.
    			continue;
    		}

    		conversion[toModel] = wrapConversion(toModel, graph);
    	}

    	return conversion;
    };

    var convert = {};

    var models = Object.keys(conversions);

    function wrapRaw(fn) {
    	var wrappedFn = function (args) {
    		if (args === undefined || args === null) {
    			return args;
    		}

    		if (arguments.length > 1) {
    			args = Array.prototype.slice.call(arguments);
    		}

    		return fn(args);
    	};

    	// preserve .conversion property if there is one
    	if ('conversion' in fn) {
    		wrappedFn.conversion = fn.conversion;
    	}

    	return wrappedFn;
    }

    function wrapRounded(fn) {
    	var wrappedFn = function (args) {
    		if (args === undefined || args === null) {
    			return args;
    		}

    		if (arguments.length > 1) {
    			args = Array.prototype.slice.call(arguments);
    		}

    		var result = fn(args);

    		// we're assuming the result is an array here.
    		// see notice in conversions.js; don't use box types
    		// in conversion functions.
    		if (typeof result === 'object') {
    			for (var len = result.length, i = 0; i < len; i++) {
    				result[i] = Math.round(result[i]);
    			}
    		}

    		return result;
    	};

    	// preserve .conversion property if there is one
    	if ('conversion' in fn) {
    		wrappedFn.conversion = fn.conversion;
    	}

    	return wrappedFn;
    }

    models.forEach(function (fromModel) {
    	convert[fromModel] = {};

    	Object.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});
    	Object.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});

    	var routes = route(fromModel);
    	var routeModels = Object.keys(routes);

    	routeModels.forEach(function (toModel) {
    		var fn = routes[toModel];

    		convert[fromModel][toModel] = wrapRounded(fn);
    		convert[fromModel][toModel].raw = wrapRaw(fn);
    	});
    });

    var colorConvert = convert;

    var _slice = [].slice;

    var skippedModels = [
    	// to be honest, I don't really feel like keyword belongs in color convert, but eh.
    	'keyword',

    	// gray conflicts with some method names, and has its own method defined.
    	'gray',

    	// shouldn't really be in color-convert either...
    	'hex'
    ];

    var hashedModelKeys = {};
    Object.keys(colorConvert).forEach(function (model) {
    	hashedModelKeys[_slice.call(colorConvert[model].labels).sort().join('')] = model;
    });

    var limiters = {};

    function Color(obj, model) {
    	if (!(this instanceof Color)) {
    		return new Color(obj, model);
    	}

    	if (model && model in skippedModels) {
    		model = null;
    	}

    	if (model && !(model in colorConvert)) {
    		throw new Error('Unknown model: ' + model);
    	}

    	var i;
    	var channels;

    	if (obj == null) { // eslint-disable-line no-eq-null,eqeqeq
    		this.model = 'rgb';
    		this.color = [0, 0, 0];
    		this.valpha = 1;
    	} else if (obj instanceof Color) {
    		this.model = obj.model;
    		this.color = obj.color.slice();
    		this.valpha = obj.valpha;
    	} else if (typeof obj === 'string') {
    		var result = colorString.get(obj);
    		if (result === null) {
    			throw new Error('Unable to parse color from string: ' + obj);
    		}

    		this.model = result.model;
    		channels = colorConvert[this.model].channels;
    		this.color = result.value.slice(0, channels);
    		this.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;
    	} else if (obj.length) {
    		this.model = model || 'rgb';
    		channels = colorConvert[this.model].channels;
    		var newArr = _slice.call(obj, 0, channels);
    		this.color = zeroArray(newArr, channels);
    		this.valpha = typeof obj[channels] === 'number' ? obj[channels] : 1;
    	} else if (typeof obj === 'number') {
    		// this is always RGB - can be converted later on.
    		obj &= 0xFFFFFF;
    		this.model = 'rgb';
    		this.color = [
    			(obj >> 16) & 0xFF,
    			(obj >> 8) & 0xFF,
    			obj & 0xFF
    		];
    		this.valpha = 1;
    	} else {
    		this.valpha = 1;

    		var keys = Object.keys(obj);
    		if ('alpha' in obj) {
    			keys.splice(keys.indexOf('alpha'), 1);
    			this.valpha = typeof obj.alpha === 'number' ? obj.alpha : 0;
    		}

    		var hashedKeys = keys.sort().join('');
    		if (!(hashedKeys in hashedModelKeys)) {
    			throw new Error('Unable to parse color from object: ' + JSON.stringify(obj));
    		}

    		this.model = hashedModelKeys[hashedKeys];

    		var labels = colorConvert[this.model].labels;
    		var color = [];
    		for (i = 0; i < labels.length; i++) {
    			color.push(obj[labels[i]]);
    		}

    		this.color = zeroArray(color);
    	}

    	// perform limitations (clamping, etc.)
    	if (limiters[this.model]) {
    		channels = colorConvert[this.model].channels;
    		for (i = 0; i < channels; i++) {
    			var limit = limiters[this.model][i];
    			if (limit) {
    				this.color[i] = limit(this.color[i]);
    			}
    		}
    	}

    	this.valpha = Math.max(0, Math.min(1, this.valpha));

    	if (Object.freeze) {
    		Object.freeze(this);
    	}
    }

    Color.prototype = {
    	toString: function () {
    		return this.string();
    	},

    	toJSON: function () {
    		return this[this.model]();
    	},

    	string: function (places) {
    		var self = this.model in colorString.to ? this : this.rgb();
    		self = self.round(typeof places === 'number' ? places : 1);
    		var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);
    		return colorString.to[self.model](args);
    	},

    	percentString: function (places) {
    		var self = this.rgb().round(typeof places === 'number' ? places : 1);
    		var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);
    		return colorString.to.rgb.percent(args);
    	},

    	array: function () {
    		return this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);
    	},

    	object: function () {
    		var result = {};
    		var channels = colorConvert[this.model].channels;
    		var labels = colorConvert[this.model].labels;

    		for (var i = 0; i < channels; i++) {
    			result[labels[i]] = this.color[i];
    		}

    		if (this.valpha !== 1) {
    			result.alpha = this.valpha;
    		}

    		return result;
    	},

    	unitArray: function () {
    		var rgb = this.rgb().color;
    		rgb[0] /= 255;
    		rgb[1] /= 255;
    		rgb[2] /= 255;

    		if (this.valpha !== 1) {
    			rgb.push(this.valpha);
    		}

    		return rgb;
    	},

    	unitObject: function () {
    		var rgb = this.rgb().object();
    		rgb.r /= 255;
    		rgb.g /= 255;
    		rgb.b /= 255;

    		if (this.valpha !== 1) {
    			rgb.alpha = this.valpha;
    		}

    		return rgb;
    	},

    	round: function (places) {
    		places = Math.max(places || 0, 0);
    		return new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);
    	},

    	alpha: function (val) {
    		if (arguments.length) {
    			return new Color(this.color.concat(Math.max(0, Math.min(1, val))), this.model);
    		}

    		return this.valpha;
    	},

    	// rgb
    	red: getset('rgb', 0, maxfn(255)),
    	green: getset('rgb', 1, maxfn(255)),
    	blue: getset('rgb', 2, maxfn(255)),

    	hue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, function (val) { return ((val % 360) + 360) % 360; }), // eslint-disable-line brace-style

    	saturationl: getset('hsl', 1, maxfn(100)),
    	lightness: getset('hsl', 2, maxfn(100)),

    	saturationv: getset('hsv', 1, maxfn(100)),
    	value: getset('hsv', 2, maxfn(100)),

    	chroma: getset('hcg', 1, maxfn(100)),
    	gray: getset('hcg', 2, maxfn(100)),

    	white: getset('hwb', 1, maxfn(100)),
    	wblack: getset('hwb', 2, maxfn(100)),

    	cyan: getset('cmyk', 0, maxfn(100)),
    	magenta: getset('cmyk', 1, maxfn(100)),
    	yellow: getset('cmyk', 2, maxfn(100)),
    	black: getset('cmyk', 3, maxfn(100)),

    	x: getset('xyz', 0, maxfn(100)),
    	y: getset('xyz', 1, maxfn(100)),
    	z: getset('xyz', 2, maxfn(100)),

    	l: getset('lab', 0, maxfn(100)),
    	a: getset('lab', 1),
    	b: getset('lab', 2),

    	keyword: function (val) {
    		if (arguments.length) {
    			return new Color(val);
    		}

    		return colorConvert[this.model].keyword(this.color);
    	},

    	hex: function (val) {
    		if (arguments.length) {
    			return new Color(val);
    		}

    		return colorString.to.hex(this.rgb().round().color);
    	},

    	rgbNumber: function () {
    		var rgb = this.rgb().color;
    		return ((rgb[0] & 0xFF) << 16) | ((rgb[1] & 0xFF) << 8) | (rgb[2] & 0xFF);
    	},

    	luminosity: function () {
    		// http://www.w3.org/TR/WCAG20/#relativeluminancedef
    		var rgb = this.rgb().color;

    		var lum = [];
    		for (var i = 0; i < rgb.length; i++) {
    			var chan = rgb[i] / 255;
    			lum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);
    		}

    		return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
    	},

    	contrast: function (color2) {
    		// http://www.w3.org/TR/WCAG20/#contrast-ratiodef
    		var lum1 = this.luminosity();
    		var lum2 = color2.luminosity();

    		if (lum1 > lum2) {
    			return (lum1 + 0.05) / (lum2 + 0.05);
    		}

    		return (lum2 + 0.05) / (lum1 + 0.05);
    	},

    	level: function (color2) {
    		var contrastRatio = this.contrast(color2);
    		if (contrastRatio >= 7.1) {
    			return 'AAA';
    		}

    		return (contrastRatio >= 4.5) ? 'AA' : '';
    	},

    	isDark: function () {
    		// YIQ equation from http://24ways.org/2010/calculating-color-contrast
    		var rgb = this.rgb().color;
    		var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
    		return yiq < 128;
    	},

    	isLight: function () {
    		return !this.isDark();
    	},

    	negate: function () {
    		var rgb = this.rgb();
    		for (var i = 0; i < 3; i++) {
    			rgb.color[i] = 255 - rgb.color[i];
    		}
    		return rgb;
    	},

    	lighten: function (ratio) {
    		var hsl = this.hsl();
    		hsl.color[2] += hsl.color[2] * ratio;
    		return hsl;
    	},

    	darken: function (ratio) {
    		var hsl = this.hsl();
    		hsl.color[2] -= hsl.color[2] * ratio;
    		return hsl;
    	},

    	saturate: function (ratio) {
    		var hsl = this.hsl();
    		hsl.color[1] += hsl.color[1] * ratio;
    		return hsl;
    	},

    	desaturate: function (ratio) {
    		var hsl = this.hsl();
    		hsl.color[1] -= hsl.color[1] * ratio;
    		return hsl;
    	},

    	whiten: function (ratio) {
    		var hwb = this.hwb();
    		hwb.color[1] += hwb.color[1] * ratio;
    		return hwb;
    	},

    	blacken: function (ratio) {
    		var hwb = this.hwb();
    		hwb.color[2] += hwb.color[2] * ratio;
    		return hwb;
    	},

    	grayscale: function () {
    		// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale
    		var rgb = this.rgb().color;
    		var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
    		return Color.rgb(val, val, val);
    	},

    	fade: function (ratio) {
    		return this.alpha(this.valpha - (this.valpha * ratio));
    	},

    	opaquer: function (ratio) {
    		return this.alpha(this.valpha + (this.valpha * ratio));
    	},

    	rotate: function (degrees) {
    		var hsl = this.hsl();
    		var hue = hsl.color[0];
    		hue = (hue + degrees) % 360;
    		hue = hue < 0 ? 360 + hue : hue;
    		hsl.color[0] = hue;
    		return hsl;
    	},

    	mix: function (mixinColor, weight) {
    		// ported from sass implementation in C
    		// https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
    		if (!mixinColor || !mixinColor.rgb) {
    			throw new Error('Argument to "mix" was not a Color instance, but rather an instance of ' + typeof mixinColor);
    		}
    		var color1 = mixinColor.rgb();
    		var color2 = this.rgb();
    		var p = weight === undefined ? 0.5 : weight;

    		var w = 2 * p - 1;
    		var a = color1.alpha() - color2.alpha();

    		var w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
    		var w2 = 1 - w1;

    		return Color.rgb(
    				w1 * color1.red() + w2 * color2.red(),
    				w1 * color1.green() + w2 * color2.green(),
    				w1 * color1.blue() + w2 * color2.blue(),
    				color1.alpha() * p + color2.alpha() * (1 - p));
    	}
    };

    // model conversion methods and static constructors
    Object.keys(colorConvert).forEach(function (model) {
    	if (skippedModels.indexOf(model) !== -1) {
    		return;
    	}

    	var channels = colorConvert[model].channels;

    	// conversion methods
    	Color.prototype[model] = function () {
    		if (this.model === model) {
    			return new Color(this);
    		}

    		if (arguments.length) {
    			return new Color(arguments, model);
    		}

    		var newAlpha = typeof arguments[channels] === 'number' ? channels : this.valpha;
    		return new Color(assertArray(colorConvert[this.model][model].raw(this.color)).concat(newAlpha), model);
    	};

    	// 'static' construction methods
    	Color[model] = function (color) {
    		if (typeof color === 'number') {
    			color = zeroArray(_slice.call(arguments), channels);
    		}
    		return new Color(color, model);
    	};
    });

    function roundTo(num, places) {
    	return Number(num.toFixed(places));
    }

    function roundToPlace(places) {
    	return function (num) {
    		return roundTo(num, places);
    	};
    }

    function getset(model, channel, modifier) {
    	model = Array.isArray(model) ? model : [model];

    	model.forEach(function (m) {
    		(limiters[m] || (limiters[m] = []))[channel] = modifier;
    	});

    	model = model[0];

    	return function (val) {
    		var result;

    		if (arguments.length) {
    			if (modifier) {
    				val = modifier(val);
    			}

    			result = this[model]();
    			result.color[channel] = val;
    			return result;
    		}

    		result = this[model]().color[channel];
    		if (modifier) {
    			result = modifier(result);
    		}

    		return result;
    	};
    }

    function maxfn(max) {
    	return function (v) {
    		return Math.max(0, Math.min(max, v));
    	};
    }

    function assertArray(val) {
    	return Array.isArray(val) ? val : [val];
    }

    function zeroArray(arr, length) {
    	for (var i = 0; i < length; i++) {
    		if (typeof arr[i] !== 'number') {
    			arr[i] = 0;
    		}
    	}

    	return arr;
    }

    var color = Color;

    /* src/components/common-frame.svelte generated by Svelte v3.38.2 */
    const file$h = "src/components/common-frame.svelte";

    // (42:4) {#if title}
    function create_if_block_1$6(ctx) {
    	let h2;
    	let t;

    	const block = {
    		c: function create() {
    			h2 = element("h2");
    			t = text$1(/*title*/ ctx[0]);
    			attr_dev(h2, "class", "svelte-1g2xbe3");
    			add_location(h2, file$h, 42, 6, 1064);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h2, anchor);
    			append_dev(h2, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*title*/ 1) set_data_dev(t, /*title*/ ctx[0]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$6.name,
    		type: "if",
    		source: "(42:4) {#if title}",
    		ctx
    	});

    	return block;
    }

    // (45:4) {#if subtitle}
    function create_if_block$d(ctx) {
    	let h3;
    	let t;

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			t = text$1(/*subtitle*/ ctx[1]);
    			attr_dev(h3, "class", "svelte-1g2xbe3");
    			add_location(h3, file$h, 45, 6, 1116);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);
    			append_dev(h3, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*subtitle*/ 2) set_data_dev(t, /*subtitle*/ ctx[1]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$d.name,
    		type: "if",
    		source: "(45:4) {#if subtitle}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$j(ctx) {
    	let section;
    	let div0;
    	let t0;
    	let t1;
    	let div1;
    	let current;
    	let if_block0 = /*title*/ ctx[0] && create_if_block_1$6(ctx);
    	let if_block1 = /*subtitle*/ ctx[1] && create_if_block$d(ctx);
    	const default_slot_template = /*#slots*/ ctx[7].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);

    	const block = {
    		c: function create() {
    			section = element("section");
    			div0 = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			div1 = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div0, "class", "title-bar svelte-1g2xbe3");
    			add_location(div0, file$h, 40, 2, 1018);
    			attr_dev(div1, "class", "padding svelte-1g2xbe3");
    			add_location(div1, file$h, 48, 2, 1157);
    			attr_dev(section, "id", /*id*/ ctx[3]);
    			set_style(section, "--themeColor", /*themeColor*/ ctx[2]);
    			set_style(section, "--backgroundColor", /*backgroundColor*/ ctx[4]);
    			set_style(section, "--textColor", /*textColor*/ ctx[5]);
    			attr_dev(section, "class", "svelte-1g2xbe3");
    			add_location(section, file$h, 39, 0, 899);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div0);
    			if (if_block0) if_block0.m(div0, null);
    			append_dev(div0, t0);
    			if (if_block1) if_block1.m(div0, null);
    			append_dev(section, t1);
    			append_dev(section, div1);

    			if (default_slot) {
    				default_slot.m(div1, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*title*/ ctx[0]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_1$6(ctx);
    					if_block0.c();
    					if_block0.m(div0, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*subtitle*/ ctx[1]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block$d(ctx);
    					if_block1.c();
    					if_block1.m(div0, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 64)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[6], dirty, null, null);
    				}
    			}

    			if (!current || dirty & /*id*/ 8) {
    				attr_dev(section, "id", /*id*/ ctx[3]);
    			}

    			if (!current || dirty & /*themeColor*/ 4) {
    				set_style(section, "--themeColor", /*themeColor*/ ctx[2]);
    			}

    			if (!current || dirty & /*backgroundColor*/ 16) {
    				set_style(section, "--backgroundColor", /*backgroundColor*/ ctx[4]);
    			}

    			if (!current || dirty & /*textColor*/ 32) {
    				set_style(section, "--textColor", /*textColor*/ ctx[5]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$j($$self, $$props, $$invalidate) {
    	let backgroundColor;
    	let textColor;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Common_frame", slots, ['default']);

    	let { title } = $$props,
    		{ subtitle } = $$props,
    		{ themeColor } = $$props,
    		{ id } = $$props;

    	const writable_props = ["title", "subtitle", "themeColor", "id"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Common_frame> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("title" in $$props) $$invalidate(0, title = $$props.title);
    		if ("subtitle" in $$props) $$invalidate(1, subtitle = $$props.subtitle);
    		if ("themeColor" in $$props) $$invalidate(2, themeColor = $$props.themeColor);
    		if ("id" in $$props) $$invalidate(3, id = $$props.id);
    		if ("$$scope" in $$props) $$invalidate(6, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		Color: color,
    		title,
    		subtitle,
    		themeColor,
    		id,
    		backgroundColor,
    		textColor
    	});

    	$$self.$inject_state = $$props => {
    		if ("title" in $$props) $$invalidate(0, title = $$props.title);
    		if ("subtitle" in $$props) $$invalidate(1, subtitle = $$props.subtitle);
    		if ("themeColor" in $$props) $$invalidate(2, themeColor = $$props.themeColor);
    		if ("id" in $$props) $$invalidate(3, id = $$props.id);
    		if ("backgroundColor" in $$props) $$invalidate(4, backgroundColor = $$props.backgroundColor);
    		if ("textColor" in $$props) $$invalidate(5, textColor = $$props.textColor);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*themeColor*/ 4) {
    			$$invalidate(4, backgroundColor = color(themeColor).lightness(96));
    		}

    		if ($$self.$$.dirty & /*themeColor*/ 4) {
    			$$invalidate(5, textColor = color(themeColor).luminosity() > 0.7 ? "#000" : "#fff");
    		}
    	};

    	return [title, subtitle, themeColor, id, backgroundColor, textColor, $$scope, slots];
    }

    class Common_frame extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$j, create_fragment$j, safe_not_equal, {
    			title: 0,
    			subtitle: 1,
    			themeColor: 2,
    			id: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Common_frame",
    			options,
    			id: create_fragment$j.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*title*/ ctx[0] === undefined && !("title" in props)) {
    			console.warn("<Common_frame> was created without expected prop 'title'");
    		}

    		if (/*subtitle*/ ctx[1] === undefined && !("subtitle" in props)) {
    			console.warn("<Common_frame> was created without expected prop 'subtitle'");
    		}

    		if (/*themeColor*/ ctx[2] === undefined && !("themeColor" in props)) {
    			console.warn("<Common_frame> was created without expected prop 'themeColor'");
    		}

    		if (/*id*/ ctx[3] === undefined && !("id" in props)) {
    			console.warn("<Common_frame> was created without expected prop 'id'");
    		}
    	}

    	get title() {
    		throw new Error("<Common_frame>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<Common_frame>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get subtitle() {
    		throw new Error("<Common_frame>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set subtitle(value) {
    		throw new Error("<Common_frame>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get themeColor() {
    		throw new Error("<Common_frame>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set themeColor(value) {
    		throw new Error("<Common_frame>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get id() {
    		throw new Error("<Common_frame>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<Common_frame>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /**
     * https://github.com/gre/bezier-easing
     * BezierEasing - use bezier curve for transition easing function
     * by Gaëtan Renaudeau 2014 - 2015 – MIT License
     */
    // These values are established by empiricism with tests (tradeoff: performance VS precision)
    var NEWTON_ITERATIONS = 4;
    var NEWTON_MIN_SLOPE = 0.001;
    var SUBDIVISION_PRECISION = 0.0000001;
    var SUBDIVISION_MAX_ITERATIONS = 10;

    var kSplineTableSize = 11;
    var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);

    var float32ArraySupported = typeof Float32Array === 'function';

    function A (aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }
    function B (aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }
    function C (aA1)      { return 3.0 * aA1; }

    // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.
    function calcBezier (aT, aA1, aA2) { return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT; }

    // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.
    function getSlope (aT, aA1, aA2) { return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1); }

    function binarySubdivide (aX, aA, aB, mX1, mX2) {
      var currentX, currentT, i = 0;
      do {
        currentT = aA + (aB - aA) / 2.0;
        currentX = calcBezier(currentT, mX1, mX2) - aX;
        if (currentX > 0.0) {
          aB = currentT;
        } else {
          aA = currentT;
        }
      } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
      return currentT;
    }

    function newtonRaphsonIterate (aX, aGuessT, mX1, mX2) {
     for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
       var currentSlope = getSlope(aGuessT, mX1, mX2);
       if (currentSlope === 0.0) {
         return aGuessT;
       }
       var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
       aGuessT -= currentX / currentSlope;
     }
     return aGuessT;
    }

    function LinearEasing (x) {
      return x;
    }

    var src = function bezier (mX1, mY1, mX2, mY2) {
      if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {
        throw new Error('bezier x values must be in [0, 1] range');
      }

      if (mX1 === mY1 && mX2 === mY2) {
        return LinearEasing;
      }

      // Precompute samples table
      var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
      for (var i = 0; i < kSplineTableSize; ++i) {
        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
      }

      function getTForX (aX) {
        var intervalStart = 0.0;
        var currentSample = 1;
        var lastSample = kSplineTableSize - 1;

        for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
          intervalStart += kSampleStepSize;
        }
        --currentSample;

        // Interpolate to provide an initial guess for t
        var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
        var guessForT = intervalStart + dist * kSampleStepSize;

        var initialSlope = getSlope(guessForT, mX1, mX2);
        if (initialSlope >= NEWTON_MIN_SLOPE) {
          return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
        } else if (initialSlope === 0.0) {
          return guessForT;
        } else {
          return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
        }
      }

      return function BezierEasing (x) {
        // Because JavaScript number are imprecise, we should guarantee the extremes are right.
        if (x === 0) {
          return 0;
        }
        if (x === 1) {
          return 1;
        }
        return calcBezier(getTForX(x), mY1, mY2);
      };
    };

    var SAT = createCommonjsModule(function (module, exports) {
    // Version 0.9.0 - Copyright 2012 - 2021 -  Jim Riecken <jimr@jimr.ca>
    //
    // Released under the MIT License - https://github.com/jriecken/sat-js
    //
    // A simple library for determining intersections of circles and
    // polygons using the Separating Axis Theorem.
    /** @preserve SAT.js - Version 0.9.0 - Copyright 2012 - 2021 - Jim Riecken <jimr@jimr.ca> - released under the MIT License. https://github.com/jriecken/sat-js */

    /*global define: false, module: false*/
    /*jshint shadow:true, sub:true, forin:true, noarg:true, noempty:true,
      eqeqeq:true, bitwise:true, strict:true, undef:true,
      curly:true, browser:true */

    // Create a UMD wrapper for SAT. Works in:
    //
    //  - Plain browser via global SAT variable
    //  - AMD loader (like require.js)
    //  - Node.js
    //
    // The quoted properties all over the place are used so that the Closure Compiler
    // does not mangle the exposed API in advanced mode.
    /**
     * @param {*} root - The global scope
     * @param {Function} factory - Factory that creates SAT module
     */
    (function (root, factory) {
      {
        module['exports'] = factory();
      }
    }(commonjsGlobal, function () {

      var SAT = {};

      //
      // ## Vector
      //
      // Represents a vector in two dimensions with `x` and `y` properties.


      // Create a new Vector, optionally passing in the `x` and `y` coordinates. If
      // a coordinate is not specified, it will be set to `0`
      /**
       * @param {?number=} x The x position.
       * @param {?number=} y The y position.
       * @constructor
       */
      function Vector(x, y) {
        this['x'] = x || 0;
        this['y'] = y || 0;
      }
      SAT['Vector'] = Vector;
      // Alias `Vector` as `V`
      SAT['V'] = Vector;


      // Copy the values of another Vector into this one.
      /**
       * @param {Vector} other The other Vector.
       * @return {Vector} This for chaining.
       */
      Vector.prototype['copy'] = Vector.prototype.copy = function (other) {
        this['x'] = other['x'];
        this['y'] = other['y'];
        return this;
      };

      // Create a new vector with the same coordinates as this on.
      /**
       * @return {Vector} The new cloned vector
       */
      Vector.prototype['clone'] = Vector.prototype.clone = function () {
        return new Vector(this['x'], this['y']);
      };

      // Change this vector to be perpendicular to what it was before. (Effectively
      // roatates it 90 degrees in a clockwise direction)
      /**
       * @return {Vector} This for chaining.
       */
      Vector.prototype['perp'] = Vector.prototype.perp = function () {
        var x = this['x'];
        this['x'] = this['y'];
        this['y'] = -x;
        return this;
      };

      // Rotate this vector (counter-clockwise) by the specified angle (in radians).
      /**
       * @param {number} angle The angle to rotate (in radians)
       * @return {Vector} This for chaining.
       */
      Vector.prototype['rotate'] = Vector.prototype.rotate = function (angle) {
        var x = this['x'];
        var y = this['y'];
        this['x'] = x * Math.cos(angle) - y * Math.sin(angle);
        this['y'] = x * Math.sin(angle) + y * Math.cos(angle);
        return this;
      };

      // Reverse this vector.
      /**
       * @return {Vector} This for chaining.
       */
      Vector.prototype['reverse'] = Vector.prototype.reverse = function () {
        this['x'] = -this['x'];
        this['y'] = -this['y'];
        return this;
      };


      // Normalize this vector.  (make it have length of `1`)
      /**
       * @return {Vector} This for chaining.
       */
      Vector.prototype['normalize'] = Vector.prototype.normalize = function () {
        var d = this.len();
        if (d > 0) {
          this['x'] = this['x'] / d;
          this['y'] = this['y'] / d;
        }
        return this;
      };

      // Add another vector to this one.
      /**
       * @param {Vector} other The other Vector.
       * @return {Vector} This for chaining.
       */
      Vector.prototype['add'] = Vector.prototype.add = function (other) {
        this['x'] += other['x'];
        this['y'] += other['y'];
        return this;
      };

      // Subtract another vector from this one.
      /**
       * @param {Vector} other The other Vector.
       * @return {Vector} This for chaiing.
       */
      Vector.prototype['sub'] = Vector.prototype.sub = function (other) {
        this['x'] -= other['x'];
        this['y'] -= other['y'];
        return this;
      };

      // Scale this vector. An independent scaling factor can be provided
      // for each axis, or a single scaling factor that will scale both `x` and `y`.
      /**
       * @param {number} x The scaling factor in the x direction.
       * @param {?number=} y The scaling factor in the y direction.  If this
       *   is not specified, the x scaling factor will be used.
       * @return {Vector} This for chaining.
       */
      Vector.prototype['scale'] = Vector.prototype.scale = function (x, y) {
        this['x'] *= x;
        this['y'] *= typeof y != 'undefined' ? y : x;
        return this;
      };

      // Project this vector on to another vector.
      /**
       * @param {Vector} other The vector to project onto.
       * @return {Vector} This for chaining.
       */
      Vector.prototype['project'] = Vector.prototype.project = function (other) {
        var amt = this.dot(other) / other.len2();
        this['x'] = amt * other['x'];
        this['y'] = amt * other['y'];
        return this;
      };

      // Project this vector onto a vector of unit length. This is slightly more efficient
      // than `project` when dealing with unit vectors.
      /**
       * @param {Vector} other The unit vector to project onto.
       * @return {Vector} This for chaining.
       */
      Vector.prototype['projectN'] = Vector.prototype.projectN = function (other) {
        var amt = this.dot(other);
        this['x'] = amt * other['x'];
        this['y'] = amt * other['y'];
        return this;
      };

      // Reflect this vector on an arbitrary axis.
      /**
       * @param {Vector} axis The vector representing the axis.
       * @return {Vector} This for chaining.
       */
      Vector.prototype['reflect'] = Vector.prototype.reflect = function (axis) {
        var x = this['x'];
        var y = this['y'];
        this.project(axis).scale(2);
        this['x'] -= x;
        this['y'] -= y;
        return this;
      };

      // Reflect this vector on an arbitrary axis (represented by a unit vector). This is
      // slightly more efficient than `reflect` when dealing with an axis that is a unit vector.
      /**
       * @param {Vector} axis The unit vector representing the axis.
       * @return {Vector} This for chaining.
       */
      Vector.prototype['reflectN'] = Vector.prototype.reflectN = function (axis) {
        var x = this['x'];
        var y = this['y'];
        this.projectN(axis).scale(2);
        this['x'] -= x;
        this['y'] -= y;
        return this;
      };

      // Get the dot product of this vector and another.
      /**
       * @param {Vector}  other The vector to dot this one against.
       * @return {number} The dot product.
       */
      Vector.prototype['dot'] = Vector.prototype.dot = function (other) {
        return this['x'] * other['x'] + this['y'] * other['y'];
      };

      // Get the squared length of this vector.
      /**
       * @return {number} The length^2 of this vector.
       */
      Vector.prototype['len2'] = Vector.prototype.len2 = function () {
        return this.dot(this);
      };

      // Get the length of this vector.
      /**
       * @return {number} The length of this vector.
       */
      Vector.prototype['len'] = Vector.prototype.len = function () {
        return Math.sqrt(this.len2());
      };

      // ## Circle
      //
      // Represents a circle with a position and a radius.

      // Create a new circle, optionally passing in a position and/or radius. If no position
      // is given, the circle will be at `(0,0)`. If no radius is provided, the circle will
      // have a radius of `0`.
      /**
       * @param {Vector=} pos A vector representing the position of the center of the circle
       * @param {?number=} r The radius of the circle
       * @constructor
       */
      function Circle(pos, r) {
        this['pos'] = pos || new Vector();
        this['r'] = r || 0;
        this['offset'] = new Vector();
      }
      SAT['Circle'] = Circle;

      // Compute the axis-aligned bounding box (AABB) of this Circle.
      //
      // Note: Returns a _new_ `Box` each time you call this.
      /**
       * @return {Polygon} The AABB
       */
      Circle.prototype['getAABBAsBox'] = Circle.prototype.getAABBAsBox = function () {
        var r = this['r'];
        var corner = this['pos'].clone().add(this['offset']).sub(new Vector(r, r));
        return new Box(corner, r * 2, r * 2);
      };

      // Compute the axis-aligned bounding box (AABB) of this Circle.
      //
      // Note: Returns a _new_ `Polygon` each time you call this.
      /**
       * @return {Polygon} The AABB
       */
      Circle.prototype['getAABB'] = Circle.prototype.getAABB = function () {
        return this.getAABBAsBox().toPolygon();
      };

      // Set the current offset to apply to the radius.
      /**
       * @param {Vector} offset The new offset vector.
       * @return {Circle} This for chaining.
       */
      Circle.prototype['setOffset'] = Circle.prototype.setOffset = function (offset) {
        this['offset'] = offset;
        return this;
      };

      // ## Polygon
      //
      // Represents a *convex* polygon with any number of points (specified in counter-clockwise order)
      //
      // Note: Do _not_ manually change the `points`, `angle`, or `offset` properties. Use the
      // provided setters. Otherwise the calculated properties will not be updated correctly.
      //
      // `pos` can be changed directly.

      // Create a new polygon, passing in a position vector, and an array of points (represented
      // by vectors relative to the position vector). If no position is passed in, the position
      // of the polygon will be `(0,0)`.
      /**
       * @param {Vector=} pos A vector representing the origin of the polygon. (all other
       *   points are relative to this one)
       * @param {Array<Vector>=} points An array of vectors representing the points in the polygon,
       *   in counter-clockwise order.
       * @constructor
       */
      function Polygon(pos, points) {
        this['pos'] = pos || new Vector();
        this['angle'] = 0;
        this['offset'] = new Vector();
        this.setPoints(points || []);
      }
      SAT['Polygon'] = Polygon;

      // Set the points of the polygon. Any consecutive duplicate points will be combined.
      //
      // Note: The points are counter-clockwise *with respect to the coordinate system*.
      // If you directly draw the points on a screen that has the origin at the top-left corner
      // it will _appear_ visually that the points are being specified clockwise. This is just
      // because of the inversion of the Y-axis when being displayed.
      /**
       * @param {Array<Vector>=} points An array of vectors representing the points in the polygon,
       *   in counter-clockwise order.
       * @return {Polygon} This for chaining.
       */
      Polygon.prototype['setPoints'] = Polygon.prototype.setPoints = function (points) {
        // Only re-allocate if this is a new polygon or the number of points has changed.
        var lengthChanged = !this['points'] || this['points'].length !== points.length;
        if (lengthChanged) {
          var i;
          var calcPoints = this['calcPoints'] = [];
          var edges = this['edges'] = [];
          var normals = this['normals'] = [];
          // Allocate the vector arrays for the calculated properties
          for (i = 0; i < points.length; i++) {
            // Remove consecutive duplicate points
            var p1 = points[i];
            var p2 = i < points.length - 1 ? points[i + 1] : points[0];
            if (p1 !== p2 && p1.x === p2.x && p1.y === p2.y) {
              points.splice(i, 1);
              i -= 1;
              continue;
            }
            calcPoints.push(new Vector());
            edges.push(new Vector());
            normals.push(new Vector());
          }
        }
        this['points'] = points;
        this._recalc();
        return this;
      };

      // Set the current rotation angle of the polygon.
      /**
       * @param {number} angle The current rotation angle (in radians).
       * @return {Polygon} This for chaining.
       */
      Polygon.prototype['setAngle'] = Polygon.prototype.setAngle = function (angle) {
        this['angle'] = angle;
        this._recalc();
        return this;
      };

      // Set the current offset to apply to the `points` before applying the `angle` rotation.
      /**
       * @param {Vector} offset The new offset vector.
       * @return {Polygon} This for chaining.
       */
      Polygon.prototype['setOffset'] = Polygon.prototype.setOffset = function (offset) {
        this['offset'] = offset;
        this._recalc();
        return this;
      };

      // Rotates this polygon counter-clockwise around the origin of *its local coordinate system* (i.e. `pos`).
      //
      // Note: This changes the **original** points (so any `angle` will be applied on top of this rotation).
      /**
       * @param {number} angle The angle to rotate (in radians)
       * @return {Polygon} This for chaining.
       */
      Polygon.prototype['rotate'] = Polygon.prototype.rotate = function (angle) {
        var points = this['points'];
        var len = points.length;
        for (var i = 0; i < len; i++) {
          points[i].rotate(angle);
        }
        this._recalc();
        return this;
      };

      // Translates the points of this polygon by a specified amount relative to the origin of *its own coordinate
      // system* (i.e. `pos`).
      //
      // This is most useful to change the "center point" of a polygon. If you just want to move the whole polygon, change
      // the coordinates of `pos`.
      //
      // Note: This changes the **original** points (so any `offset` will be applied on top of this translation)
      /**
       * @param {number} x The horizontal amount to translate.
       * @param {number} y The vertical amount to translate.
       * @return {Polygon} This for chaining.
       */
      Polygon.prototype['translate'] = Polygon.prototype.translate = function (x, y) {
        var points = this['points'];
        var len = points.length;
        for (var i = 0; i < len; i++) {
          points[i]['x'] += x;
          points[i]['y'] += y;
        }
        this._recalc();
        return this;
      };


      // Computes the calculated collision polygon. Applies the `angle` and `offset` to the original points then recalculates the
      // edges and normals of the collision polygon.
      /**
       * @return {Polygon} This for chaining.
       */
      Polygon.prototype._recalc = function () {
        // Calculated points - this is what is used for underlying collisions and takes into account
        // the angle/offset set on the polygon.
        var calcPoints = this['calcPoints'];
        // The edges here are the direction of the `n`th edge of the polygon, relative to
        // the `n`th point. If you want to draw a given edge from the edge value, you must
        // first translate to the position of the starting point.
        var edges = this['edges'];
        // The normals here are the direction of the normal for the `n`th edge of the polygon, relative
        // to the position of the `n`th point. If you want to draw an edge normal, you must first
        // translate to the position of the starting point.
        var normals = this['normals'];
        // Copy the original points array and apply the offset/angle
        var points = this['points'];
        var offset = this['offset'];
        var angle = this['angle'];
        var len = points.length;
        var i;
        for (i = 0; i < len; i++) {
          var calcPoint = calcPoints[i].copy(points[i]);
          calcPoint['x'] += offset['x'];
          calcPoint['y'] += offset['y'];
          if (angle !== 0) {
            calcPoint.rotate(angle);
          }
        }
        // Calculate the edges/normals
        for (i = 0; i < len; i++) {
          var p1 = calcPoints[i];
          var p2 = i < len - 1 ? calcPoints[i + 1] : calcPoints[0];
          var e = edges[i].copy(p2).sub(p1);
          normals[i].copy(e).perp().normalize();
        }
        return this;
      };


      // Compute the axis-aligned bounding box. Any current state
      // (translations/rotations) will be applied before constructing the AABB.
      //
      // Note: Returns a _new_ `Box` each time you call this.
      /**
       * @return {Polygon} The AABB
       */
      Polygon.prototype['getAABBAsBox'] = Polygon.prototype.getAABBAsBox = function () {
        var points = this['calcPoints'];
        var len = points.length;
        var xMin = points[0]['x'];
        var yMin = points[0]['y'];
        var xMax = points[0]['x'];
        var yMax = points[0]['y'];
        for (var i = 1; i < len; i++) {
          var point = points[i];
          if (point['x'] < xMin) {
            xMin = point['x'];
          }
          else if (point['x'] > xMax) {
            xMax = point['x'];
          }
          if (point['y'] < yMin) {
            yMin = point['y'];
          }
          else if (point['y'] > yMax) {
            yMax = point['y'];
          }
        }
        return new Box(this['pos'].clone().add(new Vector(xMin, yMin)), xMax - xMin, yMax - yMin);
      };


      // Compute the axis-aligned bounding box. Any current state
      // (translations/rotations) will be applied before constructing the AABB.
      //
      // Note: Returns a _new_ `Polygon` each time you call this.
      /**
       * @return {Polygon} The AABB
       */
      Polygon.prototype['getAABB'] = Polygon.prototype.getAABB = function () {
        return this.getAABBAsBox().toPolygon();
      };

      // Compute the centroid (geometric center) of the polygon. Any current state
      // (translations/rotations) will be applied before computing the centroid.
      //
      // See https://en.wikipedia.org/wiki/Centroid#Centroid_of_a_polygon
      //
      // Note: Returns a _new_ `Vector` each time you call this.
      /**
       * @return {Vector} A Vector that contains the coordinates of the Centroid.
       */
      Polygon.prototype['getCentroid'] = Polygon.prototype.getCentroid = function () {
        var points = this['calcPoints'];
        var len = points.length;
        var cx = 0;
        var cy = 0;
        var ar = 0;
        for (var i = 0; i < len; i++) {
          var p1 = points[i];
          var p2 = i === len - 1 ? points[0] : points[i + 1]; // Loop around if last point
          var a = p1['x'] * p2['y'] - p2['x'] * p1['y'];
          cx += (p1['x'] + p2['x']) * a;
          cy += (p1['y'] + p2['y']) * a;
          ar += a;
        }
        ar = ar * 3; // we want 1 / 6 the area and we currently have 2*area
        cx = cx / ar;
        cy = cy / ar;
        return new Vector(cx, cy);
      };


      // ## Box
      //
      // Represents an axis-aligned box, with a width and height.


      // Create a new box, with the specified position, width, and height. If no position
      // is given, the position will be `(0,0)`. If no width or height are given, they will
      // be set to `0`.
      /**
       * @param {Vector=} pos A vector representing the bottom-left of the box (i.e. the smallest x and smallest y value).
       * @param {?number=} w The width of the box.
       * @param {?number=} h The height of the box.
       * @constructor
       */
      function Box(pos, w, h) {
        this['pos'] = pos || new Vector();
        this['w'] = w || 0;
        this['h'] = h || 0;
      }
      SAT['Box'] = Box;

      // Returns a polygon whose edges are the same as this box.
      /**
       * @return {Polygon} A new Polygon that represents this box.
       */
      Box.prototype['toPolygon'] = Box.prototype.toPolygon = function () {
        var pos = this['pos'];
        var w = this['w'];
        var h = this['h'];
        return new Polygon(new Vector(pos['x'], pos['y']), [
          new Vector(), new Vector(w, 0),
          new Vector(w, h), new Vector(0, h)
        ]);
      };

      // ## Response
      //
      // An object representing the result of an intersection. Contains:
      //  - The two objects participating in the intersection
      //  - The vector representing the minimum change necessary to extract the first object
      //    from the second one (as well as a unit vector in that direction and the magnitude
      //    of the overlap)
      //  - Whether the first object is entirely inside the second, and vice versa.
      /**
       * @constructor
       */
      function Response() {
        this['a'] = null;
        this['b'] = null;
        this['overlapN'] = new Vector();
        this['overlapV'] = new Vector();
        this.clear();
      }
      SAT['Response'] = Response;

      // Set some values of the response back to their defaults.  Call this between tests if
      // you are going to reuse a single Response object for multiple intersection tests (recommented
      // as it will avoid allcating extra memory)
      /**
       * @return {Response} This for chaining
       */
      Response.prototype['clear'] = Response.prototype.clear = function () {
        this['aInB'] = true;
        this['bInA'] = true;
        this['overlap'] = Number.MAX_VALUE;
        return this;
      };

      // ## Object Pools

      // A pool of `Vector` objects that are used in calculations to avoid
      // allocating memory.
      /**
       * @type {Array<Vector>}
       */
      var T_VECTORS = [];
      for (var i = 0; i < 10; i++) { T_VECTORS.push(new Vector()); }

      // A pool of arrays of numbers used in calculations to avoid allocating
      // memory.
      /**
       * @type {Array<Array<number>>}
       */
      var T_ARRAYS = [];
      for (var i = 0; i < 5; i++) { T_ARRAYS.push([]); }

      // Temporary response used for polygon hit detection.
      /**
       * @type {Response}
       */
      var T_RESPONSE = new Response();

      // Tiny "point" polygon used for polygon hit detection.
      /**
       * @type {Polygon}
       */
      var TEST_POINT = new Box(new Vector(), 0.000001, 0.000001).toPolygon();

      // ## Helper Functions

      // Flattens the specified array of points onto a unit vector axis,
      // resulting in a one dimensional range of the minimum and
      // maximum value on that axis.
      /**
       * @param {Array<Vector>} points The points to flatten.
       * @param {Vector} normal The unit vector axis to flatten on.
       * @param {Array<number>} result An array.  After calling this function,
       *   result[0] will be the minimum value,
       *   result[1] will be the maximum value.
       */
      function flattenPointsOn(points, normal, result) {
        var min = Number.MAX_VALUE;
        var max = -Number.MAX_VALUE;
        var len = points.length;
        for (var i = 0; i < len; i++) {
          // The magnitude of the projection of the point onto the normal
          var dot = points[i].dot(normal);
          if (dot < min) { min = dot; }
          if (dot > max) { max = dot; }
        }
        result[0] = min; result[1] = max;
      }

      // Check whether two convex polygons are separated by the specified
      // axis (must be a unit vector).
      /**
       * @param {Vector} aPos The position of the first polygon.
       * @param {Vector} bPos The position of the second polygon.
       * @param {Array<Vector>} aPoints The points in the first polygon.
       * @param {Array<Vector>} bPoints The points in the second polygon.
       * @param {Vector} axis The axis (unit sized) to test against.  The points of both polygons
       *   will be projected onto this axis.
       * @param {Response=} response A Response object (optional) which will be populated
       *   if the axis is not a separating axis.
       * @return {boolean} true if it is a separating axis, false otherwise.  If false,
       *   and a response is passed in, information about how much overlap and
       *   the direction of the overlap will be populated.
       */
      function isSeparatingAxis(aPos, bPos, aPoints, bPoints, axis, response) {
        var rangeA = T_ARRAYS.pop();
        var rangeB = T_ARRAYS.pop();
        // The magnitude of the offset between the two polygons
        var offsetV = T_VECTORS.pop().copy(bPos).sub(aPos);
        var projectedOffset = offsetV.dot(axis);
        // Project the polygons onto the axis.
        flattenPointsOn(aPoints, axis, rangeA);
        flattenPointsOn(bPoints, axis, rangeB);
        // Move B's range to its position relative to A.
        rangeB[0] += projectedOffset;
        rangeB[1] += projectedOffset;
        // Check if there is a gap. If there is, this is a separating axis and we can stop
        if (rangeA[0] > rangeB[1] || rangeB[0] > rangeA[1]) {
          T_VECTORS.push(offsetV);
          T_ARRAYS.push(rangeA);
          T_ARRAYS.push(rangeB);
          return true;
        }
        // This is not a separating axis. If we're calculating a response, calculate the overlap.
        if (response) {
          var overlap = 0;
          // A starts further left than B
          if (rangeA[0] < rangeB[0]) {
            response['aInB'] = false;
            // A ends before B does. We have to pull A out of B
            if (rangeA[1] < rangeB[1]) {
              overlap = rangeA[1] - rangeB[0];
              response['bInA'] = false;
              // B is fully inside A.  Pick the shortest way out.
            } else {
              var option1 = rangeA[1] - rangeB[0];
              var option2 = rangeB[1] - rangeA[0];
              overlap = option1 < option2 ? option1 : -option2;
            }
            // B starts further left than A
          } else {
            response['bInA'] = false;
            // B ends before A ends. We have to push A out of B
            if (rangeA[1] > rangeB[1]) {
              overlap = rangeA[0] - rangeB[1];
              response['aInB'] = false;
              // A is fully inside B.  Pick the shortest way out.
            } else {
              var option1 = rangeA[1] - rangeB[0];
              var option2 = rangeB[1] - rangeA[0];
              overlap = option1 < option2 ? option1 : -option2;
            }
          }
          // If this is the smallest amount of overlap we've seen so far, set it as the minimum overlap.
          var absOverlap = Math.abs(overlap);
          if (absOverlap < response['overlap']) {
            response['overlap'] = absOverlap;
            response['overlapN'].copy(axis);
            if (overlap < 0) {
              response['overlapN'].reverse();
            }
          }
        }
        T_VECTORS.push(offsetV);
        T_ARRAYS.push(rangeA);
        T_ARRAYS.push(rangeB);
        return false;
      }
      SAT['isSeparatingAxis'] = isSeparatingAxis;

      // Calculates which Voronoi region a point is on a line segment.
      // It is assumed that both the line and the point are relative to `(0,0)`
      //
      //            |       (0)      |
      //     (-1)  [S]--------------[E]  (1)
      //            |       (0)      |
      /**
       * @param {Vector} line The line segment.
       * @param {Vector} point The point.
       * @return  {number} LEFT_VORONOI_REGION (-1) if it is the left region,
       *          MIDDLE_VORONOI_REGION (0) if it is the middle region,
       *          RIGHT_VORONOI_REGION (1) if it is the right region.
       */
      function voronoiRegion(line, point) {
        var len2 = line.len2();
        var dp = point.dot(line);
        // If the point is beyond the start of the line, it is in the
        // left voronoi region.
        if (dp < 0) { return LEFT_VORONOI_REGION; }
        // If the point is beyond the end of the line, it is in the
        // right voronoi region.
        else if (dp > len2) { return RIGHT_VORONOI_REGION; }
        // Otherwise, it's in the middle one.
        else { return MIDDLE_VORONOI_REGION; }
      }
      // Constants for Voronoi regions
      /**
       * @const
       */
      var LEFT_VORONOI_REGION = -1;
      /**
       * @const
       */
      var MIDDLE_VORONOI_REGION = 0;
      /**
       * @const
       */
      var RIGHT_VORONOI_REGION = 1;

      // ## Collision Tests

      // Check if a point is inside a circle.
      /**
       * @param {Vector} p The point to test.
       * @param {Circle} c The circle to test.
       * @return {boolean} true if the point is inside the circle, false if it is not.
       */
      function pointInCircle(p, c) {
        var differenceV = T_VECTORS.pop().copy(p).sub(c['pos']).sub(c['offset']);
        var radiusSq = c['r'] * c['r'];
        var distanceSq = differenceV.len2();
        T_VECTORS.push(differenceV);
        // If the distance between is smaller than the radius then the point is inside the circle.
        return distanceSq <= radiusSq;
      }
      SAT['pointInCircle'] = pointInCircle;

      // Check if a point is inside a convex polygon.
      /**
       * @param {Vector} p The point to test.
       * @param {Polygon} poly The polygon to test.
       * @return {boolean} true if the point is inside the polygon, false if it is not.
       */
      function pointInPolygon(p, poly) {
        TEST_POINT['pos'].copy(p);
        T_RESPONSE.clear();
        var result = testPolygonPolygon(TEST_POINT, poly, T_RESPONSE);
        if (result) {
          result = T_RESPONSE['aInB'];
        }
        return result;
      }
      SAT['pointInPolygon'] = pointInPolygon;

      // Check if two circles collide.
      /**
       * @param {Circle} a The first circle.
       * @param {Circle} b The second circle.
       * @param {Response=} response Response object (optional) that will be populated if
       *   the circles intersect.
       * @return {boolean} true if the circles intersect, false if they don't.
       */
      function testCircleCircle(a, b, response) {
        // Check if the distance between the centers of the two
        // circles is greater than their combined radius.
        var differenceV = T_VECTORS.pop().copy(b['pos']).add(b['offset']).sub(a['pos']).sub(a['offset']);
        var totalRadius = a['r'] + b['r'];
        var totalRadiusSq = totalRadius * totalRadius;
        var distanceSq = differenceV.len2();
        // If the distance is bigger than the combined radius, they don't intersect.
        if (distanceSq > totalRadiusSq) {
          T_VECTORS.push(differenceV);
          return false;
        }
        // They intersect.  If we're calculating a response, calculate the overlap.
        if (response) {
          var dist = Math.sqrt(distanceSq);
          response['a'] = a;
          response['b'] = b;
          response['overlap'] = totalRadius - dist;
          response['overlapN'].copy(differenceV.normalize());
          response['overlapV'].copy(differenceV).scale(response['overlap']);
          response['aInB'] = a['r'] <= b['r'] && dist <= b['r'] - a['r'];
          response['bInA'] = b['r'] <= a['r'] && dist <= a['r'] - b['r'];
        }
        T_VECTORS.push(differenceV);
        return true;
      }
      SAT['testCircleCircle'] = testCircleCircle;

      // Check if a polygon and a circle collide.
      /**
       * @param {Polygon} polygon The polygon.
       * @param {Circle} circle The circle.
       * @param {Response=} response Response object (optional) that will be populated if
       *   they interset.
       * @return {boolean} true if they intersect, false if they don't.
       */
      function testPolygonCircle(polygon, circle, response) {
        // Get the position of the circle relative to the polygon.
        var circlePos = T_VECTORS.pop().copy(circle['pos']).add(circle['offset']).sub(polygon['pos']);
        var radius = circle['r'];
        var radius2 = radius * radius;
        var points = polygon['calcPoints'];
        var len = points.length;
        var edge = T_VECTORS.pop();
        var point = T_VECTORS.pop();

        // For each edge in the polygon:
        for (var i = 0; i < len; i++) {
          var next = i === len - 1 ? 0 : i + 1;
          var prev = i === 0 ? len - 1 : i - 1;
          var overlap = 0;
          var overlapN = null;

          // Get the edge.
          edge.copy(polygon['edges'][i]);
          // Calculate the center of the circle relative to the starting point of the edge.
          point.copy(circlePos).sub(points[i]);

          // If the distance between the center of the circle and the point
          // is bigger than the radius, the polygon is definitely not fully in
          // the circle.
          if (response && point.len2() > radius2) {
            response['aInB'] = false;
          }

          // Calculate which Voronoi region the center of the circle is in.
          var region = voronoiRegion(edge, point);
          // If it's the left region:
          if (region === LEFT_VORONOI_REGION) {
            // We need to make sure we're in the RIGHT_VORONOI_REGION of the previous edge.
            edge.copy(polygon['edges'][prev]);
            // Calculate the center of the circle relative the starting point of the previous edge
            var point2 = T_VECTORS.pop().copy(circlePos).sub(points[prev]);
            region = voronoiRegion(edge, point2);
            if (region === RIGHT_VORONOI_REGION) {
              // It's in the region we want.  Check if the circle intersects the point.
              var dist = point.len();
              if (dist > radius) {
                // No intersection
                T_VECTORS.push(circlePos);
                T_VECTORS.push(edge);
                T_VECTORS.push(point);
                T_VECTORS.push(point2);
                return false;
              } else if (response) {
                // It intersects, calculate the overlap.
                response['bInA'] = false;
                overlapN = point.normalize();
                overlap = radius - dist;
              }
            }
            T_VECTORS.push(point2);
            // If it's the right region:
          } else if (region === RIGHT_VORONOI_REGION) {
            // We need to make sure we're in the left region on the next edge
            edge.copy(polygon['edges'][next]);
            // Calculate the center of the circle relative to the starting point of the next edge.
            point.copy(circlePos).sub(points[next]);
            region = voronoiRegion(edge, point);
            if (region === LEFT_VORONOI_REGION) {
              // It's in the region we want.  Check if the circle intersects the point.
              var dist = point.len();
              if (dist > radius) {
                // No intersection
                T_VECTORS.push(circlePos);
                T_VECTORS.push(edge);
                T_VECTORS.push(point);
                return false;
              } else if (response) {
                // It intersects, calculate the overlap.
                response['bInA'] = false;
                overlapN = point.normalize();
                overlap = radius - dist;
              }
            }
            // Otherwise, it's the middle region:
          } else {
            // Need to check if the circle is intersecting the edge,
            // Change the edge into its "edge normal".
            var normal = edge.perp().normalize();
            // Find the perpendicular distance between the center of the
            // circle and the edge.
            var dist = point.dot(normal);
            var distAbs = Math.abs(dist);
            // If the circle is on the outside of the edge, there is no intersection.
            if (dist > 0 && distAbs > radius) {
              // No intersection
              T_VECTORS.push(circlePos);
              T_VECTORS.push(normal);
              T_VECTORS.push(point);
              return false;
            } else if (response) {
              // It intersects, calculate the overlap.
              overlapN = normal;
              overlap = radius - dist;
              // If the center of the circle is on the outside of the edge, or part of the
              // circle is on the outside, the circle is not fully inside the polygon.
              if (dist >= 0 || overlap < 2 * radius) {
                response['bInA'] = false;
              }
            }
          }

          // If this is the smallest overlap we've seen, keep it.
          // (overlapN may be null if the circle was in the wrong Voronoi region).
          if (overlapN && response && Math.abs(overlap) < Math.abs(response['overlap'])) {
            response['overlap'] = overlap;
            response['overlapN'].copy(overlapN);
          }
        }

        // Calculate the final overlap vector - based on the smallest overlap.
        if (response) {
          response['a'] = polygon;
          response['b'] = circle;
          response['overlapV'].copy(response['overlapN']).scale(response['overlap']);
        }
        T_VECTORS.push(circlePos);
        T_VECTORS.push(edge);
        T_VECTORS.push(point);
        return true;
      }
      SAT['testPolygonCircle'] = testPolygonCircle;

      // Check if a circle and a polygon collide.
      //
      // **NOTE:** This is slightly less efficient than polygonCircle as it just
      // runs polygonCircle and reverses everything at the end.
      /**
       * @param {Circle} circle The circle.
       * @param {Polygon} polygon The polygon.
       * @param {Response=} response Response object (optional) that will be populated if
       *   they interset.
       * @return {boolean} true if they intersect, false if they don't.
       */
      function testCirclePolygon(circle, polygon, response) {
        // Test the polygon against the circle.
        var result = testPolygonCircle(polygon, circle, response);
        if (result && response) {
          // Swap A and B in the response.
          var a = response['a'];
          var aInB = response['aInB'];
          response['overlapN'].reverse();
          response['overlapV'].reverse();
          response['a'] = response['b'];
          response['b'] = a;
          response['aInB'] = response['bInA'];
          response['bInA'] = aInB;
        }
        return result;
      }
      SAT['testCirclePolygon'] = testCirclePolygon;

      // Checks whether polygons collide.
      /**
       * @param {Polygon} a The first polygon.
       * @param {Polygon} b The second polygon.
       * @param {Response=} response Response object (optional) that will be populated if
       *   they interset.
       * @return {boolean} true if they intersect, false if they don't.
       */
      function testPolygonPolygon(a, b, response) {
        var aPoints = a['calcPoints'];
        var aLen = aPoints.length;
        var bPoints = b['calcPoints'];
        var bLen = bPoints.length;
        // If any of the edge normals of A is a separating axis, no intersection.
        for (var i = 0; i < aLen; i++) {
          if (isSeparatingAxis(a['pos'], b['pos'], aPoints, bPoints, a['normals'][i], response)) {
            return false;
          }
        }
        // If any of the edge normals of B is a separating axis, no intersection.
        for (var i = 0; i < bLen; i++) {
          if (isSeparatingAxis(a['pos'], b['pos'], aPoints, bPoints, b['normals'][i], response)) {
            return false;
          }
        }
        // Since none of the edge normals of A or B are a separating axis, there is an intersection
        // and we've already calculated the smallest overlap (in isSeparatingAxis).  Calculate the
        // final overlap vector.
        if (response) {
          response['a'] = a;
          response['b'] = b;
          response['overlapV'].copy(response['overlapN']).scale(response['overlap']);
        }
        return true;
      }
      SAT['testPolygonPolygon'] = testPolygonPolygon;

      return SAT;
    }));
    });

    /* src/components/picture.svelte generated by Svelte v3.38.2 */
    const file$g = "src/components/picture.svelte";

    function get_each_context$a(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[24] = list[i];
    	child_ctx[26] = i;
    	return child_ctx;
    }

    // (58:0) {:else}
    function create_else_block$6(ctx) {
    	let picture;
    	let t;
    	let img;
    	let img_srcset_value;
    	let img_loading_value;
    	let mounted;
    	let dispose;
    	let each_value = /*imageExtensionsShort*/ ctx[14].filter(func$2);
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$a(get_each_context$a(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			picture = element("picture");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t = space();
    			img = element("img");
    			attr_dev(img, "class", /*imgClass*/ ctx[6]);
    			attr_dev(img, "sizes", /*sizes*/ ctx[1]);
    			attr_dev(img, "srcset", img_srcset_value = /*resolveSrcsets*/ ctx[19](/*imageDirectory*/ ctx[13], /*imageExtensionsShort*/ ctx[14], /*imageSizes*/ ctx[15], /*imageId*/ ctx[0], /*loading*/ ctx[18], /*tinyImageExtensionsShort*/ ctx[16], /*tinyImageSize*/ ctx[17])[getSafeImageExtensionIndex(/*imageExtensionsShort*/ ctx[14].filter(func_1$1))]);
    			attr_dev(img, "alt", /*alt*/ ctx[2]);
    			attr_dev(img, "width", /*width*/ ctx[3]);
    			attr_dev(img, "height", /*height*/ ctx[4]);
    			attr_dev(img, "loading", img_loading_value = /*loadLazy*/ ctx[10] ? "lazy" : "eager");
    			add_location(img, file$g, 62, 4, 2628);
    			attr_dev(picture, "class", /*pictureClass*/ ctx[5]);
    			attr_dev(picture, "title", /*title*/ ctx[8]);
    			attr_dev(picture, "style", /*style*/ ctx[9]);
    			add_location(picture, file$g, 58, 2, 2301);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, picture, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(picture, null);
    			}

    			append_dev(picture, t);
    			append_dev(picture, img);

    			if (!mounted) {
    				dispose = [
    					listen_dev(
    						img,
    						"load",
    						function () {
    							if (is_function(/*loadEventDispatcher*/ ctx[20](/*groupId*/ ctx[11], /*groupImagesCount*/ ctx[12]))) /*loadEventDispatcher*/ ctx[20](/*groupId*/ ctx[11], /*groupImagesCount*/ ctx[12]).apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						picture,
    						"click",
    						function () {
    							if (is_function(/*click*/ ctx[7])) /*click*/ ctx[7].apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*imageExtensionsShort, sizes, resolveSrcsets, imageDirectory, imageSizes, imageId, loading, tinyImageExtensionsShort, tinyImageSize*/ 1040387) {
    				each_value = /*imageExtensionsShort*/ ctx[14].filter(func$2);
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$a(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$a(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(picture, t);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*imgClass*/ 64) {
    				attr_dev(img, "class", /*imgClass*/ ctx[6]);
    			}

    			if (dirty & /*sizes*/ 2) {
    				attr_dev(img, "sizes", /*sizes*/ ctx[1]);
    			}

    			if (dirty & /*imageDirectory, imageExtensionsShort, imageSizes, imageId, loading, tinyImageExtensionsShort, tinyImageSize*/ 516097 && img_srcset_value !== (img_srcset_value = /*resolveSrcsets*/ ctx[19](/*imageDirectory*/ ctx[13], /*imageExtensionsShort*/ ctx[14], /*imageSizes*/ ctx[15], /*imageId*/ ctx[0], /*loading*/ ctx[18], /*tinyImageExtensionsShort*/ ctx[16], /*tinyImageSize*/ ctx[17])[getSafeImageExtensionIndex(/*imageExtensionsShort*/ ctx[14].filter(func_1$1))])) {
    				attr_dev(img, "srcset", img_srcset_value);
    			}

    			if (dirty & /*alt*/ 4) {
    				attr_dev(img, "alt", /*alt*/ ctx[2]);
    			}

    			if (dirty & /*width*/ 8) {
    				attr_dev(img, "width", /*width*/ ctx[3]);
    			}

    			if (dirty & /*height*/ 16) {
    				attr_dev(img, "height", /*height*/ ctx[4]);
    			}

    			if (dirty & /*loadLazy*/ 1024 && img_loading_value !== (img_loading_value = /*loadLazy*/ ctx[10] ? "lazy" : "eager")) {
    				attr_dev(img, "loading", img_loading_value);
    			}

    			if (dirty & /*pictureClass*/ 32) {
    				attr_dev(picture, "class", /*pictureClass*/ ctx[5]);
    			}

    			if (dirty & /*title*/ 256) {
    				attr_dev(picture, "title", /*title*/ ctx[8]);
    			}

    			if (dirty & /*style*/ 512) {
    				attr_dev(picture, "style", /*style*/ ctx[9]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(picture);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$6.name,
    		type: "else",
    		source: "(58:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (54:0) {#if imageExtensionsShort.includes('svg')}
    function create_if_block$c(ctx) {
    	let picture;
    	let img;
    	let img_src_value;
    	let img_loading_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			picture = element("picture");
    			img = element("img");
    			attr_dev(img, "class", /*imgClass*/ ctx[6]);
    			if (img.src !== (img_src_value = "" + (/*imageDirectory*/ ctx[13] + /*imageId*/ ctx[0] + ".svg"))) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", /*alt*/ ctx[2]);
    			attr_dev(img, "width", /*width*/ ctx[3]);
    			attr_dev(img, "height", /*height*/ ctx[4]);
    			attr_dev(img, "loading", img_loading_value = /*loadLazy*/ ctx[10] ? "lazy" : "eager");
    			add_location(img, file$g, 55, 4, 2101);
    			attr_dev(picture, "class", /*pictureClass*/ ctx[5]);
    			attr_dev(picture, "title", /*title*/ ctx[8]);
    			attr_dev(picture, "style", /*style*/ ctx[9]);
    			add_location(picture, file$g, 54, 2, 2033);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, picture, anchor);
    			append_dev(picture, img);

    			if (!mounted) {
    				dispose = [
    					listen_dev(
    						img,
    						"load",
    						function () {
    							if (is_function(/*loadEventDispatcher*/ ctx[20](/*groupId*/ ctx[11], /*groupImagesCount*/ ctx[12]))) /*loadEventDispatcher*/ ctx[20](/*groupId*/ ctx[11], /*groupImagesCount*/ ctx[12]).apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						picture,
    						"click",
    						function () {
    							if (is_function(/*click*/ ctx[7])) /*click*/ ctx[7].apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*imgClass*/ 64) {
    				attr_dev(img, "class", /*imgClass*/ ctx[6]);
    			}

    			if (dirty & /*imageDirectory, imageId*/ 8193 && img.src !== (img_src_value = "" + (/*imageDirectory*/ ctx[13] + /*imageId*/ ctx[0] + ".svg"))) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty & /*alt*/ 4) {
    				attr_dev(img, "alt", /*alt*/ ctx[2]);
    			}

    			if (dirty & /*width*/ 8) {
    				attr_dev(img, "width", /*width*/ ctx[3]);
    			}

    			if (dirty & /*height*/ 16) {
    				attr_dev(img, "height", /*height*/ ctx[4]);
    			}

    			if (dirty & /*loadLazy*/ 1024 && img_loading_value !== (img_loading_value = /*loadLazy*/ ctx[10] ? "lazy" : "eager")) {
    				attr_dev(img, "loading", img_loading_value);
    			}

    			if (dirty & /*pictureClass*/ 32) {
    				attr_dev(picture, "class", /*pictureClass*/ ctx[5]);
    			}

    			if (dirty & /*title*/ 256) {
    				attr_dev(picture, "title", /*title*/ ctx[8]);
    			}

    			if (dirty & /*style*/ 512) {
    				attr_dev(picture, "style", /*style*/ ctx[9]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(picture);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$c.name,
    		type: "if",
    		source: "(54:0) {#if imageExtensionsShort.includes('svg')}",
    		ctx
    	});

    	return block;
    }

    // (60:4) {#each imageExtensionsShort.filter(v => v != 'svg') as ext, i}
    function create_each_block$a(ctx) {
    	let source;
    	let source_type_value;
    	let source_srcset_value;

    	const block = {
    		c: function create() {
    			source = element("source");
    			attr_dev(source, "type", source_type_value = "image/" + /*ext*/ ctx[24]);
    			attr_dev(source, "sizes", /*sizes*/ ctx[1]);
    			attr_dev(source, "srcset", source_srcset_value = /*resolveSrcsets*/ ctx[19](/*imageDirectory*/ ctx[13], /*imageExtensionsShort*/ ctx[14], /*imageSizes*/ ctx[15], /*imageId*/ ctx[0], /*loading*/ ctx[18], /*tinyImageExtensionsShort*/ ctx[16], /*tinyImageSize*/ ctx[17])[/*i*/ ctx[26]]);
    			add_location(source, file$g, 60, 6, 2438);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, source, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*imageExtensionsShort*/ 16384 && source_type_value !== (source_type_value = "image/" + /*ext*/ ctx[24])) {
    				attr_dev(source, "type", source_type_value);
    			}

    			if (dirty & /*sizes*/ 2) {
    				attr_dev(source, "sizes", /*sizes*/ ctx[1]);
    			}

    			if (dirty & /*imageDirectory, imageExtensionsShort, imageSizes, imageId, loading, tinyImageExtensionsShort, tinyImageSize*/ 516097 && source_srcset_value !== (source_srcset_value = /*resolveSrcsets*/ ctx[19](/*imageDirectory*/ ctx[13], /*imageExtensionsShort*/ ctx[14], /*imageSizes*/ ctx[15], /*imageId*/ ctx[0], /*loading*/ ctx[18], /*tinyImageExtensionsShort*/ ctx[16], /*tinyImageSize*/ ctx[17])[/*i*/ ctx[26]])) {
    				attr_dev(source, "srcset", source_srcset_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(source);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$a.name,
    		type: "each",
    		source: "(60:4) {#each imageExtensionsShort.filter(v => v != 'svg') as ext, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$i(ctx) {
    	let show_if;
    	let if_block_anchor;

    	function select_block_type(ctx, dirty) {
    		if (show_if == null || dirty & /*imageExtensionsShort*/ 16384) show_if = !!/*imageExtensionsShort*/ ctx[14].includes("svg");
    		if (show_if) return create_if_block$c;
    		return create_else_block$6;
    	}

    	let current_block_type = select_block_type(ctx, -1);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function getSafeImageExtensionIndex(imageExtensionsShort) {
    	return imageExtensionsShort.findIndex(i => i == "jpg" || i == "png") || 0;
    }

    const func$2 = v => v != "svg";
    const func_1$1 = v => v != "svg";

    function instance$i($$self, $$props, $$invalidate) {
    	let $sync;
    	validate_store(sync, "sync");
    	component_subscribe($$self, sync, $$value => $$invalidate(23, $sync = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Picture", slots, []);

    	let { contents = {} } = $$props,
    		{ imageId } = $$props,
    		{ sizes = "100vw" } = $$props,
    		{ alt = `${imageId}の画像` } = $$props,
    		{ width } = $$props,
    		{ height } = $$props,
    		{ pictureClass } = $$props,
    		{ imgClass } = $$props,
    		{ click } = $$props,
    		{ title } = $$props,
    		{ style } = $$props,
    		{ useTiny } = $$props,
    		{ loadLazy = true } = $$props,
    		{ groupId } = $$props,
    		{ groupImagesCount } = $$props,
    		{ imageDirectory = contents.imageDirectory || globalSettings.imageDirectory } = $$props,
    		{ imageExtensionsShort = contents.imageExtensionsShort || globalSettings.imageExtensionsShort } = $$props,
    		{ imageSizes = contents.imageSizes || globalSettings.imageSizes } = $$props,
    		{ tinyImageExtensionsShort = contents.tinyImageExtensionsShort || globalSettings.tinyImageExtensionsShort } = $$props,
    		{ tinyImageSize = contents.tinyImageSize || globalSettings.tinyImageSize } = $$props;

    	let loading = true;
    	addEventListener("load", () => $$invalidate(18, loading = false));

    	function resolveSrcsets(
    		imageDirectory,
    	imageExtensionsShort,
    	imageSizes,
    	imageId,
    	loading,
    	tinyImageExtensionsShort,
    	tinyImageSize
    	) {
    		return (loading && useTiny
    		? tinyImageExtensionsShort
    		: imageExtensionsShort).map(ext => {
    			if (loading && useTiny) {
    				return `${imageDirectory}${imageId}@${tinyImageSize}w.${ext} ${tinyImageSize}w`;
    			} else {
    				return imageSizes.map(size => `${imageDirectory}${imageId}@${size}w.${ext} ${size}w`);
    			}
    		});
    	}

    	function loadEventDispatcher(groupId, groupImagesCount) {
    		if (groupId) {
    			set_store_value(sync, $sync.loadImagesCount = $sync.loadImagesCount || {}, $sync);

    			set_store_value(
    				sync,
    				$sync.loadImagesCount[groupId] = $sync.loadImagesCount[groupId] > 0
    				? $sync.loadImagesCount[groupId] + 1
    				: 1,
    				$sync
    			);

    			if ($sync.loadImagesCount[groupId] >= groupImagesCount && !$sync.loadEventDispatched) {
    				window.dispatchEvent(new CustomEvent("pictureGroup_load", { detail: groupId }));
    				set_store_value(sync, $sync.loadEventDispatched = true, $sync);
    			}
    		}
    	}

    	const writable_props = [
    		"contents",
    		"imageId",
    		"sizes",
    		"alt",
    		"width",
    		"height",
    		"pictureClass",
    		"imgClass",
    		"click",
    		"title",
    		"style",
    		"useTiny",
    		"loadLazy",
    		"groupId",
    		"groupImagesCount",
    		"imageDirectory",
    		"imageExtensionsShort",
    		"imageSizes",
    		"tinyImageExtensionsShort",
    		"tinyImageSize"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Picture> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("contents" in $$props) $$invalidate(21, contents = $$props.contents);
    		if ("imageId" in $$props) $$invalidate(0, imageId = $$props.imageId);
    		if ("sizes" in $$props) $$invalidate(1, sizes = $$props.sizes);
    		if ("alt" in $$props) $$invalidate(2, alt = $$props.alt);
    		if ("width" in $$props) $$invalidate(3, width = $$props.width);
    		if ("height" in $$props) $$invalidate(4, height = $$props.height);
    		if ("pictureClass" in $$props) $$invalidate(5, pictureClass = $$props.pictureClass);
    		if ("imgClass" in $$props) $$invalidate(6, imgClass = $$props.imgClass);
    		if ("click" in $$props) $$invalidate(7, click = $$props.click);
    		if ("title" in $$props) $$invalidate(8, title = $$props.title);
    		if ("style" in $$props) $$invalidate(9, style = $$props.style);
    		if ("useTiny" in $$props) $$invalidate(22, useTiny = $$props.useTiny);
    		if ("loadLazy" in $$props) $$invalidate(10, loadLazy = $$props.loadLazy);
    		if ("groupId" in $$props) $$invalidate(11, groupId = $$props.groupId);
    		if ("groupImagesCount" in $$props) $$invalidate(12, groupImagesCount = $$props.groupImagesCount);
    		if ("imageDirectory" in $$props) $$invalidate(13, imageDirectory = $$props.imageDirectory);
    		if ("imageExtensionsShort" in $$props) $$invalidate(14, imageExtensionsShort = $$props.imageExtensionsShort);
    		if ("imageSizes" in $$props) $$invalidate(15, imageSizes = $$props.imageSizes);
    		if ("tinyImageExtensionsShort" in $$props) $$invalidate(16, tinyImageExtensionsShort = $$props.tinyImageExtensionsShort);
    		if ("tinyImageSize" in $$props) $$invalidate(17, tinyImageSize = $$props.tinyImageSize);
    	};

    	$$self.$capture_state = () => ({
    		sync,
    		globalSettings,
    		contents,
    		imageId,
    		sizes,
    		alt,
    		width,
    		height,
    		pictureClass,
    		imgClass,
    		click,
    		title,
    		style,
    		useTiny,
    		loadLazy,
    		groupId,
    		groupImagesCount,
    		imageDirectory,
    		imageExtensionsShort,
    		imageSizes,
    		tinyImageExtensionsShort,
    		tinyImageSize,
    		loading,
    		resolveSrcsets,
    		getSafeImageExtensionIndex,
    		loadEventDispatcher,
    		$sync
    	});

    	$$self.$inject_state = $$props => {
    		if ("contents" in $$props) $$invalidate(21, contents = $$props.contents);
    		if ("imageId" in $$props) $$invalidate(0, imageId = $$props.imageId);
    		if ("sizes" in $$props) $$invalidate(1, sizes = $$props.sizes);
    		if ("alt" in $$props) $$invalidate(2, alt = $$props.alt);
    		if ("width" in $$props) $$invalidate(3, width = $$props.width);
    		if ("height" in $$props) $$invalidate(4, height = $$props.height);
    		if ("pictureClass" in $$props) $$invalidate(5, pictureClass = $$props.pictureClass);
    		if ("imgClass" in $$props) $$invalidate(6, imgClass = $$props.imgClass);
    		if ("click" in $$props) $$invalidate(7, click = $$props.click);
    		if ("title" in $$props) $$invalidate(8, title = $$props.title);
    		if ("style" in $$props) $$invalidate(9, style = $$props.style);
    		if ("useTiny" in $$props) $$invalidate(22, useTiny = $$props.useTiny);
    		if ("loadLazy" in $$props) $$invalidate(10, loadLazy = $$props.loadLazy);
    		if ("groupId" in $$props) $$invalidate(11, groupId = $$props.groupId);
    		if ("groupImagesCount" in $$props) $$invalidate(12, groupImagesCount = $$props.groupImagesCount);
    		if ("imageDirectory" in $$props) $$invalidate(13, imageDirectory = $$props.imageDirectory);
    		if ("imageExtensionsShort" in $$props) $$invalidate(14, imageExtensionsShort = $$props.imageExtensionsShort);
    		if ("imageSizes" in $$props) $$invalidate(15, imageSizes = $$props.imageSizes);
    		if ("tinyImageExtensionsShort" in $$props) $$invalidate(16, tinyImageExtensionsShort = $$props.tinyImageExtensionsShort);
    		if ("tinyImageSize" in $$props) $$invalidate(17, tinyImageSize = $$props.tinyImageSize);
    		if ("loading" in $$props) $$invalidate(18, loading = $$props.loading);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		imageId,
    		sizes,
    		alt,
    		width,
    		height,
    		pictureClass,
    		imgClass,
    		click,
    		title,
    		style,
    		loadLazy,
    		groupId,
    		groupImagesCount,
    		imageDirectory,
    		imageExtensionsShort,
    		imageSizes,
    		tinyImageExtensionsShort,
    		tinyImageSize,
    		loading,
    		resolveSrcsets,
    		loadEventDispatcher,
    		contents,
    		useTiny
    	];
    }

    class Picture extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$i, create_fragment$i, safe_not_equal, {
    			contents: 21,
    			imageId: 0,
    			sizes: 1,
    			alt: 2,
    			width: 3,
    			height: 4,
    			pictureClass: 5,
    			imgClass: 6,
    			click: 7,
    			title: 8,
    			style: 9,
    			useTiny: 22,
    			loadLazy: 10,
    			groupId: 11,
    			groupImagesCount: 12,
    			imageDirectory: 13,
    			imageExtensionsShort: 14,
    			imageSizes: 15,
    			tinyImageExtensionsShort: 16,
    			tinyImageSize: 17
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Picture",
    			options,
    			id: create_fragment$i.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*imageId*/ ctx[0] === undefined && !("imageId" in props)) {
    			console.warn("<Picture> was created without expected prop 'imageId'");
    		}

    		if (/*width*/ ctx[3] === undefined && !("width" in props)) {
    			console.warn("<Picture> was created without expected prop 'width'");
    		}

    		if (/*height*/ ctx[4] === undefined && !("height" in props)) {
    			console.warn("<Picture> was created without expected prop 'height'");
    		}

    		if (/*pictureClass*/ ctx[5] === undefined && !("pictureClass" in props)) {
    			console.warn("<Picture> was created without expected prop 'pictureClass'");
    		}

    		if (/*imgClass*/ ctx[6] === undefined && !("imgClass" in props)) {
    			console.warn("<Picture> was created without expected prop 'imgClass'");
    		}

    		if (/*click*/ ctx[7] === undefined && !("click" in props)) {
    			console.warn("<Picture> was created without expected prop 'click'");
    		}

    		if (/*title*/ ctx[8] === undefined && !("title" in props)) {
    			console.warn("<Picture> was created without expected prop 'title'");
    		}

    		if (/*style*/ ctx[9] === undefined && !("style" in props)) {
    			console.warn("<Picture> was created without expected prop 'style'");
    		}

    		if (/*useTiny*/ ctx[22] === undefined && !("useTiny" in props)) {
    			console.warn("<Picture> was created without expected prop 'useTiny'");
    		}

    		if (/*groupId*/ ctx[11] === undefined && !("groupId" in props)) {
    			console.warn("<Picture> was created without expected prop 'groupId'");
    		}

    		if (/*groupImagesCount*/ ctx[12] === undefined && !("groupImagesCount" in props)) {
    			console.warn("<Picture> was created without expected prop 'groupImagesCount'");
    		}
    	}

    	get contents() {
    		throw new Error("<Picture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set contents(value) {
    		throw new Error("<Picture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get imageId() {
    		throw new Error("<Picture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set imageId(value) {
    		throw new Error("<Picture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get sizes() {
    		throw new Error("<Picture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set sizes(value) {
    		throw new Error("<Picture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get alt() {
    		throw new Error("<Picture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set alt(value) {
    		throw new Error("<Picture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get width() {
    		throw new Error("<Picture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set width(value) {
    		throw new Error("<Picture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get height() {
    		throw new Error("<Picture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set height(value) {
    		throw new Error("<Picture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get pictureClass() {
    		throw new Error("<Picture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pictureClass(value) {
    		throw new Error("<Picture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get imgClass() {
    		throw new Error("<Picture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set imgClass(value) {
    		throw new Error("<Picture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get click() {
    		throw new Error("<Picture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set click(value) {
    		throw new Error("<Picture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get title() {
    		throw new Error("<Picture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<Picture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<Picture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<Picture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get useTiny() {
    		throw new Error("<Picture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set useTiny(value) {
    		throw new Error("<Picture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get loadLazy() {
    		throw new Error("<Picture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set loadLazy(value) {
    		throw new Error("<Picture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get groupId() {
    		throw new Error("<Picture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set groupId(value) {
    		throw new Error("<Picture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get groupImagesCount() {
    		throw new Error("<Picture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set groupImagesCount(value) {
    		throw new Error("<Picture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get imageDirectory() {
    		throw new Error("<Picture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set imageDirectory(value) {
    		throw new Error("<Picture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get imageExtensionsShort() {
    		throw new Error("<Picture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set imageExtensionsShort(value) {
    		throw new Error("<Picture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get imageSizes() {
    		throw new Error("<Picture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set imageSizes(value) {
    		throw new Error("<Picture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tinyImageExtensionsShort() {
    		throw new Error("<Picture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tinyImageExtensionsShort(value) {
    		throw new Error("<Picture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tinyImageSize() {
    		throw new Error("<Picture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tinyImageSize(value) {
    		throw new Error("<Picture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/nav-header.svelte generated by Svelte v3.38.2 */

    const { Object: Object_1$2, window: window_1 } = globals;
    const file$f = "src/components/nav-header.svelte";

    function get_each_context$9(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[23] = list[i];
    	return child_ctx;
    }

    // (303:4) {#each contents.items as item}
    function create_each_block$9(ctx) {
    	let div;
    	let t_value = /*item*/ ctx[23].label + "";
    	let t;
    	let mounted;
    	let dispose;

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[14](/*item*/ ctx[23]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text$1(t_value);
    			attr_dev(div, "class", "header_navigation_list_items svelte-x3s4f9");
    			add_location(div, file$f, 303, 6, 14072);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", click_handler_1, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*contents*/ 1 && t_value !== (t_value = /*item*/ ctx[23].label + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$9.name,
    		type: "each",
    		source: "(303:4) {#each contents.items as item}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$h(ctx) {
    	let header_1;
    	let picture;
    	let t0;
    	let input;
    	let t1;
    	let label0;
    	let div0;
    	let svg0;
    	let path0;
    	let path1;
    	let t2;
    	let nav;
    	let label1;
    	let span2;
    	let span0;
    	let t4;
    	let span1;
    	let t6;
    	let svg1;
    	let path2;
    	let path3;
    	let t7;
    	let div1;
    	let t8;
    	let t9;
    	let div2;
    	let svg2;
    	let t10;
    	let div3;
    	let t11;
    	let div4;
    	let current;
    	let mounted;
    	let dispose;

    	picture = new Picture({
    			props: {
    				click: /*func*/ ctx[8],
    				title: "クリックすると" + (location.pathname == "/" && location.hash == ""
    				? "ページの先頭"
    				: "トップページ") + "に移動します",
    				pictureClass: "header_picture",
    				imgClass: "header_logo",
    				contents: /*contents*/ ctx[0],
    				globalSettings: /*globalSettings*/ ctx[1],
    				imageId: /*contents*/ ctx[0].imageId,
    				width: /*contents*/ ctx[0].aspectRatio.width,
    				height: /*contents*/ ctx[0].aspectRatio.height
    			},
    			$$inline: true
    		});

    	let each_value = /*contents*/ ctx[0].items;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$9(get_each_context$9(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			header_1 = element("header");
    			create_component(picture.$$.fragment);
    			t0 = space();
    			input = element("input");
    			t1 = space();
    			label0 = element("label");
    			div0 = element("div");
    			svg0 = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			t2 = space();
    			nav = element("nav");
    			label1 = element("label");
    			span2 = element("span");
    			span0 = element("span");
    			span0.textContent = "ナビゲーション";
    			t4 = text$1("を");
    			span1 = element("span");
    			span1.textContent = "閉じる";
    			t6 = space();
    			svg1 = svg_element("svg");
    			path2 = svg_element("path");
    			path3 = svg_element("path");
    			t7 = space();
    			div1 = element("div");
    			t8 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t9 = space();
    			div2 = element("div");
    			svg2 = svg_element("svg");
    			t10 = space();
    			div3 = element("div");
    			t11 = space();
    			div4 = element("div");
    			attr_dev(input, "type", "checkbox");
    			attr_dev(input, "class", "ui_button header_button_checkbox svelte-x3s4f9");
    			input.checked = true;
    			attr_dev(input, "name", "header_button_checkbox");
    			attr_dev(input, "id", "header_button_checkbox");
    			add_location(input, file$f, 282, 2, 12585);
    			attr_dev(path0, "d", "M0 0h24v24H0z");
    			attr_dev(path0, "fill", "none");
    			attr_dev(path0, "class", "svelte-x3s4f9");
    			add_location(path0, file$f, 286, 8, 13080);
    			attr_dev(path1, "d", "M12 2L4.5 20.29l.71.71L12 18l6.79 3 .71-.71z");
    			attr_dev(path1, "stroke", "#444");
    			attr_dev(path1, "class", "svelte-x3s4f9");
    			add_location(path1, file$f, 287, 8, 13127);
    			attr_dev(svg0, "class", "header_button_svg svelte-x3s4f9");
    			attr_dev(svg0, "viewBox", "0 0 24 24");
    			add_location(svg0, file$f, 285, 6, 13020);
    			attr_dev(div0, "class", "header_button_svg-wrapper svelte-x3s4f9");
    			set_style(div0, "--arrow-x", /*gameProps*/ ctx[4].arrow.x + "px");
    			set_style(div0, "--arrow-y", /*gameProps*/ ctx[4].arrow.y + "px");
    			set_style(div0, "--arrow-r", /*gameProps*/ ctx[4].arrow.r + "deg");
    			add_location(div0, file$f, 284, 4, 12832);
    			attr_dev(label0, "for", "header_button_checkbox");
    			attr_dev(label0, "class", "header_button svelte-x3s4f9");
    			attr_dev(label0, "title", "クリックするとナビゲーションを開閉できます");
    			add_location(label0, file$f, 283, 2, 12739);
    			attr_dev(span0, "class", "break-scope svelte-x3s4f9");
    			add_location(span0, file$f, 294, 10, 13455);
    			attr_dev(span1, "class", "break-scope svelte-x3s4f9");
    			add_location(span1, file$f, 294, 51, 13496);
    			attr_dev(span2, "class", "header_navigation_close_button_text svelte-x3s4f9");
    			add_location(span2, file$f, 293, 8, 13394);
    			attr_dev(path2, "d", "M0 0h24v24H0z");
    			attr_dev(path2, "fill", "none");
    			attr_dev(path2, "class", "svelte-x3s4f9");
    			add_location(path2, file$f, 297, 10, 13636);
    			attr_dev(path3, "d", "M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z");
    			attr_dev(path3, "class", "svelte-x3s4f9");
    			add_location(path3, file$f, 298, 10, 13684);
    			attr_dev(svg1, "class", "header_navigation_close_button_svg svelte-x3s4f9");
    			attr_dev(svg1, "viewBox", "0 0 24 24");
    			add_location(svg1, file$f, 296, 8, 13557);
    			attr_dev(label1, "for", "header_button_checkbox");
    			attr_dev(label1, "class", "header_navigation_close_button svelte-x3s4f9");
    			add_location(label1, file$f, 292, 4, 13310);
    			attr_dev(div1, "class", "header_close_area svelte-x3s4f9");
    			add_location(div1, file$f, 301, 4, 13904);
    			attr_dev(svg2, "class", "header_button_svg svelte-x3s4f9");
    			attr_dev(svg2, "viewBox", "0 0 24 24");
    			attr_dev(svg2, "fill", "white");
    			add_location(svg2, file$f, 306, 6, 14235);
    			attr_dev(div2, "class", "header_button_dummy svelte-x3s4f9");
    			add_location(div2, file$f, 305, 4, 14195);
    			attr_dev(nav, "class", "header_navigation svelte-x3s4f9");
    			add_location(nav, file$f, 291, 2, 13274);

    			attr_dev(header_1, "title", window.CSS.supports(`(backdrop-filter:blur(10px)) or (-webkit-backdrop-filter:blur(10px)) or (-moz-backdrop-filter:blur(10px)`)
    			? ""
    			: "Firefoxをお使いの方はabout:configを開いてbackdrop-filterを有効にすると他のブラウザーと同じ見た目にすることができます。");

    			set_style(header_1, "--itemsCount", /*contents*/ ctx[0].items.length);
    			attr_dev(header_1, "class", "svelte-x3s4f9");
    			add_location(header_1, file$f, 280, 0, 11872);
    			attr_dev(div3, "class", "game-background svelte-x3s4f9");
    			set_style(div3, "--bg", /*gameProps*/ ctx[4].hit ? "#f73f22" : "#000");
    			add_location(div3, file$f, 311, 0, 14343);
    			attr_dev(div4, "class", "svelte-x3s4f9");
    			add_location(div4, file$f, 312, 0, 14470);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, header_1, anchor);
    			mount_component(picture, header_1, null);
    			append_dev(header_1, t0);
    			append_dev(header_1, input);
    			/*input_binding*/ ctx[9](input);
    			append_dev(header_1, t1);
    			append_dev(header_1, label0);
    			append_dev(label0, div0);
    			append_dev(div0, svg0);
    			append_dev(svg0, path0);
    			append_dev(svg0, path1);
    			/*path1_binding*/ ctx[10](path1);
    			/*div0_binding*/ ctx[11](div0);
    			append_dev(header_1, t2);
    			append_dev(header_1, nav);
    			append_dev(nav, label1);
    			append_dev(label1, span2);
    			append_dev(span2, span0);
    			append_dev(span2, t4);
    			append_dev(span2, span1);
    			append_dev(label1, t6);
    			append_dev(label1, svg1);
    			append_dev(svg1, path2);
    			append_dev(svg1, path3);
    			append_dev(nav, t7);
    			append_dev(nav, div1);
    			append_dev(nav, t8);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(nav, null);
    			}

    			append_dev(nav, t9);
    			append_dev(nav, div2);
    			append_dev(div2, svg2);
    			/*header_1_binding*/ ctx[15](header_1);
    			insert_dev(target, t10, anchor);
    			insert_dev(target, div3, anchor);
    			/*div3_binding*/ ctx[16](div3);
    			insert_dev(target, t11, anchor);
    			insert_dev(target, div4, anchor);
    			/*div4_binding*/ ctx[17](div4);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(window_1, "keydown", /*handleKeyDown*/ ctx[6], false, false, false),
    					listen_dev(window_1, "keyup", /*keyup_handler*/ ctx[7], false, false, false),
    					listen_dev(div1, "click", /*click_handler*/ ctx[12], false, false, false),
    					listen_dev(div1, "touchstart", /*touchstart_handler*/ ctx[13], { passive: true }, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			const picture_changes = {};
    			if (dirty & /*contents*/ 1) picture_changes.contents = /*contents*/ ctx[0];
    			if (dirty & /*globalSettings*/ 2) picture_changes.globalSettings = /*globalSettings*/ ctx[1];
    			if (dirty & /*contents*/ 1) picture_changes.imageId = /*contents*/ ctx[0].imageId;
    			if (dirty & /*contents*/ 1) picture_changes.width = /*contents*/ ctx[0].aspectRatio.width;
    			if (dirty & /*contents*/ 1) picture_changes.height = /*contents*/ ctx[0].aspectRatio.height;
    			picture.$set(picture_changes);

    			if (!current || dirty & /*gameProps*/ 16) {
    				set_style(div0, "--arrow-x", /*gameProps*/ ctx[4].arrow.x + "px");
    			}

    			if (!current || dirty & /*gameProps*/ 16) {
    				set_style(div0, "--arrow-y", /*gameProps*/ ctx[4].arrow.y + "px");
    			}

    			if (!current || dirty & /*gameProps*/ 16) {
    				set_style(div0, "--arrow-r", /*gameProps*/ ctx[4].arrow.r + "deg");
    			}

    			if (dirty & /*triggerSmoothScroll, contents*/ 33) {
    				each_value = /*contents*/ ctx[0].items;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$9(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$9(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(nav, t9);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (!current || dirty & /*contents*/ 1) {
    				set_style(header_1, "--itemsCount", /*contents*/ ctx[0].items.length);
    			}

    			if (!current || dirty & /*gameProps*/ 16) {
    				set_style(div3, "--bg", /*gameProps*/ ctx[4].hit ? "#f73f22" : "#000");
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(picture.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(picture.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(header_1);
    			destroy_component(picture);
    			/*input_binding*/ ctx[9](null);
    			/*path1_binding*/ ctx[10](null);
    			/*div0_binding*/ ctx[11](null);
    			destroy_each(each_blocks, detaching);
    			/*header_1_binding*/ ctx[15](null);
    			if (detaching) detach_dev(t10);
    			if (detaching) detach_dev(div3);
    			/*div3_binding*/ ctx[16](null);
    			if (detaching) detach_dev(t11);
    			if (detaching) detach_dev(div4);
    			/*div4_binding*/ ctx[17](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const scroll_duration = 400; //ms

    function easeInOutCubic(x) {
    	return x < 0.5
    	? 4 * x * x * x
    	: 1 - Math.pow(-2 * x + 2, 3) / 2;
    }

    function map_range(value, low1, high1, low2, high2) {
    	return low2 + (high2 - low2) * (value - low1) / (high1 - low1);
    }

    function instance$h($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Nav_header", slots, []);
    	let { contents } = $$props, { globalSettings } = $$props;
    	let header, checkbox;
    	let abort_scroll = false;

    	function smoothScroll(time, start_time, origin, destination) {
    		if (time == start_time) {
    			$$invalidate(3, checkbox.checked = false, checkbox);
    			requestAnimationFrame(time => smoothScroll(time, start_time, origin, destination));
    			return;
    		}

    		if (abort_scroll) {
    			abort_scroll = false;
    			return;
    		}

    		scrollTo({
    			top: origin + (destination || origin * -1) * easeInOutCubic((time - start_time) / scroll_duration)
    		});

    		if (time - start_time > scroll_duration) return;
    		requestAnimationFrame(time => smoothScroll(time, start_time, origin, destination));
    	}

    	function triggerSmoothScroll(target) {
    		if (target != "top") {
    			var targetElement = document.getElementById(target);
    		}

    		requestAnimationFrame(time => smoothScroll(time, time, window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0, target == "top"
    		? 0
    		: targetElement.getBoundingClientRect().top - header.clientHeight));
    	}

    	const gameProps = {
    		engaged: false,
    		startTime: null,
    		lastTime: null,
    		hit: false,
    		wasHit: false,
    		keysPressed: { w: false, a: false, s: false, d: false },
    		command: [
    			"ArrowUp",
    			"ArrowUp",
    			"ArrowDown",
    			"ArrowDown",
    			"ArrowLeft",
    			"ArrowRight",
    			"ArrowLeft",
    			"ArrowRight",
    			"b",
    			"a"
    		],
    		commandsCount: 0,
    		backgroundElement: null,
    		debug: null,
    		field: {
    			width: 0,
    			height: 0,
    			origin: { x: null, y: null }
    		},
    		arrow: {
    			element: null,
    			svgElement: null,
    			width: 0,
    			height: 0,
    			speed: 20,
    			collision: null,
    			x: 0,
    			y: 0,
    			r: 0,
    			offset: { x: null, y: null }
    		},
    		obstacles: {
    			lastAdded: null,
    			interval: 500,
    			duration: 2000,
    			width: 200,
    			height: 200,
    			parent: null,
    			elements: []
    		},
    		launch: {
    			launching: false,
    			launched: false,
    			distance: 0,
    			duration: 2000,
    			turn: {
    				turning: false,
    				startTime: null,
    				startPoint: { x: 0, y: 0 },
    				radius: 0
    			}
    		}
    	};

    	const customEasing = src(0.25, -0.4, 0.75, 1);

    	function handleKeyDown(e) {
    		if (gameProps.engaged) {
    			if (Object.keys(gameProps.keysPressed).includes(e.key)) {
    				$$invalidate(4, gameProps.keysPressed[e.key] = true, gameProps);

    				if (gameProps.keysPressed.w && gameProps.keysPressed.s) {
    					switch (e.key) {
    						case "w":
    							$$invalidate(4, gameProps.keysPressed.s = false, gameProps);
    							break;
    						case "s":
    							$$invalidate(4, gameProps.keysPressed.w = false, gameProps);
    							break;
    					}
    				}

    				if (gameProps.keysPressed.a && gameProps.keysPressed.d) {
    					switch (e.key) {
    						case "a":
    							$$invalidate(4, gameProps.keysPressed.d = false, gameProps);
    							break;
    						case "d":
    							$$invalidate(4, gameProps.keysPressed.a = false, gameProps);
    							break;
    					}
    				}
    			}
    		} else if (e.key == gameProps.command[gameProps.commandsCount] && checkbox.checked) {
    			if ($$invalidate(4, ++gameProps.commandsCount, gameProps) == gameProps.command.length) {
    				requestAnimationFrame(gameInit);
    				$$invalidate(4, gameProps.engaged = true, gameProps);
    				gameProps.backgroundElement.classList.add("shown");
    			}
    		} else $$invalidate(4, gameProps.commandsCount = 0, gameProps);
    	}

    	onMount(() => {
    		$$invalidate(3, checkbox = document.getElementById("header_button_checkbox"));

    		setTimeout(
    			() => {
    				$$invalidate(3, checkbox.checked = false, checkbox);
    			},
    			2000
    		);
    	});

    	function gameInit() {
    		$$invalidate(4, gameProps.arrow.width = gameProps.arrow.svgElement.getBoundingClientRect().width, gameProps);
    		$$invalidate(4, gameProps.arrow.height = gameProps.arrow.svgElement.getBoundingClientRect().height, gameProps);
    		$$invalidate(4, gameProps.arrow.offset.x = gameProps.arrow.svgElement.getBoundingClientRect().x, gameProps);
    		$$invalidate(4, gameProps.arrow.offset.y = gameProps.arrow.svgElement.getBoundingClientRect().y, gameProps);

    		$$invalidate(
    			4,
    			gameProps.arrow.collision = new SAT.Polygon(new SAT.Vector(),
    			[
    					new SAT.Vector(),
    					new SAT.Vector(gameProps.arrow.width, gameProps.arrow.height / 2),
    					new SAT.Vector(0, gameProps.arrow.height)
    				]),
    			gameProps
    		);

    		$$invalidate(4, gameProps.field.width = innerWidth, gameProps);
    		$$invalidate(4, gameProps.field.height = innerHeight, gameProps);
    		$$invalidate(4, gameProps.field.origin.x = gameProps.field.width - gameProps.arrow.x, gameProps);
    		$$invalidate(4, gameProps.field.origin.y = gameProps.field.height / 2, gameProps);
    		$$invalidate(4, gameProps.launch.turn.radius = (gameProps.field.height - gameProps.arrow.offset.y) / 4, gameProps);
    		$$invalidate(4, gameProps.launch.turn.startPoint.x = -(gameProps.field.width - (gameProps.field.width - gameProps.arrow.offset.x) * 2 - gameProps.launch.turn.radius), gameProps);
    		$$invalidate(4, gameProps.launch.turn.startPoint.y = gameProps.arrow.offset.y, gameProps);
    		$$invalidate(4, gameProps.launch.distance = gameProps.launch.turn.radius * Math.PI + Math.abs(gameProps.launch.turn.startPoint.x), gameProps);
    		$$invalidate(4, gameProps.obstacles.width = gameProps.field.width / 7, gameProps);
    		$$invalidate(4, gameProps.obstacles.height = gameProps.field.width / 7, gameProps);
    		requestAnimationFrame(gameUpdate);
    	}

    	function gameUpdate(time) {
    		$$invalidate(4, gameProps.wasHit = gameProps.hit, gameProps);
    		$$invalidate(4, gameProps.hit = false, gameProps);

    		if (gameProps.startTime == null) {
    			$$invalidate(4, gameProps.startTime = time, gameProps);
    		}

    		if (!gameProps.launch.launched) {
    			if (time - gameProps.startTime < gameProps.launch.duration) {
    				if (!gameProps.launch.turn.turning) {
    					$$invalidate(4, gameProps.arrow.x = -(customEasing((time - gameProps.startTime) / gameProps.launch.duration) * gameProps.launch.distance), gameProps);

    					if (gameProps.arrow.x < gameProps.launch.turn.startPoint.x) {
    						$$invalidate(4, gameProps.launch.turn.turning = true, gameProps);
    						$$invalidate(4, gameProps.launch.turn.startTime = time, gameProps);
    					}
    				} else {
    					$$invalidate(4, gameProps.arrow.x = Math.cos(map_range(customEasing((time - gameProps.startTime) / gameProps.launch.duration), customEasing((gameProps.launch.turn.startTime - gameProps.startTime) / gameProps.launch.duration), 1, 0.5, 1.5) * Math.PI) * gameProps.launch.turn.radius + gameProps.launch.turn.startPoint.x, gameProps);
    					$$invalidate(4, gameProps.arrow.y = Math.sin(map_range(customEasing((time - gameProps.startTime) / gameProps.launch.duration), customEasing((gameProps.launch.turn.startTime - gameProps.startTime) / gameProps.launch.duration), 1, 0.5, 1.5) * Math.PI) * -gameProps.launch.turn.radius + gameProps.launch.turn.startPoint.y + gameProps.launch.turn.radius, gameProps);
    					$$invalidate(4, gameProps.arrow.r = map_range(customEasing((time - gameProps.startTime) / gameProps.launch.duration), customEasing((gameProps.launch.turn.startTime - gameProps.startTime) / gameProps.launch.duration), 1, 0, -180), gameProps);
    				}
    			} else {
    				$$invalidate(4, gameProps.launch.launched = true, gameProps);
    				gameProps.arrow.collision.translate(gameProps.arrow.svgElement.getBoundingClientRect().x, gameProps.arrow.svgElement.getBoundingClientRect().y);
    			}
    		} else {
    			const delta = gameProps.arrow.speed * (time - gameProps.lastTime) / 60;

    			if (gameProps.keysPressed.w) {
    				const deltaFixed = delta - (gameProps.arrow.collision.calcPoints[0].y - delta < 0
    				? gameProps.arrow.speed
    				: 0);

    				$$invalidate(4, gameProps.arrow.y -= deltaFixed, gameProps);
    				gameProps.arrow.collision.translate(0, -deltaFixed);
    			}

    			if (gameProps.keysPressed.a) {
    				const deltaFixed = delta - (gameProps.arrow.collision.calcPoints[0].x - delta < 0
    				? gameProps.arrow.speed
    				: 0);

    				$$invalidate(4, gameProps.arrow.x -= deltaFixed, gameProps);
    				gameProps.arrow.collision.translate(-deltaFixed, 0);
    			}

    			if (gameProps.keysPressed.s) {
    				const deltaFixed = delta - (gameProps.arrow.collision.calcPoints[2].y + delta > gameProps.field.height
    				? gameProps.arrow.speed
    				: 0);

    				$$invalidate(4, gameProps.arrow.y += deltaFixed, gameProps);
    				gameProps.arrow.collision.translate(0, deltaFixed);
    			}

    			if (gameProps.keysPressed.d) {
    				const deltaFixed = delta - (gameProps.arrow.collision.calcPoints[1].x + delta > gameProps.field.width
    				? gameProps.arrow.speed
    				: 0);

    				$$invalidate(4, gameProps.arrow.x += deltaFixed, gameProps);
    				gameProps.arrow.collision.translate(deltaFixed, 0);
    			}

    			if (gameProps.obstacles.lastAdded == null) $$invalidate(4, gameProps.obstacles.lastAdded = time - gameProps.obstacles.interval, gameProps);

    			if (time - gameProps.obstacles.lastAdded >= gameProps.obstacles.interval) {
    				const obstacle = {};
    				obstacle.element = document.createElement("div");
    				obstacle.element.classList.add("game-obstacle");
    				obstacle.element.style.setProperty("--gameFieldWidth", gameProps.field.width + "px");
    				obstacle.element.style.setProperty("--width", gameProps.obstacles.width + "px");
    				obstacle.element.style.setProperty("--height", gameProps.obstacles.height + "px");
    				obstacle.angle = Math.random() * 360 - 180;
    				obstacle.element.style.setProperty("--angle", obstacle.angle + "deg");
    				obstacle.rotation = Math.random() * 360 * 4 - 360 * 2;
    				obstacle.element.style.setProperty("--rotation", obstacle.rotation + "deg");
    				obstacle.startY = Math.random() * (gameProps.field.height + gameProps.obstacles.height) - gameProps.obstacles.height / 2;
    				obstacle.element.style.setProperty("--StartY", obstacle.startY + "px");
    				obstacle.endY = Math.random() * (gameProps.field.height + gameProps.obstacles.height) - gameProps.obstacles.height;
    				obstacle.element.style.setProperty("--EndY", obstacle.endY + "px");
    				obstacle.element.style.setProperty("--duration", gameProps.obstacles.duration + "ms");
    				obstacle.collision = new SAT.Box(new SAT.Vector(gameProps.field.width, obstacle.startY), gameProps.obstacles.width, gameProps.obstacles.height).toPolygon();
    				obstacle.collision.translate(-gameProps.obstacles.width / 2, -gameProps.obstacles.height / 2);
    				obstacle.collision.rotate(-1 * obstacle.angle * (Math.PI / 180));
    				obstacle.collision.translate(gameProps.obstacles.width / 2, gameProps.obstacles.height / 2);
    				$$invalidate(4, gameProps.obstacles.lastAdded = time, gameProps);
    				obstacle.addedAt = time;
    				obstacle.destroyAt = time + gameProps.obstacles.duration;
    				gameProps.obstacles.parent.appendChild(obstacle.element);
    				gameProps.obstacles.elements.push(obstacle);
    			}

    			gameProps.obstacles.elements.forEach(v => {
    				if (time > v.destroyAt) {
    					v.element.remove();
    					$$invalidate(4, gameProps.obstacles.elements = gameProps.obstacles.elements.filter(w => w !== v), gameProps);
    				}
    			});

    			gameProps.obstacles.elements.forEach(v => {
    				const transformRatio = (time - v.addedAt) / gameProps.obstacles.duration;
    				const timePassed = time - gameProps.lastTime;
    				v.collision.setOffset(new SAT.Vector(-transformRatio * (gameProps.field.width + gameProps.obstacles.width), transformRatio * (v.endY - v.startY)));
    				v.collision.translate(-gameProps.obstacles.width / 2, -gameProps.obstacles.height / 2);
    				v.collision.rotate(-timePassed * v.rotation);
    				v.collision.translate(gameProps.obstacles.width / 2, gameProps.obstacles.height / 2);
    				const tmp = gameProps.hit;
    				$$invalidate(4, gameProps.hit = (SAT.testPolygonPolygon(v.collision, gameProps.arrow.collision, new SAT.Response()) || gameProps.hit) && !gameProps.wasHit, gameProps);

    				if (gameProps.hit && !tmp) {
    					v.element.style.backgroundColor = "#f00";
    				}
    			});
    		}

    		$$invalidate(4, gameProps.lastTime = time, gameProps);
    		$$invalidate(3, checkbox.checked = true, checkbox);
    		requestAnimationFrame(gameUpdate);
    	}

    	const writable_props = ["contents", "globalSettings"];

    	Object_1$2.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Nav_header> was created with unknown prop '${key}'`);
    	});

    	const keyup_handler = e => {
    		if (Object.keys(gameProps.keysPressed).includes(e.key)) $$invalidate(4, gameProps.keysPressed[e.key] = false, gameProps);
    	};

    	const func = () => location.pathname == "/" && location.hash == ""
    	? triggerSmoothScroll("top")
    	: location.assign(location.origin);

    	function input_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			checkbox = $$value;
    			$$invalidate(3, checkbox);
    		});
    	}

    	function path1_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			gameProps.arrow.svgElement = $$value;
    			$$invalidate(4, gameProps);
    		});
    	}

    	function div0_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			gameProps.arrow.element = $$value;
    			$$invalidate(4, gameProps);
    		});
    	}

    	const click_handler = () => $$invalidate(3, checkbox.checked = false, checkbox);
    	const touchstart_handler = () => $$invalidate(3, checkbox.checked = false, checkbox);
    	const click_handler_1 = item => triggerSmoothScroll(item.id);

    	function header_1_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			header = $$value;
    			$$invalidate(2, header);
    		});
    	}

    	function div3_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			gameProps.backgroundElement = $$value;
    			$$invalidate(4, gameProps);
    		});
    	}

    	function div4_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			gameProps.obstacles.parent = $$value;
    			$$invalidate(4, gameProps);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ("contents" in $$props) $$invalidate(0, contents = $$props.contents);
    		if ("globalSettings" in $$props) $$invalidate(1, globalSettings = $$props.globalSettings);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		pop,
    		BezierEasing: src,
    		SAT,
    		Picture,
    		contents,
    		globalSettings,
    		easeInOutCubic,
    		header,
    		checkbox,
    		scroll_duration,
    		abort_scroll,
    		smoothScroll,
    		triggerSmoothScroll,
    		gameProps,
    		customEasing,
    		handleKeyDown,
    		gameInit,
    		map_range,
    		gameUpdate
    	});

    	$$self.$inject_state = $$props => {
    		if ("contents" in $$props) $$invalidate(0, contents = $$props.contents);
    		if ("globalSettings" in $$props) $$invalidate(1, globalSettings = $$props.globalSettings);
    		if ("header" in $$props) $$invalidate(2, header = $$props.header);
    		if ("checkbox" in $$props) $$invalidate(3, checkbox = $$props.checkbox);
    		if ("abort_scroll" in $$props) abort_scroll = $$props.abort_scroll;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		contents,
    		globalSettings,
    		header,
    		checkbox,
    		gameProps,
    		triggerSmoothScroll,
    		handleKeyDown,
    		keyup_handler,
    		func,
    		input_binding,
    		path1_binding,
    		div0_binding,
    		click_handler,
    		touchstart_handler,
    		click_handler_1,
    		header_1_binding,
    		div3_binding,
    		div4_binding
    	];
    }

    class Nav_header extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$h, create_fragment$h, safe_not_equal, { contents: 0, globalSettings: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Nav_header",
    			options,
    			id: create_fragment$h.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*contents*/ ctx[0] === undefined && !("contents" in props)) {
    			console.warn("<Nav_header> was created without expected prop 'contents'");
    		}

    		if (/*globalSettings*/ ctx[1] === undefined && !("globalSettings" in props)) {
    			console.warn("<Nav_header> was created without expected prop 'globalSettings'");
    		}
    	}

    	get contents() {
    		throw new Error("<Nav_header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set contents(value) {
    		throw new Error("<Nav_header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get globalSettings() {
    		throw new Error("<Nav_header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set globalSettings(value) {
    		throw new Error("<Nav_header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/button.svelte generated by Svelte v3.38.2 */
    const file$e = "src/components/button.svelte";

    // (63:0) {:else}
    function create_else_block_1$1(ctx) {
    	let button;
    	let button_class_value;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[11].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

    	const block = {
    		c: function create() {
    			button = element("button");
    			if (default_slot) default_slot.c();
    			attr_dev(button, "class", button_class_value = "" + ((/*disabled*/ ctx[2] ? "disabled" : "") + " " + /*Class*/ ctx[4] + " svelte-1vgogqf"));
    			attr_dev(button, "style", /*style*/ ctx[1]);
    			button.disabled = /*disabled*/ ctx[2];
    			add_location(button, file$e, 63, 2, 1695);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (default_slot) {
    				default_slot.m(button, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(!/*disabled*/ ctx[2]
    						? /*target*/ ctx[0]
    						: "javascript:void(0);")) (!/*disabled*/ ctx[2]
    						? /*target*/ ctx[0]
    						: "javascript:void(0);").apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
    				}
    			}

    			if (!current || dirty & /*disabled, Class*/ 20 && button_class_value !== (button_class_value = "" + ((/*disabled*/ ctx[2] ? "disabled" : "") + " " + /*Class*/ ctx[4] + " svelte-1vgogqf"))) {
    				attr_dev(button, "class", button_class_value);
    			}

    			if (!current || dirty & /*style*/ 2) {
    				attr_dev(button, "style", /*style*/ ctx[1]);
    			}

    			if (!current || dirty & /*disabled*/ 4) {
    				prop_dev(button, "disabled", /*disabled*/ ctx[2]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$1.name,
    		type: "else",
    		source: "(63:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (57:0) {#if isAnchor}
    function create_if_block$b(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_1$5, create_else_block$5];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*spaMode*/ ctx[3] && !/*disabled*/ ctx[2]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$b.name,
    		type: "if",
    		source: "(57:0) {#if isAnchor}",
    		ctx
    	});

    	return block;
    }

    // (60:2) {:else}
    function create_else_block$5(ctx) {
    	let a;
    	let a_href_value;
    	let a_class_value;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[11].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

    	const block = {
    		c: function create() {
    			a = element("a");
    			if (default_slot) default_slot.c();

    			attr_dev(a, "href", a_href_value = !/*disabled*/ ctx[2]
    			? /*target*/ ctx[0]
    			: "javascript:void(0);");

    			attr_dev(a, "class", a_class_value = "" + (/*Class*/ ctx[4] + " " + (/*disabled*/ ctx[2] ? "disabled" : "") + " svelte-1vgogqf"));
    			attr_dev(a, "style", /*style*/ ctx[1]);
    			attr_dev(a, "disabled", /*disabled*/ ctx[2]);
    			add_location(a, file$e, 60, 4, 1532);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);

    			if (default_slot) {
    				default_slot.m(a, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
    				}
    			}

    			if (!current || dirty & /*disabled, target*/ 5 && a_href_value !== (a_href_value = !/*disabled*/ ctx[2]
    			? /*target*/ ctx[0]
    			: "javascript:void(0);")) {
    				attr_dev(a, "href", a_href_value);
    			}

    			if (!current || dirty & /*Class, disabled*/ 20 && a_class_value !== (a_class_value = "" + (/*Class*/ ctx[4] + " " + (/*disabled*/ ctx[2] ? "disabled" : "") + " svelte-1vgogqf"))) {
    				attr_dev(a, "class", a_class_value);
    			}

    			if (!current || dirty & /*style*/ 2) {
    				attr_dev(a, "style", /*style*/ ctx[1]);
    			}

    			if (!current || dirty & /*disabled*/ 4) {
    				attr_dev(a, "disabled", /*disabled*/ ctx[2]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$5.name,
    		type: "else",
    		source: "(60:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (58:2) {#if spaMode && !disabled}
    function create_if_block_1$5(ctx) {
    	let a;
    	let a_href_value;
    	let a_class_value;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[11].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

    	const block = {
    		c: function create() {
    			a = element("a");
    			if (default_slot) default_slot.c();

    			attr_dev(a, "href", a_href_value = !/*disabled*/ ctx[2]
    			? /*target*/ ctx[0]
    			: "javascript:void(0);");

    			attr_dev(a, "class", a_class_value = "" + (/*Class*/ ctx[4] + " " + (/*disabled*/ ctx[2] ? "disabled" : "") + " svelte-1vgogqf"));
    			attr_dev(a, "style", /*style*/ ctx[1]);
    			attr_dev(a, "disabled", /*disabled*/ ctx[2]);
    			add_location(a, file$e, 58, 4, 1364);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);

    			if (default_slot) {
    				default_slot.m(a, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(link$1.call(null, a));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
    				}
    			}

    			if (!current || dirty & /*disabled, target*/ 5 && a_href_value !== (a_href_value = !/*disabled*/ ctx[2]
    			? /*target*/ ctx[0]
    			: "javascript:void(0);")) {
    				attr_dev(a, "href", a_href_value);
    			}

    			if (!current || dirty & /*Class, disabled*/ 20 && a_class_value !== (a_class_value = "" + (/*Class*/ ctx[4] + " " + (/*disabled*/ ctx[2] ? "disabled" : "") + " svelte-1vgogqf"))) {
    				attr_dev(a, "class", a_class_value);
    			}

    			if (!current || dirty & /*style*/ 2) {
    				attr_dev(a, "style", /*style*/ ctx[1]);
    			}

    			if (!current || dirty & /*disabled*/ 4) {
    				attr_dev(a, "disabled", /*disabled*/ ctx[2]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$5.name,
    		type: "if",
    		source: "(58:2) {#if spaMode && !disabled}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$g(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$b, create_else_block_1$1];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*isAnchor*/ ctx[5]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if_block.p(ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$g($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Button", slots, ['default']);

    	let { target } = $$props,
    		{ disabled = false } = $$props,
    		{ spaMode } = $$props,
    		{ marginLeft } = $$props,
    		{ marginRight } = $$props,
    		{ width = "45%" } = $$props,
    		{ bg } = $$props,
    		{ style = "" } = $$props,
    		{ Class } = $$props;

    	let isAnchor = RegExp("/").test(target);

    	if (!isAnchor) {
    		let event = new CustomEvent(target);

    		target = function () {
    			document.dispatchEvent(event);
    		};
    	}

    	if (!marginLeft && !marginRight) {
    		style = style + "margin-left: 0;margin-right: 0;";
    	} else if (!marginRight) {
    		style = style + "margin-right: 0;";
    	} else if (!marginLeft) {
    		style = style + "margin-left: 0;";
    	}

    	if (disabled) {
    		style = style + "--themeColor: #aaa;";
    	} else if (bg) {
    		style = style + `--themeColor: ${bg};`;
    	}

    	style = style + `width:${width};`;

    	const writable_props = [
    		"target",
    		"disabled",
    		"spaMode",
    		"marginLeft",
    		"marginRight",
    		"width",
    		"bg",
    		"style",
    		"Class"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Button> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("target" in $$props) $$invalidate(0, target = $$props.target);
    		if ("disabled" in $$props) $$invalidate(2, disabled = $$props.disabled);
    		if ("spaMode" in $$props) $$invalidate(3, spaMode = $$props.spaMode);
    		if ("marginLeft" in $$props) $$invalidate(6, marginLeft = $$props.marginLeft);
    		if ("marginRight" in $$props) $$invalidate(7, marginRight = $$props.marginRight);
    		if ("width" in $$props) $$invalidate(8, width = $$props.width);
    		if ("bg" in $$props) $$invalidate(9, bg = $$props.bg);
    		if ("style" in $$props) $$invalidate(1, style = $$props.style);
    		if ("Class" in $$props) $$invalidate(4, Class = $$props.Class);
    		if ("$$scope" in $$props) $$invalidate(10, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		link: link$1,
    		target,
    		disabled,
    		spaMode,
    		marginLeft,
    		marginRight,
    		width,
    		bg,
    		style,
    		Class,
    		isAnchor
    	});

    	$$self.$inject_state = $$props => {
    		if ("target" in $$props) $$invalidate(0, target = $$props.target);
    		if ("disabled" in $$props) $$invalidate(2, disabled = $$props.disabled);
    		if ("spaMode" in $$props) $$invalidate(3, spaMode = $$props.spaMode);
    		if ("marginLeft" in $$props) $$invalidate(6, marginLeft = $$props.marginLeft);
    		if ("marginRight" in $$props) $$invalidate(7, marginRight = $$props.marginRight);
    		if ("width" in $$props) $$invalidate(8, width = $$props.width);
    		if ("bg" in $$props) $$invalidate(9, bg = $$props.bg);
    		if ("style" in $$props) $$invalidate(1, style = $$props.style);
    		if ("Class" in $$props) $$invalidate(4, Class = $$props.Class);
    		if ("isAnchor" in $$props) $$invalidate(5, isAnchor = $$props.isAnchor);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		target,
    		style,
    		disabled,
    		spaMode,
    		Class,
    		isAnchor,
    		marginLeft,
    		marginRight,
    		width,
    		bg,
    		$$scope,
    		slots
    	];
    }

    class Button extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$g, create_fragment$g, safe_not_equal, {
    			target: 0,
    			disabled: 2,
    			spaMode: 3,
    			marginLeft: 6,
    			marginRight: 7,
    			width: 8,
    			bg: 9,
    			style: 1,
    			Class: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Button",
    			options,
    			id: create_fragment$g.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*target*/ ctx[0] === undefined && !("target" in props)) {
    			console.warn("<Button> was created without expected prop 'target'");
    		}

    		if (/*spaMode*/ ctx[3] === undefined && !("spaMode" in props)) {
    			console.warn("<Button> was created without expected prop 'spaMode'");
    		}

    		if (/*marginLeft*/ ctx[6] === undefined && !("marginLeft" in props)) {
    			console.warn("<Button> was created without expected prop 'marginLeft'");
    		}

    		if (/*marginRight*/ ctx[7] === undefined && !("marginRight" in props)) {
    			console.warn("<Button> was created without expected prop 'marginRight'");
    		}

    		if (/*bg*/ ctx[9] === undefined && !("bg" in props)) {
    			console.warn("<Button> was created without expected prop 'bg'");
    		}

    		if (/*Class*/ ctx[4] === undefined && !("Class" in props)) {
    			console.warn("<Button> was created without expected prop 'Class'");
    		}
    	}

    	get target() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set target(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get spaMode() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set spaMode(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get marginLeft() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set marginLeft(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get marginRight() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set marginRight(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get width() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set width(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get bg() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set bg(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get Class() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set Class(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/static-content.svelte generated by Svelte v3.38.2 */
    const file$d = "src/components/static-content.svelte";

    function get_each_context$8(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[5] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	return child_ctx;
    }

    function get_each_context_2$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[3] = list[i];
    	return child_ctx;
    }

    // (18:6) {#each article as article}
    function create_each_block_2$3(ctx) {
    	let p;
    	let t_value = /*article*/ ctx[3] + "";
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text$1(t_value);
    			attr_dev(p, "class", "svelte-dzzzm6");
    			add_location(p, file$d, 18, 8, 656);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*article*/ 8 && t_value !== (t_value = /*article*/ ctx[3] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2$3.name,
    		type: "each",
    		source: "(18:6) {#each article as article}",
    		ctx
    	});

    	return block;
    }

    // (29:10) {:else}
    function create_else_block$4(ctx) {
    	let t_value = /*button*/ ctx[5].title + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text$1(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*buttons*/ 4 && t_value !== (t_value = /*button*/ ctx[5].title + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$4.name,
    		type: "else",
    		source: "(29:10) {:else}",
    		ctx
    	});

    	return block;
    }

    // (25:10) {#if Array.isArray(button.title)}
    function create_if_block$a(ctx) {
    	let each_1_anchor;
    	let each_value_1 = /*button*/ ctx[5].title;
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$5(get_each_context_1$5(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*buttons*/ 4) {
    				each_value_1 = /*button*/ ctx[5].title;
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$5(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$5(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$a.name,
    		type: "if",
    		source: "(25:10) {#if Array.isArray(button.title)}",
    		ctx
    	});

    	return block;
    }

    // (26:12) {#each button.title as title}
    function create_each_block_1$5(ctx) {
    	let span;
    	let t_value = /*title*/ ctx[8] + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text$1(t_value);
    			attr_dev(span, "class", "break-scope svelte-dzzzm6");
    			add_location(span, file$d, 26, 14, 906);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*buttons*/ 4 && t_value !== (t_value = /*title*/ ctx[8] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$5.name,
    		type: "each",
    		source: "(26:12) {#each button.title as title}",
    		ctx
    	});

    	return block;
    }

    // (24:8) <Button target="{button.target}">
    function create_default_slot$4(ctx) {
    	let show_if;
    	let t;

    	function select_block_type(ctx, dirty) {
    		if (show_if == null || dirty & /*buttons*/ 4) show_if = !!Array.isArray(/*button*/ ctx[5].title);
    		if (show_if) return create_if_block$a;
    		return create_else_block$4;
    	}

    	let current_block_type = select_block_type(ctx, -1);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			t = space();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(t.parentNode, t);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$4.name,
    		type: "slot",
    		source: "(24:8) <Button target=\\\"{button.target}\\\">",
    		ctx
    	});

    	return block;
    }

    // (23:6) {#each buttons as button}
    function create_each_block$8(ctx) {
    	let button;
    	let current;

    	button = new Button({
    			props: {
    				target: /*button*/ ctx[5].target,
    				$$slots: { default: [create_default_slot$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(button.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(button, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button_changes = {};
    			if (dirty & /*buttons*/ 4) button_changes.target = /*button*/ ctx[5].target;

    			if (dirty & /*$$scope, buttons*/ 8196) {
    				button_changes.$$scope = { dirty, ctx };
    			}

    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(button, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$8.name,
    		type: "each",
    		source: "(23:6) {#each buttons as button}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$f(ctx) {
    	let div1;
    	let picture;
    	let t0;
    	let div0;
    	let t1;
    	let section2;
    	let section0;
    	let t2;
    	let section1;
    	let current;

    	picture = new Picture({
    			props: {
    				pictureClass: "static-picture",
    				imgClass: "static-img",
    				contents: /*contents*/ ctx[0],
    				globalSettings: /*globalSettings*/ ctx[1],
    				imageId: /*contents*/ ctx[0].imageId,
    				width: /*contents*/ ctx[0].aspectRatio.width,
    				height: /*contents*/ ctx[0].aspectRatio.height,
    				style: "width:100%"
    			},
    			$$inline: true
    		});

    	let each_value_2 = /*article*/ ctx[3];
    	validate_each_argument(each_value_2);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks_1[i] = create_each_block_2$3(get_each_context_2$3(ctx, each_value_2, i));
    	}

    	let each_value = /*buttons*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$8(get_each_context$8(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			create_component(picture.$$.fragment);
    			t0 = space();
    			div0 = element("div");
    			t1 = space();
    			section2 = element("section");
    			section0 = element("section");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t2 = space();
    			section1 = element("section");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div0, "class", "spacer svelte-dzzzm6");
    			add_location(div0, file$d, 14, 2, 528);
    			attr_dev(section0, "class", "text svelte-dzzzm6");
    			add_location(section0, file$d, 16, 4, 592);
    			attr_dev(section1, "class", "buttons svelte-dzzzm6");
    			add_location(section1, file$d, 21, 4, 706);
    			attr_dev(section2, "class", "right-column svelte-dzzzm6");
    			add_location(section2, file$d, 15, 2, 557);
    			attr_dev(div1, "class", "container svelte-dzzzm6");
    			add_location(div1, file$d, 12, 0, 291);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			mount_component(picture, div1, null);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			append_dev(div1, t1);
    			append_dev(div1, section2);
    			append_dev(section2, section0);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(section0, null);
    			}

    			append_dev(section2, t2);
    			append_dev(section2, section1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(section1, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const picture_changes = {};
    			if (dirty & /*contents*/ 1) picture_changes.contents = /*contents*/ ctx[0];
    			if (dirty & /*globalSettings*/ 2) picture_changes.globalSettings = /*globalSettings*/ ctx[1];
    			if (dirty & /*contents*/ 1) picture_changes.imageId = /*contents*/ ctx[0].imageId;
    			if (dirty & /*contents*/ 1) picture_changes.width = /*contents*/ ctx[0].aspectRatio.width;
    			if (dirty & /*contents*/ 1) picture_changes.height = /*contents*/ ctx[0].aspectRatio.height;
    			picture.$set(picture_changes);

    			if (dirty & /*article*/ 8) {
    				each_value_2 = /*article*/ ctx[3];
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2$3(ctx, each_value_2, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_2$3(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(section0, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_2.length;
    			}

    			if (dirty & /*buttons, Array*/ 4) {
    				each_value = /*buttons*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$8(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$8(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(section1, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(picture.$$.fragment, local);

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(picture.$$.fragment, local);
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(picture);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$f($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Static_content", slots, []);

    	let { contents } = $$props,
    		{ globalSettings } = $$props,
    		{ standardWidth } = $$props,
    		{ article = contents.article } = $$props,
    		// buttonsLayout = contents.bottomButtonsLayout,
    		{ buttons = contents.bottomButtons } = $$props;

    	const writable_props = ["contents", "globalSettings", "standardWidth", "article", "buttons"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Static_content> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("contents" in $$props) $$invalidate(0, contents = $$props.contents);
    		if ("globalSettings" in $$props) $$invalidate(1, globalSettings = $$props.globalSettings);
    		if ("standardWidth" in $$props) $$invalidate(4, standardWidth = $$props.standardWidth);
    		if ("article" in $$props) $$invalidate(3, article = $$props.article);
    		if ("buttons" in $$props) $$invalidate(2, buttons = $$props.buttons);
    	};

    	$$self.$capture_state = () => ({
    		Button,
    		Picture,
    		contents,
    		globalSettings,
    		standardWidth,
    		article,
    		buttons
    	});

    	$$self.$inject_state = $$props => {
    		if ("contents" in $$props) $$invalidate(0, contents = $$props.contents);
    		if ("globalSettings" in $$props) $$invalidate(1, globalSettings = $$props.globalSettings);
    		if ("standardWidth" in $$props) $$invalidate(4, standardWidth = $$props.standardWidth);
    		if ("article" in $$props) $$invalidate(3, article = $$props.article);
    		if ("buttons" in $$props) $$invalidate(2, buttons = $$props.buttons);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [contents, globalSettings, buttons, article, standardWidth];
    }

    class Static_content extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$f, create_fragment$f, safe_not_equal, {
    			contents: 0,
    			globalSettings: 1,
    			standardWidth: 4,
    			article: 3,
    			buttons: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Static_content",
    			options,
    			id: create_fragment$f.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*contents*/ ctx[0] === undefined && !("contents" in props)) {
    			console.warn("<Static_content> was created without expected prop 'contents'");
    		}

    		if (/*globalSettings*/ ctx[1] === undefined && !("globalSettings" in props)) {
    			console.warn("<Static_content> was created without expected prop 'globalSettings'");
    		}

    		if (/*standardWidth*/ ctx[4] === undefined && !("standardWidth" in props)) {
    			console.warn("<Static_content> was created without expected prop 'standardWidth'");
    		}
    	}

    	get contents() {
    		throw new Error("<Static_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set contents(value) {
    		throw new Error("<Static_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get globalSettings() {
    		throw new Error("<Static_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set globalSettings(value) {
    		throw new Error("<Static_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get standardWidth() {
    		throw new Error("<Static_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set standardWidth(value) {
    		throw new Error("<Static_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get article() {
    		throw new Error("<Static_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set article(value) {
    		throw new Error("<Static_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get buttons() {
    		throw new Error("<Static_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set buttons(value) {
    		throw new Error("<Static_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/date-list.svelte generated by Svelte v3.38.2 */

    const file$c = "src/components/date-list.svelte";

    function get_each_context$7(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[1] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[4] = list[i];
    	return child_ctx;
    }

    // (18:10) {:else}
    function create_else_block$3(ctx) {
    	let span;
    	let t_value = /*article*/ ctx[1].title + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text$1(t_value);
    			add_location(span, file$c, 18, 12, 903);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*contents*/ 1 && t_value !== (t_value = /*article*/ ctx[1].title + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$3.name,
    		type: "else",
    		source: "(18:10) {:else}",
    		ctx
    	});

    	return block;
    }

    // (14:10) {#if Array.isArray(article.title)}
    function create_if_block$9(ctx) {
    	let each_1_anchor;
    	let each_value_1 = /*article*/ ctx[1].title;
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$4(get_each_context_1$4(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*contents*/ 1) {
    				each_value_1 = /*article*/ ctx[1].title;
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$4(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$4(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$9.name,
    		type: "if",
    		source: "(14:10) {#if Array.isArray(article.title)}",
    		ctx
    	});

    	return block;
    }

    // (15:12) {#each article.title as title}
    function create_each_block_1$4(ctx) {
    	let span;
    	let t_value = /*title*/ ctx[4] + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text$1(t_value);
    			attr_dev(span, "class", "break-scope");
    			add_location(span, file$c, 15, 14, 812);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*contents*/ 1 && t_value !== (t_value = /*title*/ ctx[4] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$4.name,
    		type: "each",
    		source: "(15:12) {#each article.title as title}",
    		ctx
    	});

    	return block;
    }

    // (6:2) {#each contents.articles as article}
    function create_each_block$7(ctx) {
    	let li;
    	let a;
    	let time;

    	let t0_value = (/*article*/ ctx[1].date.year
    	? ("0000" + /*article*/ ctx[1].date.year).slice(-4)
    	: "") + (/*article*/ ctx[1].date.month
    	? "/" + ("00" + /*article*/ ctx[1].date.month).slice(-2)
    	: "") + (/*article*/ ctx[1].date.day
    	? "/" + ("00" + /*article*/ ctx[1].date.day).slice(-2)
    	: "") + "";

    	let t0;
    	let time_datetime_value;
    	let t1;
    	let div;
    	let show_if;
    	let a_href_value;
    	let t2;

    	function select_block_type(ctx, dirty) {
    		if (show_if == null || dirty & /*contents*/ 1) show_if = !!Array.isArray(/*article*/ ctx[1].title);
    		if (show_if) return create_if_block$9;
    		return create_else_block$3;
    	}

    	let current_block_type = select_block_type(ctx, -1);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			li = element("li");
    			a = element("a");
    			time = element("time");
    			t0 = text$1(t0_value);
    			t1 = space();
    			div = element("div");
    			if_block.c();
    			t2 = space();
    			attr_dev(time, "class", "date svelte-1sas8yn");

    			attr_dev(time, "datetime", time_datetime_value = (/*article*/ ctx[1].date.year
    			? ("0000" + /*article*/ ctx[1].date.year).slice(-4)
    			: "") + (/*article*/ ctx[1].date.month
    			? "-" + ("00" + /*article*/ ctx[1].date.month).slice(-2)
    			: "") + (/*article*/ ctx[1].date.day
    			? "-" + ("00" + /*article*/ ctx[1].date.day).slice(-2)
    			: ""));

    			add_location(time, file$c, 9, 8, 203);
    			attr_dev(div, "class", "title-container svelte-1sas8yn");
    			add_location(div, file$c, 12, 8, 680);
    			attr_dev(a, "href", a_href_value = /*article*/ ctx[1].url);
    			attr_dev(a, "class", "svelte-1sas8yn");
    			add_location(a, file$c, 7, 6, 116);
    			attr_dev(li, "class", "entry svelte-1sas8yn");
    			add_location(li, file$c, 6, 4, 91);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, a);
    			append_dev(a, time);
    			append_dev(time, t0);
    			append_dev(a, t1);
    			append_dev(a, div);
    			if_block.m(div, null);
    			append_dev(li, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*contents*/ 1 && t0_value !== (t0_value = (/*article*/ ctx[1].date.year
    			? ("0000" + /*article*/ ctx[1].date.year).slice(-4)
    			: "") + (/*article*/ ctx[1].date.month
    			? "/" + ("00" + /*article*/ ctx[1].date.month).slice(-2)
    			: "") + (/*article*/ ctx[1].date.day
    			? "/" + ("00" + /*article*/ ctx[1].date.day).slice(-2)
    			: "") + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*contents*/ 1 && time_datetime_value !== (time_datetime_value = (/*article*/ ctx[1].date.year
    			? ("0000" + /*article*/ ctx[1].date.year).slice(-4)
    			: "") + (/*article*/ ctx[1].date.month
    			? "-" + ("00" + /*article*/ ctx[1].date.month).slice(-2)
    			: "") + (/*article*/ ctx[1].date.day
    			? "-" + ("00" + /*article*/ ctx[1].date.day).slice(-2)
    			: ""))) {
    				attr_dev(time, "datetime", time_datetime_value);
    			}

    			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div, null);
    				}
    			}

    			if (dirty & /*contents*/ 1 && a_href_value !== (a_href_value = /*article*/ ctx[1].url)) {
    				attr_dev(a, "href", a_href_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$7.name,
    		type: "each",
    		source: "(6:2) {#each contents.articles as article}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$e(ctx) {
    	let ul;
    	let each_value = /*contents*/ ctx[0].articles;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$7(get_each_context$7(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(ul, "class", "svelte-1sas8yn");
    			add_location(ul, file$c, 4, 0, 43);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, ul, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*contents, Array*/ 1) {
    				each_value = /*contents*/ ctx[0].articles;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$7(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$7(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(ul, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(ul);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Date_list", slots, []);
    	let { contents } = $$props;
    	const writable_props = ["contents"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Date_list> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("contents" in $$props) $$invalidate(0, contents = $$props.contents);
    	};

    	$$self.$capture_state = () => ({ contents });

    	$$self.$inject_state = $$props => {
    		if ("contents" in $$props) $$invalidate(0, contents = $$props.contents);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [contents];
    }

    class Date_list extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$e, create_fragment$e, safe_not_equal, { contents: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Date_list",
    			options,
    			id: create_fragment$e.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*contents*/ ctx[0] === undefined && !("contents" in props)) {
    			console.warn("<Date_list> was created without expected prop 'contents'");
    		}
    	}

    	get contents() {
    		throw new Error("<Date_list>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set contents(value) {
    		throw new Error("<Date_list>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /**
     * SSR Window 3.0.0
     * Better handling for window object in SSR environment
     * https://github.com/nolimits4web/ssr-window
     *
     * Copyright 2020, Vladimir Kharlampidi
     *
     * Licensed under MIT
     *
     * Released on: November 9, 2020
     */
    /* eslint-disable no-param-reassign */
    function isObject$2(obj) {
        return (obj !== null &&
            typeof obj === 'object' &&
            'constructor' in obj &&
            obj.constructor === Object);
    }
    function extend$2(target, src) {
        if (target === void 0) { target = {}; }
        if (src === void 0) { src = {}; }
        Object.keys(src).forEach(function (key) {
            if (typeof target[key] === 'undefined')
                target[key] = src[key];
            else if (isObject$2(src[key]) &&
                isObject$2(target[key]) &&
                Object.keys(src[key]).length > 0) {
                extend$2(target[key], src[key]);
            }
        });
    }

    var ssrDocument = {
        body: {},
        addEventListener: function () { },
        removeEventListener: function () { },
        activeElement: {
            blur: function () { },
            nodeName: '',
        },
        querySelector: function () {
            return null;
        },
        querySelectorAll: function () {
            return [];
        },
        getElementById: function () {
            return null;
        },
        createEvent: function () {
            return {
                initEvent: function () { },
            };
        },
        createElement: function () {
            return {
                children: [],
                childNodes: [],
                style: {},
                setAttribute: function () { },
                getElementsByTagName: function () {
                    return [];
                },
            };
        },
        createElementNS: function () {
            return {};
        },
        importNode: function () {
            return null;
        },
        location: {
            hash: '',
            host: '',
            hostname: '',
            href: '',
            origin: '',
            pathname: '',
            protocol: '',
            search: '',
        },
    };
    function getDocument() {
        var doc = typeof document !== 'undefined' ? document : {};
        extend$2(doc, ssrDocument);
        return doc;
    }

    var ssrWindow = {
        document: ssrDocument,
        navigator: {
            userAgent: '',
        },
        location: {
            hash: '',
            host: '',
            hostname: '',
            href: '',
            origin: '',
            pathname: '',
            protocol: '',
            search: '',
        },
        history: {
            replaceState: function () { },
            pushState: function () { },
            go: function () { },
            back: function () { },
        },
        CustomEvent: function CustomEvent() {
            return this;
        },
        addEventListener: function () { },
        removeEventListener: function () { },
        getComputedStyle: function () {
            return {
                getPropertyValue: function () {
                    return '';
                },
            };
        },
        Image: function () { },
        Date: function () { },
        screen: {},
        setTimeout: function () { },
        clearTimeout: function () { },
        matchMedia: function () {
            return {};
        },
        requestAnimationFrame: function (callback) {
            if (typeof setTimeout === 'undefined') {
                callback();
                return null;
            }
            return setTimeout(callback, 0);
        },
        cancelAnimationFrame: function (id) {
            if (typeof setTimeout === 'undefined') {
                return;
            }
            clearTimeout(id);
        },
    };
    function getWindow() {
        var win = typeof window !== 'undefined' ? window : {};
        extend$2(win, ssrWindow);
        return win;
    }

    /**
     * Dom7 3.0.0
     * Minimalistic JavaScript library for DOM manipulation, with a jQuery-compatible API
     * https://framework7.io/docs/dom7.html
     *
     * Copyright 2020, Vladimir Kharlampidi
     *
     * Licensed under MIT
     *
     * Released on: November 9, 2020
     */

    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };

      return _setPrototypeOf(o, p);
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _construct(Parent, args, Class) {
      if (_isNativeReflectConstruct()) {
        _construct = Reflect.construct;
      } else {
        _construct = function _construct(Parent, args, Class) {
          var a = [null];
          a.push.apply(a, args);
          var Constructor = Function.bind.apply(Parent, a);
          var instance = new Constructor();
          if (Class) _setPrototypeOf(instance, Class.prototype);
          return instance;
        };
      }

      return _construct.apply(null, arguments);
    }

    function _isNativeFunction(fn) {
      return Function.toString.call(fn).indexOf("[native code]") !== -1;
    }

    function _wrapNativeSuper(Class) {
      var _cache = typeof Map === "function" ? new Map() : undefined;

      _wrapNativeSuper = function _wrapNativeSuper(Class) {
        if (Class === null || !_isNativeFunction(Class)) return Class;

        if (typeof Class !== "function") {
          throw new TypeError("Super expression must either be null or a function");
        }

        if (typeof _cache !== "undefined") {
          if (_cache.has(Class)) return _cache.get(Class);

          _cache.set(Class, Wrapper);
        }

        function Wrapper() {
          return _construct(Class, arguments, _getPrototypeOf(this).constructor);
        }

        Wrapper.prototype = Object.create(Class.prototype, {
          constructor: {
            value: Wrapper,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        return _setPrototypeOf(Wrapper, Class);
      };

      return _wrapNativeSuper(Class);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    /* eslint-disable no-proto */
    function makeReactive(obj) {
      var proto = obj.__proto__;
      Object.defineProperty(obj, '__proto__', {
        get: function get() {
          return proto;
        },
        set: function set(value) {
          proto.__proto__ = value;
        }
      });
    }

    var Dom7 = /*#__PURE__*/function (_Array) {
      _inheritsLoose(Dom7, _Array);

      function Dom7(items) {
        var _this;

        _this = _Array.call.apply(_Array, [this].concat(items)) || this;
        makeReactive(_assertThisInitialized(_this));
        return _this;
      }

      return Dom7;
    }( /*#__PURE__*/_wrapNativeSuper(Array));

    function arrayFlat(arr) {
      if (arr === void 0) {
        arr = [];
      }

      var res = [];
      arr.forEach(function (el) {
        if (Array.isArray(el)) {
          res.push.apply(res, arrayFlat(el));
        } else {
          res.push(el);
        }
      });
      return res;
    }
    function arrayFilter(arr, callback) {
      return Array.prototype.filter.call(arr, callback);
    }
    function arrayUnique(arr) {
      var uniqueArray = [];

      for (var i = 0; i < arr.length; i += 1) {
        if (uniqueArray.indexOf(arr[i]) === -1) uniqueArray.push(arr[i]);
      }

      return uniqueArray;
    }

    function qsa(selector, context) {
      if (typeof selector !== 'string') {
        return [selector];
      }

      var a = [];
      var res = context.querySelectorAll(selector);

      for (var i = 0; i < res.length; i += 1) {
        a.push(res[i]);
      }

      return a;
    }

    function $(selector, context) {
      var window = getWindow();
      var document = getDocument();
      var arr = [];

      if (!context && selector instanceof Dom7) {
        return selector;
      }

      if (!selector) {
        return new Dom7(arr);
      }

      if (typeof selector === 'string') {
        var html = selector.trim();

        if (html.indexOf('<') >= 0 && html.indexOf('>') >= 0) {
          var toCreate = 'div';
          if (html.indexOf('<li') === 0) toCreate = 'ul';
          if (html.indexOf('<tr') === 0) toCreate = 'tbody';
          if (html.indexOf('<td') === 0 || html.indexOf('<th') === 0) toCreate = 'tr';
          if (html.indexOf('<tbody') === 0) toCreate = 'table';
          if (html.indexOf('<option') === 0) toCreate = 'select';
          var tempParent = document.createElement(toCreate);
          tempParent.innerHTML = html;

          for (var i = 0; i < tempParent.childNodes.length; i += 1) {
            arr.push(tempParent.childNodes[i]);
          }
        } else {
          arr = qsa(selector.trim(), context || document);
        } // arr = qsa(selector, document);

      } else if (selector.nodeType || selector === window || selector === document) {
        arr.push(selector);
      } else if (Array.isArray(selector)) {
        if (selector instanceof Dom7) return selector;
        arr = selector;
      }

      return new Dom7(arrayUnique(arr));
    }

    $.fn = Dom7.prototype;

    function addClass() {
      for (var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++) {
        classes[_key] = arguments[_key];
      }

      var classNames = arrayFlat(classes.map(function (c) {
        return c.split(' ');
      }));
      this.forEach(function (el) {
        var _el$classList;

        (_el$classList = el.classList).add.apply(_el$classList, classNames);
      });
      return this;
    }

    function removeClass() {
      for (var _len2 = arguments.length, classes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        classes[_key2] = arguments[_key2];
      }

      var classNames = arrayFlat(classes.map(function (c) {
        return c.split(' ');
      }));
      this.forEach(function (el) {
        var _el$classList2;

        (_el$classList2 = el.classList).remove.apply(_el$classList2, classNames);
      });
      return this;
    }

    function toggleClass() {
      for (var _len3 = arguments.length, classes = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        classes[_key3] = arguments[_key3];
      }

      var classNames = arrayFlat(classes.map(function (c) {
        return c.split(' ');
      }));
      this.forEach(function (el) {
        classNames.forEach(function (className) {
          el.classList.toggle(className);
        });
      });
    }

    function hasClass() {
      for (var _len4 = arguments.length, classes = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        classes[_key4] = arguments[_key4];
      }

      var classNames = arrayFlat(classes.map(function (c) {
        return c.split(' ');
      }));
      return arrayFilter(this, function (el) {
        return classNames.filter(function (className) {
          return el.classList.contains(className);
        }).length > 0;
      }).length > 0;
    }

    function attr(attrs, value) {
      if (arguments.length === 1 && typeof attrs === 'string') {
        // Get attr
        if (this[0]) return this[0].getAttribute(attrs);
        return undefined;
      } // Set attrs


      for (var i = 0; i < this.length; i += 1) {
        if (arguments.length === 2) {
          // String
          this[i].setAttribute(attrs, value);
        } else {
          // Object
          for (var attrName in attrs) {
            this[i][attrName] = attrs[attrName];
            this[i].setAttribute(attrName, attrs[attrName]);
          }
        }
      }

      return this;
    }

    function removeAttr(attr) {
      for (var i = 0; i < this.length; i += 1) {
        this[i].removeAttribute(attr);
      }

      return this;
    }

    function transform(transform) {
      for (var i = 0; i < this.length; i += 1) {
        this[i].style.transform = transform;
      }

      return this;
    }

    function transition$1(duration) {
      for (var i = 0; i < this.length; i += 1) {
        this[i].style.transitionDuration = typeof duration !== 'string' ? duration + "ms" : duration;
      }

      return this;
    }

    function on() {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }

      var eventType = args[0],
          targetSelector = args[1],
          listener = args[2],
          capture = args[3];

      if (typeof args[1] === 'function') {
        eventType = args[0];
        listener = args[1];
        capture = args[2];
        targetSelector = undefined;
      }

      if (!capture) capture = false;

      function handleLiveEvent(e) {
        var target = e.target;
        if (!target) return;
        var eventData = e.target.dom7EventData || [];

        if (eventData.indexOf(e) < 0) {
          eventData.unshift(e);
        }

        if ($(target).is(targetSelector)) listener.apply(target, eventData);else {
          var _parents = $(target).parents(); // eslint-disable-line


          for (var k = 0; k < _parents.length; k += 1) {
            if ($(_parents[k]).is(targetSelector)) listener.apply(_parents[k], eventData);
          }
        }
      }

      function handleEvent(e) {
        var eventData = e && e.target ? e.target.dom7EventData || [] : [];

        if (eventData.indexOf(e) < 0) {
          eventData.unshift(e);
        }

        listener.apply(this, eventData);
      }

      var events = eventType.split(' ');
      var j;

      for (var i = 0; i < this.length; i += 1) {
        var el = this[i];

        if (!targetSelector) {
          for (j = 0; j < events.length; j += 1) {
            var event = events[j];
            if (!el.dom7Listeners) el.dom7Listeners = {};
            if (!el.dom7Listeners[event]) el.dom7Listeners[event] = [];
            el.dom7Listeners[event].push({
              listener: listener,
              proxyListener: handleEvent
            });
            el.addEventListener(event, handleEvent, capture);
          }
        } else {
          // Live events
          for (j = 0; j < events.length; j += 1) {
            var _event = events[j];
            if (!el.dom7LiveListeners) el.dom7LiveListeners = {};
            if (!el.dom7LiveListeners[_event]) el.dom7LiveListeners[_event] = [];

            el.dom7LiveListeners[_event].push({
              listener: listener,
              proxyListener: handleLiveEvent
            });

            el.addEventListener(_event, handleLiveEvent, capture);
          }
        }
      }

      return this;
    }

    function off() {
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }

      var eventType = args[0],
          targetSelector = args[1],
          listener = args[2],
          capture = args[3];

      if (typeof args[1] === 'function') {
        eventType = args[0];
        listener = args[1];
        capture = args[2];
        targetSelector = undefined;
      }

      if (!capture) capture = false;
      var events = eventType.split(' ');

      for (var i = 0; i < events.length; i += 1) {
        var event = events[i];

        for (var j = 0; j < this.length; j += 1) {
          var el = this[j];
          var handlers = void 0;

          if (!targetSelector && el.dom7Listeners) {
            handlers = el.dom7Listeners[event];
          } else if (targetSelector && el.dom7LiveListeners) {
            handlers = el.dom7LiveListeners[event];
          }

          if (handlers && handlers.length) {
            for (var k = handlers.length - 1; k >= 0; k -= 1) {
              var handler = handlers[k];

              if (listener && handler.listener === listener) {
                el.removeEventListener(event, handler.proxyListener, capture);
                handlers.splice(k, 1);
              } else if (listener && handler.listener && handler.listener.dom7proxy && handler.listener.dom7proxy === listener) {
                el.removeEventListener(event, handler.proxyListener, capture);
                handlers.splice(k, 1);
              } else if (!listener) {
                el.removeEventListener(event, handler.proxyListener, capture);
                handlers.splice(k, 1);
              }
            }
          }
        }
      }

      return this;
    }

    function trigger() {
      var window = getWindow();

      for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
        args[_key9] = arguments[_key9];
      }

      var events = args[0].split(' ');
      var eventData = args[1];

      for (var i = 0; i < events.length; i += 1) {
        var event = events[i];

        for (var j = 0; j < this.length; j += 1) {
          var el = this[j];

          if (window.CustomEvent) {
            var evt = new window.CustomEvent(event, {
              detail: eventData,
              bubbles: true,
              cancelable: true
            });
            el.dom7EventData = args.filter(function (data, dataIndex) {
              return dataIndex > 0;
            });
            el.dispatchEvent(evt);
            el.dom7EventData = [];
            delete el.dom7EventData;
          }
        }
      }

      return this;
    }

    function transitionEnd$1(callback) {
      var dom = this;

      function fireCallBack(e) {
        if (e.target !== this) return;
        callback.call(this, e);
        dom.off('transitionend', fireCallBack);
      }

      if (callback) {
        dom.on('transitionend', fireCallBack);
      }

      return this;
    }

    function outerWidth(includeMargins) {
      if (this.length > 0) {
        if (includeMargins) {
          var _styles = this.styles();

          return this[0].offsetWidth + parseFloat(_styles.getPropertyValue('margin-right')) + parseFloat(_styles.getPropertyValue('margin-left'));
        }

        return this[0].offsetWidth;
      }

      return null;
    }

    function outerHeight(includeMargins) {
      if (this.length > 0) {
        if (includeMargins) {
          var _styles2 = this.styles();

          return this[0].offsetHeight + parseFloat(_styles2.getPropertyValue('margin-top')) + parseFloat(_styles2.getPropertyValue('margin-bottom'));
        }

        return this[0].offsetHeight;
      }

      return null;
    }

    function offset() {
      if (this.length > 0) {
        var window = getWindow();
        var document = getDocument();
        var el = this[0];
        var box = el.getBoundingClientRect();
        var body = document.body;
        var clientTop = el.clientTop || body.clientTop || 0;
        var clientLeft = el.clientLeft || body.clientLeft || 0;
        var scrollTop = el === window ? window.scrollY : el.scrollTop;
        var scrollLeft = el === window ? window.scrollX : el.scrollLeft;
        return {
          top: box.top + scrollTop - clientTop,
          left: box.left + scrollLeft - clientLeft
        };
      }

      return null;
    }

    function styles() {
      var window = getWindow();
      if (this[0]) return window.getComputedStyle(this[0], null);
      return {};
    }

    function css(props, value) {
      var window = getWindow();
      var i;

      if (arguments.length === 1) {
        if (typeof props === 'string') {
          // .css('width')
          if (this[0]) return window.getComputedStyle(this[0], null).getPropertyValue(props);
        } else {
          // .css({ width: '100px' })
          for (i = 0; i < this.length; i += 1) {
            for (var _prop in props) {
              this[i].style[_prop] = props[_prop];
            }
          }

          return this;
        }
      }

      if (arguments.length === 2 && typeof props === 'string') {
        // .css('width', '100px')
        for (i = 0; i < this.length; i += 1) {
          this[i].style[props] = value;
        }

        return this;
      }

      return this;
    }

    function each(callback) {
      if (!callback) return this;
      this.forEach(function (el, index) {
        callback.apply(el, [el, index]);
      });
      return this;
    }

    function filter(callback) {
      var result = arrayFilter(this, callback);
      return $(result);
    }

    function html(html) {
      if (typeof html === 'undefined') {
        return this[0] ? this[0].innerHTML : null;
      }

      for (var i = 0; i < this.length; i += 1) {
        this[i].innerHTML = html;
      }

      return this;
    }

    function text(text) {
      if (typeof text === 'undefined') {
        return this[0] ? this[0].textContent.trim() : null;
      }

      for (var i = 0; i < this.length; i += 1) {
        this[i].textContent = text;
      }

      return this;
    }

    function is(selector) {
      var window = getWindow();
      var document = getDocument();
      var el = this[0];
      var compareWith;
      var i;
      if (!el || typeof selector === 'undefined') return false;

      if (typeof selector === 'string') {
        if (el.matches) return el.matches(selector);
        if (el.webkitMatchesSelector) return el.webkitMatchesSelector(selector);
        if (el.msMatchesSelector) return el.msMatchesSelector(selector);
        compareWith = $(selector);

        for (i = 0; i < compareWith.length; i += 1) {
          if (compareWith[i] === el) return true;
        }

        return false;
      }

      if (selector === document) {
        return el === document;
      }

      if (selector === window) {
        return el === window;
      }

      if (selector.nodeType || selector instanceof Dom7) {
        compareWith = selector.nodeType ? [selector] : selector;

        for (i = 0; i < compareWith.length; i += 1) {
          if (compareWith[i] === el) return true;
        }

        return false;
      }

      return false;
    }

    function index() {
      var child = this[0];
      var i;

      if (child) {
        i = 0; // eslint-disable-next-line

        while ((child = child.previousSibling) !== null) {
          if (child.nodeType === 1) i += 1;
        }

        return i;
      }

      return undefined;
    }

    function eq(index) {
      if (typeof index === 'undefined') return this;
      var length = this.length;

      if (index > length - 1) {
        return $([]);
      }

      if (index < 0) {
        var returnIndex = length + index;
        if (returnIndex < 0) return $([]);
        return $([this[returnIndex]]);
      }

      return $([this[index]]);
    }

    function append() {
      var newChild;
      var document = getDocument();

      for (var k = 0; k < arguments.length; k += 1) {
        newChild = k < 0 || arguments.length <= k ? undefined : arguments[k];

        for (var i = 0; i < this.length; i += 1) {
          if (typeof newChild === 'string') {
            var tempDiv = document.createElement('div');
            tempDiv.innerHTML = newChild;

            while (tempDiv.firstChild) {
              this[i].appendChild(tempDiv.firstChild);
            }
          } else if (newChild instanceof Dom7) {
            for (var j = 0; j < newChild.length; j += 1) {
              this[i].appendChild(newChild[j]);
            }
          } else {
            this[i].appendChild(newChild);
          }
        }
      }

      return this;
    }

    function prepend(newChild) {
      var document = getDocument();
      var i;
      var j;

      for (i = 0; i < this.length; i += 1) {
        if (typeof newChild === 'string') {
          var tempDiv = document.createElement('div');
          tempDiv.innerHTML = newChild;

          for (j = tempDiv.childNodes.length - 1; j >= 0; j -= 1) {
            this[i].insertBefore(tempDiv.childNodes[j], this[i].childNodes[0]);
          }
        } else if (newChild instanceof Dom7) {
          for (j = 0; j < newChild.length; j += 1) {
            this[i].insertBefore(newChild[j], this[i].childNodes[0]);
          }
        } else {
          this[i].insertBefore(newChild, this[i].childNodes[0]);
        }
      }

      return this;
    }

    function next(selector) {
      if (this.length > 0) {
        if (selector) {
          if (this[0].nextElementSibling && $(this[0].nextElementSibling).is(selector)) {
            return $([this[0].nextElementSibling]);
          }

          return $([]);
        }

        if (this[0].nextElementSibling) return $([this[0].nextElementSibling]);
        return $([]);
      }

      return $([]);
    }

    function nextAll(selector) {
      var nextEls = [];
      var el = this[0];
      if (!el) return $([]);

      while (el.nextElementSibling) {
        var _next = el.nextElementSibling; // eslint-disable-line

        if (selector) {
          if ($(_next).is(selector)) nextEls.push(_next);
        } else nextEls.push(_next);

        el = _next;
      }

      return $(nextEls);
    }

    function prev(selector) {
      if (this.length > 0) {
        var el = this[0];

        if (selector) {
          if (el.previousElementSibling && $(el.previousElementSibling).is(selector)) {
            return $([el.previousElementSibling]);
          }

          return $([]);
        }

        if (el.previousElementSibling) return $([el.previousElementSibling]);
        return $([]);
      }

      return $([]);
    }

    function prevAll(selector) {
      var prevEls = [];
      var el = this[0];
      if (!el) return $([]);

      while (el.previousElementSibling) {
        var _prev = el.previousElementSibling; // eslint-disable-line

        if (selector) {
          if ($(_prev).is(selector)) prevEls.push(_prev);
        } else prevEls.push(_prev);

        el = _prev;
      }

      return $(prevEls);
    }

    function parent(selector) {
      var parents = []; // eslint-disable-line

      for (var i = 0; i < this.length; i += 1) {
        if (this[i].parentNode !== null) {
          if (selector) {
            if ($(this[i].parentNode).is(selector)) parents.push(this[i].parentNode);
          } else {
            parents.push(this[i].parentNode);
          }
        }
      }

      return $(parents);
    }

    function parents(selector) {
      var parents = []; // eslint-disable-line

      for (var i = 0; i < this.length; i += 1) {
        var _parent = this[i].parentNode; // eslint-disable-line

        while (_parent) {
          if (selector) {
            if ($(_parent).is(selector)) parents.push(_parent);
          } else {
            parents.push(_parent);
          }

          _parent = _parent.parentNode;
        }
      }

      return $(parents);
    }

    function closest(selector) {
      var closest = this; // eslint-disable-line

      if (typeof selector === 'undefined') {
        return $([]);
      }

      if (!closest.is(selector)) {
        closest = closest.parents(selector).eq(0);
      }

      return closest;
    }

    function find(selector) {
      var foundElements = [];

      for (var i = 0; i < this.length; i += 1) {
        var found = this[i].querySelectorAll(selector);

        for (var j = 0; j < found.length; j += 1) {
          foundElements.push(found[j]);
        }
      }

      return $(foundElements);
    }

    function children(selector) {
      var children = []; // eslint-disable-line

      for (var i = 0; i < this.length; i += 1) {
        var childNodes = this[i].children;

        for (var j = 0; j < childNodes.length; j += 1) {
          if (!selector || $(childNodes[j]).is(selector)) {
            children.push(childNodes[j]);
          }
        }
      }

      return $(children);
    }

    function remove() {
      for (var i = 0; i < this.length; i += 1) {
        if (this[i].parentNode) this[i].parentNode.removeChild(this[i]);
      }

      return this;
    }

    var Methods = {
      addClass: addClass,
      removeClass: removeClass,
      hasClass: hasClass,
      toggleClass: toggleClass,
      attr: attr,
      removeAttr: removeAttr,
      transform: transform,
      transition: transition$1,
      on: on,
      off: off,
      trigger: trigger,
      transitionEnd: transitionEnd$1,
      outerWidth: outerWidth,
      outerHeight: outerHeight,
      styles: styles,
      offset: offset,
      css: css,
      each: each,
      html: html,
      text: text,
      is: is,
      index: index,
      eq: eq,
      append: append,
      prepend: prepend,
      next: next,
      nextAll: nextAll,
      prev: prev,
      prevAll: prevAll,
      parent: parent,
      parents: parents,
      closest: closest,
      find: find,
      children: children,
      filter: filter,
      remove: remove
    };
    Object.keys(Methods).forEach(function (methodName) {
      Object.defineProperty($.fn, methodName, {
        value: Methods[methodName],
        writable: true
      });
    });

    function deleteProps(obj) {
      var object = obj;
      Object.keys(object).forEach(function (key) {
        try {
          object[key] = null;
        } catch (e) {// no getter for object
        }

        try {
          delete object[key];
        } catch (e) {// something got wrong
        }
      });
    }

    function nextTick(callback, delay) {
      if (delay === void 0) {
        delay = 0;
      }

      return setTimeout(callback, delay);
    }

    function now() {
      return Date.now();
    }

    function getComputedStyle$1(el) {
      var window = getWindow();
      var style;

      if (window.getComputedStyle) {
        style = window.getComputedStyle(el, null);
      }

      if (!style && el.currentStyle) {
        style = el.currentStyle;
      }

      if (!style) {
        style = el.style;
      }

      return style;
    }

    function getTranslate(el, axis) {
      if (axis === void 0) {
        axis = 'x';
      }

      var window = getWindow();
      var matrix;
      var curTransform;
      var transformMatrix;
      var curStyle = getComputedStyle$1(el);

      if (window.WebKitCSSMatrix) {
        curTransform = curStyle.transform || curStyle.webkitTransform;

        if (curTransform.split(',').length > 6) {
          curTransform = curTransform.split(', ').map(function (a) {
            return a.replace(',', '.');
          }).join(', ');
        } // Some old versions of Webkit choke when 'none' is passed; pass
        // empty string instead in this case


        transformMatrix = new window.WebKitCSSMatrix(curTransform === 'none' ? '' : curTransform);
      } else {
        transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue('transform').replace('translate(', 'matrix(1, 0, 0, 1,');
        matrix = transformMatrix.toString().split(',');
      }

      if (axis === 'x') {
        // Latest Chrome and webkits Fix
        if (window.WebKitCSSMatrix) curTransform = transformMatrix.m41; // Crazy IE10 Matrix
        else if (matrix.length === 16) curTransform = parseFloat(matrix[12]); // Normal Browsers
          else curTransform = parseFloat(matrix[4]);
      }

      if (axis === 'y') {
        // Latest Chrome and webkits Fix
        if (window.WebKitCSSMatrix) curTransform = transformMatrix.m42; // Crazy IE10 Matrix
        else if (matrix.length === 16) curTransform = parseFloat(matrix[13]); // Normal Browsers
          else curTransform = parseFloat(matrix[5]);
      }

      return curTransform || 0;
    }

    function isObject$1(o) {
      return typeof o === 'object' && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === 'Object';
    }

    function extend$1() {
      var to = Object(arguments.length <= 0 ? undefined : arguments[0]);
      var noExtend = ['__proto__', 'constructor', 'prototype'];

      for (var i = 1; i < arguments.length; i += 1) {
        var nextSource = i < 0 || arguments.length <= i ? undefined : arguments[i];

        if (nextSource !== undefined && nextSource !== null) {
          var keysArray = Object.keys(Object(nextSource)).filter(function (key) {
            return noExtend.indexOf(key) < 0;
          });

          for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {
            var nextKey = keysArray[nextIndex];
            var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);

            if (desc !== undefined && desc.enumerable) {
              if (isObject$1(to[nextKey]) && isObject$1(nextSource[nextKey])) {
                if (nextSource[nextKey].__swiper__) {
                  to[nextKey] = nextSource[nextKey];
                } else {
                  extend$1(to[nextKey], nextSource[nextKey]);
                }
              } else if (!isObject$1(to[nextKey]) && isObject$1(nextSource[nextKey])) {
                to[nextKey] = {};

                if (nextSource[nextKey].__swiper__) {
                  to[nextKey] = nextSource[nextKey];
                } else {
                  extend$1(to[nextKey], nextSource[nextKey]);
                }
              } else {
                to[nextKey] = nextSource[nextKey];
              }
            }
          }
        }
      }

      return to;
    }

    function bindModuleMethods(instance, obj) {
      Object.keys(obj).forEach(function (key) {
        if (isObject$1(obj[key])) {
          Object.keys(obj[key]).forEach(function (subKey) {
            if (typeof obj[key][subKey] === 'function') {
              obj[key][subKey] = obj[key][subKey].bind(instance);
            }
          });
        }

        instance[key] = obj[key];
      });
    }

    function classesToSelector(classes) {
      if (classes === void 0) {
        classes = '';
      }

      return "." + classes.trim().replace(/([\.:\/])/g, '\\$1') // eslint-disable-line
      .replace(/ /g, '.');
    }

    function createElementIfNotDefined($container, params, createElements, checkProps) {
      var document = getDocument();

      if (createElements) {
        Object.keys(checkProps).forEach(function (key) {
          if (!params[key] && params.auto === true) {
            var element = document.createElement('div');
            element.className = checkProps[key];
            $container.append(element);
            params[key] = element;
          }
        });
      }

      return params;
    }

    var support;

    function calcSupport() {
      var window = getWindow();
      var document = getDocument();
      return {
        touch: !!('ontouchstart' in window || window.DocumentTouch && document instanceof window.DocumentTouch),
        pointerEvents: !!window.PointerEvent && 'maxTouchPoints' in window.navigator && window.navigator.maxTouchPoints >= 0,
        observer: function checkObserver() {
          return 'MutationObserver' in window || 'WebkitMutationObserver' in window;
        }(),
        passiveListener: function checkPassiveListener() {
          var supportsPassive = false;

          try {
            var opts = Object.defineProperty({}, 'passive', {
              // eslint-disable-next-line
              get: function get() {
                supportsPassive = true;
              }
            });
            window.addEventListener('testPassiveListener', null, opts);
          } catch (e) {// No support
          }

          return supportsPassive;
        }(),
        gestures: function checkGestures() {
          return 'ongesturestart' in window;
        }()
      };
    }

    function getSupport() {
      if (!support) {
        support = calcSupport();
      }

      return support;
    }

    var device;

    function calcDevice(_temp) {
      var _ref = _temp === void 0 ? {} : _temp,
          userAgent = _ref.userAgent;

      var support = getSupport();
      var window = getWindow();
      var platform = window.navigator.platform;
      var ua = userAgent || window.navigator.userAgent;
      var device = {
        ios: false,
        android: false
      };
      var screenWidth = window.screen.width;
      var screenHeight = window.screen.height;
      var android = ua.match(/(Android);?[\s\/]+([\d.]+)?/); // eslint-disable-line

      var ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
      var ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
      var iphone = !ipad && ua.match(/(iPhone\sOS|iOS)\s([\d_]+)/);
      var windows = platform === 'Win32';
      var macos = platform === 'MacIntel'; // iPadOs 13 fix

      var iPadScreens = ['1024x1366', '1366x1024', '834x1194', '1194x834', '834x1112', '1112x834', '768x1024', '1024x768', '820x1180', '1180x820', '810x1080', '1080x810'];

      if (!ipad && macos && support.touch && iPadScreens.indexOf(screenWidth + "x" + screenHeight) >= 0) {
        ipad = ua.match(/(Version)\/([\d.]+)/);
        if (!ipad) ipad = [0, 1, '13_0_0'];
        macos = false;
      } // Android


      if (android && !windows) {
        device.os = 'android';
        device.android = true;
      }

      if (ipad || iphone || ipod) {
        device.os = 'ios';
        device.ios = true;
      } // Export object


      return device;
    }

    function getDevice(overrides) {
      if (overrides === void 0) {
        overrides = {};
      }

      if (!device) {
        device = calcDevice(overrides);
      }

      return device;
    }

    var browser$1;

    function calcBrowser() {
      var window = getWindow();

      function isSafari() {
        var ua = window.navigator.userAgent.toLowerCase();
        return ua.indexOf('safari') >= 0 && ua.indexOf('chrome') < 0 && ua.indexOf('android') < 0;
      }

      return {
        isEdge: !!window.navigator.userAgent.match(/Edge/g),
        isSafari: isSafari(),
        isWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window.navigator.userAgent)
      };
    }

    function getBrowser() {
      if (!browser$1) {
        browser$1 = calcBrowser();
      }

      return browser$1;
    }

    var supportsResizeObserver = function supportsResizeObserver() {
      var window = getWindow();
      return typeof window.ResizeObserver !== 'undefined';
    };

    var Resize = {
      name: 'resize',
      create: function create() {
        var swiper = this;
        extend$1(swiper, {
          resize: {
            observer: null,
            createObserver: function createObserver() {
              if (!swiper || swiper.destroyed || !swiper.initialized) return;
              swiper.resize.observer = new ResizeObserver(function (entries) {
                var width = swiper.width,
                    height = swiper.height;
                var newWidth = width;
                var newHeight = height;
                entries.forEach(function (_ref) {
                  var contentBoxSize = _ref.contentBoxSize,
                      contentRect = _ref.contentRect,
                      target = _ref.target;
                  if (target && target !== swiper.el) return;
                  newWidth = contentRect ? contentRect.width : (contentBoxSize[0] || contentBoxSize).inlineSize;
                  newHeight = contentRect ? contentRect.height : (contentBoxSize[0] || contentBoxSize).blockSize;
                });

                if (newWidth !== width || newHeight !== height) {
                  swiper.resize.resizeHandler();
                }
              });
              swiper.resize.observer.observe(swiper.el);
            },
            removeObserver: function removeObserver() {
              if (swiper.resize.observer && swiper.resize.observer.unobserve && swiper.el) {
                swiper.resize.observer.unobserve(swiper.el);
                swiper.resize.observer = null;
              }
            },
            resizeHandler: function resizeHandler() {
              if (!swiper || swiper.destroyed || !swiper.initialized) return;
              swiper.emit('beforeResize');
              swiper.emit('resize');
            },
            orientationChangeHandler: function orientationChangeHandler() {
              if (!swiper || swiper.destroyed || !swiper.initialized) return;
              swiper.emit('orientationchange');
            }
          }
        });
      },
      on: {
        init: function init(swiper) {
          var window = getWindow();

          if (swiper.params.resizeObserver && supportsResizeObserver()) {
            swiper.resize.createObserver();
            return;
          } // Emit resize


          window.addEventListener('resize', swiper.resize.resizeHandler); // Emit orientationchange

          window.addEventListener('orientationchange', swiper.resize.orientationChangeHandler);
        },
        destroy: function destroy(swiper) {
          var window = getWindow();
          swiper.resize.removeObserver();
          window.removeEventListener('resize', swiper.resize.resizeHandler);
          window.removeEventListener('orientationchange', swiper.resize.orientationChangeHandler);
        }
      }
    };

    function _extends$3() { _extends$3 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$3.apply(this, arguments); }
    var Observer = {
      attach: function attach(target, options) {
        if (options === void 0) {
          options = {};
        }

        var window = getWindow();
        var swiper = this;
        var ObserverFunc = window.MutationObserver || window.WebkitMutationObserver;
        var observer = new ObserverFunc(function (mutations) {
          // The observerUpdate event should only be triggered
          // once despite the number of mutations.  Additional
          // triggers are redundant and are very costly
          if (mutations.length === 1) {
            swiper.emit('observerUpdate', mutations[0]);
            return;
          }

          var observerUpdate = function observerUpdate() {
            swiper.emit('observerUpdate', mutations[0]);
          };

          if (window.requestAnimationFrame) {
            window.requestAnimationFrame(observerUpdate);
          } else {
            window.setTimeout(observerUpdate, 0);
          }
        });
        observer.observe(target, {
          attributes: typeof options.attributes === 'undefined' ? true : options.attributes,
          childList: typeof options.childList === 'undefined' ? true : options.childList,
          characterData: typeof options.characterData === 'undefined' ? true : options.characterData
        });
        swiper.observer.observers.push(observer);
      },
      init: function init() {
        var swiper = this;
        if (!swiper.support.observer || !swiper.params.observer) return;

        if (swiper.params.observeParents) {
          var containerParents = swiper.$el.parents();

          for (var i = 0; i < containerParents.length; i += 1) {
            swiper.observer.attach(containerParents[i]);
          }
        } // Observe container


        swiper.observer.attach(swiper.$el[0], {
          childList: swiper.params.observeSlideChildren
        }); // Observe wrapper

        swiper.observer.attach(swiper.$wrapperEl[0], {
          attributes: false
        });
      },
      destroy: function destroy() {
        var swiper = this;
        swiper.observer.observers.forEach(function (observer) {
          observer.disconnect();
        });
        swiper.observer.observers = [];
      }
    };
    var Observer$1 = {
      name: 'observer',
      params: {
        observer: false,
        observeParents: false,
        observeSlideChildren: false
      },
      create: function create() {
        var swiper = this;
        bindModuleMethods(swiper, {
          observer: _extends$3({}, Observer, {
            observers: []
          })
        });
      },
      on: {
        init: function init(swiper) {
          swiper.observer.init();
        },
        destroy: function destroy(swiper) {
          swiper.observer.destroy();
        }
      }
    };

    var modular = {
      useParams: function useParams(instanceParams) {
        var instance = this;
        if (!instance.modules) return;
        Object.keys(instance.modules).forEach(function (moduleName) {
          var module = instance.modules[moduleName]; // Extend params

          if (module.params) {
            extend$1(instanceParams, module.params);
          }
        });
      },
      useModules: function useModules(modulesParams) {
        if (modulesParams === void 0) {
          modulesParams = {};
        }

        var instance = this;
        if (!instance.modules) return;
        Object.keys(instance.modules).forEach(function (moduleName) {
          var module = instance.modules[moduleName];
          var moduleParams = modulesParams[moduleName] || {}; // Add event listeners

          if (module.on && instance.on) {
            Object.keys(module.on).forEach(function (moduleEventName) {
              instance.on(moduleEventName, module.on[moduleEventName]);
            });
          } // Module create callback


          if (module.create) {
            module.create.bind(instance)(moduleParams);
          }
        });
      }
    };

    /* eslint-disable no-underscore-dangle */
    var eventsEmitter = {
      on: function on(events, handler, priority) {
        var self = this;
        if (typeof handler !== 'function') return self;
        var method = priority ? 'unshift' : 'push';
        events.split(' ').forEach(function (event) {
          if (!self.eventsListeners[event]) self.eventsListeners[event] = [];
          self.eventsListeners[event][method](handler);
        });
        return self;
      },
      once: function once(events, handler, priority) {
        var self = this;
        if (typeof handler !== 'function') return self;

        function onceHandler() {
          self.off(events, onceHandler);

          if (onceHandler.__emitterProxy) {
            delete onceHandler.__emitterProxy;
          }

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          handler.apply(self, args);
        }

        onceHandler.__emitterProxy = handler;
        return self.on(events, onceHandler, priority);
      },
      onAny: function onAny(handler, priority) {
        var self = this;
        if (typeof handler !== 'function') return self;
        var method = priority ? 'unshift' : 'push';

        if (self.eventsAnyListeners.indexOf(handler) < 0) {
          self.eventsAnyListeners[method](handler);
        }

        return self;
      },
      offAny: function offAny(handler) {
        var self = this;
        if (!self.eventsAnyListeners) return self;
        var index = self.eventsAnyListeners.indexOf(handler);

        if (index >= 0) {
          self.eventsAnyListeners.splice(index, 1);
        }

        return self;
      },
      off: function off(events, handler) {
        var self = this;
        if (!self.eventsListeners) return self;
        events.split(' ').forEach(function (event) {
          if (typeof handler === 'undefined') {
            self.eventsListeners[event] = [];
          } else if (self.eventsListeners[event]) {
            self.eventsListeners[event].forEach(function (eventHandler, index) {
              if (eventHandler === handler || eventHandler.__emitterProxy && eventHandler.__emitterProxy === handler) {
                self.eventsListeners[event].splice(index, 1);
              }
            });
          }
        });
        return self;
      },
      emit: function emit() {
        var self = this;
        if (!self.eventsListeners) return self;
        var events;
        var data;
        var context;

        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        if (typeof args[0] === 'string' || Array.isArray(args[0])) {
          events = args[0];
          data = args.slice(1, args.length);
          context = self;
        } else {
          events = args[0].events;
          data = args[0].data;
          context = args[0].context || self;
        }

        data.unshift(context);
        var eventsArray = Array.isArray(events) ? events : events.split(' ');
        eventsArray.forEach(function (event) {
          if (self.eventsAnyListeners && self.eventsAnyListeners.length) {
            self.eventsAnyListeners.forEach(function (eventHandler) {
              eventHandler.apply(context, [event].concat(data));
            });
          }

          if (self.eventsListeners && self.eventsListeners[event]) {
            self.eventsListeners[event].forEach(function (eventHandler) {
              eventHandler.apply(context, data);
            });
          }
        });
        return self;
      }
    };

    function updateSize() {
      var swiper = this;
      var width;
      var height;
      var $el = swiper.$el;

      if (typeof swiper.params.width !== 'undefined' && swiper.params.width !== null) {
        width = swiper.params.width;
      } else {
        width = $el[0].clientWidth;
      }

      if (typeof swiper.params.height !== 'undefined' && swiper.params.height !== null) {
        height = swiper.params.height;
      } else {
        height = $el[0].clientHeight;
      }

      if (width === 0 && swiper.isHorizontal() || height === 0 && swiper.isVertical()) {
        return;
      } // Subtract paddings


      width = width - parseInt($el.css('padding-left') || 0, 10) - parseInt($el.css('padding-right') || 0, 10);
      height = height - parseInt($el.css('padding-top') || 0, 10) - parseInt($el.css('padding-bottom') || 0, 10);
      if (Number.isNaN(width)) width = 0;
      if (Number.isNaN(height)) height = 0;
      extend$1(swiper, {
        width: width,
        height: height,
        size: swiper.isHorizontal() ? width : height
      });
    }

    function updateSlides() {
      var swiper = this;

      function getDirectionLabel(property) {
        if (swiper.isHorizontal()) {
          return property;
        } // prettier-ignore


        return {
          'width': 'height',
          'margin-top': 'margin-left',
          'margin-bottom ': 'margin-right',
          'margin-left': 'margin-top',
          'margin-right': 'margin-bottom',
          'padding-left': 'padding-top',
          'padding-right': 'padding-bottom',
          'marginRight': 'marginBottom'
        }[property];
      }

      function getDirectionPropertyValue(node, label) {
        return parseFloat(node.getPropertyValue(getDirectionLabel(label)) || 0);
      }

      var params = swiper.params;
      var $wrapperEl = swiper.$wrapperEl,
          swiperSize = swiper.size,
          rtl = swiper.rtlTranslate,
          wrongRTL = swiper.wrongRTL;
      var isVirtual = swiper.virtual && params.virtual.enabled;
      var previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;
      var slides = $wrapperEl.children("." + swiper.params.slideClass);
      var slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;
      var snapGrid = [];
      var slidesGrid = [];
      var slidesSizesGrid = [];
      var offsetBefore = params.slidesOffsetBefore;

      if (typeof offsetBefore === 'function') {
        offsetBefore = params.slidesOffsetBefore.call(swiper);
      }

      var offsetAfter = params.slidesOffsetAfter;

      if (typeof offsetAfter === 'function') {
        offsetAfter = params.slidesOffsetAfter.call(swiper);
      }

      var previousSnapGridLength = swiper.snapGrid.length;
      var previousSlidesGridLength = swiper.slidesGrid.length;
      var spaceBetween = params.spaceBetween;
      var slidePosition = -offsetBefore;
      var prevSlideSize = 0;
      var index = 0;

      if (typeof swiperSize === 'undefined') {
        return;
      }

      if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {
        spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiperSize;
      }

      swiper.virtualSize = -spaceBetween; // reset margins

      if (rtl) slides.css({
        marginLeft: '',
        marginTop: ''
      });else slides.css({
        marginRight: '',
        marginBottom: ''
      });
      var slidesNumberEvenToRows;

      if (params.slidesPerColumn > 1) {
        if (Math.floor(slidesLength / params.slidesPerColumn) === slidesLength / swiper.params.slidesPerColumn) {
          slidesNumberEvenToRows = slidesLength;
        } else {
          slidesNumberEvenToRows = Math.ceil(slidesLength / params.slidesPerColumn) * params.slidesPerColumn;
        }

        if (params.slidesPerView !== 'auto' && params.slidesPerColumnFill === 'row') {
          slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, params.slidesPerView * params.slidesPerColumn);
        }
      } // Calc slides


      var slideSize;
      var slidesPerColumn = params.slidesPerColumn;
      var slidesPerRow = slidesNumberEvenToRows / slidesPerColumn;
      var numFullColumns = Math.floor(slidesLength / params.slidesPerColumn);

      for (var i = 0; i < slidesLength; i += 1) {
        slideSize = 0;
        var slide = slides.eq(i);

        if (params.slidesPerColumn > 1) {
          // Set slides order
          var newSlideOrderIndex = void 0;
          var column = void 0;
          var row = void 0;

          if (params.slidesPerColumnFill === 'row' && params.slidesPerGroup > 1) {
            var groupIndex = Math.floor(i / (params.slidesPerGroup * params.slidesPerColumn));
            var slideIndexInGroup = i - params.slidesPerColumn * params.slidesPerGroup * groupIndex;
            var columnsInGroup = groupIndex === 0 ? params.slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * slidesPerColumn * params.slidesPerGroup) / slidesPerColumn), params.slidesPerGroup);
            row = Math.floor(slideIndexInGroup / columnsInGroup);
            column = slideIndexInGroup - row * columnsInGroup + groupIndex * params.slidesPerGroup;
            newSlideOrderIndex = column + row * slidesNumberEvenToRows / slidesPerColumn;
            slide.css({
              '-webkit-box-ordinal-group': newSlideOrderIndex,
              '-moz-box-ordinal-group': newSlideOrderIndex,
              '-ms-flex-order': newSlideOrderIndex,
              '-webkit-order': newSlideOrderIndex,
              order: newSlideOrderIndex
            });
          } else if (params.slidesPerColumnFill === 'column') {
            column = Math.floor(i / slidesPerColumn);
            row = i - column * slidesPerColumn;

            if (column > numFullColumns || column === numFullColumns && row === slidesPerColumn - 1) {
              row += 1;

              if (row >= slidesPerColumn) {
                row = 0;
                column += 1;
              }
            }
          } else {
            row = Math.floor(i / slidesPerRow);
            column = i - row * slidesPerRow;
          }

          slide.css(getDirectionLabel('margin-top'), row !== 0 && params.spaceBetween && params.spaceBetween + "px");
        }

        if (slide.css('display') === 'none') continue; // eslint-disable-line

        if (params.slidesPerView === 'auto') {
          var slideStyles = getComputedStyle(slide[0]);
          var currentTransform = slide[0].style.transform;
          var currentWebKitTransform = slide[0].style.webkitTransform;

          if (currentTransform) {
            slide[0].style.transform = 'none';
          }

          if (currentWebKitTransform) {
            slide[0].style.webkitTransform = 'none';
          }

          if (params.roundLengths) {
            slideSize = swiper.isHorizontal() ? slide.outerWidth(true) : slide.outerHeight(true);
          } else {
            // eslint-disable-next-line
            var width = getDirectionPropertyValue(slideStyles, 'width');
            var paddingLeft = getDirectionPropertyValue(slideStyles, 'padding-left');
            var paddingRight = getDirectionPropertyValue(slideStyles, 'padding-right');
            var marginLeft = getDirectionPropertyValue(slideStyles, 'margin-left');
            var marginRight = getDirectionPropertyValue(slideStyles, 'margin-right');
            var boxSizing = slideStyles.getPropertyValue('box-sizing');

            if (boxSizing && boxSizing === 'border-box') {
              slideSize = width + marginLeft + marginRight;
            } else {
              var _slide$ = slide[0],
                  clientWidth = _slide$.clientWidth,
                  offsetWidth = _slide$.offsetWidth;
              slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight + (offsetWidth - clientWidth);
            }
          }

          if (currentTransform) {
            slide[0].style.transform = currentTransform;
          }

          if (currentWebKitTransform) {
            slide[0].style.webkitTransform = currentWebKitTransform;
          }

          if (params.roundLengths) slideSize = Math.floor(slideSize);
        } else {
          slideSize = (swiperSize - (params.slidesPerView - 1) * spaceBetween) / params.slidesPerView;
          if (params.roundLengths) slideSize = Math.floor(slideSize);

          if (slides[i]) {
            slides[i].style[getDirectionLabel('width')] = slideSize + "px";
          }
        }

        if (slides[i]) {
          slides[i].swiperSlideSize = slideSize;
        }

        slidesSizesGrid.push(slideSize);

        if (params.centeredSlides) {
          slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;
          if (prevSlideSize === 0 && i !== 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;
          if (i === 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;
          if (Math.abs(slidePosition) < 1 / 1000) slidePosition = 0;
          if (params.roundLengths) slidePosition = Math.floor(slidePosition);
          if (index % params.slidesPerGroup === 0) snapGrid.push(slidePosition);
          slidesGrid.push(slidePosition);
        } else {
          if (params.roundLengths) slidePosition = Math.floor(slidePosition);
          if ((index - Math.min(swiper.params.slidesPerGroupSkip, index)) % swiper.params.slidesPerGroup === 0) snapGrid.push(slidePosition);
          slidesGrid.push(slidePosition);
          slidePosition = slidePosition + slideSize + spaceBetween;
        }

        swiper.virtualSize += slideSize + spaceBetween;
        prevSlideSize = slideSize;
        index += 1;
      }

      swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;
      var newSlidesGrid;

      if (rtl && wrongRTL && (params.effect === 'slide' || params.effect === 'coverflow')) {
        $wrapperEl.css({
          width: swiper.virtualSize + params.spaceBetween + "px"
        });
      }

      if (params.setWrapperSize) {
        var _$wrapperEl$css;

        $wrapperEl.css((_$wrapperEl$css = {}, _$wrapperEl$css[getDirectionLabel('width')] = swiper.virtualSize + params.spaceBetween + "px", _$wrapperEl$css));
      }

      if (params.slidesPerColumn > 1) {
        var _$wrapperEl$css2;

        swiper.virtualSize = (slideSize + params.spaceBetween) * slidesNumberEvenToRows;
        swiper.virtualSize = Math.ceil(swiper.virtualSize / params.slidesPerColumn) - params.spaceBetween;
        $wrapperEl.css((_$wrapperEl$css2 = {}, _$wrapperEl$css2[getDirectionLabel('width')] = swiper.virtualSize + params.spaceBetween + "px", _$wrapperEl$css2));

        if (params.centeredSlides) {
          newSlidesGrid = [];

          for (var _i = 0; _i < snapGrid.length; _i += 1) {
            var slidesGridItem = snapGrid[_i];
            if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);
            if (snapGrid[_i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);
          }

          snapGrid = newSlidesGrid;
        }
      } // Remove last grid elements depending on width


      if (!params.centeredSlides) {
        newSlidesGrid = [];

        for (var _i2 = 0; _i2 < snapGrid.length; _i2 += 1) {
          var _slidesGridItem = snapGrid[_i2];
          if (params.roundLengths) _slidesGridItem = Math.floor(_slidesGridItem);

          if (snapGrid[_i2] <= swiper.virtualSize - swiperSize) {
            newSlidesGrid.push(_slidesGridItem);
          }
        }

        snapGrid = newSlidesGrid;

        if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {
          snapGrid.push(swiper.virtualSize - swiperSize);
        }
      }

      if (snapGrid.length === 0) snapGrid = [0];

      if (params.spaceBetween !== 0) {
        var _slides$filter$css;

        var key = swiper.isHorizontal() && rtl ? 'marginLeft' : getDirectionLabel('marginRight');
        slides.filter(function (_, slideIndex) {
          if (!params.cssMode) return true;

          if (slideIndex === slides.length - 1) {
            return false;
          }

          return true;
        }).css((_slides$filter$css = {}, _slides$filter$css[key] = spaceBetween + "px", _slides$filter$css));
      }

      if (params.centeredSlides && params.centeredSlidesBounds) {
        var allSlidesSize = 0;
        slidesSizesGrid.forEach(function (slideSizeValue) {
          allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);
        });
        allSlidesSize -= params.spaceBetween;
        var maxSnap = allSlidesSize - swiperSize;
        snapGrid = snapGrid.map(function (snap) {
          if (snap < 0) return -offsetBefore;
          if (snap > maxSnap) return maxSnap + offsetAfter;
          return snap;
        });
      }

      if (params.centerInsufficientSlides) {
        var _allSlidesSize = 0;
        slidesSizesGrid.forEach(function (slideSizeValue) {
          _allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);
        });
        _allSlidesSize -= params.spaceBetween;

        if (_allSlidesSize < swiperSize) {
          var allSlidesOffset = (swiperSize - _allSlidesSize) / 2;
          snapGrid.forEach(function (snap, snapIndex) {
            snapGrid[snapIndex] = snap - allSlidesOffset;
          });
          slidesGrid.forEach(function (snap, snapIndex) {
            slidesGrid[snapIndex] = snap + allSlidesOffset;
          });
        }
      }

      extend$1(swiper, {
        slides: slides,
        snapGrid: snapGrid,
        slidesGrid: slidesGrid,
        slidesSizesGrid: slidesSizesGrid
      });

      if (slidesLength !== previousSlidesLength) {
        swiper.emit('slidesLengthChange');
      }

      if (snapGrid.length !== previousSnapGridLength) {
        if (swiper.params.watchOverflow) swiper.checkOverflow();
        swiper.emit('snapGridLengthChange');
      }

      if (slidesGrid.length !== previousSlidesGridLength) {
        swiper.emit('slidesGridLengthChange');
      }

      if (params.watchSlidesProgress || params.watchSlidesVisibility) {
        swiper.updateSlidesOffset();
      }
    }

    function updateAutoHeight(speed) {
      var swiper = this;
      var activeSlides = [];
      var isVirtual = swiper.virtual && swiper.params.virtual.enabled;
      var newHeight = 0;
      var i;

      if (typeof speed === 'number') {
        swiper.setTransition(speed);
      } else if (speed === true) {
        swiper.setTransition(swiper.params.speed);
      }

      var getSlideByIndex = function getSlideByIndex(index) {
        if (isVirtual) {
          return swiper.slides.filter(function (el) {
            return parseInt(el.getAttribute('data-swiper-slide-index'), 10) === index;
          })[0];
        }

        return swiper.slides.eq(index)[0];
      }; // Find slides currently in view


      if (swiper.params.slidesPerView !== 'auto' && swiper.params.slidesPerView > 1) {
        if (swiper.params.centeredSlides) {
          swiper.visibleSlides.each(function (slide) {
            activeSlides.push(slide);
          });
        } else {
          for (i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1) {
            var index = swiper.activeIndex + i;
            if (index > swiper.slides.length && !isVirtual) break;
            activeSlides.push(getSlideByIndex(index));
          }
        }
      } else {
        activeSlides.push(getSlideByIndex(swiper.activeIndex));
      } // Find new height from highest slide in view


      for (i = 0; i < activeSlides.length; i += 1) {
        if (typeof activeSlides[i] !== 'undefined') {
          var height = activeSlides[i].offsetHeight;
          newHeight = height > newHeight ? height : newHeight;
        }
      } // Update Height


      if (newHeight) swiper.$wrapperEl.css('height', newHeight + "px");
    }

    function updateSlidesOffset() {
      var swiper = this;
      var slides = swiper.slides;

      for (var i = 0; i < slides.length; i += 1) {
        slides[i].swiperSlideOffset = swiper.isHorizontal() ? slides[i].offsetLeft : slides[i].offsetTop;
      }
    }

    function updateSlidesProgress(translate) {
      if (translate === void 0) {
        translate = this && this.translate || 0;
      }

      var swiper = this;
      var params = swiper.params;
      var slides = swiper.slides,
          rtl = swiper.rtlTranslate;
      if (slides.length === 0) return;
      if (typeof slides[0].swiperSlideOffset === 'undefined') swiper.updateSlidesOffset();
      var offsetCenter = -translate;
      if (rtl) offsetCenter = translate; // Visible Slides

      slides.removeClass(params.slideVisibleClass);
      swiper.visibleSlidesIndexes = [];
      swiper.visibleSlides = [];

      for (var i = 0; i < slides.length; i += 1) {
        var slide = slides[i];
        var slideProgress = (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0) - slide.swiperSlideOffset) / (slide.swiperSlideSize + params.spaceBetween);

        if (params.watchSlidesVisibility || params.centeredSlides && params.autoHeight) {
          var slideBefore = -(offsetCenter - slide.swiperSlideOffset);
          var slideAfter = slideBefore + swiper.slidesSizesGrid[i];
          var isVisible = slideBefore >= 0 && slideBefore < swiper.size - 1 || slideAfter > 1 && slideAfter <= swiper.size || slideBefore <= 0 && slideAfter >= swiper.size;

          if (isVisible) {
            swiper.visibleSlides.push(slide);
            swiper.visibleSlidesIndexes.push(i);
            slides.eq(i).addClass(params.slideVisibleClass);
          }
        }

        slide.progress = rtl ? -slideProgress : slideProgress;
      }

      swiper.visibleSlides = $(swiper.visibleSlides);
    }

    function updateProgress(translate) {
      var swiper = this;

      if (typeof translate === 'undefined') {
        var multiplier = swiper.rtlTranslate ? -1 : 1; // eslint-disable-next-line

        translate = swiper && swiper.translate && swiper.translate * multiplier || 0;
      }

      var params = swiper.params;
      var translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
      var progress = swiper.progress,
          isBeginning = swiper.isBeginning,
          isEnd = swiper.isEnd;
      var wasBeginning = isBeginning;
      var wasEnd = isEnd;

      if (translatesDiff === 0) {
        progress = 0;
        isBeginning = true;
        isEnd = true;
      } else {
        progress = (translate - swiper.minTranslate()) / translatesDiff;
        isBeginning = progress <= 0;
        isEnd = progress >= 1;
      }

      extend$1(swiper, {
        progress: progress,
        isBeginning: isBeginning,
        isEnd: isEnd
      });
      if (params.watchSlidesProgress || params.watchSlidesVisibility || params.centeredSlides && params.autoHeight) swiper.updateSlidesProgress(translate);

      if (isBeginning && !wasBeginning) {
        swiper.emit('reachBeginning toEdge');
      }

      if (isEnd && !wasEnd) {
        swiper.emit('reachEnd toEdge');
      }

      if (wasBeginning && !isBeginning || wasEnd && !isEnd) {
        swiper.emit('fromEdge');
      }

      swiper.emit('progress', progress);
    }

    function updateSlidesClasses() {
      var swiper = this;
      var slides = swiper.slides,
          params = swiper.params,
          $wrapperEl = swiper.$wrapperEl,
          activeIndex = swiper.activeIndex,
          realIndex = swiper.realIndex;
      var isVirtual = swiper.virtual && params.virtual.enabled;
      slides.removeClass(params.slideActiveClass + " " + params.slideNextClass + " " + params.slidePrevClass + " " + params.slideDuplicateActiveClass + " " + params.slideDuplicateNextClass + " " + params.slideDuplicatePrevClass);
      var activeSlide;

      if (isVirtual) {
        activeSlide = swiper.$wrapperEl.find("." + params.slideClass + "[data-swiper-slide-index=\"" + activeIndex + "\"]");
      } else {
        activeSlide = slides.eq(activeIndex);
      } // Active classes


      activeSlide.addClass(params.slideActiveClass);

      if (params.loop) {
        // Duplicate to all looped slides
        if (activeSlide.hasClass(params.slideDuplicateClass)) {
          $wrapperEl.children("." + params.slideClass + ":not(." + params.slideDuplicateClass + ")[data-swiper-slide-index=\"" + realIndex + "\"]").addClass(params.slideDuplicateActiveClass);
        } else {
          $wrapperEl.children("." + params.slideClass + "." + params.slideDuplicateClass + "[data-swiper-slide-index=\"" + realIndex + "\"]").addClass(params.slideDuplicateActiveClass);
        }
      } // Next Slide


      var nextSlide = activeSlide.nextAll("." + params.slideClass).eq(0).addClass(params.slideNextClass);

      if (params.loop && nextSlide.length === 0) {
        nextSlide = slides.eq(0);
        nextSlide.addClass(params.slideNextClass);
      } // Prev Slide


      var prevSlide = activeSlide.prevAll("." + params.slideClass).eq(0).addClass(params.slidePrevClass);

      if (params.loop && prevSlide.length === 0) {
        prevSlide = slides.eq(-1);
        prevSlide.addClass(params.slidePrevClass);
      }

      if (params.loop) {
        // Duplicate to all looped slides
        if (nextSlide.hasClass(params.slideDuplicateClass)) {
          $wrapperEl.children("." + params.slideClass + ":not(." + params.slideDuplicateClass + ")[data-swiper-slide-index=\"" + nextSlide.attr('data-swiper-slide-index') + "\"]").addClass(params.slideDuplicateNextClass);
        } else {
          $wrapperEl.children("." + params.slideClass + "." + params.slideDuplicateClass + "[data-swiper-slide-index=\"" + nextSlide.attr('data-swiper-slide-index') + "\"]").addClass(params.slideDuplicateNextClass);
        }

        if (prevSlide.hasClass(params.slideDuplicateClass)) {
          $wrapperEl.children("." + params.slideClass + ":not(." + params.slideDuplicateClass + ")[data-swiper-slide-index=\"" + prevSlide.attr('data-swiper-slide-index') + "\"]").addClass(params.slideDuplicatePrevClass);
        } else {
          $wrapperEl.children("." + params.slideClass + "." + params.slideDuplicateClass + "[data-swiper-slide-index=\"" + prevSlide.attr('data-swiper-slide-index') + "\"]").addClass(params.slideDuplicatePrevClass);
        }
      }

      swiper.emitSlidesClasses();
    }

    function updateActiveIndex(newActiveIndex) {
      var swiper = this;
      var translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;
      var slidesGrid = swiper.slidesGrid,
          snapGrid = swiper.snapGrid,
          params = swiper.params,
          previousIndex = swiper.activeIndex,
          previousRealIndex = swiper.realIndex,
          previousSnapIndex = swiper.snapIndex;
      var activeIndex = newActiveIndex;
      var snapIndex;

      if (typeof activeIndex === 'undefined') {
        for (var i = 0; i < slidesGrid.length; i += 1) {
          if (typeof slidesGrid[i + 1] !== 'undefined') {
            if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1] - (slidesGrid[i + 1] - slidesGrid[i]) / 2) {
              activeIndex = i;
            } else if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1]) {
              activeIndex = i + 1;
            }
          } else if (translate >= slidesGrid[i]) {
            activeIndex = i;
          }
        } // Normalize slideIndex


        if (params.normalizeSlideIndex) {
          if (activeIndex < 0 || typeof activeIndex === 'undefined') activeIndex = 0;
        }
      }

      if (snapGrid.indexOf(translate) >= 0) {
        snapIndex = snapGrid.indexOf(translate);
      } else {
        var skip = Math.min(params.slidesPerGroupSkip, activeIndex);
        snapIndex = skip + Math.floor((activeIndex - skip) / params.slidesPerGroup);
      }

      if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;

      if (activeIndex === previousIndex) {
        if (snapIndex !== previousSnapIndex) {
          swiper.snapIndex = snapIndex;
          swiper.emit('snapIndexChange');
        }

        return;
      } // Get real index


      var realIndex = parseInt(swiper.slides.eq(activeIndex).attr('data-swiper-slide-index') || activeIndex, 10);
      extend$1(swiper, {
        snapIndex: snapIndex,
        realIndex: realIndex,
        previousIndex: previousIndex,
        activeIndex: activeIndex
      });
      swiper.emit('activeIndexChange');
      swiper.emit('snapIndexChange');

      if (previousRealIndex !== realIndex) {
        swiper.emit('realIndexChange');
      }

      if (swiper.initialized || swiper.params.runCallbacksOnInit) {
        swiper.emit('slideChange');
      }
    }

    function updateClickedSlide(e) {
      var swiper = this;
      var params = swiper.params;
      var slide = $(e.target).closest("." + params.slideClass)[0];
      var slideFound = false;
      var slideIndex;

      if (slide) {
        for (var i = 0; i < swiper.slides.length; i += 1) {
          if (swiper.slides[i] === slide) {
            slideFound = true;
            slideIndex = i;
            break;
          }
        }
      }

      if (slide && slideFound) {
        swiper.clickedSlide = slide;

        if (swiper.virtual && swiper.params.virtual.enabled) {
          swiper.clickedIndex = parseInt($(slide).attr('data-swiper-slide-index'), 10);
        } else {
          swiper.clickedIndex = slideIndex;
        }
      } else {
        swiper.clickedSlide = undefined;
        swiper.clickedIndex = undefined;
        return;
      }

      if (params.slideToClickedSlide && swiper.clickedIndex !== undefined && swiper.clickedIndex !== swiper.activeIndex) {
        swiper.slideToClickedSlide();
      }
    }

    var update = {
      updateSize: updateSize,
      updateSlides: updateSlides,
      updateAutoHeight: updateAutoHeight,
      updateSlidesOffset: updateSlidesOffset,
      updateSlidesProgress: updateSlidesProgress,
      updateProgress: updateProgress,
      updateSlidesClasses: updateSlidesClasses,
      updateActiveIndex: updateActiveIndex,
      updateClickedSlide: updateClickedSlide
    };

    function getSwiperTranslate(axis) {
      if (axis === void 0) {
        axis = this.isHorizontal() ? 'x' : 'y';
      }

      var swiper = this;
      var params = swiper.params,
          rtl = swiper.rtlTranslate,
          translate = swiper.translate,
          $wrapperEl = swiper.$wrapperEl;

      if (params.virtualTranslate) {
        return rtl ? -translate : translate;
      }

      if (params.cssMode) {
        return translate;
      }

      var currentTranslate = getTranslate($wrapperEl[0], axis);
      if (rtl) currentTranslate = -currentTranslate;
      return currentTranslate || 0;
    }

    function setTranslate(translate, byController) {
      var swiper = this;
      var rtl = swiper.rtlTranslate,
          params = swiper.params,
          $wrapperEl = swiper.$wrapperEl,
          wrapperEl = swiper.wrapperEl,
          progress = swiper.progress;
      var x = 0;
      var y = 0;
      var z = 0;

      if (swiper.isHorizontal()) {
        x = rtl ? -translate : translate;
      } else {
        y = translate;
      }

      if (params.roundLengths) {
        x = Math.floor(x);
        y = Math.floor(y);
      }

      if (params.cssMode) {
        wrapperEl[swiper.isHorizontal() ? 'scrollLeft' : 'scrollTop'] = swiper.isHorizontal() ? -x : -y;
      } else if (!params.virtualTranslate) {
        $wrapperEl.transform("translate3d(" + x + "px, " + y + "px, " + z + "px)");
      }

      swiper.previousTranslate = swiper.translate;
      swiper.translate = swiper.isHorizontal() ? x : y; // Check if we need to update progress

      var newProgress;
      var translatesDiff = swiper.maxTranslate() - swiper.minTranslate();

      if (translatesDiff === 0) {
        newProgress = 0;
      } else {
        newProgress = (translate - swiper.minTranslate()) / translatesDiff;
      }

      if (newProgress !== progress) {
        swiper.updateProgress(translate);
      }

      swiper.emit('setTranslate', swiper.translate, byController);
    }

    function minTranslate() {
      return -this.snapGrid[0];
    }

    function maxTranslate() {
      return -this.snapGrid[this.snapGrid.length - 1];
    }

    function translateTo(translate, speed, runCallbacks, translateBounds, internal) {
      if (translate === void 0) {
        translate = 0;
      }

      if (speed === void 0) {
        speed = this.params.speed;
      }

      if (runCallbacks === void 0) {
        runCallbacks = true;
      }

      if (translateBounds === void 0) {
        translateBounds = true;
      }

      var swiper = this;
      var params = swiper.params,
          wrapperEl = swiper.wrapperEl;

      if (swiper.animating && params.preventInteractionOnTransition) {
        return false;
      }

      var minTranslate = swiper.minTranslate();
      var maxTranslate = swiper.maxTranslate();
      var newTranslate;
      if (translateBounds && translate > minTranslate) newTranslate = minTranslate;else if (translateBounds && translate < maxTranslate) newTranslate = maxTranslate;else newTranslate = translate; // Update progress

      swiper.updateProgress(newTranslate);

      if (params.cssMode) {
        var isH = swiper.isHorizontal();

        if (speed === 0) {
          wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = -newTranslate;
        } else {
          // eslint-disable-next-line
          if (wrapperEl.scrollTo) {
            var _wrapperEl$scrollTo;

            wrapperEl.scrollTo((_wrapperEl$scrollTo = {}, _wrapperEl$scrollTo[isH ? 'left' : 'top'] = -newTranslate, _wrapperEl$scrollTo.behavior = 'smooth', _wrapperEl$scrollTo));
          } else {
            wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = -newTranslate;
          }
        }

        return true;
      }

      if (speed === 0) {
        swiper.setTransition(0);
        swiper.setTranslate(newTranslate);

        if (runCallbacks) {
          swiper.emit('beforeTransitionStart', speed, internal);
          swiper.emit('transitionEnd');
        }
      } else {
        swiper.setTransition(speed);
        swiper.setTranslate(newTranslate);

        if (runCallbacks) {
          swiper.emit('beforeTransitionStart', speed, internal);
          swiper.emit('transitionStart');
        }

        if (!swiper.animating) {
          swiper.animating = true;

          if (!swiper.onTranslateToWrapperTransitionEnd) {
            swiper.onTranslateToWrapperTransitionEnd = function transitionEnd(e) {
              if (!swiper || swiper.destroyed) return;
              if (e.target !== this) return;
              swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);
              swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onTranslateToWrapperTransitionEnd);
              swiper.onTranslateToWrapperTransitionEnd = null;
              delete swiper.onTranslateToWrapperTransitionEnd;

              if (runCallbacks) {
                swiper.emit('transitionEnd');
              }
            };
          }

          swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);
          swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onTranslateToWrapperTransitionEnd);
        }
      }

      return true;
    }

    var translate = {
      getTranslate: getSwiperTranslate,
      setTranslate: setTranslate,
      minTranslate: minTranslate,
      maxTranslate: maxTranslate,
      translateTo: translateTo
    };

    function setTransition(duration, byController) {
      var swiper = this;

      if (!swiper.params.cssMode) {
        swiper.$wrapperEl.transition(duration);
      }

      swiper.emit('setTransition', duration, byController);
    }

    function transitionStart(runCallbacks, direction) {
      if (runCallbacks === void 0) {
        runCallbacks = true;
      }

      var swiper = this;
      var activeIndex = swiper.activeIndex,
          params = swiper.params,
          previousIndex = swiper.previousIndex;
      if (params.cssMode) return;

      if (params.autoHeight) {
        swiper.updateAutoHeight();
      }

      var dir = direction;

      if (!dir) {
        if (activeIndex > previousIndex) dir = 'next';else if (activeIndex < previousIndex) dir = 'prev';else dir = 'reset';
      }

      swiper.emit('transitionStart');

      if (runCallbacks && activeIndex !== previousIndex) {
        if (dir === 'reset') {
          swiper.emit('slideResetTransitionStart');
          return;
        }

        swiper.emit('slideChangeTransitionStart');

        if (dir === 'next') {
          swiper.emit('slideNextTransitionStart');
        } else {
          swiper.emit('slidePrevTransitionStart');
        }
      }
    }

    function transitionEnd(runCallbacks, direction) {
      if (runCallbacks === void 0) {
        runCallbacks = true;
      }

      var swiper = this;
      var activeIndex = swiper.activeIndex,
          previousIndex = swiper.previousIndex,
          params = swiper.params;
      swiper.animating = false;
      if (params.cssMode) return;
      swiper.setTransition(0);
      var dir = direction;

      if (!dir) {
        if (activeIndex > previousIndex) dir = 'next';else if (activeIndex < previousIndex) dir = 'prev';else dir = 'reset';
      }

      swiper.emit('transitionEnd');

      if (runCallbacks && activeIndex !== previousIndex) {
        if (dir === 'reset') {
          swiper.emit('slideResetTransitionEnd');
          return;
        }

        swiper.emit('slideChangeTransitionEnd');

        if (dir === 'next') {
          swiper.emit('slideNextTransitionEnd');
        } else {
          swiper.emit('slidePrevTransitionEnd');
        }
      }
    }

    var transition = {
      setTransition: setTransition,
      transitionStart: transitionStart,
      transitionEnd: transitionEnd
    };

    function slideTo(index, speed, runCallbacks, internal, initial) {
      if (index === void 0) {
        index = 0;
      }

      if (speed === void 0) {
        speed = this.params.speed;
      }

      if (runCallbacks === void 0) {
        runCallbacks = true;
      }

      if (typeof index !== 'number' && typeof index !== 'string') {
        throw new Error("The 'index' argument cannot have type other than 'number' or 'string'. [" + typeof index + "] given.");
      }

      if (typeof index === 'string') {
        /**
         * The `index` argument converted from `string` to `number`.
         * @type {number}
         */
        var indexAsNumber = parseInt(index, 10);
        /**
         * Determines whether the `index` argument is a valid `number`
         * after being converted from the `string` type.
         * @type {boolean}
         */

        var isValidNumber = isFinite(indexAsNumber);

        if (!isValidNumber) {
          throw new Error("The passed-in 'index' (string) couldn't be converted to 'number'. [" + index + "] given.");
        } // Knowing that the converted `index` is a valid number,
        // we can update the original argument's value.


        index = indexAsNumber;
      }

      var swiper = this;
      var slideIndex = index;
      if (slideIndex < 0) slideIndex = 0;
      var params = swiper.params,
          snapGrid = swiper.snapGrid,
          slidesGrid = swiper.slidesGrid,
          previousIndex = swiper.previousIndex,
          activeIndex = swiper.activeIndex,
          rtl = swiper.rtlTranslate,
          wrapperEl = swiper.wrapperEl,
          enabled = swiper.enabled;

      if (swiper.animating && params.preventInteractionOnTransition || !enabled && !internal && !initial) {
        return false;
      }

      var skip = Math.min(swiper.params.slidesPerGroupSkip, slideIndex);
      var snapIndex = skip + Math.floor((slideIndex - skip) / swiper.params.slidesPerGroup);
      if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;

      if ((activeIndex || params.initialSlide || 0) === (previousIndex || 0) && runCallbacks) {
        swiper.emit('beforeSlideChangeStart');
      }

      var translate = -snapGrid[snapIndex]; // Update progress

      swiper.updateProgress(translate); // Normalize slideIndex

      if (params.normalizeSlideIndex) {
        for (var i = 0; i < slidesGrid.length; i += 1) {
          var normalizedTranslate = -Math.floor(translate * 100);
          var normalizedGird = Math.floor(slidesGrid[i] * 100);
          var normalizedGridNext = Math.floor(slidesGrid[i + 1] * 100);

          if (typeof slidesGrid[i + 1] !== 'undefined') {
            if (normalizedTranslate >= normalizedGird && normalizedTranslate < normalizedGridNext - (normalizedGridNext - normalizedGird) / 2) {
              slideIndex = i;
            } else if (normalizedTranslate >= normalizedGird && normalizedTranslate < normalizedGridNext) {
              slideIndex = i + 1;
            }
          } else if (normalizedTranslate >= normalizedGird) {
            slideIndex = i;
          }
        }
      } // Directions locks


      if (swiper.initialized && slideIndex !== activeIndex) {
        if (!swiper.allowSlideNext && translate < swiper.translate && translate < swiper.minTranslate()) {
          return false;
        }

        if (!swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate()) {
          if ((activeIndex || 0) !== slideIndex) return false;
        }
      }

      var direction;
      if (slideIndex > activeIndex) direction = 'next';else if (slideIndex < activeIndex) direction = 'prev';else direction = 'reset'; // Update Index

      if (rtl && -translate === swiper.translate || !rtl && translate === swiper.translate) {
        swiper.updateActiveIndex(slideIndex); // Update Height

        if (params.autoHeight) {
          swiper.updateAutoHeight();
        }

        swiper.updateSlidesClasses();

        if (params.effect !== 'slide') {
          swiper.setTranslate(translate);
        }

        if (direction !== 'reset') {
          swiper.transitionStart(runCallbacks, direction);
          swiper.transitionEnd(runCallbacks, direction);
        }

        return false;
      }

      if (params.cssMode) {
        var isH = swiper.isHorizontal();
        var t = -translate;

        if (rtl) {
          t = wrapperEl.scrollWidth - wrapperEl.offsetWidth - t;
        }

        if (speed === 0) {
          wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;
        } else {
          // eslint-disable-next-line
          if (wrapperEl.scrollTo) {
            var _wrapperEl$scrollTo;

            wrapperEl.scrollTo((_wrapperEl$scrollTo = {}, _wrapperEl$scrollTo[isH ? 'left' : 'top'] = t, _wrapperEl$scrollTo.behavior = 'smooth', _wrapperEl$scrollTo));
          } else {
            wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;
          }
        }

        return true;
      }

      if (speed === 0) {
        swiper.setTransition(0);
        swiper.setTranslate(translate);
        swiper.updateActiveIndex(slideIndex);
        swiper.updateSlidesClasses();
        swiper.emit('beforeTransitionStart', speed, internal);
        swiper.transitionStart(runCallbacks, direction);
        swiper.transitionEnd(runCallbacks, direction);
      } else {
        swiper.setTransition(speed);
        swiper.setTranslate(translate);
        swiper.updateActiveIndex(slideIndex);
        swiper.updateSlidesClasses();
        swiper.emit('beforeTransitionStart', speed, internal);
        swiper.transitionStart(runCallbacks, direction);

        if (!swiper.animating) {
          swiper.animating = true;

          if (!swiper.onSlideToWrapperTransitionEnd) {
            swiper.onSlideToWrapperTransitionEnd = function transitionEnd(e) {
              if (!swiper || swiper.destroyed) return;
              if (e.target !== this) return;
              swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);
              swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);
              swiper.onSlideToWrapperTransitionEnd = null;
              delete swiper.onSlideToWrapperTransitionEnd;
              swiper.transitionEnd(runCallbacks, direction);
            };
          }

          swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);
          swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);
        }
      }

      return true;
    }

    function slideToLoop(index, speed, runCallbacks, internal) {
      if (index === void 0) {
        index = 0;
      }

      if (speed === void 0) {
        speed = this.params.speed;
      }

      if (runCallbacks === void 0) {
        runCallbacks = true;
      }

      var swiper = this;
      var newIndex = index;

      if (swiper.params.loop) {
        newIndex += swiper.loopedSlides;
      }

      return swiper.slideTo(newIndex, speed, runCallbacks, internal);
    }

    /* eslint no-unused-vars: "off" */
    function slideNext(speed, runCallbacks, internal) {
      if (speed === void 0) {
        speed = this.params.speed;
      }

      if (runCallbacks === void 0) {
        runCallbacks = true;
      }

      var swiper = this;
      var params = swiper.params,
          animating = swiper.animating,
          enabled = swiper.enabled;
      if (!enabled) return swiper;
      var increment = swiper.activeIndex < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup;

      if (params.loop) {
        if (animating && params.loopPreventsSlide) return false;
        swiper.loopFix(); // eslint-disable-next-line

        swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;
      }

      return swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);
    }

    /* eslint no-unused-vars: "off" */
    function slidePrev(speed, runCallbacks, internal) {
      if (speed === void 0) {
        speed = this.params.speed;
      }

      if (runCallbacks === void 0) {
        runCallbacks = true;
      }

      var swiper = this;
      var params = swiper.params,
          animating = swiper.animating,
          snapGrid = swiper.snapGrid,
          slidesGrid = swiper.slidesGrid,
          rtlTranslate = swiper.rtlTranslate,
          enabled = swiper.enabled;
      if (!enabled) return swiper;

      if (params.loop) {
        if (animating && params.loopPreventsSlide) return false;
        swiper.loopFix(); // eslint-disable-next-line

        swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;
      }

      var translate = rtlTranslate ? swiper.translate : -swiper.translate;

      function normalize(val) {
        if (val < 0) return -Math.floor(Math.abs(val));
        return Math.floor(val);
      }

      var normalizedTranslate = normalize(translate);
      var normalizedSnapGrid = snapGrid.map(function (val) {
        return normalize(val);
      });
      snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate)];
      var prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];

      if (typeof prevSnap === 'undefined' && params.cssMode) {
        snapGrid.forEach(function (snap) {
          if (!prevSnap && normalizedTranslate >= snap) prevSnap = snap;
        });
      }

      var prevIndex;

      if (typeof prevSnap !== 'undefined') {
        prevIndex = slidesGrid.indexOf(prevSnap);
        if (prevIndex < 0) prevIndex = swiper.activeIndex - 1;
      }

      return swiper.slideTo(prevIndex, speed, runCallbacks, internal);
    }

    /* eslint no-unused-vars: "off" */
    function slideReset(speed, runCallbacks, internal) {
      if (speed === void 0) {
        speed = this.params.speed;
      }

      if (runCallbacks === void 0) {
        runCallbacks = true;
      }

      var swiper = this;
      return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);
    }

    /* eslint no-unused-vars: "off" */
    function slideToClosest(speed, runCallbacks, internal, threshold) {
      if (speed === void 0) {
        speed = this.params.speed;
      }

      if (runCallbacks === void 0) {
        runCallbacks = true;
      }

      if (threshold === void 0) {
        threshold = 0.5;
      }

      var swiper = this;
      var index = swiper.activeIndex;
      var skip = Math.min(swiper.params.slidesPerGroupSkip, index);
      var snapIndex = skip + Math.floor((index - skip) / swiper.params.slidesPerGroup);
      var translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;

      if (translate >= swiper.snapGrid[snapIndex]) {
        // The current translate is on or after the current snap index, so the choice
        // is between the current index and the one after it.
        var currentSnap = swiper.snapGrid[snapIndex];
        var nextSnap = swiper.snapGrid[snapIndex + 1];

        if (translate - currentSnap > (nextSnap - currentSnap) * threshold) {
          index += swiper.params.slidesPerGroup;
        }
      } else {
        // The current translate is before the current snap index, so the choice
        // is between the current index and the one before it.
        var prevSnap = swiper.snapGrid[snapIndex - 1];
        var _currentSnap = swiper.snapGrid[snapIndex];

        if (translate - prevSnap <= (_currentSnap - prevSnap) * threshold) {
          index -= swiper.params.slidesPerGroup;
        }
      }

      index = Math.max(index, 0);
      index = Math.min(index, swiper.slidesGrid.length - 1);
      return swiper.slideTo(index, speed, runCallbacks, internal);
    }

    function slideToClickedSlide() {
      var swiper = this;
      var params = swiper.params,
          $wrapperEl = swiper.$wrapperEl;
      var slidesPerView = params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : params.slidesPerView;
      var slideToIndex = swiper.clickedIndex;
      var realIndex;

      if (params.loop) {
        if (swiper.animating) return;
        realIndex = parseInt($(swiper.clickedSlide).attr('data-swiper-slide-index'), 10);

        if (params.centeredSlides) {
          if (slideToIndex < swiper.loopedSlides - slidesPerView / 2 || slideToIndex > swiper.slides.length - swiper.loopedSlides + slidesPerView / 2) {
            swiper.loopFix();
            slideToIndex = $wrapperEl.children("." + params.slideClass + "[data-swiper-slide-index=\"" + realIndex + "\"]:not(." + params.slideDuplicateClass + ")").eq(0).index();
            nextTick(function () {
              swiper.slideTo(slideToIndex);
            });
          } else {
            swiper.slideTo(slideToIndex);
          }
        } else if (slideToIndex > swiper.slides.length - slidesPerView) {
          swiper.loopFix();
          slideToIndex = $wrapperEl.children("." + params.slideClass + "[data-swiper-slide-index=\"" + realIndex + "\"]:not(." + params.slideDuplicateClass + ")").eq(0).index();
          nextTick(function () {
            swiper.slideTo(slideToIndex);
          });
        } else {
          swiper.slideTo(slideToIndex);
        }
      } else {
        swiper.slideTo(slideToIndex);
      }
    }

    var slide = {
      slideTo: slideTo,
      slideToLoop: slideToLoop,
      slideNext: slideNext,
      slidePrev: slidePrev,
      slideReset: slideReset,
      slideToClosest: slideToClosest,
      slideToClickedSlide: slideToClickedSlide
    };

    function loopCreate() {
      var swiper = this;
      var document = getDocument();
      var params = swiper.params,
          $wrapperEl = swiper.$wrapperEl; // Remove duplicated slides

      $wrapperEl.children("." + params.slideClass + "." + params.slideDuplicateClass).remove();
      var slides = $wrapperEl.children("." + params.slideClass);

      if (params.loopFillGroupWithBlank) {
        var blankSlidesNum = params.slidesPerGroup - slides.length % params.slidesPerGroup;

        if (blankSlidesNum !== params.slidesPerGroup) {
          for (var i = 0; i < blankSlidesNum; i += 1) {
            var blankNode = $(document.createElement('div')).addClass(params.slideClass + " " + params.slideBlankClass);
            $wrapperEl.append(blankNode);
          }

          slides = $wrapperEl.children("." + params.slideClass);
        }
      }

      if (params.slidesPerView === 'auto' && !params.loopedSlides) params.loopedSlides = slides.length;
      swiper.loopedSlides = Math.ceil(parseFloat(params.loopedSlides || params.slidesPerView, 10));
      swiper.loopedSlides += params.loopAdditionalSlides;

      if (swiper.loopedSlides > slides.length) {
        swiper.loopedSlides = slides.length;
      }

      var prependSlides = [];
      var appendSlides = [];
      slides.each(function (el, index) {
        var slide = $(el);

        if (index < swiper.loopedSlides) {
          appendSlides.push(el);
        }

        if (index < slides.length && index >= slides.length - swiper.loopedSlides) {
          prependSlides.push(el);
        }

        slide.attr('data-swiper-slide-index', index);
      });

      for (var _i = 0; _i < appendSlides.length; _i += 1) {
        $wrapperEl.append($(appendSlides[_i].cloneNode(true)).addClass(params.slideDuplicateClass));
      }

      for (var _i2 = prependSlides.length - 1; _i2 >= 0; _i2 -= 1) {
        $wrapperEl.prepend($(prependSlides[_i2].cloneNode(true)).addClass(params.slideDuplicateClass));
      }
    }

    function loopFix() {
      var swiper = this;
      swiper.emit('beforeLoopFix');
      var activeIndex = swiper.activeIndex,
          slides = swiper.slides,
          loopedSlides = swiper.loopedSlides,
          allowSlidePrev = swiper.allowSlidePrev,
          allowSlideNext = swiper.allowSlideNext,
          snapGrid = swiper.snapGrid,
          rtl = swiper.rtlTranslate;
      var newIndex;
      swiper.allowSlidePrev = true;
      swiper.allowSlideNext = true;
      var snapTranslate = -snapGrid[activeIndex];
      var diff = snapTranslate - swiper.getTranslate(); // Fix For Negative Oversliding

      if (activeIndex < loopedSlides) {
        newIndex = slides.length - loopedSlides * 3 + activeIndex;
        newIndex += loopedSlides;
        var slideChanged = swiper.slideTo(newIndex, 0, false, true);

        if (slideChanged && diff !== 0) {
          swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);
        }
      } else if (activeIndex >= slides.length - loopedSlides) {
        // Fix For Positive Oversliding
        newIndex = -slides.length + activeIndex + loopedSlides;
        newIndex += loopedSlides;

        var _slideChanged = swiper.slideTo(newIndex, 0, false, true);

        if (_slideChanged && diff !== 0) {
          swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);
        }
      }

      swiper.allowSlidePrev = allowSlidePrev;
      swiper.allowSlideNext = allowSlideNext;
      swiper.emit('loopFix');
    }

    function loopDestroy() {
      var swiper = this;
      var $wrapperEl = swiper.$wrapperEl,
          params = swiper.params,
          slides = swiper.slides;
      $wrapperEl.children("." + params.slideClass + "." + params.slideDuplicateClass + ",." + params.slideClass + "." + params.slideBlankClass).remove();
      slides.removeAttr('data-swiper-slide-index');
    }

    var loop = {
      loopCreate: loopCreate,
      loopFix: loopFix,
      loopDestroy: loopDestroy
    };

    function setGrabCursor(moving) {
      var swiper = this;
      if (swiper.support.touch || !swiper.params.simulateTouch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) return;
      var el = swiper.el;
      el.style.cursor = 'move';
      el.style.cursor = moving ? '-webkit-grabbing' : '-webkit-grab';
      el.style.cursor = moving ? '-moz-grabbin' : '-moz-grab';
      el.style.cursor = moving ? 'grabbing' : 'grab';
    }

    function unsetGrabCursor() {
      var swiper = this;

      if (swiper.support.touch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) {
        return;
      }

      swiper.el.style.cursor = '';
    }

    var grabCursor = {
      setGrabCursor: setGrabCursor,
      unsetGrabCursor: unsetGrabCursor
    };

    function appendSlide(slides) {
      var swiper = this;
      var $wrapperEl = swiper.$wrapperEl,
          params = swiper.params;

      if (params.loop) {
        swiper.loopDestroy();
      }

      if (typeof slides === 'object' && 'length' in slides) {
        for (var i = 0; i < slides.length; i += 1) {
          if (slides[i]) $wrapperEl.append(slides[i]);
        }
      } else {
        $wrapperEl.append(slides);
      }

      if (params.loop) {
        swiper.loopCreate();
      }

      if (!(params.observer && swiper.support.observer)) {
        swiper.update();
      }
    }

    function prependSlide(slides) {
      var swiper = this;
      var params = swiper.params,
          $wrapperEl = swiper.$wrapperEl,
          activeIndex = swiper.activeIndex;

      if (params.loop) {
        swiper.loopDestroy();
      }

      var newActiveIndex = activeIndex + 1;

      if (typeof slides === 'object' && 'length' in slides) {
        for (var i = 0; i < slides.length; i += 1) {
          if (slides[i]) $wrapperEl.prepend(slides[i]);
        }

        newActiveIndex = activeIndex + slides.length;
      } else {
        $wrapperEl.prepend(slides);
      }

      if (params.loop) {
        swiper.loopCreate();
      }

      if (!(params.observer && swiper.support.observer)) {
        swiper.update();
      }

      swiper.slideTo(newActiveIndex, 0, false);
    }

    function addSlide(index, slides) {
      var swiper = this;
      var $wrapperEl = swiper.$wrapperEl,
          params = swiper.params,
          activeIndex = swiper.activeIndex;
      var activeIndexBuffer = activeIndex;

      if (params.loop) {
        activeIndexBuffer -= swiper.loopedSlides;
        swiper.loopDestroy();
        swiper.slides = $wrapperEl.children("." + params.slideClass);
      }

      var baseLength = swiper.slides.length;

      if (index <= 0) {
        swiper.prependSlide(slides);
        return;
      }

      if (index >= baseLength) {
        swiper.appendSlide(slides);
        return;
      }

      var newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + 1 : activeIndexBuffer;
      var slidesBuffer = [];

      for (var i = baseLength - 1; i >= index; i -= 1) {
        var currentSlide = swiper.slides.eq(i);
        currentSlide.remove();
        slidesBuffer.unshift(currentSlide);
      }

      if (typeof slides === 'object' && 'length' in slides) {
        for (var _i = 0; _i < slides.length; _i += 1) {
          if (slides[_i]) $wrapperEl.append(slides[_i]);
        }

        newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + slides.length : activeIndexBuffer;
      } else {
        $wrapperEl.append(slides);
      }

      for (var _i2 = 0; _i2 < slidesBuffer.length; _i2 += 1) {
        $wrapperEl.append(slidesBuffer[_i2]);
      }

      if (params.loop) {
        swiper.loopCreate();
      }

      if (!(params.observer && swiper.support.observer)) {
        swiper.update();
      }

      if (params.loop) {
        swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);
      } else {
        swiper.slideTo(newActiveIndex, 0, false);
      }
    }

    function removeSlide(slidesIndexes) {
      var swiper = this;
      var params = swiper.params,
          $wrapperEl = swiper.$wrapperEl,
          activeIndex = swiper.activeIndex;
      var activeIndexBuffer = activeIndex;

      if (params.loop) {
        activeIndexBuffer -= swiper.loopedSlides;
        swiper.loopDestroy();
        swiper.slides = $wrapperEl.children("." + params.slideClass);
      }

      var newActiveIndex = activeIndexBuffer;
      var indexToRemove;

      if (typeof slidesIndexes === 'object' && 'length' in slidesIndexes) {
        for (var i = 0; i < slidesIndexes.length; i += 1) {
          indexToRemove = slidesIndexes[i];
          if (swiper.slides[indexToRemove]) swiper.slides.eq(indexToRemove).remove();
          if (indexToRemove < newActiveIndex) newActiveIndex -= 1;
        }

        newActiveIndex = Math.max(newActiveIndex, 0);
      } else {
        indexToRemove = slidesIndexes;
        if (swiper.slides[indexToRemove]) swiper.slides.eq(indexToRemove).remove();
        if (indexToRemove < newActiveIndex) newActiveIndex -= 1;
        newActiveIndex = Math.max(newActiveIndex, 0);
      }

      if (params.loop) {
        swiper.loopCreate();
      }

      if (!(params.observer && swiper.support.observer)) {
        swiper.update();
      }

      if (params.loop) {
        swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);
      } else {
        swiper.slideTo(newActiveIndex, 0, false);
      }
    }

    function removeAllSlides() {
      var swiper = this;
      var slidesIndexes = [];

      for (var i = 0; i < swiper.slides.length; i += 1) {
        slidesIndexes.push(i);
      }

      swiper.removeSlide(slidesIndexes);
    }

    var manipulation = {
      appendSlide: appendSlide,
      prependSlide: prependSlide,
      addSlide: addSlide,
      removeSlide: removeSlide,
      removeAllSlides: removeAllSlides
    };

    function onTouchStart(event) {
      var swiper = this;
      var document = getDocument();
      var window = getWindow();
      var data = swiper.touchEventsData;
      var params = swiper.params,
          touches = swiper.touches,
          enabled = swiper.enabled;
      if (!enabled) return;

      if (swiper.animating && params.preventInteractionOnTransition) {
        return;
      }

      var e = event;
      if (e.originalEvent) e = e.originalEvent;
      var $targetEl = $(e.target);

      if (params.touchEventsTarget === 'wrapper') {
        if (!$targetEl.closest(swiper.wrapperEl).length) return;
      }

      data.isTouchEvent = e.type === 'touchstart';
      if (!data.isTouchEvent && 'which' in e && e.which === 3) return;
      if (!data.isTouchEvent && 'button' in e && e.button > 0) return;
      if (data.isTouched && data.isMoved) return; // change target el for shadow root componenet

      var swipingClassHasValue = !!params.noSwipingClass && params.noSwipingClass !== '';

      if (swipingClassHasValue && e.target && e.target.shadowRoot && event.path && event.path[0]) {
        $targetEl = $(event.path[0]);
      }

      if (params.noSwiping && $targetEl.closest(params.noSwipingSelector ? params.noSwipingSelector : "." + params.noSwipingClass)[0]) {
        swiper.allowClick = true;
        return;
      }

      if (params.swipeHandler) {
        if (!$targetEl.closest(params.swipeHandler)[0]) return;
      }

      touches.currentX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;
      touches.currentY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;
      var startX = touches.currentX;
      var startY = touches.currentY; // Do NOT start if iOS edge swipe is detected. Otherwise iOS app cannot swipe-to-go-back anymore

      var edgeSwipeDetection = params.edgeSwipeDetection || params.iOSEdgeSwipeDetection;
      var edgeSwipeThreshold = params.edgeSwipeThreshold || params.iOSEdgeSwipeThreshold;

      if (edgeSwipeDetection && (startX <= edgeSwipeThreshold || startX >= window.innerWidth - edgeSwipeThreshold)) {
        if (edgeSwipeDetection === 'prevent') {
          event.preventDefault();
        } else {
          return;
        }
      }

      extend$1(data, {
        isTouched: true,
        isMoved: false,
        allowTouchCallbacks: true,
        isScrolling: undefined,
        startMoving: undefined
      });
      touches.startX = startX;
      touches.startY = startY;
      data.touchStartTime = now();
      swiper.allowClick = true;
      swiper.updateSize();
      swiper.swipeDirection = undefined;
      if (params.threshold > 0) data.allowThresholdMove = false;

      if (e.type !== 'touchstart') {
        var preventDefault = true;
        if ($targetEl.is(data.formElements)) preventDefault = false;

        if (document.activeElement && $(document.activeElement).is(data.formElements) && document.activeElement !== $targetEl[0]) {
          document.activeElement.blur();
        }

        var shouldPreventDefault = preventDefault && swiper.allowTouchMove && params.touchStartPreventDefault;

        if ((params.touchStartForcePreventDefault || shouldPreventDefault) && !$targetEl[0].isContentEditable) {
          e.preventDefault();
        }
      }

      swiper.emit('touchStart', e);
    }

    function onTouchMove(event) {
      var document = getDocument();
      var swiper = this;
      var data = swiper.touchEventsData;
      var params = swiper.params,
          touches = swiper.touches,
          rtl = swiper.rtlTranslate,
          enabled = swiper.enabled;
      if (!enabled) return;
      var e = event;
      if (e.originalEvent) e = e.originalEvent;

      if (!data.isTouched) {
        if (data.startMoving && data.isScrolling) {
          swiper.emit('touchMoveOpposite', e);
        }

        return;
      }

      if (data.isTouchEvent && e.type !== 'touchmove') return;
      var targetTouch = e.type === 'touchmove' && e.targetTouches && (e.targetTouches[0] || e.changedTouches[0]);
      var pageX = e.type === 'touchmove' ? targetTouch.pageX : e.pageX;
      var pageY = e.type === 'touchmove' ? targetTouch.pageY : e.pageY;

      if (e.preventedByNestedSwiper) {
        touches.startX = pageX;
        touches.startY = pageY;
        return;
      }

      if (!swiper.allowTouchMove) {
        // isMoved = true;
        swiper.allowClick = false;

        if (data.isTouched) {
          extend$1(touches, {
            startX: pageX,
            startY: pageY,
            currentX: pageX,
            currentY: pageY
          });
          data.touchStartTime = now();
        }

        return;
      }

      if (data.isTouchEvent && params.touchReleaseOnEdges && !params.loop) {
        if (swiper.isVertical()) {
          // Vertical
          if (pageY < touches.startY && swiper.translate <= swiper.maxTranslate() || pageY > touches.startY && swiper.translate >= swiper.minTranslate()) {
            data.isTouched = false;
            data.isMoved = false;
            return;
          }
        } else if (pageX < touches.startX && swiper.translate <= swiper.maxTranslate() || pageX > touches.startX && swiper.translate >= swiper.minTranslate()) {
          return;
        }
      }

      if (data.isTouchEvent && document.activeElement) {
        if (e.target === document.activeElement && $(e.target).is(data.formElements)) {
          data.isMoved = true;
          swiper.allowClick = false;
          return;
        }
      }

      if (data.allowTouchCallbacks) {
        swiper.emit('touchMove', e);
      }

      if (e.targetTouches && e.targetTouches.length > 1) return;
      touches.currentX = pageX;
      touches.currentY = pageY;
      var diffX = touches.currentX - touches.startX;
      var diffY = touches.currentY - touches.startY;
      if (swiper.params.threshold && Math.sqrt(Math.pow(diffX, 2) + Math.pow(diffY, 2)) < swiper.params.threshold) return;

      if (typeof data.isScrolling === 'undefined') {
        var touchAngle;

        if (swiper.isHorizontal() && touches.currentY === touches.startY || swiper.isVertical() && touches.currentX === touches.startX) {
          data.isScrolling = false;
        } else {
          // eslint-disable-next-line
          if (diffX * diffX + diffY * diffY >= 25) {
            touchAngle = Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180 / Math.PI;
            data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : 90 - touchAngle > params.touchAngle;
          }
        }
      }

      if (data.isScrolling) {
        swiper.emit('touchMoveOpposite', e);
      }

      if (typeof data.startMoving === 'undefined') {
        if (touches.currentX !== touches.startX || touches.currentY !== touches.startY) {
          data.startMoving = true;
        }
      }

      if (data.isScrolling) {
        data.isTouched = false;
        return;
      }

      if (!data.startMoving) {
        return;
      }

      swiper.allowClick = false;

      if (!params.cssMode && e.cancelable) {
        e.preventDefault();
      }

      if (params.touchMoveStopPropagation && !params.nested) {
        e.stopPropagation();
      }

      if (!data.isMoved) {
        if (params.loop) {
          swiper.loopFix();
        }

        data.startTranslate = swiper.getTranslate();
        swiper.setTransition(0);

        if (swiper.animating) {
          swiper.$wrapperEl.trigger('webkitTransitionEnd transitionend');
        }

        data.allowMomentumBounce = false; // Grab Cursor

        if (params.grabCursor && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {
          swiper.setGrabCursor(true);
        }

        swiper.emit('sliderFirstMove', e);
      }

      swiper.emit('sliderMove', e);
      data.isMoved = true;
      var diff = swiper.isHorizontal() ? diffX : diffY;
      touches.diff = diff;
      diff *= params.touchRatio;
      if (rtl) diff = -diff;
      swiper.swipeDirection = diff > 0 ? 'prev' : 'next';
      data.currentTranslate = diff + data.startTranslate;
      var disableParentSwiper = true;
      var resistanceRatio = params.resistanceRatio;

      if (params.touchReleaseOnEdges) {
        resistanceRatio = 0;
      }

      if (diff > 0 && data.currentTranslate > swiper.minTranslate()) {
        disableParentSwiper = false;
        if (params.resistance) data.currentTranslate = swiper.minTranslate() - 1 + Math.pow(-swiper.minTranslate() + data.startTranslate + diff, resistanceRatio);
      } else if (diff < 0 && data.currentTranslate < swiper.maxTranslate()) {
        disableParentSwiper = false;
        if (params.resistance) data.currentTranslate = swiper.maxTranslate() + 1 - Math.pow(swiper.maxTranslate() - data.startTranslate - diff, resistanceRatio);
      }

      if (disableParentSwiper) {
        e.preventedByNestedSwiper = true;
      } // Directions locks


      if (!swiper.allowSlideNext && swiper.swipeDirection === 'next' && data.currentTranslate < data.startTranslate) {
        data.currentTranslate = data.startTranslate;
      }

      if (!swiper.allowSlidePrev && swiper.swipeDirection === 'prev' && data.currentTranslate > data.startTranslate) {
        data.currentTranslate = data.startTranslate;
      }

      if (!swiper.allowSlidePrev && !swiper.allowSlideNext) {
        data.currentTranslate = data.startTranslate;
      } // Threshold


      if (params.threshold > 0) {
        if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {
          if (!data.allowThresholdMove) {
            data.allowThresholdMove = true;
            touches.startX = touches.currentX;
            touches.startY = touches.currentY;
            data.currentTranslate = data.startTranslate;
            touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;
            return;
          }
        } else {
          data.currentTranslate = data.startTranslate;
          return;
        }
      }

      if (!params.followFinger || params.cssMode) return; // Update active index in free mode

      if (params.freeMode || params.watchSlidesProgress || params.watchSlidesVisibility) {
        swiper.updateActiveIndex();
        swiper.updateSlidesClasses();
      }

      if (params.freeMode) {
        // Velocity
        if (data.velocities.length === 0) {
          data.velocities.push({
            position: touches[swiper.isHorizontal() ? 'startX' : 'startY'],
            time: data.touchStartTime
          });
        }

        data.velocities.push({
          position: touches[swiper.isHorizontal() ? 'currentX' : 'currentY'],
          time: now()
        });
      } // Update progress


      swiper.updateProgress(data.currentTranslate); // Update translate

      swiper.setTranslate(data.currentTranslate);
    }

    function onTouchEnd(event) {
      var swiper = this;
      var data = swiper.touchEventsData;
      var params = swiper.params,
          touches = swiper.touches,
          rtl = swiper.rtlTranslate,
          $wrapperEl = swiper.$wrapperEl,
          slidesGrid = swiper.slidesGrid,
          snapGrid = swiper.snapGrid,
          enabled = swiper.enabled;
      if (!enabled) return;
      var e = event;
      if (e.originalEvent) e = e.originalEvent;

      if (data.allowTouchCallbacks) {
        swiper.emit('touchEnd', e);
      }

      data.allowTouchCallbacks = false;

      if (!data.isTouched) {
        if (data.isMoved && params.grabCursor) {
          swiper.setGrabCursor(false);
        }

        data.isMoved = false;
        data.startMoving = false;
        return;
      } // Return Grab Cursor


      if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {
        swiper.setGrabCursor(false);
      } // Time diff


      var touchEndTime = now();
      var timeDiff = touchEndTime - data.touchStartTime; // Tap, doubleTap, Click

      if (swiper.allowClick) {
        swiper.updateClickedSlide(e);
        swiper.emit('tap click', e);

        if (timeDiff < 300 && touchEndTime - data.lastClickTime < 300) {
          swiper.emit('doubleTap doubleClick', e);
        }
      }

      data.lastClickTime = now();
      nextTick(function () {
        if (!swiper.destroyed) swiper.allowClick = true;
      });

      if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 || data.currentTranslate === data.startTranslate) {
        data.isTouched = false;
        data.isMoved = false;
        data.startMoving = false;
        return;
      }

      data.isTouched = false;
      data.isMoved = false;
      data.startMoving = false;
      var currentPos;

      if (params.followFinger) {
        currentPos = rtl ? swiper.translate : -swiper.translate;
      } else {
        currentPos = -data.currentTranslate;
      }

      if (params.cssMode) {
        return;
      }

      if (params.freeMode) {
        if (currentPos < -swiper.minTranslate()) {
          swiper.slideTo(swiper.activeIndex);
          return;
        }

        if (currentPos > -swiper.maxTranslate()) {
          if (swiper.slides.length < snapGrid.length) {
            swiper.slideTo(snapGrid.length - 1);
          } else {
            swiper.slideTo(swiper.slides.length - 1);
          }

          return;
        }

        if (params.freeModeMomentum) {
          if (data.velocities.length > 1) {
            var lastMoveEvent = data.velocities.pop();
            var velocityEvent = data.velocities.pop();
            var distance = lastMoveEvent.position - velocityEvent.position;
            var time = lastMoveEvent.time - velocityEvent.time;
            swiper.velocity = distance / time;
            swiper.velocity /= 2;

            if (Math.abs(swiper.velocity) < params.freeModeMinimumVelocity) {
              swiper.velocity = 0;
            } // this implies that the user stopped moving a finger then released.
            // There would be no events with distance zero, so the last event is stale.


            if (time > 150 || now() - lastMoveEvent.time > 300) {
              swiper.velocity = 0;
            }
          } else {
            swiper.velocity = 0;
          }

          swiper.velocity *= params.freeModeMomentumVelocityRatio;
          data.velocities.length = 0;
          var momentumDuration = 1000 * params.freeModeMomentumRatio;
          var momentumDistance = swiper.velocity * momentumDuration;
          var newPosition = swiper.translate + momentumDistance;
          if (rtl) newPosition = -newPosition;
          var doBounce = false;
          var afterBouncePosition;
          var bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeModeMomentumBounceRatio;
          var needsLoopFix;

          if (newPosition < swiper.maxTranslate()) {
            if (params.freeModeMomentumBounce) {
              if (newPosition + swiper.maxTranslate() < -bounceAmount) {
                newPosition = swiper.maxTranslate() - bounceAmount;
              }

              afterBouncePosition = swiper.maxTranslate();
              doBounce = true;
              data.allowMomentumBounce = true;
            } else {
              newPosition = swiper.maxTranslate();
            }

            if (params.loop && params.centeredSlides) needsLoopFix = true;
          } else if (newPosition > swiper.minTranslate()) {
            if (params.freeModeMomentumBounce) {
              if (newPosition - swiper.minTranslate() > bounceAmount) {
                newPosition = swiper.minTranslate() + bounceAmount;
              }

              afterBouncePosition = swiper.minTranslate();
              doBounce = true;
              data.allowMomentumBounce = true;
            } else {
              newPosition = swiper.minTranslate();
            }

            if (params.loop && params.centeredSlides) needsLoopFix = true;
          } else if (params.freeModeSticky) {
            var nextSlide;

            for (var j = 0; j < snapGrid.length; j += 1) {
              if (snapGrid[j] > -newPosition) {
                nextSlide = j;
                break;
              }
            }

            if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === 'next') {
              newPosition = snapGrid[nextSlide];
            } else {
              newPosition = snapGrid[nextSlide - 1];
            }

            newPosition = -newPosition;
          }

          if (needsLoopFix) {
            swiper.once('transitionEnd', function () {
              swiper.loopFix();
            });
          } // Fix duration


          if (swiper.velocity !== 0) {
            if (rtl) {
              momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);
            } else {
              momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);
            }

            if (params.freeModeSticky) {
              // If freeModeSticky is active and the user ends a swipe with a slow-velocity
              // event, then durations can be 20+ seconds to slide one (or zero!) slides.
              // It's easy to see this when simulating touch with mouse events. To fix this,
              // limit single-slide swipes to the default slide duration. This also has the
              // nice side effect of matching slide speed if the user stopped moving before
              // lifting finger or mouse vs. moving slowly before lifting the finger/mouse.
              // For faster swipes, also apply limits (albeit higher ones).
              var moveDistance = Math.abs((rtl ? -newPosition : newPosition) - swiper.translate);
              var currentSlideSize = swiper.slidesSizesGrid[swiper.activeIndex];

              if (moveDistance < currentSlideSize) {
                momentumDuration = params.speed;
              } else if (moveDistance < 2 * currentSlideSize) {
                momentumDuration = params.speed * 1.5;
              } else {
                momentumDuration = params.speed * 2.5;
              }
            }
          } else if (params.freeModeSticky) {
            swiper.slideToClosest();
            return;
          }

          if (params.freeModeMomentumBounce && doBounce) {
            swiper.updateProgress(afterBouncePosition);
            swiper.setTransition(momentumDuration);
            swiper.setTranslate(newPosition);
            swiper.transitionStart(true, swiper.swipeDirection);
            swiper.animating = true;
            $wrapperEl.transitionEnd(function () {
              if (!swiper || swiper.destroyed || !data.allowMomentumBounce) return;
              swiper.emit('momentumBounce');
              swiper.setTransition(params.speed);
              setTimeout(function () {
                swiper.setTranslate(afterBouncePosition);
                $wrapperEl.transitionEnd(function () {
                  if (!swiper || swiper.destroyed) return;
                  swiper.transitionEnd();
                });
              }, 0);
            });
          } else if (swiper.velocity) {
            swiper.updateProgress(newPosition);
            swiper.setTransition(momentumDuration);
            swiper.setTranslate(newPosition);
            swiper.transitionStart(true, swiper.swipeDirection);

            if (!swiper.animating) {
              swiper.animating = true;
              $wrapperEl.transitionEnd(function () {
                if (!swiper || swiper.destroyed) return;
                swiper.transitionEnd();
              });
            }
          } else {
            swiper.emit('_freeModeNoMomentumRelease');
            swiper.updateProgress(newPosition);
          }

          swiper.updateActiveIndex();
          swiper.updateSlidesClasses();
        } else if (params.freeModeSticky) {
          swiper.slideToClosest();
          return;
        } else if (params.freeMode) {
          swiper.emit('_freeModeNoMomentumRelease');
        }

        if (!params.freeModeMomentum || timeDiff >= params.longSwipesMs) {
          swiper.updateProgress();
          swiper.updateActiveIndex();
          swiper.updateSlidesClasses();
        }

        return;
      } // Find current slide


      var stopIndex = 0;
      var groupSize = swiper.slidesSizesGrid[0];

      for (var i = 0; i < slidesGrid.length; i += i < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup) {
        var _increment = i < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;

        if (typeof slidesGrid[i + _increment] !== 'undefined') {
          if (currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + _increment]) {
            stopIndex = i;
            groupSize = slidesGrid[i + _increment] - slidesGrid[i];
          }
        } else if (currentPos >= slidesGrid[i]) {
          stopIndex = i;
          groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];
        }
      } // Find current slide size


      var ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;
      var increment = stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;

      if (timeDiff > params.longSwipesMs) {
        // Long touches
        if (!params.longSwipes) {
          swiper.slideTo(swiper.activeIndex);
          return;
        }

        if (swiper.swipeDirection === 'next') {
          if (ratio >= params.longSwipesRatio) swiper.slideTo(stopIndex + increment);else swiper.slideTo(stopIndex);
        }

        if (swiper.swipeDirection === 'prev') {
          if (ratio > 1 - params.longSwipesRatio) swiper.slideTo(stopIndex + increment);else swiper.slideTo(stopIndex);
        }
      } else {
        // Short swipes
        if (!params.shortSwipes) {
          swiper.slideTo(swiper.activeIndex);
          return;
        }

        var isNavButtonTarget = swiper.navigation && (e.target === swiper.navigation.nextEl || e.target === swiper.navigation.prevEl);

        if (!isNavButtonTarget) {
          if (swiper.swipeDirection === 'next') {
            swiper.slideTo(stopIndex + increment);
          }

          if (swiper.swipeDirection === 'prev') {
            swiper.slideTo(stopIndex);
          }
        } else if (e.target === swiper.navigation.nextEl) {
          swiper.slideTo(stopIndex + increment);
        } else {
          swiper.slideTo(stopIndex);
        }
      }
    }

    function onResize() {
      var swiper = this;
      var params = swiper.params,
          el = swiper.el;
      if (el && el.offsetWidth === 0) return; // Breakpoints

      if (params.breakpoints) {
        swiper.setBreakpoint();
      } // Save locks


      var allowSlideNext = swiper.allowSlideNext,
          allowSlidePrev = swiper.allowSlidePrev,
          snapGrid = swiper.snapGrid; // Disable locks on resize

      swiper.allowSlideNext = true;
      swiper.allowSlidePrev = true;
      swiper.updateSize();
      swiper.updateSlides();
      swiper.updateSlidesClasses();

      if ((params.slidesPerView === 'auto' || params.slidesPerView > 1) && swiper.isEnd && !swiper.isBeginning && !swiper.params.centeredSlides) {
        swiper.slideTo(swiper.slides.length - 1, 0, false, true);
      } else {
        swiper.slideTo(swiper.activeIndex, 0, false, true);
      }

      if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {
        swiper.autoplay.run();
      } // Return locks after resize


      swiper.allowSlidePrev = allowSlidePrev;
      swiper.allowSlideNext = allowSlideNext;

      if (swiper.params.watchOverflow && snapGrid !== swiper.snapGrid) {
        swiper.checkOverflow();
      }
    }

    function onClick(e) {
      var swiper = this;
      if (!swiper.enabled) return;

      if (!swiper.allowClick) {
        if (swiper.params.preventClicks) e.preventDefault();

        if (swiper.params.preventClicksPropagation && swiper.animating) {
          e.stopPropagation();
          e.stopImmediatePropagation();
        }
      }
    }

    function onScroll() {
      var swiper = this;
      var wrapperEl = swiper.wrapperEl,
          rtlTranslate = swiper.rtlTranslate,
          enabled = swiper.enabled;
      if (!enabled) return;
      swiper.previousTranslate = swiper.translate;

      if (swiper.isHorizontal()) {
        if (rtlTranslate) {
          swiper.translate = wrapperEl.scrollWidth - wrapperEl.offsetWidth - wrapperEl.scrollLeft;
        } else {
          swiper.translate = -wrapperEl.scrollLeft;
        }
      } else {
        swiper.translate = -wrapperEl.scrollTop;
      } // eslint-disable-next-line


      if (swiper.translate === -0) swiper.translate = 0;
      swiper.updateActiveIndex();
      swiper.updateSlidesClasses();
      var newProgress;
      var translatesDiff = swiper.maxTranslate() - swiper.minTranslate();

      if (translatesDiff === 0) {
        newProgress = 0;
      } else {
        newProgress = (swiper.translate - swiper.minTranslate()) / translatesDiff;
      }

      if (newProgress !== swiper.progress) {
        swiper.updateProgress(rtlTranslate ? -swiper.translate : swiper.translate);
      }

      swiper.emit('setTranslate', swiper.translate, false);
    }

    var dummyEventAttached = false;

    function dummyEventListener() {}

    function attachEvents() {
      var swiper = this;
      var document = getDocument();
      var params = swiper.params,
          touchEvents = swiper.touchEvents,
          el = swiper.el,
          wrapperEl = swiper.wrapperEl,
          device = swiper.device,
          support = swiper.support;
      swiper.onTouchStart = onTouchStart.bind(swiper);
      swiper.onTouchMove = onTouchMove.bind(swiper);
      swiper.onTouchEnd = onTouchEnd.bind(swiper);

      if (params.cssMode) {
        swiper.onScroll = onScroll.bind(swiper);
      }

      swiper.onClick = onClick.bind(swiper);
      var capture = !!params.nested; // Touch Events

      if (!support.touch && support.pointerEvents) {
        el.addEventListener(touchEvents.start, swiper.onTouchStart, false);
        document.addEventListener(touchEvents.move, swiper.onTouchMove, capture);
        document.addEventListener(touchEvents.end, swiper.onTouchEnd, false);
      } else {
        if (support.touch) {
          var passiveListener = touchEvents.start === 'touchstart' && support.passiveListener && params.passiveListeners ? {
            passive: true,
            capture: false
          } : false;
          el.addEventListener(touchEvents.start, swiper.onTouchStart, passiveListener);
          el.addEventListener(touchEvents.move, swiper.onTouchMove, support.passiveListener ? {
            passive: false,
            capture: capture
          } : capture);
          el.addEventListener(touchEvents.end, swiper.onTouchEnd, passiveListener);

          if (touchEvents.cancel) {
            el.addEventListener(touchEvents.cancel, swiper.onTouchEnd, passiveListener);
          }

          if (!dummyEventAttached) {
            document.addEventListener('touchstart', dummyEventListener);
            dummyEventAttached = true;
          }
        }

        if (params.simulateTouch && !device.ios && !device.android || params.simulateTouch && !support.touch && device.ios) {
          el.addEventListener('mousedown', swiper.onTouchStart, false);
          document.addEventListener('mousemove', swiper.onTouchMove, capture);
          document.addEventListener('mouseup', swiper.onTouchEnd, false);
        }
      } // Prevent Links Clicks


      if (params.preventClicks || params.preventClicksPropagation) {
        el.addEventListener('click', swiper.onClick, true);
      }

      if (params.cssMode) {
        wrapperEl.addEventListener('scroll', swiper.onScroll);
      } // Resize handler


      if (params.updateOnWindowResize) {
        swiper.on(device.ios || device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate', onResize, true);
      } else {
        swiper.on('observerUpdate', onResize, true);
      }
    }

    function detachEvents() {
      var swiper = this;
      var document = getDocument();
      var params = swiper.params,
          touchEvents = swiper.touchEvents,
          el = swiper.el,
          wrapperEl = swiper.wrapperEl,
          device = swiper.device,
          support = swiper.support;
      var capture = !!params.nested; // Touch Events

      if (!support.touch && support.pointerEvents) {
        el.removeEventListener(touchEvents.start, swiper.onTouchStart, false);
        document.removeEventListener(touchEvents.move, swiper.onTouchMove, capture);
        document.removeEventListener(touchEvents.end, swiper.onTouchEnd, false);
      } else {
        if (support.touch) {
          var passiveListener = touchEvents.start === 'onTouchStart' && support.passiveListener && params.passiveListeners ? {
            passive: true,
            capture: false
          } : false;
          el.removeEventListener(touchEvents.start, swiper.onTouchStart, passiveListener);
          el.removeEventListener(touchEvents.move, swiper.onTouchMove, capture);
          el.removeEventListener(touchEvents.end, swiper.onTouchEnd, passiveListener);

          if (touchEvents.cancel) {
            el.removeEventListener(touchEvents.cancel, swiper.onTouchEnd, passiveListener);
          }
        }

        if (params.simulateTouch && !device.ios && !device.android || params.simulateTouch && !support.touch && device.ios) {
          el.removeEventListener('mousedown', swiper.onTouchStart, false);
          document.removeEventListener('mousemove', swiper.onTouchMove, capture);
          document.removeEventListener('mouseup', swiper.onTouchEnd, false);
        }
      } // Prevent Links Clicks


      if (params.preventClicks || params.preventClicksPropagation) {
        el.removeEventListener('click', swiper.onClick, true);
      }

      if (params.cssMode) {
        wrapperEl.removeEventListener('scroll', swiper.onScroll);
      } // Resize handler


      swiper.off(device.ios || device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate', onResize);
    }

    var events = {
      attachEvents: attachEvents,
      detachEvents: detachEvents
    };

    function setBreakpoint() {
      var swiper = this;
      var activeIndex = swiper.activeIndex,
          initialized = swiper.initialized,
          _swiper$loopedSlides = swiper.loopedSlides,
          loopedSlides = _swiper$loopedSlides === void 0 ? 0 : _swiper$loopedSlides,
          params = swiper.params,
          $el = swiper.$el;
      var breakpoints = params.breakpoints;
      if (!breakpoints || breakpoints && Object.keys(breakpoints).length === 0) return; // Get breakpoint for window width and update parameters

      var breakpoint = swiper.getBreakpoint(breakpoints, swiper.params.breakpointsBase, swiper.el);
      if (!breakpoint || swiper.currentBreakpoint === breakpoint) return;
      var breakpointOnlyParams = breakpoint in breakpoints ? breakpoints[breakpoint] : undefined;

      if (breakpointOnlyParams) {
        ['slidesPerView', 'spaceBetween', 'slidesPerGroup', 'slidesPerGroupSkip', 'slidesPerColumn'].forEach(function (param) {
          var paramValue = breakpointOnlyParams[param];
          if (typeof paramValue === 'undefined') return;

          if (param === 'slidesPerView' && (paramValue === 'AUTO' || paramValue === 'auto')) {
            breakpointOnlyParams[param] = 'auto';
          } else if (param === 'slidesPerView') {
            breakpointOnlyParams[param] = parseFloat(paramValue);
          } else {
            breakpointOnlyParams[param] = parseInt(paramValue, 10);
          }
        });
      }

      var breakpointParams = breakpointOnlyParams || swiper.originalParams;
      var wasMultiRow = params.slidesPerColumn > 1;
      var isMultiRow = breakpointParams.slidesPerColumn > 1;
      var wasEnabled = params.enabled;

      if (wasMultiRow && !isMultiRow) {
        $el.removeClass(params.containerModifierClass + "multirow " + params.containerModifierClass + "multirow-column");
        swiper.emitContainerClasses();
      } else if (!wasMultiRow && isMultiRow) {
        $el.addClass(params.containerModifierClass + "multirow");

        if (breakpointParams.slidesPerColumnFill === 'column') {
          $el.addClass(params.containerModifierClass + "multirow-column");
        }

        swiper.emitContainerClasses();
      }

      var directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;
      var needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);

      if (directionChanged && initialized) {
        swiper.changeDirection();
      }

      extend$1(swiper.params, breakpointParams);
      var isEnabled = swiper.params.enabled;
      extend$1(swiper, {
        allowTouchMove: swiper.params.allowTouchMove,
        allowSlideNext: swiper.params.allowSlideNext,
        allowSlidePrev: swiper.params.allowSlidePrev
      });

      if (wasEnabled && !isEnabled) {
        swiper.disable();
      } else if (!wasEnabled && isEnabled) {
        swiper.enable();
      }

      swiper.currentBreakpoint = breakpoint;
      swiper.emit('_beforeBreakpoint', breakpointParams);

      if (needsReLoop && initialized) {
        swiper.loopDestroy();
        swiper.loopCreate();
        swiper.updateSlides();
        swiper.slideTo(activeIndex - loopedSlides + swiper.loopedSlides, 0, false);
      }

      swiper.emit('breakpoint', breakpointParams);
    }

    function getBreakpoint(breakpoints, base, containerEl) {
      if (base === void 0) {
        base = 'window';
      }

      if (!breakpoints || base === 'container' && !containerEl) return undefined;
      var breakpoint = false;
      var window = getWindow();
      var currentWidth = base === 'window' ? window.innerWidth : containerEl.clientWidth;
      var currentHeight = base === 'window' ? window.innerHeight : containerEl.clientHeight;
      var points = Object.keys(breakpoints).map(function (point) {
        if (typeof point === 'string' && point.indexOf('@') === 0) {
          var minRatio = parseFloat(point.substr(1));
          var value = currentHeight * minRatio;
          return {
            value: value,
            point: point
          };
        }

        return {
          value: point,
          point: point
        };
      });
      points.sort(function (a, b) {
        return parseInt(a.value, 10) - parseInt(b.value, 10);
      });

      for (var i = 0; i < points.length; i += 1) {
        var _points$i = points[i],
            point = _points$i.point,
            value = _points$i.value;

        if (value <= currentWidth) {
          breakpoint = point;
        }
      }

      return breakpoint || 'max';
    }

    var breakpoints = {
      setBreakpoint: setBreakpoint,
      getBreakpoint: getBreakpoint
    };

    function prepareClasses(entries, prefix) {
      var resultClasses = [];
      entries.forEach(function (item) {
        if (typeof item === 'object') {
          Object.keys(item).forEach(function (classNames) {
            if (item[classNames]) {
              resultClasses.push(prefix + classNames);
            }
          });
        } else if (typeof item === 'string') {
          resultClasses.push(prefix + item);
        }
      });
      return resultClasses;
    }

    function addClasses() {
      var swiper = this;
      var classNames = swiper.classNames,
          params = swiper.params,
          rtl = swiper.rtl,
          $el = swiper.$el,
          device = swiper.device,
          support = swiper.support; // prettier-ignore

      var suffixes = prepareClasses(['initialized', params.direction, {
        'pointer-events': support.pointerEvents && !support.touch
      }, {
        'free-mode': params.freeMode
      }, {
        'autoheight': params.autoHeight
      }, {
        'rtl': rtl
      }, {
        'multirow': params.slidesPerColumn > 1
      }, {
        'multirow-column': params.slidesPerColumn > 1 && params.slidesPerColumnFill === 'column'
      }, {
        'android': device.android
      }, {
        'ios': device.ios
      }, {
        'css-mode': params.cssMode
      }], params.containerModifierClass);
      classNames.push.apply(classNames, suffixes);
      $el.addClass([].concat(classNames).join(' '));
      swiper.emitContainerClasses();
    }

    function removeClasses() {
      var swiper = this;
      var $el = swiper.$el,
          classNames = swiper.classNames;
      $el.removeClass(classNames.join(' '));
      swiper.emitContainerClasses();
    }

    var classes = {
      addClasses: addClasses,
      removeClasses: removeClasses
    };

    function loadImage(imageEl, src, srcset, sizes, checkForComplete, callback) {
      var window = getWindow();
      var image;

      function onReady() {
        if (callback) callback();
      }

      var isPicture = $(imageEl).parent('picture')[0];

      if (!isPicture && (!imageEl.complete || !checkForComplete)) {
        if (src) {
          image = new window.Image();
          image.onload = onReady;
          image.onerror = onReady;

          if (sizes) {
            image.sizes = sizes;
          }

          if (srcset) {
            image.srcset = srcset;
          }

          if (src) {
            image.src = src;
          }
        } else {
          onReady();
        }
      } else {
        // image already loaded...
        onReady();
      }
    }

    function preloadImages() {
      var swiper = this;
      swiper.imagesToLoad = swiper.$el.find('img');

      function onReady() {
        if (typeof swiper === 'undefined' || swiper === null || !swiper || swiper.destroyed) return;
        if (swiper.imagesLoaded !== undefined) swiper.imagesLoaded += 1;

        if (swiper.imagesLoaded === swiper.imagesToLoad.length) {
          if (swiper.params.updateOnImagesReady) swiper.update();
          swiper.emit('imagesReady');
        }
      }

      for (var i = 0; i < swiper.imagesToLoad.length; i += 1) {
        var imageEl = swiper.imagesToLoad[i];
        swiper.loadImage(imageEl, imageEl.currentSrc || imageEl.getAttribute('src'), imageEl.srcset || imageEl.getAttribute('srcset'), imageEl.sizes || imageEl.getAttribute('sizes'), true, onReady);
      }
    }

    var images = {
      loadImage: loadImage,
      preloadImages: preloadImages
    };

    function checkOverflow() {
      var swiper = this;
      var params = swiper.params;
      var wasLocked = swiper.isLocked;
      var lastSlidePosition = swiper.slides.length > 0 && params.slidesOffsetBefore + params.spaceBetween * (swiper.slides.length - 1) + swiper.slides[0].offsetWidth * swiper.slides.length;

      if (params.slidesOffsetBefore && params.slidesOffsetAfter && lastSlidePosition) {
        swiper.isLocked = lastSlidePosition <= swiper.size;
      } else {
        swiper.isLocked = swiper.snapGrid.length === 1;
      }

      swiper.allowSlideNext = !swiper.isLocked;
      swiper.allowSlidePrev = !swiper.isLocked; // events

      if (wasLocked !== swiper.isLocked) swiper.emit(swiper.isLocked ? 'lock' : 'unlock');

      if (wasLocked && wasLocked !== swiper.isLocked) {
        swiper.isEnd = false;
        if (swiper.navigation) swiper.navigation.update();
      }
    }

    var checkOverflow$1 = {
      checkOverflow: checkOverflow
    };

    var defaults = {
      init: true,
      direction: 'horizontal',
      touchEventsTarget: 'container',
      initialSlide: 0,
      speed: 300,
      cssMode: false,
      updateOnWindowResize: true,
      resizeObserver: false,
      nested: false,
      createElements: false,
      enabled: true,
      // Overrides
      width: null,
      height: null,
      //
      preventInteractionOnTransition: false,
      // ssr
      userAgent: null,
      url: null,
      // To support iOS's swipe-to-go-back gesture (when being used in-app).
      edgeSwipeDetection: false,
      edgeSwipeThreshold: 20,
      // Free mode
      freeMode: false,
      freeModeMomentum: true,
      freeModeMomentumRatio: 1,
      freeModeMomentumBounce: true,
      freeModeMomentumBounceRatio: 1,
      freeModeMomentumVelocityRatio: 1,
      freeModeSticky: false,
      freeModeMinimumVelocity: 0.02,
      // Autoheight
      autoHeight: false,
      // Set wrapper width
      setWrapperSize: false,
      // Virtual Translate
      virtualTranslate: false,
      // Effects
      effect: 'slide',
      // 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'
      // Breakpoints
      breakpoints: undefined,
      breakpointsBase: 'window',
      // Slides grid
      spaceBetween: 0,
      slidesPerView: 1,
      slidesPerColumn: 1,
      slidesPerColumnFill: 'column',
      slidesPerGroup: 1,
      slidesPerGroupSkip: 0,
      centeredSlides: false,
      centeredSlidesBounds: false,
      slidesOffsetBefore: 0,
      // in px
      slidesOffsetAfter: 0,
      // in px
      normalizeSlideIndex: true,
      centerInsufficientSlides: false,
      // Disable swiper and hide navigation when container not overflow
      watchOverflow: false,
      // Round length
      roundLengths: false,
      // Touches
      touchRatio: 1,
      touchAngle: 45,
      simulateTouch: true,
      shortSwipes: true,
      longSwipes: true,
      longSwipesRatio: 0.5,
      longSwipesMs: 300,
      followFinger: true,
      allowTouchMove: true,
      threshold: 0,
      touchMoveStopPropagation: false,
      touchStartPreventDefault: true,
      touchStartForcePreventDefault: false,
      touchReleaseOnEdges: false,
      // Unique Navigation Elements
      uniqueNavElements: true,
      // Resistance
      resistance: true,
      resistanceRatio: 0.85,
      // Progress
      watchSlidesProgress: false,
      watchSlidesVisibility: false,
      // Cursor
      grabCursor: false,
      // Clicks
      preventClicks: true,
      preventClicksPropagation: true,
      slideToClickedSlide: false,
      // Images
      preloadImages: true,
      updateOnImagesReady: true,
      // loop
      loop: false,
      loopAdditionalSlides: 0,
      loopedSlides: null,
      loopFillGroupWithBlank: false,
      loopPreventsSlide: true,
      // Swiping/no swiping
      allowSlidePrev: true,
      allowSlideNext: true,
      swipeHandler: null,
      // '.swipe-handler',
      noSwiping: true,
      noSwipingClass: 'swiper-no-swiping',
      noSwipingSelector: null,
      // Passive Listeners
      passiveListeners: true,
      // NS
      containerModifierClass: 'swiper-container-',
      // NEW
      slideClass: 'swiper-slide',
      slideBlankClass: 'swiper-slide-invisible-blank',
      slideActiveClass: 'swiper-slide-active',
      slideDuplicateActiveClass: 'swiper-slide-duplicate-active',
      slideVisibleClass: 'swiper-slide-visible',
      slideDuplicateClass: 'swiper-slide-duplicate',
      slideNextClass: 'swiper-slide-next',
      slideDuplicateNextClass: 'swiper-slide-duplicate-next',
      slidePrevClass: 'swiper-slide-prev',
      slideDuplicatePrevClass: 'swiper-slide-duplicate-prev',
      wrapperClass: 'swiper-wrapper',
      // Callbacks
      runCallbacksOnInit: true,
      // Internals
      _emitClasses: false
    };

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }
    var prototypes = {
      modular: modular,
      eventsEmitter: eventsEmitter,
      update: update,
      translate: translate,
      transition: transition,
      slide: slide,
      loop: loop,
      grabCursor: grabCursor,
      manipulation: manipulation,
      events: events,
      breakpoints: breakpoints,
      checkOverflow: checkOverflow$1,
      classes: classes,
      images: images
    };
    var extendedDefaults = {};

    var Swiper$2 = /*#__PURE__*/function () {
      function Swiper() {
        var el;
        var params;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        if (args.length === 1 && args[0].constructor && Object.prototype.toString.call(args[0]).slice(8, -1) === 'Object') {
          params = args[0];
        } else {
          el = args[0];
          params = args[1];
        }

        if (!params) params = {};
        params = extend$1({}, params);
        if (el && !params.el) params.el = el;

        if (params.el && $(params.el).length > 1) {
          var swipers = [];
          $(params.el).each(function (containerEl) {
            var newParams = extend$1({}, params, {
              el: containerEl
            });
            swipers.push(new Swiper(newParams));
          });
          return swipers;
        } // Swiper Instance


        var swiper = this;
        swiper.__swiper__ = true;
        swiper.support = getSupport();
        swiper.device = getDevice({
          userAgent: params.userAgent
        });
        swiper.browser = getBrowser();
        swiper.eventsListeners = {};
        swiper.eventsAnyListeners = [];

        if (typeof swiper.modules === 'undefined') {
          swiper.modules = {};
        }

        Object.keys(swiper.modules).forEach(function (moduleName) {
          var module = swiper.modules[moduleName];

          if (module.params) {
            var moduleParamName = Object.keys(module.params)[0];
            var moduleParams = module.params[moduleParamName];
            if (typeof moduleParams !== 'object' || moduleParams === null) return;

            if (['navigation', 'pagination', 'scrollbar'].indexOf(moduleParamName) >= 0 && params[moduleParamName] === true) {
              params[moduleParamName] = {
                auto: true
              };
            }

            if (!(moduleParamName in params && 'enabled' in moduleParams)) return;

            if (params[moduleParamName] === true) {
              params[moduleParamName] = {
                enabled: true
              };
            }

            if (typeof params[moduleParamName] === 'object' && !('enabled' in params[moduleParamName])) {
              params[moduleParamName].enabled = true;
            }

            if (!params[moduleParamName]) params[moduleParamName] = {
              enabled: false
            };
          }
        }); // Extend defaults with modules params

        var swiperParams = extend$1({}, defaults);
        swiper.useParams(swiperParams); // Extend defaults with passed params

        swiper.params = extend$1({}, swiperParams, extendedDefaults, params);
        swiper.originalParams = extend$1({}, swiper.params);
        swiper.passedParams = extend$1({}, params); // add event listeners

        if (swiper.params && swiper.params.on) {
          Object.keys(swiper.params.on).forEach(function (eventName) {
            swiper.on(eventName, swiper.params.on[eventName]);
          });
        }

        if (swiper.params && swiper.params.onAny) {
          swiper.onAny(swiper.params.onAny);
        } // Save Dom lib


        swiper.$ = $; // Extend Swiper

        extend$1(swiper, {
          enabled: swiper.params.enabled,
          el: el,
          // Classes
          classNames: [],
          // Slides
          slides: $(),
          slidesGrid: [],
          snapGrid: [],
          slidesSizesGrid: [],
          // isDirection
          isHorizontal: function isHorizontal() {
            return swiper.params.direction === 'horizontal';
          },
          isVertical: function isVertical() {
            return swiper.params.direction === 'vertical';
          },
          // Indexes
          activeIndex: 0,
          realIndex: 0,
          //
          isBeginning: true,
          isEnd: false,
          // Props
          translate: 0,
          previousTranslate: 0,
          progress: 0,
          velocity: 0,
          animating: false,
          // Locks
          allowSlideNext: swiper.params.allowSlideNext,
          allowSlidePrev: swiper.params.allowSlidePrev,
          // Touch Events
          touchEvents: function touchEvents() {
            var touch = ['touchstart', 'touchmove', 'touchend', 'touchcancel'];
            var desktop = ['mousedown', 'mousemove', 'mouseup'];

            if (swiper.support.pointerEvents) {
              desktop = ['pointerdown', 'pointermove', 'pointerup'];
            }

            swiper.touchEventsTouch = {
              start: touch[0],
              move: touch[1],
              end: touch[2],
              cancel: touch[3]
            };
            swiper.touchEventsDesktop = {
              start: desktop[0],
              move: desktop[1],
              end: desktop[2]
            };
            return swiper.support.touch || !swiper.params.simulateTouch ? swiper.touchEventsTouch : swiper.touchEventsDesktop;
          }(),
          touchEventsData: {
            isTouched: undefined,
            isMoved: undefined,
            allowTouchCallbacks: undefined,
            touchStartTime: undefined,
            isScrolling: undefined,
            currentTranslate: undefined,
            startTranslate: undefined,
            allowThresholdMove: undefined,
            // Form elements to match
            formElements: 'input, select, option, textarea, button, video, label',
            // Last click time
            lastClickTime: now(),
            clickTimeout: undefined,
            // Velocities
            velocities: [],
            allowMomentumBounce: undefined,
            isTouchEvent: undefined,
            startMoving: undefined
          },
          // Clicks
          allowClick: true,
          // Touches
          allowTouchMove: swiper.params.allowTouchMove,
          touches: {
            startX: 0,
            startY: 0,
            currentX: 0,
            currentY: 0,
            diff: 0
          },
          // Images
          imagesToLoad: [],
          imagesLoaded: 0
        }); // Install Modules

        swiper.useModules();
        swiper.emit('_swiper'); // Init

        if (swiper.params.init) {
          swiper.init();
        } // Return app instance


        return swiper;
      }

      var _proto = Swiper.prototype;

      _proto.enable = function enable() {
        var swiper = this;
        if (swiper.enabled) return;
        swiper.enabled = true;

        if (swiper.params.grabCursor) {
          swiper.setGrabCursor();
        }

        swiper.emit('enable');
      };

      _proto.disable = function disable() {
        var swiper = this;
        if (!swiper.enabled) return;
        swiper.enabled = false;

        if (swiper.params.grabCursor) {
          swiper.unsetGrabCursor();
        }

        swiper.emit('disable');
      };

      _proto.setProgress = function setProgress(progress, speed) {
        var swiper = this;
        progress = Math.min(Math.max(progress, 0), 1);
        var min = swiper.minTranslate();
        var max = swiper.maxTranslate();
        var current = (max - min) * progress + min;
        swiper.translateTo(current, typeof speed === 'undefined' ? 0 : speed);
        swiper.updateActiveIndex();
        swiper.updateSlidesClasses();
      };

      _proto.emitContainerClasses = function emitContainerClasses() {
        var swiper = this;
        if (!swiper.params._emitClasses || !swiper.el) return;
        var classes = swiper.el.className.split(' ').filter(function (className) {
          return className.indexOf('swiper-container') === 0 || className.indexOf(swiper.params.containerModifierClass) === 0;
        });
        swiper.emit('_containerClasses', classes.join(' '));
      };

      _proto.getSlideClasses = function getSlideClasses(slideEl) {
        var swiper = this;
        return slideEl.className.split(' ').filter(function (className) {
          return className.indexOf('swiper-slide') === 0 || className.indexOf(swiper.params.slideClass) === 0;
        }).join(' ');
      };

      _proto.emitSlidesClasses = function emitSlidesClasses() {
        var swiper = this;
        if (!swiper.params._emitClasses || !swiper.el) return;
        var updates = [];
        swiper.slides.each(function (slideEl) {
          var classNames = swiper.getSlideClasses(slideEl);
          updates.push({
            slideEl: slideEl,
            classNames: classNames
          });
          swiper.emit('_slideClass', slideEl, classNames);
        });
        swiper.emit('_slideClasses', updates);
      };

      _proto.slidesPerViewDynamic = function slidesPerViewDynamic() {
        var swiper = this;
        var params = swiper.params,
            slides = swiper.slides,
            slidesGrid = swiper.slidesGrid,
            swiperSize = swiper.size,
            activeIndex = swiper.activeIndex;
        var spv = 1;

        if (params.centeredSlides) {
          var slideSize = slides[activeIndex].swiperSlideSize;
          var breakLoop;

          for (var i = activeIndex + 1; i < slides.length; i += 1) {
            if (slides[i] && !breakLoop) {
              slideSize += slides[i].swiperSlideSize;
              spv += 1;
              if (slideSize > swiperSize) breakLoop = true;
            }
          }

          for (var _i = activeIndex - 1; _i >= 0; _i -= 1) {
            if (slides[_i] && !breakLoop) {
              slideSize += slides[_i].swiperSlideSize;
              spv += 1;
              if (slideSize > swiperSize) breakLoop = true;
            }
          }
        } else {
          for (var _i2 = activeIndex + 1; _i2 < slides.length; _i2 += 1) {
            if (slidesGrid[_i2] - slidesGrid[activeIndex] < swiperSize) {
              spv += 1;
            }
          }
        }

        return spv;
      };

      _proto.update = function update() {
        var swiper = this;
        if (!swiper || swiper.destroyed) return;
        var snapGrid = swiper.snapGrid,
            params = swiper.params; // Breakpoints

        if (params.breakpoints) {
          swiper.setBreakpoint();
        }

        swiper.updateSize();
        swiper.updateSlides();
        swiper.updateProgress();
        swiper.updateSlidesClasses();

        function setTranslate() {
          var translateValue = swiper.rtlTranslate ? swiper.translate * -1 : swiper.translate;
          var newTranslate = Math.min(Math.max(translateValue, swiper.maxTranslate()), swiper.minTranslate());
          swiper.setTranslate(newTranslate);
          swiper.updateActiveIndex();
          swiper.updateSlidesClasses();
        }

        var translated;

        if (swiper.params.freeMode) {
          setTranslate();

          if (swiper.params.autoHeight) {
            swiper.updateAutoHeight();
          }
        } else {
          if ((swiper.params.slidesPerView === 'auto' || swiper.params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides) {
            translated = swiper.slideTo(swiper.slides.length - 1, 0, false, true);
          } else {
            translated = swiper.slideTo(swiper.activeIndex, 0, false, true);
          }

          if (!translated) {
            setTranslate();
          }
        }

        if (params.watchOverflow && snapGrid !== swiper.snapGrid) {
          swiper.checkOverflow();
        }

        swiper.emit('update');
      };

      _proto.changeDirection = function changeDirection(newDirection, needUpdate) {
        if (needUpdate === void 0) {
          needUpdate = true;
        }

        var swiper = this;
        var currentDirection = swiper.params.direction;

        if (!newDirection) {
          // eslint-disable-next-line
          newDirection = currentDirection === 'horizontal' ? 'vertical' : 'horizontal';
        }

        if (newDirection === currentDirection || newDirection !== 'horizontal' && newDirection !== 'vertical') {
          return swiper;
        }

        swiper.$el.removeClass("" + swiper.params.containerModifierClass + currentDirection).addClass("" + swiper.params.containerModifierClass + newDirection);
        swiper.emitContainerClasses();
        swiper.params.direction = newDirection;
        swiper.slides.each(function (slideEl) {
          if (newDirection === 'vertical') {
            slideEl.style.width = '';
          } else {
            slideEl.style.height = '';
          }
        });
        swiper.emit('changeDirection');
        if (needUpdate) swiper.update();
        return swiper;
      };

      _proto.mount = function mount(el) {
        var swiper = this;
        if (swiper.mounted) return true; // Find el

        var $el = $(el || swiper.params.el);
        el = $el[0];

        if (!el) {
          return false;
        }

        el.swiper = swiper;

        var getWrapper = function getWrapper() {
          if (el && el.shadowRoot && el.shadowRoot.querySelector) {
            var res = $(el.shadowRoot.querySelector("." + swiper.params.wrapperClass)); // Children needs to return slot items

            res.children = function (options) {
              return $el.children(options);
            };

            return res;
          }

          return $el.children("." + swiper.params.wrapperClass);
        }; // Find Wrapper


        var $wrapperEl = getWrapper();

        if ($wrapperEl.length === 0 && swiper.params.createElements) {
          var document = getDocument();
          var wrapper = document.createElement('div');
          $wrapperEl = $(wrapper);
          wrapper.className = swiper.params.wrapperClass;
          $el.append(wrapper);
          $el.children("." + swiper.params.slideClass).each(function (slideEl) {
            $wrapperEl.append(slideEl);
          });
        }

        extend$1(swiper, {
          $el: $el,
          el: el,
          $wrapperEl: $wrapperEl,
          wrapperEl: $wrapperEl[0],
          mounted: true,
          // RTL
          rtl: el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl',
          rtlTranslate: swiper.params.direction === 'horizontal' && (el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl'),
          wrongRTL: $wrapperEl.css('display') === '-webkit-box'
        });
        return true;
      };

      _proto.init = function init(el) {
        var swiper = this;
        if (swiper.initialized) return swiper;
        var mounted = swiper.mount(el);
        if (mounted === false) return swiper;
        swiper.emit('beforeInit'); // Set breakpoint

        if (swiper.params.breakpoints) {
          swiper.setBreakpoint();
        } // Add Classes


        swiper.addClasses(); // Create loop

        if (swiper.params.loop) {
          swiper.loopCreate();
        } // Update size


        swiper.updateSize(); // Update slides

        swiper.updateSlides();

        if (swiper.params.watchOverflow) {
          swiper.checkOverflow();
        } // Set Grab Cursor


        if (swiper.params.grabCursor && swiper.enabled) {
          swiper.setGrabCursor();
        }

        if (swiper.params.preloadImages) {
          swiper.preloadImages();
        } // Slide To Initial Slide


        if (swiper.params.loop) {
          swiper.slideTo(swiper.params.initialSlide + swiper.loopedSlides, 0, swiper.params.runCallbacksOnInit, false, true);
        } else {
          swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit, false, true);
        } // Attach events


        swiper.attachEvents(); // Init Flag

        swiper.initialized = true; // Emit

        swiper.emit('init');
        swiper.emit('afterInit');
        return swiper;
      };

      _proto.destroy = function destroy(deleteInstance, cleanStyles) {
        if (deleteInstance === void 0) {
          deleteInstance = true;
        }

        if (cleanStyles === void 0) {
          cleanStyles = true;
        }

        var swiper = this;
        var params = swiper.params,
            $el = swiper.$el,
            $wrapperEl = swiper.$wrapperEl,
            slides = swiper.slides;

        if (typeof swiper.params === 'undefined' || swiper.destroyed) {
          return null;
        }

        swiper.emit('beforeDestroy'); // Init Flag

        swiper.initialized = false; // Detach events

        swiper.detachEvents(); // Destroy loop

        if (params.loop) {
          swiper.loopDestroy();
        } // Cleanup styles


        if (cleanStyles) {
          swiper.removeClasses();
          $el.removeAttr('style');
          $wrapperEl.removeAttr('style');

          if (slides && slides.length) {
            slides.removeClass([params.slideVisibleClass, params.slideActiveClass, params.slideNextClass, params.slidePrevClass].join(' ')).removeAttr('style').removeAttr('data-swiper-slide-index');
          }
        }

        swiper.emit('destroy'); // Detach emitter events

        Object.keys(swiper.eventsListeners).forEach(function (eventName) {
          swiper.off(eventName);
        });

        if (deleteInstance !== false) {
          swiper.$el[0].swiper = null;
          deleteProps(swiper);
        }

        swiper.destroyed = true;
        return null;
      };

      Swiper.extendDefaults = function extendDefaults(newDefaults) {
        extend$1(extendedDefaults, newDefaults);
      };

      Swiper.installModule = function installModule(module) {
        if (!Swiper.prototype.modules) Swiper.prototype.modules = {};
        var name = module.name || Object.keys(Swiper.prototype.modules).length + "_" + now();
        Swiper.prototype.modules[name] = module;
      };

      Swiper.use = function use(module) {
        if (Array.isArray(module)) {
          module.forEach(function (m) {
            return Swiper.installModule(m);
          });
          return Swiper;
        }

        Swiper.installModule(module);
        return Swiper;
      };

      _createClass(Swiper, null, [{
        key: "extendedDefaults",
        get: function get() {
          return extendedDefaults;
        }
      }, {
        key: "defaults",
        get: function get() {
          return defaults;
        }
      }]);

      return Swiper;
    }();

    Object.keys(prototypes).forEach(function (prototypeGroup) {
      Object.keys(prototypes[prototypeGroup]).forEach(function (protoMethod) {
        Swiper$2.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];
      });
    });
    Swiper$2.use([Resize, Observer$1]);

    function _extends$2() { _extends$2 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2.apply(this, arguments); }
    var Pagination = {
      update: function update() {
        // Render || Update Pagination bullets/items
        var swiper = this;
        var rtl = swiper.rtl;
        var params = swiper.params.pagination;
        if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) return;
        var slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;
        var $el = swiper.pagination.$el; // Current/Total

        var current;
        var total = swiper.params.loop ? Math.ceil((slidesLength - swiper.loopedSlides * 2) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;

        if (swiper.params.loop) {
          current = Math.ceil((swiper.activeIndex - swiper.loopedSlides) / swiper.params.slidesPerGroup);

          if (current > slidesLength - 1 - swiper.loopedSlides * 2) {
            current -= slidesLength - swiper.loopedSlides * 2;
          }

          if (current > total - 1) current -= total;
          if (current < 0 && swiper.params.paginationType !== 'bullets') current = total + current;
        } else if (typeof swiper.snapIndex !== 'undefined') {
          current = swiper.snapIndex;
        } else {
          current = swiper.activeIndex || 0;
        } // Types


        if (params.type === 'bullets' && swiper.pagination.bullets && swiper.pagination.bullets.length > 0) {
          var bullets = swiper.pagination.bullets;
          var firstIndex;
          var lastIndex;
          var midIndex;

          if (params.dynamicBullets) {
            swiper.pagination.bulletSize = bullets.eq(0)[swiper.isHorizontal() ? 'outerWidth' : 'outerHeight'](true);
            $el.css(swiper.isHorizontal() ? 'width' : 'height', swiper.pagination.bulletSize * (params.dynamicMainBullets + 4) + "px");

            if (params.dynamicMainBullets > 1 && swiper.previousIndex !== undefined) {
              swiper.pagination.dynamicBulletIndex += current - swiper.previousIndex;

              if (swiper.pagination.dynamicBulletIndex > params.dynamicMainBullets - 1) {
                swiper.pagination.dynamicBulletIndex = params.dynamicMainBullets - 1;
              } else if (swiper.pagination.dynamicBulletIndex < 0) {
                swiper.pagination.dynamicBulletIndex = 0;
              }
            }

            firstIndex = current - swiper.pagination.dynamicBulletIndex;
            lastIndex = firstIndex + (Math.min(bullets.length, params.dynamicMainBullets) - 1);
            midIndex = (lastIndex + firstIndex) / 2;
          }

          bullets.removeClass(params.bulletActiveClass + " " + params.bulletActiveClass + "-next " + params.bulletActiveClass + "-next-next " + params.bulletActiveClass + "-prev " + params.bulletActiveClass + "-prev-prev " + params.bulletActiveClass + "-main");

          if ($el.length > 1) {
            bullets.each(function (bullet) {
              var $bullet = $(bullet);
              var bulletIndex = $bullet.index();

              if (bulletIndex === current) {
                $bullet.addClass(params.bulletActiveClass);
              }

              if (params.dynamicBullets) {
                if (bulletIndex >= firstIndex && bulletIndex <= lastIndex) {
                  $bullet.addClass(params.bulletActiveClass + "-main");
                }

                if (bulletIndex === firstIndex) {
                  $bullet.prev().addClass(params.bulletActiveClass + "-prev").prev().addClass(params.bulletActiveClass + "-prev-prev");
                }

                if (bulletIndex === lastIndex) {
                  $bullet.next().addClass(params.bulletActiveClass + "-next").next().addClass(params.bulletActiveClass + "-next-next");
                }
              }
            });
          } else {
            var $bullet = bullets.eq(current);
            var bulletIndex = $bullet.index();
            $bullet.addClass(params.bulletActiveClass);

            if (params.dynamicBullets) {
              var $firstDisplayedBullet = bullets.eq(firstIndex);
              var $lastDisplayedBullet = bullets.eq(lastIndex);

              for (var i = firstIndex; i <= lastIndex; i += 1) {
                bullets.eq(i).addClass(params.bulletActiveClass + "-main");
              }

              if (swiper.params.loop) {
                if (bulletIndex >= bullets.length - params.dynamicMainBullets) {
                  for (var _i = params.dynamicMainBullets; _i >= 0; _i -= 1) {
                    bullets.eq(bullets.length - _i).addClass(params.bulletActiveClass + "-main");
                  }

                  bullets.eq(bullets.length - params.dynamicMainBullets - 1).addClass(params.bulletActiveClass + "-prev");
                } else {
                  $firstDisplayedBullet.prev().addClass(params.bulletActiveClass + "-prev").prev().addClass(params.bulletActiveClass + "-prev-prev");
                  $lastDisplayedBullet.next().addClass(params.bulletActiveClass + "-next").next().addClass(params.bulletActiveClass + "-next-next");
                }
              } else {
                $firstDisplayedBullet.prev().addClass(params.bulletActiveClass + "-prev").prev().addClass(params.bulletActiveClass + "-prev-prev");
                $lastDisplayedBullet.next().addClass(params.bulletActiveClass + "-next").next().addClass(params.bulletActiveClass + "-next-next");
              }
            }
          }

          if (params.dynamicBullets) {
            var dynamicBulletsLength = Math.min(bullets.length, params.dynamicMainBullets + 4);
            var bulletsOffset = (swiper.pagination.bulletSize * dynamicBulletsLength - swiper.pagination.bulletSize) / 2 - midIndex * swiper.pagination.bulletSize;
            var offsetProp = rtl ? 'right' : 'left';
            bullets.css(swiper.isHorizontal() ? offsetProp : 'top', bulletsOffset + "px");
          }
        }

        if (params.type === 'fraction') {
          $el.find(classesToSelector(params.currentClass)).text(params.formatFractionCurrent(current + 1));
          $el.find(classesToSelector(params.totalClass)).text(params.formatFractionTotal(total));
        }

        if (params.type === 'progressbar') {
          var progressbarDirection;

          if (params.progressbarOpposite) {
            progressbarDirection = swiper.isHorizontal() ? 'vertical' : 'horizontal';
          } else {
            progressbarDirection = swiper.isHorizontal() ? 'horizontal' : 'vertical';
          }

          var scale = (current + 1) / total;
          var scaleX = 1;
          var scaleY = 1;

          if (progressbarDirection === 'horizontal') {
            scaleX = scale;
          } else {
            scaleY = scale;
          }

          $el.find(classesToSelector(params.progressbarFillClass)).transform("translate3d(0,0,0) scaleX(" + scaleX + ") scaleY(" + scaleY + ")").transition(swiper.params.speed);
        }

        if (params.type === 'custom' && params.renderCustom) {
          $el.html(params.renderCustom(swiper, current + 1, total));
          swiper.emit('paginationRender', $el[0]);
        } else {
          swiper.emit('paginationUpdate', $el[0]);
        }

        if (swiper.params.watchOverflow && swiper.enabled) {
          $el[swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);
        }
      },
      render: function render() {
        // Render Container
        var swiper = this;
        var params = swiper.params.pagination;
        if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) return;
        var slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;
        var $el = swiper.pagination.$el;
        var paginationHTML = '';

        if (params.type === 'bullets') {
          var numberOfBullets = swiper.params.loop ? Math.ceil((slidesLength - swiper.loopedSlides * 2) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;

          if (swiper.params.freeMode && !swiper.params.loop && numberOfBullets > slidesLength) {
            numberOfBullets = slidesLength;
          }

          for (var i = 0; i < numberOfBullets; i += 1) {
            if (params.renderBullet) {
              paginationHTML += params.renderBullet.call(swiper, i, params.bulletClass);
            } else {
              paginationHTML += "<" + params.bulletElement + " class=\"" + params.bulletClass + "\"></" + params.bulletElement + ">";
            }
          }

          $el.html(paginationHTML);
          swiper.pagination.bullets = $el.find(classesToSelector(params.bulletClass));
        }

        if (params.type === 'fraction') {
          if (params.renderFraction) {
            paginationHTML = params.renderFraction.call(swiper, params.currentClass, params.totalClass);
          } else {
            paginationHTML = "<span class=\"" + params.currentClass + "\"></span>" + ' / ' + ("<span class=\"" + params.totalClass + "\"></span>");
          }

          $el.html(paginationHTML);
        }

        if (params.type === 'progressbar') {
          if (params.renderProgressbar) {
            paginationHTML = params.renderProgressbar.call(swiper, params.progressbarFillClass);
          } else {
            paginationHTML = "<span class=\"" + params.progressbarFillClass + "\"></span>";
          }

          $el.html(paginationHTML);
        }

        if (params.type !== 'custom') {
          swiper.emit('paginationRender', swiper.pagination.$el[0]);
        }
      },
      init: function init() {
        var swiper = this;
        swiper.params.pagination = createElementIfNotDefined(swiper.$el, swiper.params.pagination, swiper.params.createElements, {
          el: 'swiper-pagination'
        });
        var params = swiper.params.pagination;
        if (!params.el) return;
        var $el = $(params.el);
        if ($el.length === 0) return;

        if (swiper.params.uniqueNavElements && typeof params.el === 'string' && $el.length > 1) {
          $el = swiper.$el.find(params.el);
        }

        if (params.type === 'bullets' && params.clickable) {
          $el.addClass(params.clickableClass);
        }

        $el.addClass(params.modifierClass + params.type);

        if (params.type === 'bullets' && params.dynamicBullets) {
          $el.addClass("" + params.modifierClass + params.type + "-dynamic");
          swiper.pagination.dynamicBulletIndex = 0;

          if (params.dynamicMainBullets < 1) {
            params.dynamicMainBullets = 1;
          }
        }

        if (params.type === 'progressbar' && params.progressbarOpposite) {
          $el.addClass(params.progressbarOppositeClass);
        }

        if (params.clickable) {
          $el.on('click', classesToSelector(params.bulletClass), function onClick(e) {
            e.preventDefault();
            var index = $(this).index() * swiper.params.slidesPerGroup;
            if (swiper.params.loop) index += swiper.loopedSlides;
            swiper.slideTo(index);
          });
        }

        extend$1(swiper.pagination, {
          $el: $el,
          el: $el[0]
        });

        if (!swiper.enabled) {
          $el.addClass(params.lockClass);
        }
      },
      destroy: function destroy() {
        var swiper = this;
        var params = swiper.params.pagination;
        if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) return;
        var $el = swiper.pagination.$el;
        $el.removeClass(params.hiddenClass);
        $el.removeClass(params.modifierClass + params.type);
        if (swiper.pagination.bullets) swiper.pagination.bullets.removeClass(params.bulletActiveClass);

        if (params.clickable) {
          $el.off('click', classesToSelector(params.bulletClass));
        }
      }
    };
    var Pagination$1 = {
      name: 'pagination',
      params: {
        pagination: {
          el: null,
          bulletElement: 'span',
          clickable: false,
          hideOnClick: false,
          renderBullet: null,
          renderProgressbar: null,
          renderFraction: null,
          renderCustom: null,
          progressbarOpposite: false,
          type: 'bullets',
          // 'bullets' or 'progressbar' or 'fraction' or 'custom'
          dynamicBullets: false,
          dynamicMainBullets: 1,
          formatFractionCurrent: function formatFractionCurrent(number) {
            return number;
          },
          formatFractionTotal: function formatFractionTotal(number) {
            return number;
          },
          bulletClass: 'swiper-pagination-bullet',
          bulletActiveClass: 'swiper-pagination-bullet-active',
          modifierClass: 'swiper-pagination-',
          // NEW
          currentClass: 'swiper-pagination-current',
          totalClass: 'swiper-pagination-total',
          hiddenClass: 'swiper-pagination-hidden',
          progressbarFillClass: 'swiper-pagination-progressbar-fill',
          progressbarOppositeClass: 'swiper-pagination-progressbar-opposite',
          clickableClass: 'swiper-pagination-clickable',
          // NEW
          lockClass: 'swiper-pagination-lock'
        }
      },
      create: function create() {
        var swiper = this;
        bindModuleMethods(swiper, {
          pagination: _extends$2({
            dynamicBulletIndex: 0
          }, Pagination)
        });
      },
      on: {
        init: function init(swiper) {
          swiper.pagination.init();
          swiper.pagination.render();
          swiper.pagination.update();
        },
        activeIndexChange: function activeIndexChange(swiper) {
          if (swiper.params.loop) {
            swiper.pagination.update();
          } else if (typeof swiper.snapIndex === 'undefined') {
            swiper.pagination.update();
          }
        },
        snapIndexChange: function snapIndexChange(swiper) {
          if (!swiper.params.loop) {
            swiper.pagination.update();
          }
        },
        slidesLengthChange: function slidesLengthChange(swiper) {
          if (swiper.params.loop) {
            swiper.pagination.render();
            swiper.pagination.update();
          }
        },
        snapGridLengthChange: function snapGridLengthChange(swiper) {
          if (!swiper.params.loop) {
            swiper.pagination.render();
            swiper.pagination.update();
          }
        },
        destroy: function destroy(swiper) {
          swiper.pagination.destroy();
        },
        'enable disable': function enableDisable(swiper) {
          var $el = swiper.pagination.$el;

          if ($el) {
            $el[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.pagination.lockClass);
          }
        },
        click: function click(swiper, e) {
          var targetEl = e.target;

          if (swiper.params.pagination.el && swiper.params.pagination.hideOnClick && swiper.pagination.$el.length > 0 && !$(targetEl).hasClass(swiper.params.pagination.bulletClass)) {
            if (swiper.navigation && (swiper.navigation.nextEl && targetEl === swiper.navigation.nextEl || swiper.navigation.prevEl && targetEl === swiper.navigation.prevEl)) return;
            var isHidden = swiper.pagination.$el.hasClass(swiper.params.pagination.hiddenClass);

            if (isHidden === true) {
              swiper.emit('paginationShow');
            } else {
              swiper.emit('paginationHide');
            }

            swiper.pagination.$el.toggleClass(swiper.params.pagination.hiddenClass);
          }
        }
      }
    };

    function _extends$1() { _extends$1 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1.apply(this, arguments); }
    var Controller = {
      LinearSpline: function LinearSpline(x, y) {
        var binarySearch = function search() {
          var maxIndex;
          var minIndex;
          var guess;
          return function (array, val) {
            minIndex = -1;
            maxIndex = array.length;

            while (maxIndex - minIndex > 1) {
              guess = maxIndex + minIndex >> 1;

              if (array[guess] <= val) {
                minIndex = guess;
              } else {
                maxIndex = guess;
              }
            }

            return maxIndex;
          };
        }();

        this.x = x;
        this.y = y;
        this.lastIndex = x.length - 1; // Given an x value (x2), return the expected y2 value:
        // (x1,y1) is the known point before given value,
        // (x3,y3) is the known point after given value.

        var i1;
        var i3;

        this.interpolate = function interpolate(x2) {
          if (!x2) return 0; // Get the indexes of x1 and x3 (the array indexes before and after given x2):

          i3 = binarySearch(this.x, x2);
          i1 = i3 - 1; // We have our indexes i1 & i3, so we can calculate already:
          // y2 := ((x2−x1) × (y3−y1)) ÷ (x3−x1) + y1

          return (x2 - this.x[i1]) * (this.y[i3] - this.y[i1]) / (this.x[i3] - this.x[i1]) + this.y[i1];
        };

        return this;
      },
      // xxx: for now i will just save one spline function to to
      getInterpolateFunction: function getInterpolateFunction(c) {
        var swiper = this;

        if (!swiper.controller.spline) {
          swiper.controller.spline = swiper.params.loop ? new Controller.LinearSpline(swiper.slidesGrid, c.slidesGrid) : new Controller.LinearSpline(swiper.snapGrid, c.snapGrid);
        }
      },
      setTranslate: function setTranslate(_setTranslate, byController) {
        var swiper = this;
        var controlled = swiper.controller.control;
        var multiplier;
        var controlledTranslate;
        var Swiper = swiper.constructor;

        function setControlledTranslate(c) {
          // this will create an Interpolate function based on the snapGrids
          // x is the Grid of the scrolled scroller and y will be the controlled scroller
          // it makes sense to create this only once and recall it for the interpolation
          // the function does a lot of value caching for performance
          var translate = swiper.rtlTranslate ? -swiper.translate : swiper.translate;

          if (swiper.params.controller.by === 'slide') {
            swiper.controller.getInterpolateFunction(c); // i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid
            // but it did not work out

            controlledTranslate = -swiper.controller.spline.interpolate(-translate);
          }

          if (!controlledTranslate || swiper.params.controller.by === 'container') {
            multiplier = (c.maxTranslate() - c.minTranslate()) / (swiper.maxTranslate() - swiper.minTranslate());
            controlledTranslate = (translate - swiper.minTranslate()) * multiplier + c.minTranslate();
          }

          if (swiper.params.controller.inverse) {
            controlledTranslate = c.maxTranslate() - controlledTranslate;
          }

          c.updateProgress(controlledTranslate);
          c.setTranslate(controlledTranslate, swiper);
          c.updateActiveIndex();
          c.updateSlidesClasses();
        }

        if (Array.isArray(controlled)) {
          for (var i = 0; i < controlled.length; i += 1) {
            if (controlled[i] !== byController && controlled[i] instanceof Swiper) {
              setControlledTranslate(controlled[i]);
            }
          }
        } else if (controlled instanceof Swiper && byController !== controlled) {
          setControlledTranslate(controlled);
        }
      },
      setTransition: function setTransition(duration, byController) {
        var swiper = this;
        var Swiper = swiper.constructor;
        var controlled = swiper.controller.control;
        var i;

        function setControlledTransition(c) {
          c.setTransition(duration, swiper);

          if (duration !== 0) {
            c.transitionStart();

            if (c.params.autoHeight) {
              nextTick(function () {
                c.updateAutoHeight();
              });
            }

            c.$wrapperEl.transitionEnd(function () {
              if (!controlled) return;

              if (c.params.loop && swiper.params.controller.by === 'slide') {
                c.loopFix();
              }

              c.transitionEnd();
            });
          }
        }

        if (Array.isArray(controlled)) {
          for (i = 0; i < controlled.length; i += 1) {
            if (controlled[i] !== byController && controlled[i] instanceof Swiper) {
              setControlledTransition(controlled[i]);
            }
          }
        } else if (controlled instanceof Swiper && byController !== controlled) {
          setControlledTransition(controlled);
        }
      }
    };
    var Controller$1 = {
      name: 'controller',
      params: {
        controller: {
          control: undefined,
          inverse: false,
          by: 'slide' // or 'container'

        }
      },
      create: function create() {
        var swiper = this;
        bindModuleMethods(swiper, {
          controller: _extends$1({
            control: swiper.params.controller.control
          }, Controller)
        });
      },
      on: {
        update: function update(swiper) {
          if (!swiper.controller.control) return;

          if (swiper.controller.spline) {
            swiper.controller.spline = undefined;
            delete swiper.controller.spline;
          }
        },
        resize: function resize(swiper) {
          if (!swiper.controller.control) return;

          if (swiper.controller.spline) {
            swiper.controller.spline = undefined;
            delete swiper.controller.spline;
          }
        },
        observerUpdate: function observerUpdate(swiper) {
          if (!swiper.controller.control) return;

          if (swiper.controller.spline) {
            swiper.controller.spline = undefined;
            delete swiper.controller.spline;
          }
        },
        setTranslate: function setTranslate(swiper, translate, byController) {
          if (!swiper.controller.control) return;
          swiper.controller.setTranslate(translate, byController);
        },
        setTransition: function setTransition(swiper, duration, byController) {
          if (!swiper.controller.control) return;
          swiper.controller.setTransition(duration, byController);
        }
      }
    };

    function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
    var Fade = {
      setTranslate: function setTranslate() {
        var swiper = this;
        var slides = swiper.slides;

        for (var i = 0; i < slides.length; i += 1) {
          var $slideEl = swiper.slides.eq(i);
          var offset = $slideEl[0].swiperSlideOffset;
          var tx = -offset;
          if (!swiper.params.virtualTranslate) tx -= swiper.translate;
          var ty = 0;

          if (!swiper.isHorizontal()) {
            ty = tx;
            tx = 0;
          }

          var slideOpacity = swiper.params.fadeEffect.crossFade ? Math.max(1 - Math.abs($slideEl[0].progress), 0) : 1 + Math.min(Math.max($slideEl[0].progress, -1), 0);
          $slideEl.css({
            opacity: slideOpacity
          }).transform("translate3d(" + tx + "px, " + ty + "px, 0px)");
        }
      },
      setTransition: function setTransition(duration) {
        var swiper = this;
        var slides = swiper.slides,
            $wrapperEl = swiper.$wrapperEl;
        slides.transition(duration);

        if (swiper.params.virtualTranslate && duration !== 0) {
          var eventTriggered = false;
          slides.transitionEnd(function () {
            if (eventTriggered) return;
            if (!swiper || swiper.destroyed) return;
            eventTriggered = true;
            swiper.animating = false;
            var triggerEvents = ['webkitTransitionEnd', 'transitionend'];

            for (var i = 0; i < triggerEvents.length; i += 1) {
              $wrapperEl.trigger(triggerEvents[i]);
            }
          });
        }
      }
    };
    var EffectFade = {
      name: 'effect-fade',
      params: {
        fadeEffect: {
          crossFade: false
        }
      },
      create: function create() {
        var swiper = this;
        bindModuleMethods(swiper, {
          fadeEffect: _extends({}, Fade)
        });
      },
      on: {
        beforeInit: function beforeInit(swiper) {
          if (swiper.params.effect !== 'fade') return;
          swiper.classNames.push(swiper.params.containerModifierClass + "fade");
          var overwriteParams = {
            slidesPerView: 1,
            slidesPerColumn: 1,
            slidesPerGroup: 1,
            watchSlidesProgress: true,
            spaceBetween: 0,
            virtualTranslate: true
          };
          extend$1(swiper.params, overwriteParams);
          extend$1(swiper.originalParams, overwriteParams);
        },
        setTranslate: function setTranslate(swiper) {
          if (swiper.params.effect !== 'fade') return;
          swiper.fadeEffect.setTranslate();
        },
        setTransition: function setTransition(swiper, duration) {
          if (swiper.params.effect !== 'fade') return;
          swiper.fadeEffect.setTransition(duration);
        }
      }
    };

    function isObject(o) {
      return typeof o === 'object' && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === 'Object';
    }

    function extend(target, src) {
      var noExtend = ['__proto__', 'constructor', 'prototype'];
      Object.keys(src).filter(function (key) {
        return noExtend.indexOf(key) < 0;
      }).forEach(function (key) {
        if (typeof target[key] === 'undefined') target[key] = src[key];else if (isObject(src[key]) && isObject(target[key]) && Object.keys(src[key]).length > 0) {
          if (src[key].__swiper__) target[key] = src[key];else extend(target[key], src[key]);
        } else {
          target[key] = src[key];
        }
      });
    }

    function needsNavigation(params) {
      if (params === void 0) {
        params = {};
      }

      return params.navigation && typeof params.navigation.nextEl === 'undefined' && typeof params.navigation.prevEl === 'undefined';
    }

    function needsPagination(params) {
      if (params === void 0) {
        params = {};
      }

      return params.pagination && typeof params.pagination.el === 'undefined';
    }

    function needsScrollbar(params) {
      if (params === void 0) {
        params = {};
      }

      return params.scrollbar && typeof params.scrollbar.el === 'undefined';
    }

    function uniqueClasses(classNames) {
      if (classNames === void 0) {
        classNames = '';
      }

      var classes = classNames.split(' ').map(function (c) {
        return c.trim();
      }).filter(function (c) {
        return !!c;
      });
      var unique = [];
      classes.forEach(function (c) {
        if (unique.indexOf(c) < 0) unique.push(c);
      });
      return unique.join(' ');
    }

    /* underscore in name -> watch for changes */
    var paramsList = ['init', '_direction', 'touchEventsTarget', 'initialSlide', '_speed', 'cssMode', 'updateOnWindowResize', 'resizeObserver', 'nested', '_width', '_height', 'preventInteractionOnTransition', 'userAgent', 'url', '_edgeSwipeDetection', '_edgeSwipeThreshold', '_freeMode', '_freeModeMomentum', '_freeModeMomentumRatio', '_freeModeMomentumBounce', '_freeModeMomentumBounceRatio', '_freeModeMomentumVelocityRatio', '_freeModeSticky', '_freeModeMinimumVelocity', '_autoHeight', 'setWrapperSize', 'virtualTranslate', '_effect', 'breakpoints', '_spaceBetween', '_slidesPerView', '_slidesPerColumn', '_slidesPerColumnFill', '_slidesPerGroup', '_slidesPerGroupSkip', '_centeredSlides', '_centeredSlidesBounds', '_slidesOffsetBefore', '_slidesOffsetAfter', 'normalizeSlideIndex', '_centerInsufficientSlides', '_watchOverflow', 'roundLengths', 'touchRatio', 'touchAngle', 'simulateTouch', '_shortSwipes', '_longSwipes', 'longSwipesRatio', 'longSwipesMs', '_followFinger', 'allowTouchMove', '_threshold', 'touchMoveStopPropagation', 'touchStartPreventDefault', 'touchStartForcePreventDefault', 'touchReleaseOnEdges', 'uniqueNavElements', '_resistance', '_resistanceRatio', '_watchSlidesProgress', '_watchSlidesVisibility', '_grabCursor', 'preventClicks', 'preventClicksPropagation', '_slideToClickedSlide', '_preloadImages', 'updateOnImagesReady', '_loop', '_loopAdditionalSlides', '_loopedSlides', '_loopFillGroupWithBlank', 'loopPreventsSlide', '_allowSlidePrev', '_allowSlideNext', '_swipeHandler', '_noSwiping', 'noSwipingClass', 'noSwipingSelector', 'passiveListeners', 'containerModifierClass', 'slideClass', 'slideBlankClass', 'slideActiveClass', 'slideDuplicateActiveClass', 'slideVisibleClass', 'slideDuplicateClass', 'slideNextClass', 'slideDuplicateNextClass', 'slidePrevClass', 'slideDuplicatePrevClass', 'wrapperClass', 'runCallbacksOnInit', 'observer', 'observeParents', 'observeSlideChildren', // modules
    'a11y', 'autoplay', '_controller', 'coverflowEffect', 'cubeEffect', 'fadeEffect', 'flipEffect', 'hashNavigation', 'history', 'keyboard', 'lazy', 'mousewheel', '_navigation', '_pagination', 'parallax', '_scrollbar', '_thumbs', '_virtual', 'zoom'];

    // eslint-disable-next-line

    function getParams(obj) {
      if (obj === void 0) {
        obj = {};
      }

      var params = {
        on: {}
      };
      var passedParams = {};
      extend(params, Swiper$2.defaults);
      extend(params, Swiper$2.extendedDefaults);
      params._emitClasses = true;
      params.init = false;
      var rest = {};
      var allowedParams = paramsList.map(function (key) {
        return key.replace(/_/, '');
      });
      Object.keys(obj).forEach(function (key) {
        if (allowedParams.indexOf(key) >= 0) {
          if (isObject(obj[key])) {
            params[key] = {};
            passedParams[key] = {};
            extend(params[key], obj[key]);
            extend(passedParams[key], obj[key]);
          } else {
            params[key] = obj[key];
            passedParams[key] = obj[key];
          }
        } else if (key.search(/on[A-Z]/) === 0 && typeof obj[key] === 'function') {
          params.on["" + key[2].toLowerCase() + key.substr(3)] = obj[key];
        } else {
          rest[key] = obj[key];
        }
      });
      ['navigation', 'pagination', 'scrollbar'].forEach(function (key) {
        if (params[key] === true) params[key] = {};
      });
      return {
        params: params,
        passedParams: passedParams,
        rest: rest
      };
    }

    // eslint-disable-next-line

    function initSwiper(swiperParams) {
      return new Swiper$2(swiperParams);
    }

    function mountSwiper(_ref, swiperParams) {
      var el = _ref.el,
          nextEl = _ref.nextEl,
          prevEl = _ref.prevEl,
          paginationEl = _ref.paginationEl,
          scrollbarEl = _ref.scrollbarEl,
          swiper = _ref.swiper;

      if (needsNavigation(swiperParams) && nextEl && prevEl) {
        swiper.params.navigation.nextEl = nextEl;
        swiper.originalParams.navigation.nextEl = nextEl;
        swiper.params.navigation.prevEl = prevEl;
        swiper.originalParams.navigation.prevEl = prevEl;
      }

      if (needsPagination(swiperParams) && paginationEl) {
        swiper.params.pagination.el = paginationEl;
        swiper.originalParams.pagination.el = paginationEl;
      }

      if (needsScrollbar(swiperParams) && scrollbarEl) {
        swiper.params.scrollbar.el = scrollbarEl;
        swiper.originalParams.scrollbar.el = scrollbarEl;
      }

      swiper.init(el);
    }

    function getChangedParams(swiperParams, oldParams) {
      var keys = [];
      if (!oldParams) return keys;

      var addKey = function addKey(key) {
        if (keys.indexOf(key) < 0) keys.push(key);
      };

      var watchParams = paramsList.filter(function (key) {
        return key[0] === '_';
      }).map(function (key) {
        return key.replace(/_/, '');
      });
      watchParams.forEach(function (key) {
        if (key in swiperParams && key in oldParams) {
          if (isObject(swiperParams[key]) && isObject(oldParams[key])) {
            var newKeys = Object.keys(swiperParams[key]);
            var oldKeys = Object.keys(oldParams[key]);

            if (newKeys.length !== oldKeys.length) {
              addKey(key);
            } else {
              newKeys.forEach(function (newKey) {
                if (swiperParams[key][newKey] !== oldParams[key][newKey]) {
                  addKey(key);
                }
              });
              oldKeys.forEach(function (oldKey) {
                if (swiperParams[key][oldKey] !== oldParams[key][oldKey]) addKey(key);
              });
            }
          } else if (swiperParams[key] !== oldParams[key]) {
            addKey(key);
          }
        }
      });
      return keys;
    }

    function updateSwiper(swiper, passedParams, changedParams) {
      var updateParams = changedParams.filter(function (key) {
        return key !== 'children' && key !== 'direction';
      });
      var currentParams = swiper.params,
          pagination = swiper.pagination,
          navigation = swiper.navigation,
          scrollbar = swiper.scrollbar,
          thumbs = swiper.thumbs;
      var needThumbsInit;
      var needControllerInit;
      var needPaginationInit;
      var needScrollbarInit;
      var needNavigationInit;

      if (changedParams.includes('thumbs') && passedParams.thumbs && passedParams.thumbs.swiper && currentParams.thumbs && !currentParams.thumbs.swiper) {
        needThumbsInit = true;
      }

      if (changedParams.includes('controller') && passedParams.controller && passedParams.controller.control && currentParams.controller && !currentParams.controller.control) {
        needControllerInit = true;
      }

      if (changedParams.includes('pagination') && passedParams.pagination && passedParams.pagination.el && (currentParams.pagination || currentParams.pagination === false) && pagination && !pagination.el) {
        needPaginationInit = true;
      }

      if (changedParams.includes('scrollbar') && passedParams.scrollbar && passedParams.scrollbar.el && (currentParams.scrollbar || currentParams.scrollbar === false) && scrollbar && !scrollbar.el) {
        needScrollbarInit = true;
      }

      if (changedParams.includes('navigation') && passedParams.navigation && passedParams.navigation.prevEl && passedParams.navigation.nextEl && (currentParams.navigation || currentParams.navigation === false) && navigation && !navigation.prevEl && !navigation.nextEl) {
        needNavigationInit = true;
      }

      if (changedParams.includes('virtual')) {
        if (passedParams.virtual && passedParams.virtual.slides && swiper.virtual) {
          swiper.virtual.slides = passedParams.virtual.slides;
          swiper.virtual.update();
        }
      }

      updateParams.forEach(function (key) {
        if (isObject(currentParams[key]) && isObject(passedParams[key])) {
          extend(currentParams[key], passedParams[key]);
        } else {
          currentParams[key] = passedParams[key];
        }
      });

      if (needThumbsInit) {
        var initialized = thumbs.init();

        if (initialized) {
          thumbs.update(true);
        }
      }

      if (needControllerInit) {
        swiper.controller.control = currentParams.controller.control;
      }

      if (needPaginationInit) {
        pagination.init();
        pagination.render();
        pagination.update();
      }

      if (needScrollbarInit) {
        scrollbar.init();
        scrollbar.updateSize();
        scrollbar.setTranslate();
      }

      if (needNavigationInit) {
        navigation.init();
        navigation.update();
      }

      if (changedParams.includes('allowSlideNext')) {
        swiper.allowSlideNext = passedParams.allowSlideNext;
      }

      if (changedParams.includes('allowSlidePrev')) {
        swiper.allowSlidePrev = passedParams.allowSlidePrev;
      }

      if (changedParams.includes('direction')) {
        swiper.changeDirection(passedParams.direction, false);
      }

      swiper.update();
    }

    /* swiper.svelte generated by Svelte v3.37.0 */
    const get_container_end_slot_changes = dirty => ({ virtualData: dirty & /*virtualData*/ 512 });
    const get_container_end_slot_context = ctx => ({ virtualData: /*virtualData*/ ctx[9] });
    const get_wrapper_end_slot_changes = dirty => ({ virtualData: dirty & /*virtualData*/ 512 });
    const get_wrapper_end_slot_context = ctx => ({ virtualData: /*virtualData*/ ctx[9] });
    const get_default_slot_changes$1 = dirty => ({ virtualData: dirty & /*virtualData*/ 512 });
    const get_default_slot_context$1 = ctx => ({ virtualData: /*virtualData*/ ctx[9] });
    const get_wrapper_start_slot_changes = dirty => ({ virtualData: dirty & /*virtualData*/ 512 });
    const get_wrapper_start_slot_context = ctx => ({ virtualData: /*virtualData*/ ctx[9] });
    const get_container_start_slot_changes = dirty => ({ virtualData: dirty & /*virtualData*/ 512 });
    const get_container_start_slot_context = ctx => ({ virtualData: /*virtualData*/ ctx[9] });

    // (147:2) {#if needsNavigation(swiperParams)}
    function create_if_block_2$3(ctx) {
    	let div0;
    	let t;
    	let div1;

    	return {
    		c() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			attr$1(div0, "class", "swiper-button-prev");
    			attr$1(div1, "class", "swiper-button-next");
    		},
    		m(target, anchor) {
    			insert(target, div0, anchor);
    			/*div0_binding*/ ctx[13](div0);
    			insert(target, t, anchor);
    			insert(target, div1, anchor);
    			/*div1_binding*/ ctx[14](div1);
    		},
    		p: noop,
    		d(detaching) {
    			if (detaching) detach(div0);
    			/*div0_binding*/ ctx[13](null);
    			if (detaching) detach(t);
    			if (detaching) detach(div1);
    			/*div1_binding*/ ctx[14](null);
    		}
    	};
    }

    // (151:2) {#if needsScrollbar(swiperParams)}
    function create_if_block_1$4(ctx) {
    	let div;

    	return {
    		c() {
    			div = element("div");
    			attr$1(div, "class", "swiper-scrollbar");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			/*div_binding*/ ctx[15](div);
    		},
    		p: noop,
    		d(detaching) {
    			if (detaching) detach(div);
    			/*div_binding*/ ctx[15](null);
    		}
    	};
    }

    // (154:2) {#if needsPagination(swiperParams)}
    function create_if_block$8(ctx) {
    	let div;

    	return {
    		c() {
    			div = element("div");
    			attr$1(div, "class", "swiper-pagination");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			/*div_binding_1*/ ctx[16](div);
    		},
    		p: noop,
    		d(detaching) {
    			if (detaching) detach(div);
    			/*div_binding_1*/ ctx[16](null);
    		}
    	};
    }

    function create_fragment$d(ctx) {
    	let div1;
    	let t0;
    	let show_if_2 = needsNavigation(/*swiperParams*/ ctx[2]);
    	let t1;
    	let show_if_1 = needsScrollbar(/*swiperParams*/ ctx[2]);
    	let t2;
    	let show_if = needsPagination(/*swiperParams*/ ctx[2]);
    	let t3;
    	let div0;
    	let t4;
    	let t5;
    	let t6;
    	let div1_class_value;
    	let current;
    	const container_start_slot_template = /*#slots*/ ctx[12]["container-start"];
    	const container_start_slot = create_slot(container_start_slot_template, ctx, /*$$scope*/ ctx[11], get_container_start_slot_context);
    	let if_block0 = show_if_2 && create_if_block_2$3(ctx);
    	let if_block1 = show_if_1 && create_if_block_1$4(ctx);
    	let if_block2 = show_if && create_if_block$8(ctx);
    	const wrapper_start_slot_template = /*#slots*/ ctx[12]["wrapper-start"];
    	const wrapper_start_slot = create_slot(wrapper_start_slot_template, ctx, /*$$scope*/ ctx[11], get_wrapper_start_slot_context);
    	const default_slot_template = /*#slots*/ ctx[12].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], get_default_slot_context$1);
    	const wrapper_end_slot_template = /*#slots*/ ctx[12]["wrapper-end"];
    	const wrapper_end_slot = create_slot(wrapper_end_slot_template, ctx, /*$$scope*/ ctx[11], get_wrapper_end_slot_context);
    	const container_end_slot_template = /*#slots*/ ctx[12]["container-end"];
    	const container_end_slot = create_slot(container_end_slot_template, ctx, /*$$scope*/ ctx[11], get_container_end_slot_context);

    	let div1_levels = [
    		{
    			class: div1_class_value = uniqueClasses(`${/*containerClasses*/ ctx[1]}${/*className*/ ctx[0] ? ` ${/*className*/ ctx[0]}` : ""}`)
    		},
    		/*restProps*/ ctx[3]
    	];

    	let div1_data = {};

    	for (let i = 0; i < div1_levels.length; i += 1) {
    		div1_data = assign(div1_data, div1_levels[i]);
    	}

    	return {
    		c() {
    			div1 = element("div");
    			if (container_start_slot) container_start_slot.c();
    			t0 = space();
    			if (if_block0) if_block0.c();
    			t1 = space();
    			if (if_block1) if_block1.c();
    			t2 = space();
    			if (if_block2) if_block2.c();
    			t3 = space();
    			div0 = element("div");
    			if (wrapper_start_slot) wrapper_start_slot.c();
    			t4 = space();
    			if (default_slot) default_slot.c();
    			t5 = space();
    			if (wrapper_end_slot) wrapper_end_slot.c();
    			t6 = space();
    			if (container_end_slot) container_end_slot.c();
    			attr$1(div0, "class", "swiper-wrapper");
    			set_attributes(div1, div1_data);
    		},
    		m(target, anchor) {
    			insert(target, div1, anchor);

    			if (container_start_slot) {
    				container_start_slot.m(div1, null);
    			}

    			append$1(div1, t0);
    			if (if_block0) if_block0.m(div1, null);
    			append$1(div1, t1);
    			if (if_block1) if_block1.m(div1, null);
    			append$1(div1, t2);
    			if (if_block2) if_block2.m(div1, null);
    			append$1(div1, t3);
    			append$1(div1, div0);

    			if (wrapper_start_slot) {
    				wrapper_start_slot.m(div0, null);
    			}

    			append$1(div0, t4);

    			if (default_slot) {
    				default_slot.m(div0, null);
    			}

    			append$1(div0, t5);

    			if (wrapper_end_slot) {
    				wrapper_end_slot.m(div0, null);
    			}

    			append$1(div1, t6);

    			if (container_end_slot) {
    				container_end_slot.m(div1, null);
    			}

    			/*div1_binding_1*/ ctx[17](div1);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			if (container_start_slot) {
    				if (container_start_slot.p && dirty & /*$$scope, virtualData*/ 2560) {
    					update_slot(container_start_slot, container_start_slot_template, ctx, /*$$scope*/ ctx[11], dirty, get_container_start_slot_changes, get_container_start_slot_context);
    				}
    			}

    			if (dirty & /*swiperParams*/ 4) show_if_2 = needsNavigation(/*swiperParams*/ ctx[2]);

    			if (show_if_2) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_2$3(ctx);
    					if_block0.c();
    					if_block0.m(div1, t1);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (dirty & /*swiperParams*/ 4) show_if_1 = needsScrollbar(/*swiperParams*/ ctx[2]);

    			if (show_if_1) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_1$4(ctx);
    					if_block1.c();
    					if_block1.m(div1, t2);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (dirty & /*swiperParams*/ 4) show_if = needsPagination(/*swiperParams*/ ctx[2]);

    			if (show_if) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block$8(ctx);
    					if_block2.c();
    					if_block2.m(div1, t3);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (wrapper_start_slot) {
    				if (wrapper_start_slot.p && dirty & /*$$scope, virtualData*/ 2560) {
    					update_slot(wrapper_start_slot, wrapper_start_slot_template, ctx, /*$$scope*/ ctx[11], dirty, get_wrapper_start_slot_changes, get_wrapper_start_slot_context);
    				}
    			}

    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope, virtualData*/ 2560) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[11], dirty, get_default_slot_changes$1, get_default_slot_context$1);
    				}
    			}

    			if (wrapper_end_slot) {
    				if (wrapper_end_slot.p && dirty & /*$$scope, virtualData*/ 2560) {
    					update_slot(wrapper_end_slot, wrapper_end_slot_template, ctx, /*$$scope*/ ctx[11], dirty, get_wrapper_end_slot_changes, get_wrapper_end_slot_context);
    				}
    			}

    			if (container_end_slot) {
    				if (container_end_slot.p && dirty & /*$$scope, virtualData*/ 2560) {
    					update_slot(container_end_slot, container_end_slot_template, ctx, /*$$scope*/ ctx[11], dirty, get_container_end_slot_changes, get_container_end_slot_context);
    				}
    			}

    			set_attributes(div1, div1_data = get_spread_update(div1_levels, [
    				(!current || dirty & /*containerClasses, className*/ 3 && div1_class_value !== (div1_class_value = uniqueClasses(`${/*containerClasses*/ ctx[1]}${/*className*/ ctx[0] ? ` ${/*className*/ ctx[0]}` : ""}`))) && { class: div1_class_value },
    				dirty & /*restProps*/ 8 && /*restProps*/ ctx[3]
    			]));
    		},
    		i(local) {
    			if (current) return;
    			transition_in(container_start_slot, local);
    			transition_in(wrapper_start_slot, local);
    			transition_in(default_slot, local);
    			transition_in(wrapper_end_slot, local);
    			transition_in(container_end_slot, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(container_start_slot, local);
    			transition_out(wrapper_start_slot, local);
    			transition_out(default_slot, local);
    			transition_out(wrapper_end_slot, local);
    			transition_out(container_end_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div1);
    			if (container_start_slot) container_start_slot.d(detaching);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			if (wrapper_start_slot) wrapper_start_slot.d(detaching);
    			if (default_slot) default_slot.d(detaching);
    			if (wrapper_end_slot) wrapper_end_slot.d(detaching);
    			if (container_end_slot) container_end_slot.d(detaching);
    			/*div1_binding_1*/ ctx[17](null);
    		}
    	};
    }

    function instance$d($$self, $$props, $$invalidate) {
    	const omit_props_names = ["class","swiper"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	const dispatch = createEventDispatcher();
    	let { class: className = undefined } = $$props;
    	let containerClasses = "swiper-container";
    	let breakpointChanged = false;
    	let swiperInstance = null;
    	let oldPassedParams = null;
    	let paramsData;
    	let swiperParams;
    	let passedParams;
    	let restProps;
    	let swiperEl = null;
    	let prevEl = null;
    	let nextEl = null;
    	let scrollbarEl = null;
    	let paginationEl = null;
    	let virtualData = { slides: [] };

    	function swiper() {
    		return swiperInstance;
    	}

    	const setVirtualData = data => {
    		$$invalidate(9, virtualData = data);

    		tick().then(() => {
    			swiperInstance.$wrapperEl.children(".swiper-slide").each(el => {
    				if (el.onSwiper) el.onSwiper(swiperInstance);
    			});

    			swiperInstance.updateSlides();
    			swiperInstance.updateProgress();
    			swiperInstance.updateSlidesClasses();

    			if (swiperInstance.lazy && swiperInstance.params.lazy.enabled) {
    				swiperInstance.lazy.load();
    			}
    		});
    	};

    	const calcParams = () => {
    		paramsData = getParams($$restProps);
    		$$invalidate(2, swiperParams = paramsData.params);
    		passedParams = paramsData.passedParams;
    		$$invalidate(3, restProps = paramsData.rest);
    	};

    	calcParams();
    	oldPassedParams = passedParams;

    	const onBeforeBreakpoint = () => {
    		breakpointChanged = true;
    	};

    	swiperParams.onAny = (event, ...args) => {
    		dispatch(event, [args]);
    	};

    	Object.assign(swiperParams.on, {
    		_beforeBreakpoint: onBeforeBreakpoint,
    		_containerClasses(_swiper, classes) {
    			$$invalidate(1, containerClasses = classes);
    		}
    	});

    	swiperInstance = initSwiper(swiperParams);

    	if (swiperInstance.virtual && swiperInstance.params.virtual.enabled) {
    		const extendWith = {
    			cache: false,
    			renderExternal: data => {
    				setVirtualData(data);

    				if (swiperParams.virtual && swiperParams.virtual.renderExternal) {
    					swiperParams.virtual.renderExternal(data);
    				}
    			},
    			renderExternalUpdate: false
    		};

    		extend(swiperInstance.params.virtual, extendWith);
    		extend(swiperInstance.originalParams.virtual, extendWith);
    	}

    	onMount(() => {
    		if (!swiperEl) return;

    		mountSwiper(
    			{
    				el: swiperEl,
    				nextEl,
    				prevEl,
    				paginationEl,
    				scrollbarEl,
    				swiper: swiperInstance
    			},
    			swiperParams
    		);

    		dispatch("swiper", [swiperInstance]);
    		if (swiperParams.virtual) return;

    		swiperInstance.slides.each(el => {
    			if (el.onSwiper) el.onSwiper(swiperInstance);
    		});
    	});

    	afterUpdate(() => {
    		if (!swiperInstance) return;
    		calcParams();
    		const changedParams = getChangedParams(passedParams, oldPassedParams);

    		if ((changedParams.length || breakpointChanged) && swiperInstance && !swiperInstance.destroyed) {
    			updateSwiper(swiperInstance, passedParams, changedParams);
    		}

    		breakpointChanged = false;
    		oldPassedParams = passedParams;
    	});

    	onDestroy(() => {
    		if (typeof window !== "undefined" && swiperInstance && !swiperInstance.destroyed) {
    			swiperInstance.destroy(true, false);
    		}
    	});

    	function div0_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			prevEl = $$value;
    			$$invalidate(5, prevEl);
    		});
    	}

    	function div1_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			nextEl = $$value;
    			$$invalidate(6, nextEl);
    		});
    	}

    	function div_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			scrollbarEl = $$value;
    			$$invalidate(7, scrollbarEl);
    		});
    	}

    	function div_binding_1($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			paginationEl = $$value;
    			$$invalidate(8, paginationEl);
    		});
    	}

    	function div1_binding_1($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			swiperEl = $$value;
    			$$invalidate(4, swiperEl);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(27, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
    		if ("$$scope" in $$new_props) $$invalidate(11, $$scope = $$new_props.$$scope);
    	};

    	return [
    		className,
    		containerClasses,
    		swiperParams,
    		restProps,
    		swiperEl,
    		prevEl,
    		nextEl,
    		scrollbarEl,
    		paginationEl,
    		virtualData,
    		swiper,
    		$$scope,
    		slots,
    		div0_binding,
    		div1_binding,
    		div_binding,
    		div_binding_1,
    		div1_binding_1
    	];
    }

    class Swiper$1 extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$d, create_fragment$d, safe_not_equal, { class: 0, swiper: 10 });
    	}

    	get swiper() {
    		return this.$$.ctx[10];
    	}
    }

    /* swiper.svelte generated by Svelte v3.37.0 */
    const get_default_slot_changes_1 = dirty => ({ data: dirty & /*slideData*/ 32 });
    const get_default_slot_context_1 = ctx => ({ data: /*slideData*/ ctx[5] });
    const get_default_slot_changes = dirty => ({ data: dirty & /*slideData*/ 32 });
    const get_default_slot_context = ctx => ({ data: /*slideData*/ ctx[5] });

    // (92:2) {:else}
    function create_else_block$2(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[8].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], get_default_slot_context_1);

    	return {
    		c() {
    			if (default_slot) default_slot.c();
    		},
    		m(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope, slideData*/ 160) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[7], dirty, get_default_slot_changes_1, get_default_slot_context_1);
    				}
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};
    }

    // (85:2) {#if zoom}
    function create_if_block$7(ctx) {
    	let div;
    	let div_data_swiper_zoom_value;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[8].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], get_default_slot_context);

    	return {
    		c() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr$1(div, "class", "swiper-zoom-container");

    			attr$1(div, "data-swiper-zoom", div_data_swiper_zoom_value = typeof /*zoom*/ ctx[0] === "number"
    			? /*zoom*/ ctx[0]
    			: undefined);
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope, slideData*/ 160) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[7], dirty, get_default_slot_changes, get_default_slot_context);
    				}
    			}

    			if (!current || dirty & /*zoom*/ 1 && div_data_swiper_zoom_value !== (div_data_swiper_zoom_value = typeof /*zoom*/ ctx[0] === "number"
    			? /*zoom*/ ctx[0]
    			: undefined)) {
    				attr$1(div, "data-swiper-zoom", div_data_swiper_zoom_value);
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};
    }

    function create_fragment$c(ctx) {
    	let div;
    	let current_block_type_index;
    	let if_block;
    	let div_class_value;
    	let current;
    	const if_block_creators = [create_if_block$7, create_else_block$2];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*zoom*/ ctx[0]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	let div_levels = [
    		{
    			class: div_class_value = uniqueClasses(`${/*slideClasses*/ ctx[3]}${/*className*/ ctx[2] ? ` ${/*className*/ ctx[2]}` : ""}`)
    		},
    		{
    			"data-swiper-slide-index": /*virtualIndex*/ ctx[1]
    		},
    		/*$$restProps*/ ctx[6]
    	];

    	let div_data = {};

    	for (let i = 0; i < div_levels.length; i += 1) {
    		div_data = assign(div_data, div_levels[i]);
    	}

    	return {
    		c() {
    			div = element("div");
    			if_block.c();
    			set_attributes(div, div_data);
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			if_blocks[current_block_type_index].m(div, null);
    			/*div_binding*/ ctx[9](div);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(div, null);
    			}

    			set_attributes(div, div_data = get_spread_update(div_levels, [
    				(!current || dirty & /*slideClasses, className*/ 12 && div_class_value !== (div_class_value = uniqueClasses(`${/*slideClasses*/ ctx[3]}${/*className*/ ctx[2] ? ` ${/*className*/ ctx[2]}` : ""}`))) && { class: div_class_value },
    				(!current || dirty & /*virtualIndex*/ 2) && {
    					"data-swiper-slide-index": /*virtualIndex*/ ctx[1]
    				},
    				dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6]
    			]));
    		},
    		i(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			if_blocks[current_block_type_index].d();
    			/*div_binding*/ ctx[9](null);
    		}
    	};
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let slideData;
    	const omit_props_names = ["zoom","virtualIndex","class"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	let { zoom = undefined } = $$props;
    	let { virtualIndex = undefined } = $$props;
    	let { class: className = undefined } = $$props;
    	let slideEl = null;
    	let slideClasses = "swiper-slide";
    	let swiper = null;
    	let eventAttached = false;

    	const updateClasses = (_, el, classNames) => {
    		if (el === slideEl) {
    			$$invalidate(3, slideClasses = classNames);
    		}
    	};

    	const attachEvent = () => {
    		if (!swiper || eventAttached) return;
    		swiper.on("_slideClass", updateClasses);
    		eventAttached = true;
    	};

    	const detachEvent = () => {
    		if (!swiper) return;
    		swiper.off("_slideClass", updateClasses);
    		eventAttached = false;
    	};

    	onMount(() => {
    		if (typeof virtualIndex === "undefined") return;

    		$$invalidate(
    			4,
    			slideEl.onSwiper = _swiper => {
    				swiper = _swiper;
    				attachEvent();
    			},
    			slideEl
    		);

    		attachEvent();
    	});

    	afterUpdate(() => {
    		if (!slideEl || !swiper) return;

    		if (swiper.destroyed) {
    			if (slideClasses !== "swiper-slide") {
    				$$invalidate(3, slideClasses = "swiper-slide");
    			}

    			return;
    		}

    		attachEvent();
    	});

    	beforeUpdate(() => {
    		attachEvent();
    	});

    	onDestroy(() => {
    		if (!swiper) return;
    		detachEvent();
    	});

    	function div_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			slideEl = $$value;
    			$$invalidate(4, slideEl);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ("zoom" in $$new_props) $$invalidate(0, zoom = $$new_props.zoom);
    		if ("virtualIndex" in $$new_props) $$invalidate(1, virtualIndex = $$new_props.virtualIndex);
    		if ("class" in $$new_props) $$invalidate(2, className = $$new_props.class);
    		if ("$$scope" in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
    	};

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*slideClasses*/ 8) {
    			$$invalidate(5, slideData = {
    				isActive: slideClasses.indexOf("swiper-slide-active") >= 0 || slideClasses.indexOf("swiper-slide-duplicate-active") >= 0,
    				isVisible: slideClasses.indexOf("swiper-slide-visible") >= 0,
    				isDuplicate: slideClasses.indexOf("swiper-slide-duplicate") >= 0,
    				isPrev: slideClasses.indexOf("swiper-slide-prev") >= 0 || slideClasses.indexOf("swiper-slide-duplicate-prev") >= 0,
    				isNext: slideClasses.indexOf("swiper-slide-next") >= 0 || slideClasses.indexOf("swiper-slide-duplicate-next") >= 0
    			});
    		}
    	};

    	return [
    		zoom,
    		virtualIndex,
    		className,
    		slideClasses,
    		slideEl,
    		slideData,
    		$$restProps,
    		$$scope,
    		slots,
    		div_binding
    	];
    }

    class Swiper extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$c, create_fragment$c, safe_not_equal, { zoom: 0, virtualIndex: 1, class: 2 });
    	}
    }

    /* src/components/slide-hero-swiper.svelte generated by Svelte v3.38.2 */

    const { document: document_1$1 } = globals;
    const file$b = "src/components/slide-hero-swiper.svelte";

    function get_each_context$6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[11] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[11] = list[i];
    	child_ctx[15] = i;
    	return child_ctx;
    }

    // (26:2) {#each contents.articles as article, i}
    function create_each_block_1$3(ctx) {
    	let link;
    	let link_href_value;

    	const block = {
    		c: function create() {
    			link = element("link");
    			attr_dev(link, "rel", "preload");
    			attr_dev(link, "href", link_href_value = "/img/" + /*article*/ ctx[11].imageId + "@" + /*preloadWidth*/ ctx[6][/*i*/ ctx[15]] + "w.webp");
    			attr_dev(link, "as", "image");
    			attr_dev(link, "class", "svelte-c4762k");
    			add_location(link, file$b, 26, 4, 1009);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, link, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*contents*/ 1 && link_href_value !== (link_href_value = "/img/" + /*article*/ ctx[11].imageId + "@" + /*preloadWidth*/ ctx[6][/*i*/ ctx[15]] + "w.webp")) {
    				attr_dev(link, "href", link_href_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(link);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$3.name,
    		type: "each",
    		source: "(26:2) {#each contents.articles as article, i}",
    		ctx
    	});

    	return block;
    }

    // (69:6) <SwiperSlide>
    function create_default_slot_1$2(ctx) {
    	let picture;
    	let t;
    	let current;

    	picture = new Picture({
    			props: {
    				imgClass: "slide-img",
    				sizes: "" + (/*standardWidth*/ ctx[2] / 16 * 9 / /*article*/ ctx[11].aspectRatio.height * /*article*/ ctx[11].aspectRatio.width + "vw"),
    				contents: /*contents*/ ctx[0],
    				globalSettings: /*globalSettings*/ ctx[1],
    				imageId: /*article*/ ctx[11].imageId,
    				width: /*article*/ ctx[11].aspectRatio.width,
    				height: /*article*/ ctx[11].aspectRatio.height,
    				useTiny: true,
    				loadLazy: false,
    				groupId: "slideHero",
    				groupImagesCount: /*contents*/ ctx[0].articles.length * 2
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(picture.$$.fragment);
    			t = space();
    		},
    		m: function mount(target, anchor) {
    			mount_component(picture, target, anchor);
    			insert_dev(target, t, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const picture_changes = {};
    			if (dirty & /*standardWidth, contents*/ 5) picture_changes.sizes = "" + (/*standardWidth*/ ctx[2] / 16 * 9 / /*article*/ ctx[11].aspectRatio.height * /*article*/ ctx[11].aspectRatio.width + "vw");
    			if (dirty & /*contents*/ 1) picture_changes.contents = /*contents*/ ctx[0];
    			if (dirty & /*globalSettings*/ 2) picture_changes.globalSettings = /*globalSettings*/ ctx[1];
    			if (dirty & /*contents*/ 1) picture_changes.imageId = /*article*/ ctx[11].imageId;
    			if (dirty & /*contents*/ 1) picture_changes.width = /*article*/ ctx[11].aspectRatio.width;
    			if (dirty & /*contents*/ 1) picture_changes.height = /*article*/ ctx[11].aspectRatio.height;
    			if (dirty & /*contents*/ 1) picture_changes.groupImagesCount = /*contents*/ ctx[0].articles.length * 2;
    			picture.$set(picture_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(picture.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(picture.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(picture, detaching);
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$2.name,
    		type: "slot",
    		source: "(69:6) <SwiperSlide>",
    		ctx
    	});

    	return block;
    }

    // (68:4) {#each contents.articles as article}
    function create_each_block$6(ctx) {
    	let swiperslide;
    	let current;

    	swiperslide = new Swiper({
    			props: {
    				$$slots: { default: [create_default_slot_1$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(swiperslide.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(swiperslide, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const swiperslide_changes = {};

    			if (dirty & /*$$scope, standardWidth, contents, globalSettings*/ 65543) {
    				swiperslide_changes.$$scope = { dirty, ctx };
    			}

    			swiperslide.$set(swiperslide_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(swiperslide.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(swiperslide.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(swiperslide, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$6.name,
    		type: "each",
    		source: "(68:4) {#each contents.articles as article}",
    		ctx
    	});

    	return block;
    }

    // (35:2) <Swiper     centeredSlides={true}     spaceBetween={4}     slidesPerView={'auto'}     grabCursor={true}     speed={transitionDuration}     slideToClickedSlide={true}     loop={true}     pagination={{       clickable: true,       bulletClass: 'swiper-pagination-bullet-custom',       bulletActiveClass: 'swiper-pagination-bullet-custom-active'     }}     on:swiper={e => {       const [swiper] = e.detail;       window.addEventListener('pictureGroup_load', e => {         if(e.detail == 'slideHero'){           setTimeout(() => {             swiper.loopDestroy();             swiper.loopCreate();             swiper.update();             themeColor = contents.articles[swiper.realIndex].themeColor;           });         }       });     }}     on:realIndexChange={e => {       const [swiper] = e.detail[0];       themeColor = contents.articles[swiper.realIndex].themeColor;     }}     loopedSlides={contents.articles.length}     controller={{ control: controlledSwiper }}   >
    function create_default_slot$3(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value = /*contents*/ ctx[0].articles;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$6(get_each_context$6(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*standardWidth, contents, globalSettings*/ 7) {
    				each_value = /*contents*/ ctx[0].articles;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$6(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$6(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$3.name,
    		type: "slot",
    		source: "(35:2) <Swiper     centeredSlides={true}     spaceBetween={4}     slidesPerView={'auto'}     grabCursor={true}     speed={transitionDuration}     slideToClickedSlide={true}     loop={true}     pagination={{       clickable: true,       bulletClass: 'swiper-pagination-bullet-custom',       bulletActiveClass: 'swiper-pagination-bullet-custom-active'     }}     on:swiper={e => {       const [swiper] = e.detail;       window.addEventListener('pictureGroup_load', e => {         if(e.detail == 'slideHero'){           setTimeout(() => {             swiper.loopDestroy();             swiper.loopCreate();             swiper.update();             themeColor = contents.articles[swiper.realIndex].themeColor;           });         }       });     }}     on:realIndexChange={e => {       const [swiper] = e.detail[0];       themeColor = contents.articles[swiper.realIndex].themeColor;     }}     loopedSlides={contents.articles.length}     controller={{ control: controlledSwiper }}   >",
    		ctx
    	});

    	return block;
    }

    function create_fragment$b(ctx) {
    	let link0;
    	let link1;
    	let t0;
    	let div;
    	let img0;
    	let img0_src_value;
    	let t1;
    	let swiper;
    	let t2;
    	let img1;
    	let img1_src_value;
    	let current;
    	let each_value_1 = /*contents*/ ctx[0].articles;
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$3(get_each_context_1$3(ctx, each_value_1, i));
    	}

    	swiper = new Swiper$1({
    			props: {
    				centeredSlides: true,
    				spaceBetween: 4,
    				slidesPerView: "auto",
    				grabCursor: true,
    				speed: /*transitionDuration*/ ctx[5],
    				slideToClickedSlide: true,
    				loop: true,
    				pagination: {
    					clickable: true,
    					bulletClass: "swiper-pagination-bullet-custom",
    					bulletActiveClass: "swiper-pagination-bullet-custom-active"
    				},
    				loopedSlides: /*contents*/ ctx[0].articles.length,
    				controller: { control: /*controlledSwiper*/ ctx[4] },
    				$$slots: { default: [create_default_slot$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	swiper.$on("swiper", /*swiper_handler*/ ctx[8]);
    	swiper.$on("realIndexChange", /*realIndexChange_handler*/ ctx[9]);

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			link0 = element("link");
    			link1 = element("link");
    			t0 = space();
    			div = element("div");
    			img0 = element("img");
    			t1 = space();
    			create_component(swiper.$$.fragment);
    			t2 = space();
    			img1 = element("img");
    			attr_dev(link0, "rel", "preload");
    			attr_dev(link0, "href", "/swiper-bundle.min.css");
    			attr_dev(link0, "as", "style");
    			attr_dev(link0, "class", "svelte-c4762k");
    			add_location(link0, file$b, 28, 2, 1107);
    			attr_dev(link1, "rel", "stylesheet");
    			attr_dev(link1, "type", "text/css");
    			attr_dev(link1, "href", "/swiper-bundle.min.css");
    			attr_dev(link1, "class", "svelte-c4762k");
    			add_location(link1, file$b, 29, 2, 1171);
    			attr_dev(img0, "class", "arrow left svelte-c4762k");
    			if (img0.src !== (img0_src_value = "/img/arrow.svg")) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "alt", "左のスライドへ");
    			attr_dev(img0, "width", "309.94");
    			attr_dev(img0, "height", "355.04");
    			add_location(img0, file$b, 33, 2, 1318);
    			attr_dev(img1, "class", "arrow right svelte-c4762k");
    			if (img1.src !== (img1_src_value = "/img/arrow.svg")) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "alt", "右のスライドへ");
    			attr_dev(img1, "width", "309.94");
    			attr_dev(img1, "height", "355.04");
    			add_location(img1, file$b, 73, 2, 2850);
    			attr_dev(div, "class", "slide-hero svelte-c4762k");
    			set_style(div, "--themeColor", /*themeColor*/ ctx[3]);
    			add_location(div, file$b, 32, 0, 1257);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(document_1$1.head, null);
    			}

    			append_dev(document_1$1.head, link0);
    			append_dev(document_1$1.head, link1);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div, anchor);
    			append_dev(div, img0);
    			append_dev(div, t1);
    			mount_component(swiper, div, null);
    			append_dev(div, t2);
    			append_dev(div, img1);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*contents, preloadWidth*/ 65) {
    				each_value_1 = /*contents*/ ctx[0].articles;
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$3(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(link0.parentNode, link0);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}

    			const swiper_changes = {};
    			if (dirty & /*contents*/ 1) swiper_changes.loopedSlides = /*contents*/ ctx[0].articles.length;
    			if (dirty & /*controlledSwiper*/ 16) swiper_changes.controller = { control: /*controlledSwiper*/ ctx[4] };

    			if (dirty & /*$$scope, contents, standardWidth, globalSettings*/ 65543) {
    				swiper_changes.$$scope = { dirty, ctx };
    			}

    			swiper.$set(swiper_changes);

    			if (!current || dirty & /*themeColor*/ 8) {
    				set_style(div, "--themeColor", /*themeColor*/ ctx[3]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(swiper.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(swiper.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			detach_dev(link0);
    			detach_dev(link1);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div);
    			destroy_component(swiper);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$b($$self, $$props, $$invalidate) {
    	let $sync;
    	validate_store(sync, "sync");
    	component_subscribe($$self, sync, $$value => $$invalidate(10, $sync = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Slide_hero_swiper", slots, []);

    	let { contents } = $$props,
    		{ pairId } = $$props,
    		{ globalSettings } = $$props,
    		{ standardWidth } = $$props;

    	const transitionDuration = globalSettings.transitionDuration;
    	let themeColor;
    	Swiper$2.use([Controller$1, EffectFade, Pagination$1]);
    	let controlledSwiper = null;

    	addEventListener("controllee_load", e => {
    		setTimeout(() => {
    			$$invalidate(4, controlledSwiper = e.detail == pairId ? $sync.controlledSwiper : undefined);
    		});
    	});

    	const preloadWidth = contents.articles.map(u => {
    		return globalSettings.imageSizes.find(v => v > document.body.getBoundingClientRect().width * (standardWidth / 100) * (devicePixelRatio || 1) / 16 * 9 / u.aspectRatio.height * u.aspectRatio.width) || globalSettings.imageSizes.slice(-1)[0];
    	});

    	const writable_props = ["contents", "pairId", "globalSettings", "standardWidth"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Slide_hero_swiper> was created with unknown prop '${key}'`);
    	});

    	const swiper_handler = e => {
    		const [swiper] = e.detail;

    		window.addEventListener("pictureGroup_load", e => {
    			if (e.detail == "slideHero") {
    				setTimeout(() => {
    					swiper.loopDestroy();
    					swiper.loopCreate();
    					swiper.update();
    					$$invalidate(3, themeColor = contents.articles[swiper.realIndex].themeColor);
    				});
    			}
    		});
    	};

    	const realIndexChange_handler = e => {
    		const [swiper] = e.detail[0];
    		$$invalidate(3, themeColor = contents.articles[swiper.realIndex].themeColor);
    	};

    	$$self.$$set = $$props => {
    		if ("contents" in $$props) $$invalidate(0, contents = $$props.contents);
    		if ("pairId" in $$props) $$invalidate(7, pairId = $$props.pairId);
    		if ("globalSettings" in $$props) $$invalidate(1, globalSettings = $$props.globalSettings);
    		if ("standardWidth" in $$props) $$invalidate(2, standardWidth = $$props.standardWidth);
    	};

    	$$self.$capture_state = () => ({
    		Swiper: Swiper$1,
    		SwiperSlide: Swiper,
    		SwiperCore: Swiper$2,
    		Controller: Controller$1,
    		EffectFade,
    		Pagination: Pagination$1,
    		sync,
    		Picture,
    		contents,
    		pairId,
    		globalSettings,
    		standardWidth,
    		transitionDuration,
    		themeColor,
    		controlledSwiper,
    		preloadWidth,
    		$sync
    	});

    	$$self.$inject_state = $$props => {
    		if ("contents" in $$props) $$invalidate(0, contents = $$props.contents);
    		if ("pairId" in $$props) $$invalidate(7, pairId = $$props.pairId);
    		if ("globalSettings" in $$props) $$invalidate(1, globalSettings = $$props.globalSettings);
    		if ("standardWidth" in $$props) $$invalidate(2, standardWidth = $$props.standardWidth);
    		if ("themeColor" in $$props) $$invalidate(3, themeColor = $$props.themeColor);
    		if ("controlledSwiper" in $$props) $$invalidate(4, controlledSwiper = $$props.controlledSwiper);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		contents,
    		globalSettings,
    		standardWidth,
    		themeColor,
    		controlledSwiper,
    		transitionDuration,
    		preloadWidth,
    		pairId,
    		swiper_handler,
    		realIndexChange_handler
    	];
    }

    class Slide_hero_swiper extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$b, create_fragment$b, safe_not_equal, {
    			contents: 0,
    			pairId: 7,
    			globalSettings: 1,
    			standardWidth: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Slide_hero_swiper",
    			options,
    			id: create_fragment$b.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*contents*/ ctx[0] === undefined && !("contents" in props)) {
    			console.warn("<Slide_hero_swiper> was created without expected prop 'contents'");
    		}

    		if (/*pairId*/ ctx[7] === undefined && !("pairId" in props)) {
    			console.warn("<Slide_hero_swiper> was created without expected prop 'pairId'");
    		}

    		if (/*globalSettings*/ ctx[1] === undefined && !("globalSettings" in props)) {
    			console.warn("<Slide_hero_swiper> was created without expected prop 'globalSettings'");
    		}

    		if (/*standardWidth*/ ctx[2] === undefined && !("standardWidth" in props)) {
    			console.warn("<Slide_hero_swiper> was created without expected prop 'standardWidth'");
    		}
    	}

    	get contents() {
    		throw new Error("<Slide_hero_swiper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set contents(value) {
    		throw new Error("<Slide_hero_swiper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get pairId() {
    		throw new Error("<Slide_hero_swiper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pairId(value) {
    		throw new Error("<Slide_hero_swiper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get globalSettings() {
    		throw new Error("<Slide_hero_swiper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set globalSettings(value) {
    		throw new Error("<Slide_hero_swiper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get standardWidth() {
    		throw new Error("<Slide_hero_swiper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set standardWidth(value) {
    		throw new Error("<Slide_hero_swiper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var Sister;

    /**
    * @link https://github.com/gajus/sister for the canonical source repository
    * @license https://github.com/gajus/sister/blob/master/LICENSE BSD 3-Clause
    */
    Sister = function () {
        var sister = {},
            events = {};

        /**
         * @name handler
         * @function
         * @param {Object} data Event data.
         */

        /**
         * @param {String} name Event name.
         * @param {handler} handler
         * @return {listener}
         */
        sister.on = function (name, handler) {
            var listener = {name: name, handler: handler};
            events[name] = events[name] || [];
            events[name].unshift(listener);
            return listener;
        };

        /**
         * @param {listener}
         */
        sister.off = function (listener) {
            var index = events[listener.name].indexOf(listener);

            if (index !== -1) {
                events[listener.name].splice(index, 1);
            }
        };

        /**
         * @param {String} name Event name.
         * @param {Object} data Event data.
         */
        sister.trigger = function (name, data) {
            var listeners = events[name],
                i;

            if (listeners) {
                i = listeners.length;
                while (i--) {
                    listeners[i].handler(data);
                }
            }
        };

        return sister;
    };

    var sister = Sister;

    var loadScript = function load (src, opts, cb) {
      var head = document.head || document.getElementsByTagName('head')[0];
      var script = document.createElement('script');

      if (typeof opts === 'function') {
        cb = opts;
        opts = {};
      }

      opts = opts || {};
      cb = cb || function() {};

      script.type = opts.type || 'text/javascript';
      script.charset = opts.charset || 'utf8';
      script.async = 'async' in opts ? !!opts.async : true;
      script.src = src;

      if (opts.attrs) {
        setAttributes(script, opts.attrs);
      }

      if (opts.text) {
        script.text = '' + opts.text;
      }

      var onend = 'onload' in script ? stdOnEnd : ieOnEnd;
      onend(script, cb);

      // some good legacy browsers (firefox) fail the 'in' detection above
      // so as a fallback we always set onload
      // old IE will ignore this and new IE will set onload
      if (!script.onload) {
        stdOnEnd(script, cb);
      }

      head.appendChild(script);
    };

    function setAttributes(script, attrs) {
      for (var attr in attrs) {
        script.setAttribute(attr, attrs[attr]);
      }
    }

    function stdOnEnd (script, cb) {
      script.onload = function () {
        this.onerror = this.onload = null;
        cb(null, script);
      };
      script.onerror = function () {
        // this.onload = null here is necessary
        // because even IE9 works not like others
        this.onerror = this.onload = null;
        cb(new Error('Failed to load ' + this.src), script);
      };
    }

    function ieOnEnd (script, cb) {
      script.onreadystatechange = function () {
        if (this.readyState != 'complete' && this.readyState != 'loaded') return
        this.onreadystatechange = null;
        cb(null, script); // there is no way to catch loading errors in IE8
      };
    }

    var loadYouTubeIframeApi = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });



    var _loadScript2 = _interopRequireDefault(loadScript);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    exports.default = function (emitter) {
      /**
       * A promise that is resolved when window.onYouTubeIframeAPIReady is called.
       * The promise is resolved with a reference to window.YT object.
       */
      var iframeAPIReady = new Promise(function (resolve) {
        if (window.YT && window.YT.Player && window.YT.Player instanceof Function) {
          resolve(window.YT);

          return;
        } else {
          var protocol = window.location.protocol === 'http:' ? 'http:' : 'https:';

          (0, _loadScript2.default)(protocol + '//www.youtube.com/iframe_api', function (error) {
            if (error) {
              emitter.trigger('error', error);
            }
          });
        }

        var previous = window.onYouTubeIframeAPIReady;

        // The API will call this function when page has finished downloading
        // the JavaScript for the player API.
        window.onYouTubeIframeAPIReady = function () {
          if (previous) {
            previous();
          }

          resolve(window.YT);
        };
      });

      return iframeAPIReady;
    };

    module.exports = exports['default'];
    });

    /**
     * Helpers.
     */
    var s = 1000;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var y = d * 365.25;

    /**
     * Parse or format the given `val`.
     *
     * Options:
     *
     *  - `long` verbose formatting [false]
     *
     * @param {String|Number} val
     * @param {Object} [options]
     * @throws {Error} throw an error if val is not a non-empty string or a number
     * @return {String|Number}
     * @api public
     */

    var ms = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === 'string' && val.length > 0) {
        return parse(val);
      } else if (type === 'number' && isNaN(val) === false) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        'val is not a non-empty string or a valid number. val=' +
          JSON.stringify(val)
      );
    };

    /**
     * Parse the given `str` and return milliseconds.
     *
     * @param {String} str
     * @return {Number}
     * @api private
     */

    function parse(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || 'ms').toLowerCase();
      switch (type) {
        case 'years':
        case 'year':
        case 'yrs':
        case 'yr':
        case 'y':
          return n * y;
        case 'days':
        case 'day':
        case 'd':
          return n * d;
        case 'hours':
        case 'hour':
        case 'hrs':
        case 'hr':
        case 'h':
          return n * h;
        case 'minutes':
        case 'minute':
        case 'mins':
        case 'min':
        case 'm':
          return n * m;
        case 'seconds':
        case 'second':
        case 'secs':
        case 'sec':
        case 's':
          return n * s;
        case 'milliseconds':
        case 'millisecond':
        case 'msecs':
        case 'msec':
        case 'ms':
          return n;
        default:
          return undefined;
      }
    }

    /**
     * Short format for `ms`.
     *
     * @param {Number} ms
     * @return {String}
     * @api private
     */

    function fmtShort(ms) {
      if (ms >= d) {
        return Math.round(ms / d) + 'd';
      }
      if (ms >= h) {
        return Math.round(ms / h) + 'h';
      }
      if (ms >= m) {
        return Math.round(ms / m) + 'm';
      }
      if (ms >= s) {
        return Math.round(ms / s) + 's';
      }
      return ms + 'ms';
    }

    /**
     * Long format for `ms`.
     *
     * @param {Number} ms
     * @return {String}
     * @api private
     */

    function fmtLong(ms) {
      return plural(ms, d, 'day') ||
        plural(ms, h, 'hour') ||
        plural(ms, m, 'minute') ||
        plural(ms, s, 'second') ||
        ms + ' ms';
    }

    /**
     * Pluralization helper.
     */

    function plural(ms, n, name) {
      if (ms < n) {
        return;
      }
      if (ms < n * 1.5) {
        return Math.floor(ms / n) + ' ' + name;
      }
      return Math.ceil(ms / n) + ' ' + name + 's';
    }

    var debug = createCommonjsModule(function (module, exports) {
    /**
     * This is the common logic for both the Node.js and web browser
     * implementations of `debug()`.
     *
     * Expose `debug()` as the module.
     */

    exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
    exports.coerce = coerce;
    exports.disable = disable;
    exports.enable = enable;
    exports.enabled = enabled;
    exports.humanize = ms;

    /**
     * The currently active debug mode names, and names to skip.
     */

    exports.names = [];
    exports.skips = [];

    /**
     * Map of special "%n" handling functions, for the debug "format" argument.
     *
     * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
     */

    exports.formatters = {};

    /**
     * Previous log timestamp.
     */

    var prevTime;

    /**
     * Select a color.
     * @param {String} namespace
     * @return {Number}
     * @api private
     */

    function selectColor(namespace) {
      var hash = 0, i;

      for (i in namespace) {
        hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
        hash |= 0; // Convert to 32bit integer
      }

      return exports.colors[Math.abs(hash) % exports.colors.length];
    }

    /**
     * Create a debugger with the given `namespace`.
     *
     * @param {String} namespace
     * @return {Function}
     * @api public
     */

    function createDebug(namespace) {

      function debug() {
        // disabled?
        if (!debug.enabled) return;

        var self = debug;

        // set `diff` timestamp
        var curr = +new Date();
        var ms = curr - (prevTime || curr);
        self.diff = ms;
        self.prev = prevTime;
        self.curr = curr;
        prevTime = curr;

        // turn the `arguments` into a proper Array
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }

        args[0] = exports.coerce(args[0]);

        if ('string' !== typeof args[0]) {
          // anything else let's inspect with %O
          args.unshift('%O');
        }

        // apply any `formatters` transformations
        var index = 0;
        args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
          // if we encounter an escaped % then don't increase the array index
          if (match === '%%') return match;
          index++;
          var formatter = exports.formatters[format];
          if ('function' === typeof formatter) {
            var val = args[index];
            match = formatter.call(self, val);

            // now we need to remove `args[index]` since it's inlined in the `format`
            args.splice(index, 1);
            index--;
          }
          return match;
        });

        // apply env-specific formatting (colors, etc.)
        exports.formatArgs.call(self, args);

        var logFn = debug.log || exports.log || console.log.bind(console);
        logFn.apply(self, args);
      }

      debug.namespace = namespace;
      debug.enabled = exports.enabled(namespace);
      debug.useColors = exports.useColors();
      debug.color = selectColor(namespace);

      // env-specific initialization logic for debug instances
      if ('function' === typeof exports.init) {
        exports.init(debug);
      }

      return debug;
    }

    /**
     * Enables a debug mode by namespaces. This can include modes
     * separated by a colon and wildcards.
     *
     * @param {String} namespaces
     * @api public
     */

    function enable(namespaces) {
      exports.save(namespaces);

      exports.names = [];
      exports.skips = [];

      var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
      var len = split.length;

      for (var i = 0; i < len; i++) {
        if (!split[i]) continue; // ignore empty strings
        namespaces = split[i].replace(/\*/g, '.*?');
        if (namespaces[0] === '-') {
          exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
        } else {
          exports.names.push(new RegExp('^' + namespaces + '$'));
        }
      }
    }

    /**
     * Disable debug output.
     *
     * @api public
     */

    function disable() {
      exports.enable('');
    }

    /**
     * Returns true if the given mode name is enabled, false otherwise.
     *
     * @param {String} name
     * @return {Boolean}
     * @api public
     */

    function enabled(name) {
      var i, len;
      for (i = 0, len = exports.skips.length; i < len; i++) {
        if (exports.skips[i].test(name)) {
          return false;
        }
      }
      for (i = 0, len = exports.names.length; i < len; i++) {
        if (exports.names[i].test(name)) {
          return true;
        }
      }
      return false;
    }

    /**
     * Coerce `val`.
     *
     * @param {Mixed} val
     * @return {Mixed}
     * @api private
     */

    function coerce(val) {
      if (val instanceof Error) return val.stack || val.message;
      return val;
    }
    });

    /**
     * This is the web browser implementation of `debug()`.
     *
     * Expose `debug()` as the module.
     */

    var browser = createCommonjsModule(function (module, exports) {
    exports = module.exports = debug;
    exports.log = log;
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = 'undefined' != typeof chrome
                   && 'undefined' != typeof chrome.storage
                      ? chrome.storage.local
                      : localstorage();

    /**
     * Colors.
     */

    exports.colors = [
      'lightseagreen',
      'forestgreen',
      'goldenrod',
      'dodgerblue',
      'darkorchid',
      'crimson'
    ];

    /**
     * Currently only WebKit-based Web Inspectors, Firefox >= v31,
     * and the Firebug extension (any Firefox version) are known
     * to support "%c" CSS customizations.
     *
     * TODO: add a `localStorage` variable to explicitly enable/disable colors
     */

    function useColors() {
      // NB: In an Electron preload script, document will be defined but not fully
      // initialized. Since we know we're in Chrome, we'll just detect this case
      // explicitly
      if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
        return true;
      }

      // is webkit? http://stackoverflow.com/a/16459606/376773
      // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
      return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
        // is firebug? http://stackoverflow.com/a/398120/376773
        (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
        // is firefox >= v31?
        // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
        (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
        // double check webkit in userAgent just in case we are in a worker
        (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
    }

    /**
     * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
     */

    exports.formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (err) {
        return '[UnexpectedJSONParseError]: ' + err.message;
      }
    };


    /**
     * Colorize log arguments if enabled.
     *
     * @api public
     */

    function formatArgs(args) {
      var useColors = this.useColors;

      args[0] = (useColors ? '%c' : '')
        + this.namespace
        + (useColors ? ' %c' : ' ')
        + args[0]
        + (useColors ? '%c ' : ' ')
        + '+' + exports.humanize(this.diff);

      if (!useColors) return;

      var c = 'color: ' + this.color;
      args.splice(1, 0, c, 'color: inherit');

      // the final "%c" is somewhat tricky, because there could be other
      // arguments passed either before or after the %c, so we need to
      // figure out the correct index to insert the CSS into
      var index = 0;
      var lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, function(match) {
        if ('%%' === match) return;
        index++;
        if ('%c' === match) {
          // we only are interested in the *last* %c
          // (the user may have provided their own)
          lastC = index;
        }
      });

      args.splice(lastC, 0, c);
    }

    /**
     * Invokes `console.log()` when available.
     * No-op when `console.log` is not a "function".
     *
     * @api public
     */

    function log() {
      // this hackery is required for IE8/9, where
      // the `console.log` function doesn't have 'apply'
      return 'object' === typeof console
        && console.log
        && Function.prototype.apply.call(console.log, console, arguments);
    }

    /**
     * Save `namespaces`.
     *
     * @param {String} namespaces
     * @api private
     */

    function save(namespaces) {
      try {
        if (null == namespaces) {
          exports.storage.removeItem('debug');
        } else {
          exports.storage.debug = namespaces;
        }
      } catch(e) {}
    }

    /**
     * Load `namespaces`.
     *
     * @return {String} returns the previously persisted debug modes
     * @api private
     */

    function load() {
      var r;
      try {
        r = exports.storage.debug;
      } catch(e) {}

      // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
      if (!r && typeof process !== 'undefined' && 'env' in process) {
        r = process.env.DEBUG;
      }

      return r;
    }

    /**
     * Enable namespaces listed in `localStorage.debug` initially.
     */

    exports.enable(load());

    /**
     * Localstorage attempts to return the localstorage.
     *
     * This is necessary because safari throws
     * when a user disables cookies/localstorage
     * and you attempt to access it.
     *
     * @return {LocalStorage}
     * @api private
     */

    function localstorage() {
      try {
        return window.localStorage;
      } catch (e) {}
    }
    });

    var functionNames = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });


    /**
     * @see https://developers.google.com/youtube/iframe_api_reference#Functions
     */
    exports.default = ['cueVideoById', 'loadVideoById', 'cueVideoByUrl', 'loadVideoByUrl', 'playVideo', 'pauseVideo', 'stopVideo', 'getVideoLoadedFraction', 'cuePlaylist', 'loadPlaylist', 'nextVideo', 'previousVideo', 'playVideoAt', 'setShuffle', 'setLoop', 'getPlaylist', 'getPlaylistIndex', 'setOption', 'mute', 'unMute', 'isMuted', 'setVolume', 'getVolume', 'seekTo', 'getPlayerState', 'getPlaybackRate', 'setPlaybackRate', 'getAvailablePlaybackRates', 'getPlaybackQuality', 'setPlaybackQuality', 'getAvailableQualityLevels', 'getCurrentTime', 'getDuration', 'removeEventListener', 'getVideoUrl', 'getVideoEmbedCode', 'getOptions', 'getOption', 'addEventListener', 'destroy', 'setSize', 'getIframe'];
    module.exports = exports['default'];
    });

    var eventNames = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });


    /**
     * @see https://developers.google.com/youtube/iframe_api_reference#Events
     * `volumeChange` is not officially supported but seems to work
     * it emits an object: `{volume: 82.6923076923077, muted: false}`
     */
    exports.default = ['ready', 'stateChange', 'playbackQualityChange', 'playbackRateChange', 'error', 'apiChange', 'volumeChange'];
    module.exports = exports['default'];
    });

    var PlayerStates = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = {
      BUFFERING: 3,
      ENDED: 0,
      PAUSED: 2,
      PLAYING: 1,
      UNSTARTED: -1,
      VIDEO_CUED: 5
    };
    module.exports = exports["default"];
    });

    var FunctionStateMap = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });



    var _PlayerStates2 = _interopRequireDefault(PlayerStates);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    exports.default = {
      pauseVideo: {
        acceptableStates: [_PlayerStates2.default.ENDED, _PlayerStates2.default.PAUSED],
        stateChangeRequired: false
      },
      playVideo: {
        acceptableStates: [_PlayerStates2.default.ENDED, _PlayerStates2.default.PLAYING],
        stateChangeRequired: false
      },
      seekTo: {
        acceptableStates: [_PlayerStates2.default.ENDED, _PlayerStates2.default.PLAYING, _PlayerStates2.default.PAUSED],
        stateChangeRequired: true,

        // TRICKY: `seekTo` may not cause a state change if no buffering is
        // required.
        timeout: 3000
      }
    };
    module.exports = exports['default'];
    });

    var YouTubePlayer_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });



    var _debug2 = _interopRequireDefault(browser);



    var _functionNames2 = _interopRequireDefault(functionNames);



    var _eventNames2 = _interopRequireDefault(eventNames);



    var _FunctionStateMap2 = _interopRequireDefault(FunctionStateMap);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /* eslint-disable promise/prefer-await-to-then */

    var debug = (0, _debug2.default)('youtube-player');

    var YouTubePlayer = {};

    /**
     * Construct an object that defines an event handler for all of the YouTube
     * player events. Proxy captured events through an event emitter.
     *
     * @todo Capture event parameters.
     * @see https://developers.google.com/youtube/iframe_api_reference#Events
     */
    YouTubePlayer.proxyEvents = function (emitter) {
      var events = {};

      var _loop = function _loop(eventName) {
        var onEventName = 'on' + eventName.slice(0, 1).toUpperCase() + eventName.slice(1);

        events[onEventName] = function (event) {
          debug('event "%s"', onEventName, event);

          emitter.trigger(eventName, event);
        };
      };

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = _eventNames2.default[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var eventName = _step.value;

          _loop(eventName);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return events;
    };

    /**
     * Delays player API method execution until player state is ready.
     *
     * @todo Proxy all of the methods using Object.keys.
     * @todo See TRICKY below.
     * @param playerAPIReady Promise that resolves when player is ready.
     * @param strictState A flag designating whether or not to wait for
     * an acceptable state when calling supported functions.
     * @returns {Object}
     */
    YouTubePlayer.promisifyPlayer = function (playerAPIReady) {
      var strictState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      var functions = {};

      var _loop2 = function _loop2(functionName) {
        if (strictState && _FunctionStateMap2.default[functionName]) {
          functions[functionName] = function () {
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            return playerAPIReady.then(function (player) {
              var stateInfo = _FunctionStateMap2.default[functionName];
              var playerState = player.getPlayerState();

              // eslint-disable-next-line no-warning-comments
              // TODO: Just spread the args into the function once Babel is fixed:
              // https://github.com/babel/babel/issues/4270
              //
              // eslint-disable-next-line prefer-spread
              var value = player[functionName].apply(player, args);

              // TRICKY: For functions like `seekTo`, a change in state must be
              // triggered given that the resulting state could match the initial
              // state.
              if (stateInfo.stateChangeRequired ||

              // eslint-disable-next-line no-extra-parens
              Array.isArray(stateInfo.acceptableStates) && stateInfo.acceptableStates.indexOf(playerState) === -1) {
                return new Promise(function (resolve) {
                  var onPlayerStateChange = function onPlayerStateChange() {
                    var playerStateAfterChange = player.getPlayerState();

                    var timeout = void 0;

                    if (typeof stateInfo.timeout === 'number') {
                      timeout = setTimeout(function () {
                        player.removeEventListener('onStateChange', onPlayerStateChange);

                        resolve();
                      }, stateInfo.timeout);
                    }

                    if (Array.isArray(stateInfo.acceptableStates) && stateInfo.acceptableStates.indexOf(playerStateAfterChange) !== -1) {
                      player.removeEventListener('onStateChange', onPlayerStateChange);

                      clearTimeout(timeout);

                      resolve();
                    }
                  };

                  player.addEventListener('onStateChange', onPlayerStateChange);
                }).then(function () {
                  return value;
                });
              }

              return value;
            });
          };
        } else {
          functions[functionName] = function () {
            for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }

            return playerAPIReady.then(function (player) {
              // eslint-disable-next-line no-warning-comments
              // TODO: Just spread the args into the function once Babel is fixed:
              // https://github.com/babel/babel/issues/4270
              //
              // eslint-disable-next-line prefer-spread
              return player[functionName].apply(player, args);
            });
          };
        }
      };

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = _functionNames2.default[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var functionName = _step2.value;

          _loop2(functionName);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return functions;
    };

    exports.default = YouTubePlayer;
    module.exports = exports['default'];
    });

    var dist = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };



    var _sister2 = _interopRequireDefault(sister);



    var _loadYouTubeIframeApi2 = _interopRequireDefault(loadYouTubeIframeApi);



    var _YouTubePlayer2 = _interopRequireDefault(YouTubePlayer_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    /**
     * @typedef YT.Player
     * @see https://developers.google.com/youtube/iframe_api_reference
     * */

    /**
     * @see https://developers.google.com/youtube/iframe_api_reference#Loading_a_Video_Player
     */
    var youtubeIframeAPI = void 0;

    /**
     * A factory function used to produce an instance of YT.Player and queue function calls and proxy events of the resulting object.
     *
     * @param maybeElementId Either An existing YT.Player instance,
     * the DOM element or the id of the HTML element where the API will insert an <iframe>.
     * @param options See `options` (Ignored when using an existing YT.Player instance).
     * @param strictState A flag designating whether or not to wait for
     * an acceptable state when calling supported functions. Default: `false`.
     * See `FunctionStateMap.js` for supported functions and acceptable states.
     */

    exports.default = function (maybeElementId) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var strictState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      var emitter = (0, _sister2.default)();

      if (!youtubeIframeAPI) {
        youtubeIframeAPI = (0, _loadYouTubeIframeApi2.default)(emitter);
      }

      if (options.events) {
        throw new Error('Event handlers cannot be overwritten.');
      }

      if (typeof maybeElementId === 'string' && !document.getElementById(maybeElementId)) {
        throw new Error('Element "' + maybeElementId + '" does not exist.');
      }

      options.events = _YouTubePlayer2.default.proxyEvents(emitter);

      var playerAPIReady = new Promise(function (resolve) {
        if ((typeof maybeElementId === 'undefined' ? 'undefined' : _typeof(maybeElementId)) === 'object' && maybeElementId.playVideo instanceof Function) {
          var player = maybeElementId;

          resolve(player);
        } else {
          // asume maybeElementId can be rendered inside
          // eslint-disable-next-line promise/catch-or-return
          youtubeIframeAPI.then(function (YT) {
            // eslint-disable-line promise/prefer-await-to-then
            var player = new YT.Player(maybeElementId, options);

            emitter.on('ready', function () {
              resolve(player);
            });

            return null;
          });
        }
      });

      var playerApi = _YouTubePlayer2.default.promisifyPlayer(playerAPIReady, strictState);

      playerApi.on = emitter.on;
      playerApi.off = emitter.off;

      return playerApi;
    };

    module.exports = exports['default'];
    });

    var YoutubePlayer = /*@__PURE__*/getDefaultExportFromCjs(dist);

    /* node_modules/svelte-youtube/src/index.svelte generated by Svelte v3.38.2 */
    const file$a = "node_modules/svelte-youtube/src/index.svelte";

    function create_fragment$a(ctx) {
    	let div1;
    	let div0;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			attr_dev(div0, "id", /*id*/ ctx[0]);
    			add_location(div0, file$a, 143, 2, 4083);
    			attr_dev(div1, "class", /*className*/ ctx[1]);
    			add_location(div1, file$a, 142, 0, 4057);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			/*div0_binding*/ ctx[5](div0);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*id*/ 1) {
    				attr_dev(div0, "id", /*id*/ ctx[0]);
    			}

    			if (dirty & /*className*/ 2) {
    				attr_dev(div1, "class", /*className*/ ctx[1]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			/*div0_binding*/ ctx[5](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const PlayerState = {
    	UNSTARTED: -1,
    	ENDED: 0,
    	PLAYING: 1,
    	PAUSED: 2,
    	BUFFERING: 3,
    	CUED: 5
    };

    function instance$a($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Src", slots, []);
    	let { id = undefined } = $$props; // HTML element ID for player (optional)
    	let { videoId } = $$props; // Youtube video ID (required)
    	let { options = undefined } = $$props; // YouTube player options (optional)
    	let { class: className } = $$props; // HTML class names for container element
    	let playerElem; // player DOM element reference
    	let player; // player API instance

    	// Create and tear down player as component mounts or unmounts
    	onMount(() => createPlayer());

    	function createPlayer() {
    		player = YoutubePlayer(playerElem, options);

    		// Register event handlers
    		player.on("ready", onPlayerReady);

    		player.on("error", onPlayerError);
    		player.on("stateChange", onPlayerStateChange);
    		player.on("playbackRateChange", onPlayerPlaybackRateChange);
    		player.on("playbackQualityChange", onPlayerPlaybackQualityChange);

    		// Tear down player when done
    		return () => player.destroy();
    	}

    	function play(videoId) {
    		// this is needed because the loadVideoById function always starts playing,
    		// even if you have set autoplay to 1 whereas the cueVideoById function
    		// never starts autoplaying
    		if (player && videoId) {
    			if (options && options.playerVars && options.playerVars.autoplay === 1) {
    				player.loadVideoById(videoId);
    			} else {
    				player.cueVideoById(videoId);
    			}
    		}
    	}

    	// -------------------------------------------
    	// Event handling
    	// -------------------------------------------
    	const dispatch = createEventDispatcher();

    	/**
     * https://developers.google.com/youtube/iframe_api_reference#onReady
     *
     * @param {Object} event
     *   @param {Object} target - player object
     */
    	function onPlayerReady(event) {
    		dispatch("ready", event);

    		// Start playing
    		play(videoId);
    	}

    	/**
     * https://developers.google.com/youtube/iframe_api_reference#onError
     *
     * @param {Object} event
     *   @param {Integer} data  - error type
     *   @param {Object} target - player object
     */
    	function onPlayerError(event) {
    		dispatch("error", event);
    	}

    	/**
     * https://developers.google.com/youtube/iframe_api_reference#onStateChange
     *
     * @param {Object} event
     *   @param {Integer} data  - status change type
     *   @param {Object} target - actual YT player
     */
    	function onPlayerStateChange(event) {
    		dispatch("stateChange", event);

    		switch (event.data) {
    			case PlayerState.ENDED:
    				dispatch("end", event);
    				break;
    			case PlayerState.PLAYING:
    				dispatch("play", event);
    				break;
    			case PlayerState.PAUSED:
    				dispatch("pause", event);
    				break;
    		}
    	}

    	/**
     * https://developers.google.com/youtube/iframe_api_reference#onPlaybackRateChange
     *
     * @param {Object} event
     *   @param {Float} data    - playback rate
     *   @param {Object} target - actual YT player
     */
    	function onPlayerPlaybackRateChange(event) {
    		dispatch("playbackRateChange", event);
    	}

    	/**
     * https://developers.google.com/youtube/iframe_api_reference#onPlaybackQualityChange
     *
     * @param {Object} event
     *   @param {String} data   - playback quality
     *   @param {Object} target - actual YT player
     */
    	function onPlayerPlaybackQualityChange(event) {
    		dispatch("playbackQualityChange", event);
    	}

    	const writable_props = ["id", "videoId", "options", "class"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Src> was created with unknown prop '${key}'`);
    	});

    	function div0_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			playerElem = $$value;
    			$$invalidate(2, playerElem);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ("id" in $$props) $$invalidate(0, id = $$props.id);
    		if ("videoId" in $$props) $$invalidate(3, videoId = $$props.videoId);
    		if ("options" in $$props) $$invalidate(4, options = $$props.options);
    		if ("class" in $$props) $$invalidate(1, className = $$props.class);
    	};

    	$$self.$capture_state = () => ({
    		PlayerState,
    		onMount,
    		createEventDispatcher,
    		YoutubePlayer,
    		id,
    		videoId,
    		options,
    		className,
    		playerElem,
    		player,
    		createPlayer,
    		play,
    		dispatch,
    		onPlayerReady,
    		onPlayerError,
    		onPlayerStateChange,
    		onPlayerPlaybackRateChange,
    		onPlayerPlaybackQualityChange
    	});

    	$$self.$inject_state = $$props => {
    		if ("id" in $$props) $$invalidate(0, id = $$props.id);
    		if ("videoId" in $$props) $$invalidate(3, videoId = $$props.videoId);
    		if ("options" in $$props) $$invalidate(4, options = $$props.options);
    		if ("className" in $$props) $$invalidate(1, className = $$props.className);
    		if ("playerElem" in $$props) $$invalidate(2, playerElem = $$props.playerElem);
    		if ("player" in $$props) player = $$props.player;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*videoId*/ 8) {
    			// Update videoId and load new video if URL changes
    			play(videoId);
    		}
    	};

    	return [id, className, playerElem, videoId, options, div0_binding];
    }

    class Src extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$a, create_fragment$a, safe_not_equal, { id: 0, videoId: 3, options: 4, class: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Src",
    			options,
    			id: create_fragment$a.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*videoId*/ ctx[3] === undefined && !("videoId" in props)) {
    			console.warn("<Src> was created without expected prop 'videoId'");
    		}

    		if (/*className*/ ctx[1] === undefined && !("class" in props)) {
    			console.warn("<Src> was created without expected prop 'class'");
    		}
    	}

    	get id() {
    		throw new Error("<Src>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<Src>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get videoId() {
    		throw new Error("<Src>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set videoId(value) {
    		throw new Error("<Src>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get options() {
    		throw new Error("<Src>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set options(value) {
    		throw new Error("<Src>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<Src>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Src>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/youtube-iframe.svelte generated by Svelte v3.38.2 */
    const file$9 = "src/components/youtube-iframe.svelte";

    // (11:2) {#if load}
    function create_if_block$6(ctx) {
    	let youtube;
    	let current;

    	youtube = new Src({
    			props: {
    				videoId: /*id*/ ctx[2],
    				class: "description-youtube-iframe",
    				options: {
    					width: "640",
    					height: "360",
    					playerVars: { autoplay: 1, playsinline: 1 }
    				}
    			},
    			$$inline: true
    		});

    	youtube.$on("ready", /*ready_handler*/ ctx[5]);

    	const block = {
    		c: function create() {
    			create_component(youtube.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(youtube, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const youtube_changes = {};
    			if (dirty & /*id*/ 4) youtube_changes.videoId = /*id*/ ctx[2];
    			youtube.$set(youtube_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(youtube.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(youtube.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(youtube, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$6.name,
    		type: "if",
    		source: "(11:2) {#if load}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$9(ctx) {
    	let div;
    	let picture;
    	let t0;
    	let img;
    	let img_src_value;
    	let t1;
    	let div_class_value;
    	let current;
    	let mounted;
    	let dispose;

    	picture = new Picture({
    			props: {
    				imgClass: "description-youtube-thumbnail",
    				contents: /*contents*/ ctx[0],
    				globalSettings: /*globalSettings*/ ctx[1],
    				sizes: /*sizes*/ ctx[3],
    				imageId: /*id*/ ctx[2],
    				width: "16",
    				height: "9"
    			},
    			$$inline: true
    		});

    	let if_block = /*load*/ ctx[4] && create_if_block$6(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(picture.$$.fragment);
    			t0 = space();
    			img = element("img");
    			t1 = space();
    			if (if_block) if_block.c();
    			attr_dev(img, "class", "play-icon svelte-1vh6ykm");
    			if (img.src !== (img_src_value = "/img/youtube.svg")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "YouTubeの再生ボタン");
    			attr_dev(img, "width", "44");
    			attr_dev(img, "height", "31");
    			add_location(img, file$9, 9, 2, 379);
    			attr_dev(div, "class", div_class_value = "youtube-wrapper " + (/*load*/ ctx[4] ? "load" : "") + " svelte-1vh6ykm");
    			add_location(div, file$9, 7, 0, 171);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(picture, div, null);
    			append_dev(div, t0);
    			append_dev(div, img);
    			append_dev(div, t1);
    			if (if_block) if_block.m(div, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*click_handler*/ ctx[6], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			const picture_changes = {};
    			if (dirty & /*contents*/ 1) picture_changes.contents = /*contents*/ ctx[0];
    			if (dirty & /*globalSettings*/ 2) picture_changes.globalSettings = /*globalSettings*/ ctx[1];
    			if (dirty & /*sizes*/ 8) picture_changes.sizes = /*sizes*/ ctx[3];
    			if (dirty & /*id*/ 4) picture_changes.imageId = /*id*/ ctx[2];
    			picture.$set(picture_changes);

    			if (/*load*/ ctx[4]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*load*/ 16) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$6(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty & /*load*/ 16 && div_class_value !== (div_class_value = "youtube-wrapper " + (/*load*/ ctx[4] ? "load" : "") + " svelte-1vh6ykm")) {
    				attr_dev(div, "class", div_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(picture.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(picture.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(picture);
    			if (if_block) if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Youtube_iframe", slots, []);

    	let { contents } = $$props,
    		{ globalSettings } = $$props,
    		{ id } = $$props,
    		{ sizes } = $$props;

    	let load = false;
    	const writable_props = ["contents", "globalSettings", "id", "sizes"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Youtube_iframe> was created with unknown prop '${key}'`);
    	});

    	const ready_handler = e => {
    		window.addEventListener("slide", () => {
    			e.detail.target.pauseVideo();
    		});
    	};

    	const click_handler = () => $$invalidate(4, load = true);

    	$$self.$$set = $$props => {
    		if ("contents" in $$props) $$invalidate(0, contents = $$props.contents);
    		if ("globalSettings" in $$props) $$invalidate(1, globalSettings = $$props.globalSettings);
    		if ("id" in $$props) $$invalidate(2, id = $$props.id);
    		if ("sizes" in $$props) $$invalidate(3, sizes = $$props.sizes);
    	};

    	$$self.$capture_state = () => ({
    		YouTube: Src,
    		Picture,
    		contents,
    		globalSettings,
    		id,
    		sizes,
    		load
    	});

    	$$self.$inject_state = $$props => {
    		if ("contents" in $$props) $$invalidate(0, contents = $$props.contents);
    		if ("globalSettings" in $$props) $$invalidate(1, globalSettings = $$props.globalSettings);
    		if ("id" in $$props) $$invalidate(2, id = $$props.id);
    		if ("sizes" in $$props) $$invalidate(3, sizes = $$props.sizes);
    		if ("load" in $$props) $$invalidate(4, load = $$props.load);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [contents, globalSettings, id, sizes, load, ready_handler, click_handler];
    }

    class Youtube_iframe extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$9, create_fragment$9, safe_not_equal, {
    			contents: 0,
    			globalSettings: 1,
    			id: 2,
    			sizes: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Youtube_iframe",
    			options,
    			id: create_fragment$9.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*contents*/ ctx[0] === undefined && !("contents" in props)) {
    			console.warn("<Youtube_iframe> was created without expected prop 'contents'");
    		}

    		if (/*globalSettings*/ ctx[1] === undefined && !("globalSettings" in props)) {
    			console.warn("<Youtube_iframe> was created without expected prop 'globalSettings'");
    		}

    		if (/*id*/ ctx[2] === undefined && !("id" in props)) {
    			console.warn("<Youtube_iframe> was created without expected prop 'id'");
    		}

    		if (/*sizes*/ ctx[3] === undefined && !("sizes" in props)) {
    			console.warn("<Youtube_iframe> was created without expected prop 'sizes'");
    		}
    	}

    	get contents() {
    		throw new Error("<Youtube_iframe>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set contents(value) {
    		throw new Error("<Youtube_iframe>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get globalSettings() {
    		throw new Error("<Youtube_iframe>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set globalSettings(value) {
    		throw new Error("<Youtube_iframe>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get id() {
    		throw new Error("<Youtube_iframe>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<Youtube_iframe>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get sizes() {
    		throw new Error("<Youtube_iframe>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set sizes(value) {
    		throw new Error("<Youtube_iframe>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/slide-description.svelte generated by Svelte v3.38.2 */

    const { document: document_1 } = globals;
    const file$8 = "src/components/slide-description.svelte";

    function get_each_context$5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[10] = list[i];
    	child_ctx[12] = i;
    	return child_ctx;
    }

    function get_each_context_1$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[13] = list[i];
    	return child_ctx;
    }

    function get_each_context_2$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[16] = list[i];
    	return child_ctx;
    }

    function get_each_context_3$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[19] = list[i];
    	child_ctx[12] = i;
    	return child_ctx;
    }

    function get_each_context_4$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[21] = list[i];
    	child_ctx[12] = i;
    	return child_ctx;
    }

    function get_each_context_5$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[23] = list[i];
    	child_ctx[12] = i;
    	return child_ctx;
    }

    function get_each_context_6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[25] = list[i];
    	return child_ctx;
    }

    function get_each_context_7(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[13] = list[i];
    	return child_ctx;
    }

    function get_each_context_8(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[16] = list[i];
    	return child_ctx;
    }

    function get_each_context_9(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[16] = list[i];
    	return child_ctx;
    }

    function get_each_context_10(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[34] = list[i];
    	return child_ctx;
    }

    // (73:14) {:else}
    function create_else_block_4(ctx) {
    	let t_value = /*article*/ ctx[10].subtitle + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text$1(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*contents*/ 2 && t_value !== (t_value = /*article*/ ctx[10].subtitle + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_4.name,
    		type: "else",
    		source: "(73:14) {:else}",
    		ctx
    	});

    	return block;
    }

    // (69:14) {#if Array.isArray(article.subtitle)}
    function create_if_block_14(ctx) {
    	let each_1_anchor;
    	let each_value_10 = /*article*/ ctx[10].subtitle;
    	validate_each_argument(each_value_10);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_10.length; i += 1) {
    		each_blocks[i] = create_each_block_10(get_each_context_10(ctx, each_value_10, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*contents*/ 2) {
    				each_value_10 = /*article*/ ctx[10].subtitle;
    				validate_each_argument(each_value_10);
    				let i;

    				for (i = 0; i < each_value_10.length; i += 1) {
    					const child_ctx = get_each_context_10(ctx, each_value_10, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_10(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_10.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_14.name,
    		type: "if",
    		source: "(69:14) {#if Array.isArray(article.subtitle)}",
    		ctx
    	});

    	return block;
    }

    // (70:16) {#each article.subtitle as subtitle}
    function create_each_block_10(ctx) {
    	let t_value = /*subtitle*/ ctx[34] + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text$1(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*contents*/ 2 && t_value !== (t_value = /*subtitle*/ ctx[34] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_10.name,
    		type: "each",
    		source: "(70:16) {#each article.subtitle as subtitle}",
    		ctx
    	});

    	return block;
    }

    // (82:14) {:else}
    function create_else_block_3(ctx) {
    	let t_value = /*article*/ ctx[10].title + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text$1(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*contents*/ 2 && t_value !== (t_value = /*article*/ ctx[10].title + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_3.name,
    		type: "else",
    		source: "(82:14) {:else}",
    		ctx
    	});

    	return block;
    }

    // (78:14) {#if Array.isArray(article.title)}
    function create_if_block_13(ctx) {
    	let each_1_anchor;
    	let each_value_9 = /*article*/ ctx[10].title;
    	validate_each_argument(each_value_9);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_9.length; i += 1) {
    		each_blocks[i] = create_each_block_9(get_each_context_9(ctx, each_value_9, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*contents*/ 2) {
    				each_value_9 = /*article*/ ctx[10].title;
    				validate_each_argument(each_value_9);
    				let i;

    				for (i = 0; i < each_value_9.length; i += 1) {
    					const child_ctx = get_each_context_9(ctx, each_value_9, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_9(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_9.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_13.name,
    		type: "if",
    		source: "(78:14) {#if Array.isArray(article.title)}",
    		ctx
    	});

    	return block;
    }

    // (79:16) {#each article.title as title}
    function create_each_block_9(ctx) {
    	let t_value = /*title*/ ctx[16] + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text$1(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*contents*/ 2 && t_value !== (t_value = /*title*/ ctx[16] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_9.name,
    		type: "each",
    		source: "(79:16) {#each article.title as title}",
    		ctx
    	});

    	return block;
    }

    // (89:14) {#if button.popup}
    function create_if_block_12(ctx) {
    	let div;
    	let t_value = /*button*/ ctx[13].popup + "";
    	let t;
    	let div_class_value;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text$1(t_value);
    			attr_dev(div, "class", div_class_value = "popup " + (/*button*/ ctx[13].disabled ? "disabled" : "") + " svelte-1fj2vis");
    			add_location(div, file$8, 89, 16, 3374);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*contents*/ 2 && t_value !== (t_value = /*button*/ ctx[13].popup + "")) set_data_dev(t, t_value);

    			if (dirty[0] & /*contents*/ 2 && div_class_value !== (div_class_value = "popup " + (/*button*/ ctx[13].disabled ? "disabled" : "") + " svelte-1fj2vis")) {
    				attr_dev(div, "class", div_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_12.name,
    		type: "if",
    		source: "(89:14) {#if button.popup}",
    		ctx
    	});

    	return block;
    }

    // (97:16) {:else}
    function create_else_block_2(ctx) {
    	let t_value = /*button*/ ctx[13].title + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text$1(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*contents*/ 2 && t_value !== (t_value = /*button*/ ctx[13].title + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2.name,
    		type: "else",
    		source: "(97:16) {:else}",
    		ctx
    	});

    	return block;
    }

    // (93:16) {#if Array.isArray(button.title)}
    function create_if_block_11(ctx) {
    	let each_1_anchor;
    	let each_value_8 = /*button*/ ctx[13].title;
    	validate_each_argument(each_value_8);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_8.length; i += 1) {
    		each_blocks[i] = create_each_block_8(get_each_context_8(ctx, each_value_8, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*contents*/ 2) {
    				each_value_8 = /*button*/ ctx[13].title;
    				validate_each_argument(each_value_8);
    				let i;

    				for (i = 0; i < each_value_8.length; i += 1) {
    					const child_ctx = get_each_context_8(ctx, each_value_8, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_8(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_8.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_11.name,
    		type: "if",
    		source: "(93:16) {#if Array.isArray(button.title)}",
    		ctx
    	});

    	return block;
    }

    // (94:18) {#each button.title as title}
    function create_each_block_8(ctx) {
    	let span;
    	let t_value = /*title*/ ctx[16] + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text$1(t_value);
    			attr_dev(span, "class", "break-scope svelte-1fj2vis");
    			add_location(span, file$8, 94, 20, 3712);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*contents*/ 2 && t_value !== (t_value = /*title*/ ctx[16] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_8.name,
    		type: "each",
    		source: "(94:18) {#each button.title as title}",
    		ctx
    	});

    	return block;
    }

    // (92:14) <Button target={button.target} bg="#0a6afa" width="auto" disabled={button.disabled} spaMode={button.spaMode}>
    function create_default_slot_5(ctx) {
    	let show_if;
    	let t;

    	function select_block_type_2(ctx, dirty) {
    		if (show_if == null || dirty[0] & /*contents*/ 2) show_if = !!Array.isArray(/*button*/ ctx[13].title);
    		if (show_if) return create_if_block_11;
    		return create_else_block_2;
    	}

    	let current_block_type = select_block_type_2(ctx, [-1]);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			t = space();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_2(ctx, dirty)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(t.parentNode, t);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5.name,
    		type: "slot",
    		source: "(92:14) <Button target={button.target} bg=\\\"#0a6afa\\\" width=\\\"auto\\\" disabled={button.disabled} spaMode={button.spaMode}>",
    		ctx
    	});

    	return block;
    }

    // (88:12) {#each article.buttons as button}
    function create_each_block_7(ctx) {
    	let t;
    	let button;
    	let current;
    	let if_block = /*button*/ ctx[13].popup && create_if_block_12(ctx);

    	button = new Button({
    			props: {
    				target: /*button*/ ctx[13].target,
    				bg: "#0a6afa",
    				width: "auto",
    				disabled: /*button*/ ctx[13].disabled,
    				spaMode: /*button*/ ctx[13].spaMode,
    				$$slots: { default: [create_default_slot_5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			t = space();
    			create_component(button.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(button, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*button*/ ctx[13].popup) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_12(ctx);
    					if_block.c();
    					if_block.m(t.parentNode, t);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			const button_changes = {};
    			if (dirty[0] & /*contents*/ 2) button_changes.target = /*button*/ ctx[13].target;
    			if (dirty[0] & /*contents*/ 2) button_changes.disabled = /*button*/ ctx[13].disabled;
    			if (dirty[0] & /*contents*/ 2) button_changes.spaMode = /*button*/ ctx[13].spaMode;

    			if (dirty[0] & /*contents*/ 2 | dirty[1] & /*$$scope*/ 64) {
    				button_changes.$$scope = { dirty, ctx };
    			}

    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(button, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_7.name,
    		type: "each",
    		source: "(88:12) {#each article.buttons as button}",
    		ctx
    	});

    	return block;
    }

    // (105:10) {#if article.slides}
    function create_if_block_9(ctx) {
    	let div;
    	let swiper;
    	let current;

    	swiper = new Swiper$1({
    			props: {
    				centeredSlides: true,
    				autoHeight: true,
    				spaceBetween: 0,
    				slidesPerView: 1,
    				speed: /*transitionDuration*/ ctx[3],
    				updateOnImagesReady: true,
    				$$slots: { default: [create_default_slot_3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	swiper.$on("snapIndexChange", /*snapIndexChange_handler*/ ctx[7]);

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(swiper.$$.fragment);
    			attr_dev(div, "class", "slide svelte-1fj2vis");
    			add_location(div, file$8, 105, 12, 4021);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(swiper, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const swiper_changes = {};

    			if (dirty[0] & /*contents, globalSettings, standardWidth*/ 7 | dirty[1] & /*$$scope*/ 64) {
    				swiper_changes.$$scope = { dirty, ctx };
    			}

    			swiper.$set(swiper_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(swiper.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(swiper.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(swiper);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9.name,
    		type: "if",
    		source: "(105:10) {#if article.slides}",
    		ctx
    	});

    	return block;
    }

    // (118:20) {#if slide.type == "youtube"}
    function create_if_block_10(ctx) {
    	let yframe;
    	let current;

    	yframe = new Youtube_iframe({
    			props: {
    				contents: /*contents*/ ctx[1],
    				globalSettings: /*globalSettings*/ ctx[0],
    				id: /*slide*/ ctx[25].id,
    				sizes: "@media (orientation: portrait) " + /*standardWidth*/ ctx[2] + "vw, " + /*standardWidth*/ ctx[2] * 0.975 / 2 + "vw"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(yframe.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(yframe, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const yframe_changes = {};
    			if (dirty[0] & /*contents*/ 2) yframe_changes.contents = /*contents*/ ctx[1];
    			if (dirty[0] & /*globalSettings*/ 1) yframe_changes.globalSettings = /*globalSettings*/ ctx[0];
    			if (dirty[0] & /*contents*/ 2) yframe_changes.id = /*slide*/ ctx[25].id;
    			if (dirty[0] & /*standardWidth*/ 4) yframe_changes.sizes = "@media (orientation: portrait) " + /*standardWidth*/ ctx[2] + "vw, " + /*standardWidth*/ ctx[2] * 0.975 / 2 + "vw";
    			yframe.$set(yframe_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(yframe.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(yframe.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(yframe, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10.name,
    		type: "if",
    		source: "(118:20) {#if slide.type == \\\"youtube\\\"}",
    		ctx
    	});

    	return block;
    }

    // (117:18) <SwiperSlide>
    function create_default_slot_4(ctx) {
    	let t;
    	let current;
    	let if_block = /*slide*/ ctx[25].type == "youtube" && create_if_block_10(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			t = space();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, t, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*slide*/ ctx[25].type == "youtube") {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*contents*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_10(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(t.parentNode, t);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4.name,
    		type: "slot",
    		source: "(117:18) <SwiperSlide>",
    		ctx
    	});

    	return block;
    }

    // (116:16) {#each article.slides as slide}
    function create_each_block_6(ctx) {
    	let swiperslide;
    	let current;

    	swiperslide = new Swiper({
    			props: {
    				$$slots: { default: [create_default_slot_4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(swiperslide.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(swiperslide, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const swiperslide_changes = {};

    			if (dirty[0] & /*contents, globalSettings, standardWidth*/ 7 | dirty[1] & /*$$scope*/ 64) {
    				swiperslide_changes.$$scope = { dirty, ctx };
    			}

    			swiperslide.$set(swiperslide_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(swiperslide.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(swiperslide.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(swiperslide, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_6.name,
    		type: "each",
    		source: "(116:16) {#each article.slides as slide}",
    		ctx
    	});

    	return block;
    }

    // (107:14) <Swiper                 centeredSlides={true}                 autoHeight={true}                 spaceBetween={0}                 slidesPerView={1}                 speed={transitionDuration}                 updateOnImagesReady={true}                 on:snapIndexChange={() => window.dispatchEvent(new CustomEvent('slide'))}               >
    function create_default_slot_3(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value_6 = /*article*/ ctx[10].slides;
    	validate_each_argument(each_value_6);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_6.length; i += 1) {
    		each_blocks[i] = create_each_block_6(get_each_context_6(ctx, each_value_6, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*contents, globalSettings, standardWidth*/ 7) {
    				each_value_6 = /*article*/ ctx[10].slides;
    				validate_each_argument(each_value_6);
    				let i;

    				for (i = 0; i < each_value_6.length; i += 1) {
    					const child_ctx = get_each_context_6(ctx, each_value_6, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_6(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value_6.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_6.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3.name,
    		type: "slot",
    		source: "(107:14) <Swiper                 centeredSlides={true}                 autoHeight={true}                 spaceBetween={0}                 slidesPerView={1}                 speed={transitionDuration}                 updateOnImagesReady={true}                 on:snapIndexChange={() => window.dispatchEvent(new CustomEvent('slide'))}               >",
    		ctx
    	});

    	return block;
    }

    // (132:14) {:else}
    function create_else_block_1(ctx) {
    	let t_value = /*article*/ ctx[10].description + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text$1(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*contents*/ 2 && t_value !== (t_value = /*article*/ ctx[10].description + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1.name,
    		type: "else",
    		source: "(132:14) {:else}",
    		ctx
    	});

    	return block;
    }

    // (128:14) {#if Array.isArray(article.description)}
    function create_if_block_8(ctx) {
    	let each_1_anchor;
    	let each_value_5 = /*article*/ ctx[10].description;
    	validate_each_argument(each_value_5);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_5.length; i += 1) {
    		each_blocks[i] = create_each_block_5$1(get_each_context_5$1(ctx, each_value_5, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*contents*/ 2) {
    				each_value_5 = /*article*/ ctx[10].description;
    				validate_each_argument(each_value_5);
    				let i;

    				for (i = 0; i < each_value_5.length; i += 1) {
    					const child_ctx = get_each_context_5$1(ctx, each_value_5, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_5$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_5.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8.name,
    		type: "if",
    		source: "(128:14) {#if Array.isArray(article.description)}",
    		ctx
    	});

    	return block;
    }

    // (129:16) {#each article.description as p, i}
    function create_each_block_5$1(ctx) {
    	let p;
    	let t_value = /*p*/ ctx[23] + "";
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text$1(t_value);
    			attr_dev(p, "class", "" + (null_to_empty(/*i*/ ctx[12] == 0 ? "first-line" : "") + " svelte-1fj2vis"));
    			add_location(p, file$8, 129, 18, 5013);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*contents*/ 2 && t_value !== (t_value = /*p*/ ctx[23] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_5$1.name,
    		type: "each",
    		source: "(129:16) {#each article.description as p, i}",
    		ctx
    	});

    	return block;
    }

    // (136:12) {#if article.specs}
    function create_if_block_2$2(ctx) {
    	let div;
    	let t;
    	let if_block0 = /*article*/ ctx[10].specs.times && create_if_block_4$2(ctx);
    	let if_block1 = /*article*/ ctx[10].specs.platforms && create_if_block_3$2(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block0) if_block0.c();
    			t = space();
    			if (if_block1) if_block1.c();
    			attr_dev(div, "class", "specs svelte-1fj2vis");
    			add_location(div, file$8, 136, 14, 5232);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block0) if_block0.m(div, null);
    			append_dev(div, t);
    			if (if_block1) if_block1.m(div, null);
    		},
    		p: function update(ctx, dirty) {
    			if (/*article*/ ctx[10].specs.times) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_4$2(ctx);
    					if_block0.c();
    					if_block0.m(div, t);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*article*/ ctx[10].specs.platforms) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_3$2(ctx);
    					if_block1.c();
    					if_block1.m(div, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$2.name,
    		type: "if",
    		source: "(136:12) {#if article.specs}",
    		ctx
    	});

    	return block;
    }

    // (138:16) {#if article.specs.times}
    function create_if_block_4$2(ctx) {
    	let div;
    	let span;
    	let t1;
    	let each_value_4 = /*article*/ ctx[10].specs.times;
    	validate_each_argument(each_value_4);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_4.length; i += 1) {
    		each_blocks[i] = create_each_block_4$1(get_each_context_4$1(ctx, each_value_4, i));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			span = element("span");
    			span.textContent = "制作時期";
    			t1 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(span, "class", "tag svelte-1fj2vis");
    			add_location(span, file$8, 139, 20, 5352);
    			attr_dev(div, "class", "times svelte-1fj2vis");
    			add_location(div, file$8, 138, 18, 5312);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span);
    			append_dev(div, t1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*contents*/ 2) {
    				each_value_4 = /*article*/ ctx[10].specs.times;
    				validate_each_argument(each_value_4);
    				let i;

    				for (i = 0; i < each_value_4.length; i += 1) {
    					const child_ctx = get_each_context_4$1(ctx, each_value_4, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_4$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_4.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$2.name,
    		type: "if",
    		source: "(138:16) {#if article.specs.times}",
    		ctx
    	});

    	return block;
    }

    // (144:24) {#if time.year}
    function create_if_block_7$1(ctx) {
    	let t0_value = /*time*/ ctx[21].year + "";
    	let t0;
    	let t1;

    	let t2_value = (!(/*time*/ ctx[21].month || /*time*/ ctx[21].day)
    	? /*time*/ ctx[21].annotation
    	: "") + "";

    	let t2;

    	const block = {
    		c: function create() {
    			t0 = text$1(t0_value);
    			t1 = text$1("年");
    			t2 = text$1(t2_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, t2, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*contents*/ 2 && t0_value !== (t0_value = /*time*/ ctx[21].year + "")) set_data_dev(t0, t0_value);

    			if (dirty[0] & /*contents*/ 2 && t2_value !== (t2_value = (!(/*time*/ ctx[21].month || /*time*/ ctx[21].day)
    			? /*time*/ ctx[21].annotation
    			: "") + "")) set_data_dev(t2, t2_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(t2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$1.name,
    		type: "if",
    		source: "(144:24) {#if time.year}",
    		ctx
    	});

    	return block;
    }

    // (147:24) {#if time.month}
    function create_if_block_6$1(ctx) {
    	let t0_value = /*time*/ ctx[21].month + "";
    	let t0;
    	let t1;
    	let t2_value = (!/*time*/ ctx[21].day ? /*time*/ ctx[21].annotation : "") + "";
    	let t2;

    	const block = {
    		c: function create() {
    			t0 = text$1(t0_value);
    			t1 = text$1("月");
    			t2 = text$1(t2_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, t2, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*contents*/ 2 && t0_value !== (t0_value = /*time*/ ctx[21].month + "")) set_data_dev(t0, t0_value);
    			if (dirty[0] & /*contents*/ 2 && t2_value !== (t2_value = (!/*time*/ ctx[21].day ? /*time*/ ctx[21].annotation : "") + "")) set_data_dev(t2, t2_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(t2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$1.name,
    		type: "if",
    		source: "(147:24) {#if time.month}",
    		ctx
    	});

    	return block;
    }

    // (150:24) {#if time.day}
    function create_if_block_5$2(ctx) {
    	let t0_value = /*time*/ ctx[21].day + "";
    	let t0;
    	let t1;
    	let t2_value = /*time*/ ctx[21].annotation + "";
    	let t2;

    	const block = {
    		c: function create() {
    			t0 = text$1(t0_value);
    			t1 = text$1("日");
    			t2 = text$1(t2_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, t2, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*contents*/ 2 && t0_value !== (t0_value = /*time*/ ctx[21].day + "")) set_data_dev(t0, t0_value);
    			if (dirty[0] & /*contents*/ 2 && t2_value !== (t2_value = /*time*/ ctx[21].annotation + "")) set_data_dev(t2, t2_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(t2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$2.name,
    		type: "if",
    		source: "(150:24) {#if time.day}",
    		ctx
    	});

    	return block;
    }

    // (141:20) {#each article.specs.times as time, i}
    function create_each_block_4$1(ctx) {
    	let time;
    	let t0;
    	let t1;
    	let time_datetime_value;
    	let t2;

    	let t3_value = (/*i*/ ctx[12] + 1 != /*article*/ ctx[10].specs.times.length
    	? ", "
    	: "") + "";

    	let t3;
    	let if_block0 = /*time*/ ctx[21].year && create_if_block_7$1(ctx);
    	let if_block1 = /*time*/ ctx[21].month && create_if_block_6$1(ctx);
    	let if_block2 = /*time*/ ctx[21].day && create_if_block_5$2(ctx);

    	const block = {
    		c: function create() {
    			time = element("time");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			t2 = space();
    			t3 = text$1(t3_value);
    			attr_dev(time, "class", "break-scope svelte-1fj2vis");

    			attr_dev(time, "datetime", time_datetime_value = (/*time*/ ctx[21].year
    			? ("0000" + /*time*/ ctx[21].year).slice(-4)
    			: "") + (/*time*/ ctx[21].month
    			? "-" + ("00" + /*time*/ ctx[21].month).slice(-2)
    			: "") + (/*time*/ ctx[21].day
    			? "-" + ("00" + /*time*/ ctx[21].day).slice(-2)
    			: ""));

    			add_location(time, file$8, 142, 22, 5533);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, time, anchor);
    			if (if_block0) if_block0.m(time, null);
    			append_dev(time, t0);
    			if (if_block1) if_block1.m(time, null);
    			append_dev(time, t1);
    			if (if_block2) if_block2.m(time, null);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, t3, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (/*time*/ ctx[21].year) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_7$1(ctx);
    					if_block0.c();
    					if_block0.m(time, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*time*/ ctx[21].month) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_6$1(ctx);
    					if_block1.c();
    					if_block1.m(time, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*time*/ ctx[21].day) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_5$2(ctx);
    					if_block2.c();
    					if_block2.m(time, null);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (dirty[0] & /*contents*/ 2 && time_datetime_value !== (time_datetime_value = (/*time*/ ctx[21].year
    			? ("0000" + /*time*/ ctx[21].year).slice(-4)
    			: "") + (/*time*/ ctx[21].month
    			? "-" + ("00" + /*time*/ ctx[21].month).slice(-2)
    			: "") + (/*time*/ ctx[21].day
    			? "-" + ("00" + /*time*/ ctx[21].day).slice(-2)
    			: ""))) {
    				attr_dev(time, "datetime", time_datetime_value);
    			}

    			if (dirty[0] & /*contents*/ 2 && t3_value !== (t3_value = (/*i*/ ctx[12] + 1 != /*article*/ ctx[10].specs.times.length
    			? ", "
    			: "") + "")) set_data_dev(t3, t3_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(time);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(t3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_4$1.name,
    		type: "each",
    		source: "(141:20) {#each article.specs.times as time, i}",
    		ctx
    	});

    	return block;
    }

    // (158:16) {#if article.specs.platforms}
    function create_if_block_3$2(ctx) {
    	let div;
    	let span;
    	let t1;
    	let each_value_3 = /*article*/ ctx[10].specs.platforms;
    	validate_each_argument(each_value_3);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_3.length; i += 1) {
    		each_blocks[i] = create_each_block_3$1(get_each_context_3$1(ctx, each_value_3, i));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			span = element("span");
    			span.textContent = "対応プラットフォーム";
    			t1 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(span, "class", "tag svelte-1fj2vis");
    			add_location(span, file$8, 159, 20, 6440);
    			attr_dev(div, "class", "platforms svelte-1fj2vis");
    			add_location(div, file$8, 158, 18, 6396);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span);
    			append_dev(div, t1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*contents*/ 2) {
    				each_value_3 = /*article*/ ctx[10].specs.platforms;
    				validate_each_argument(each_value_3);
    				let i;

    				for (i = 0; i < each_value_3.length; i += 1) {
    					const child_ctx = get_each_context_3$1(ctx, each_value_3, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_3$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_3.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$2.name,
    		type: "if",
    		source: "(158:16) {#if article.specs.platforms}",
    		ctx
    	});

    	return block;
    }

    // (161:20) {#each article.specs.platforms as platform, i}
    function create_each_block_3$1(ctx) {
    	let span;
    	let t0_value = /*platform*/ ctx[19].name + "";
    	let t0;
    	let t1;
    	let t2_value = (/*platform*/ ctx[19].version || "") + "";
    	let t2;
    	let t3_value = (/*platform*/ ctx[19].orLater ? "以降" : "") + "";
    	let t3;

    	let t4_value = (/*i*/ ctx[12] + 1 != /*article*/ ctx[10].specs.platforms.length
    	? ","
    	: "") + "";

    	let t4;
    	let t5;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t0 = text$1(t0_value);
    			t1 = space();
    			t2 = text$1(t2_value);
    			t3 = text$1(t3_value);
    			t4 = text$1(t4_value);
    			t5 = space();
    			attr_dev(span, "class", "break-scope svelte-1fj2vis");
    			add_location(span, file$8, 161, 22, 6565);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t0);
    			append_dev(span, t1);
    			append_dev(span, t2);
    			append_dev(span, t3);
    			append_dev(span, t4);
    			append_dev(span, t5);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*contents*/ 2 && t0_value !== (t0_value = /*platform*/ ctx[19].name + "")) set_data_dev(t0, t0_value);
    			if (dirty[0] & /*contents*/ 2 && t2_value !== (t2_value = (/*platform*/ ctx[19].version || "") + "")) set_data_dev(t2, t2_value);
    			if (dirty[0] & /*contents*/ 2 && t3_value !== (t3_value = (/*platform*/ ctx[19].orLater ? "以降" : "") + "")) set_data_dev(t3, t3_value);

    			if (dirty[0] & /*contents*/ 2 && t4_value !== (t4_value = (/*i*/ ctx[12] + 1 != /*article*/ ctx[10].specs.platforms.length
    			? ","
    			: "") + "")) set_data_dev(t4, t4_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_3$1.name,
    		type: "each",
    		source: "(161:20) {#each article.specs.platforms as platform, i}",
    		ctx
    	});

    	return block;
    }

    // (174:12) {#if button.popup}
    function create_if_block_1$3(ctx) {
    	let div;
    	let t_value = /*button*/ ctx[13].popup + "";
    	let t;
    	let div_class_value;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text$1(t_value);
    			attr_dev(div, "class", div_class_value = "popup " + (/*button*/ ctx[13].disabled ? "disabled" : "") + " svelte-1fj2vis");
    			add_location(div, file$8, 174, 14, 7039);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*contents*/ 2 && t_value !== (t_value = /*button*/ ctx[13].popup + "")) set_data_dev(t, t_value);

    			if (dirty[0] & /*contents*/ 2 && div_class_value !== (div_class_value = "popup " + (/*button*/ ctx[13].disabled ? "disabled" : "") + " svelte-1fj2vis")) {
    				attr_dev(div, "class", div_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$3.name,
    		type: "if",
    		source: "(174:12) {#if button.popup}",
    		ctx
    	});

    	return block;
    }

    // (182:14) {:else}
    function create_else_block$1(ctx) {
    	let t_value = /*button*/ ctx[13].title + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text$1(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*contents*/ 2 && t_value !== (t_value = /*button*/ ctx[13].title + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(182:14) {:else}",
    		ctx
    	});

    	return block;
    }

    // (178:14) {#if Array.isArray(button.title)}
    function create_if_block$5(ctx) {
    	let each_1_anchor;
    	let each_value_2 = /*button*/ ctx[13].title;
    	validate_each_argument(each_value_2);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks[i] = create_each_block_2$2(get_each_context_2$2(ctx, each_value_2, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*contents*/ 2) {
    				each_value_2 = /*button*/ ctx[13].title;
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2$2(ctx, each_value_2, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_2$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_2.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(178:14) {#if Array.isArray(button.title)}",
    		ctx
    	});

    	return block;
    }

    // (179:16) {#each button.title as title}
    function create_each_block_2$2(ctx) {
    	let span;
    	let t_value = /*title*/ ctx[16] + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text$1(t_value);
    			attr_dev(span, "class", "break-scope svelte-1fj2vis");
    			add_location(span, file$8, 179, 18, 7396);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*contents*/ 2 && t_value !== (t_value = /*title*/ ctx[16] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2$2.name,
    		type: "each",
    		source: "(179:16) {#each button.title as title}",
    		ctx
    	});

    	return block;
    }

    // (177:12) <Button target={button.target} bg="#0a6afa" width="calc(var(--standardWidth) * 0.45)" disabled={button.disabled} spaMode={button.spaMode}>
    function create_default_slot_2$1(ctx) {
    	let show_if;
    	let t;

    	function select_block_type_4(ctx, dirty) {
    		if (show_if == null || dirty[0] & /*contents*/ 2) show_if = !!Array.isArray(/*button*/ ctx[13].title);
    		if (show_if) return create_if_block$5;
    		return create_else_block$1;
    	}

    	let current_block_type = select_block_type_4(ctx, [-1]);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			t = space();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_4(ctx, dirty)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(t.parentNode, t);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$1.name,
    		type: "slot",
    		source: "(177:12) <Button target={button.target} bg=\\\"#0a6afa\\\" width=\\\"calc(var(--standardWidth) * 0.45)\\\" disabled={button.disabled} spaMode={button.spaMode}>",
    		ctx
    	});

    	return block;
    }

    // (173:10) {#each article.buttons as button}
    function create_each_block_1$2(ctx) {
    	let t;
    	let button;
    	let current;
    	let if_block = /*button*/ ctx[13].popup && create_if_block_1$3(ctx);

    	button = new Button({
    			props: {
    				target: /*button*/ ctx[13].target,
    				bg: "#0a6afa",
    				width: "calc(var(--standardWidth) * 0.45)",
    				disabled: /*button*/ ctx[13].disabled,
    				spaMode: /*button*/ ctx[13].spaMode,
    				$$slots: { default: [create_default_slot_2$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			t = space();
    			create_component(button.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(button, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*button*/ ctx[13].popup) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_1$3(ctx);
    					if_block.c();
    					if_block.m(t.parentNode, t);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			const button_changes = {};
    			if (dirty[0] & /*contents*/ 2) button_changes.target = /*button*/ ctx[13].target;
    			if (dirty[0] & /*contents*/ 2) button_changes.disabled = /*button*/ ctx[13].disabled;
    			if (dirty[0] & /*contents*/ 2) button_changes.spaMode = /*button*/ ctx[13].spaMode;

    			if (dirty[0] & /*contents*/ 2 | dirty[1] & /*$$scope*/ 64) {
    				button_changes.$$scope = { dirty, ctx };
    			}

    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(button, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$2.name,
    		type: "each",
    		source: "(173:10) {#each article.buttons as button}",
    		ctx
    	});

    	return block;
    }

    // (64:4) <SwiperSlide>
    function create_default_slot_1$1(ctx) {
    	let div6;
    	let div2;
    	let div0;
    	let span0;
    	let show_if_2;
    	let t0;
    	let span1;
    	let show_if_1;
    	let t1;
    	let div1;
    	let t2;
    	let div4;
    	let t3;
    	let div3;
    	let article;
    	let show_if;
    	let t4;
    	let t5;
    	let div5;
    	let t6;
    	let current;

    	function select_block_type(ctx, dirty) {
    		if (show_if_2 == null || dirty[0] & /*contents*/ 2) show_if_2 = !!Array.isArray(/*article*/ ctx[10].subtitle);
    		if (show_if_2) return create_if_block_14;
    		return create_else_block_4;
    	}

    	let current_block_type = select_block_type(ctx, [-1]);
    	let if_block0 = current_block_type(ctx);

    	function select_block_type_1(ctx, dirty) {
    		if (show_if_1 == null || dirty[0] & /*contents*/ 2) show_if_1 = !!Array.isArray(/*article*/ ctx[10].title);
    		if (show_if_1) return create_if_block_13;
    		return create_else_block_3;
    	}

    	let current_block_type_1 = select_block_type_1(ctx, [-1]);
    	let if_block1 = current_block_type_1(ctx);
    	let each_value_7 = /*article*/ ctx[10].buttons;
    	validate_each_argument(each_value_7);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_7.length; i += 1) {
    		each_blocks_1[i] = create_each_block_7(get_each_context_7(ctx, each_value_7, i));
    	}

    	const out = i => transition_out(each_blocks_1[i], 1, 1, () => {
    		each_blocks_1[i] = null;
    	});

    	let if_block2 = /*article*/ ctx[10].slides && create_if_block_9(ctx);

    	function select_block_type_3(ctx, dirty) {
    		if (show_if == null || dirty[0] & /*contents*/ 2) show_if = !!Array.isArray(/*article*/ ctx[10].description);
    		if (show_if) return create_if_block_8;
    		return create_else_block_1;
    	}

    	let current_block_type_2 = select_block_type_3(ctx, [-1]);
    	let if_block3 = current_block_type_2(ctx);
    	let if_block4 = /*article*/ ctx[10].specs && create_if_block_2$2(ctx);
    	let each_value_1 = /*article*/ ctx[10].buttons;
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$2(get_each_context_1$2(ctx, each_value_1, i));
    	}

    	const out_1 = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div6 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			span0 = element("span");
    			if_block0.c();
    			t0 = space();
    			span1 = element("span");
    			if_block1.c();
    			t1 = space();
    			div1 = element("div");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t2 = space();
    			div4 = element("div");
    			if (if_block2) if_block2.c();
    			t3 = space();
    			div3 = element("div");
    			article = element("article");
    			if_block3.c();
    			t4 = space();
    			if (if_block4) if_block4.c();
    			t5 = space();
    			div5 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t6 = space();
    			attr_dev(span0, "class", "subtitle svelte-1fj2vis");
    			add_location(span0, file$8, 67, 12, 2677);
    			attr_dev(span1, "class", "title svelte-1fj2vis");
    			add_location(span1, file$8, 76, 12, 2966);
    			attr_dev(div0, "class", "headline svelte-1fj2vis");
    			add_location(div0, file$8, 66, 10, 2642);
    			attr_dev(div1, "class", "buttons pc svelte-1fj2vis");
    			add_location(div1, file$8, 86, 10, 3254);
    			attr_dev(div2, "class", "title-container svelte-1fj2vis");
    			add_location(div2, file$8, 65, 8, 2602);
    			attr_dev(article, "class", "svelte-1fj2vis");
    			add_location(article, file$8, 126, 12, 4878);
    			attr_dev(div3, "class", "description svelte-1fj2vis");
    			add_location(div3, file$8, 125, 10, 4840);
    			attr_dev(div4, "class", "description-container svelte-1fj2vis");
    			add_location(div4, file$8, 103, 8, 3942);
    			attr_dev(div5, "class", "buttons mobile svelte-1fj2vis");
    			add_location(div5, file$8, 171, 8, 6921);
    			attr_dev(div6, "class", "slide-container svelte-1fj2vis");
    			set_style(div6, "--backgroundColor", /*backgroundColor*/ ctx[4][/*i*/ ctx[12]]);
    			set_style(div6, "--themeColor", /*contents*/ ctx[1].articles[/*i*/ ctx[12]].themeColor);
    			add_location(div6, file$8, 64, 6, 2468);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div6, anchor);
    			append_dev(div6, div2);
    			append_dev(div2, div0);
    			append_dev(div0, span0);
    			if_block0.m(span0, null);
    			append_dev(div0, t0);
    			append_dev(div0, span1);
    			if_block1.m(span1, null);
    			append_dev(div2, t1);
    			append_dev(div2, div1);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(div1, null);
    			}

    			append_dev(div6, t2);
    			append_dev(div6, div4);
    			if (if_block2) if_block2.m(div4, null);
    			append_dev(div4, t3);
    			append_dev(div4, div3);
    			append_dev(div3, article);
    			if_block3.m(article, null);
    			append_dev(div3, t4);
    			if (if_block4) if_block4.m(div3, null);
    			append_dev(div6, t5);
    			append_dev(div6, div5);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div5, null);
    			}

    			insert_dev(target, t6, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block0) {
    				if_block0.p(ctx, dirty);
    			} else {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(span0, null);
    				}
    			}

    			if (current_block_type_1 === (current_block_type_1 = select_block_type_1(ctx, dirty)) && if_block1) {
    				if_block1.p(ctx, dirty);
    			} else {
    				if_block1.d(1);
    				if_block1 = current_block_type_1(ctx);

    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(span1, null);
    				}
    			}

    			if (dirty[0] & /*contents*/ 2) {
    				each_value_7 = /*article*/ ctx[10].buttons;
    				validate_each_argument(each_value_7);
    				let i;

    				for (i = 0; i < each_value_7.length; i += 1) {
    					const child_ctx = get_each_context_7(ctx, each_value_7, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    						transition_in(each_blocks_1[i], 1);
    					} else {
    						each_blocks_1[i] = create_each_block_7(child_ctx);
    						each_blocks_1[i].c();
    						transition_in(each_blocks_1[i], 1);
    						each_blocks_1[i].m(div1, null);
    					}
    				}

    				group_outros();

    				for (i = each_value_7.length; i < each_blocks_1.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (/*article*/ ctx[10].slides) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty[0] & /*contents*/ 2) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_9(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(div4, t3);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			if (current_block_type_2 === (current_block_type_2 = select_block_type_3(ctx, dirty)) && if_block3) {
    				if_block3.p(ctx, dirty);
    			} else {
    				if_block3.d(1);
    				if_block3 = current_block_type_2(ctx);

    				if (if_block3) {
    					if_block3.c();
    					if_block3.m(article, null);
    				}
    			}

    			if (/*article*/ ctx[10].specs) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);
    				} else {
    					if_block4 = create_if_block_2$2(ctx);
    					if_block4.c();
    					if_block4.m(div3, null);
    				}
    			} else if (if_block4) {
    				if_block4.d(1);
    				if_block4 = null;
    			}

    			if (dirty[0] & /*contents*/ 2) {
    				each_value_1 = /*article*/ ctx[10].buttons;
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$2(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_1$2(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div5, null);
    					}
    				}

    				group_outros();

    				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
    					out_1(i);
    				}

    				check_outros();
    			}

    			if (!current || dirty[0] & /*contents*/ 2) {
    				set_style(div6, "--themeColor", /*contents*/ ctx[1].articles[/*i*/ ctx[12]].themeColor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_7.length; i += 1) {
    				transition_in(each_blocks_1[i]);
    			}

    			transition_in(if_block2);

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks_1 = each_blocks_1.filter(Boolean);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				transition_out(each_blocks_1[i]);
    			}

    			transition_out(if_block2);
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div6);
    			if_block0.d();
    			if_block1.d();
    			destroy_each(each_blocks_1, detaching);
    			if (if_block2) if_block2.d();
    			if_block3.d();
    			if (if_block4) if_block4.d();
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(t6);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$1.name,
    		type: "slot",
    		source: "(64:4) <SwiperSlide>",
    		ctx
    	});

    	return block;
    }

    // (63:2) {#each contents.articles as article, i}
    function create_each_block$5(ctx) {
    	let swiperslide;
    	let current;

    	swiperslide = new Swiper({
    			props: {
    				$$slots: { default: [create_default_slot_1$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(swiperslide.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(swiperslide, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const swiperslide_changes = {};

    			if (dirty[0] & /*contents, globalSettings, standardWidth*/ 7 | dirty[1] & /*$$scope*/ 64) {
    				swiperslide_changes.$$scope = { dirty, ctx };
    			}

    			swiperslide.$set(swiperslide_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(swiperslide.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(swiperslide.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(swiperslide, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$5.name,
    		type: "each",
    		source: "(63:2) {#each contents.articles as article, i}",
    		ctx
    	});

    	return block;
    }

    // (48:0) <Swiper   allowSlideNext={false}   allowSlidePrev={false}   allowTouchMove={false}   autoHeight={true}   spaceBetween={0}   slidesPerView={1}   speed={transitionDuration}   loop={true}   loopAdditionalSlides={contents.articles.length - 1}   effect='fade'   fadeEffect={{crossFade: true}}   on:swiper={setControlledSwiper}   on:snapIndexChange={() => window.dispatchEvent(new CustomEvent('slide'))} >
    function create_default_slot$2(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value = /*contents*/ ctx[1].articles;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*backgroundColor, contents, transitionDuration, globalSettings, standardWidth*/ 31) {
    				each_value = /*contents*/ ctx[1].articles;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$5(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$5(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$2.name,
    		type: "slot",
    		source: "(48:0) <Swiper   allowSlideNext={false}   allowSlidePrev={false}   allowTouchMove={false}   autoHeight={true}   spaceBetween={0}   slidesPerView={1}   speed={transitionDuration}   loop={true}   loopAdditionalSlides={contents.articles.length - 1}   effect='fade'   fadeEffect={{crossFade: true}}   on:swiper={setControlledSwiper}   on:snapIndexChange={() => window.dispatchEvent(new CustomEvent('slide'))} >",
    		ctx
    	});

    	return block;
    }

    function create_fragment$8(ctx) {
    	let link0;
    	let link1;
    	let link2;
    	let t;
    	let swiper;
    	let current;

    	swiper = new Swiper$1({
    			props: {
    				allowSlideNext: false,
    				allowSlidePrev: false,
    				allowTouchMove: false,
    				autoHeight: true,
    				spaceBetween: 0,
    				slidesPerView: 1,
    				speed: /*transitionDuration*/ ctx[3],
    				loop: true,
    				loopAdditionalSlides: /*contents*/ ctx[1].articles.length - 1,
    				effect: "fade",
    				fadeEffect: { crossFade: true },
    				$$slots: { default: [create_default_slot$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	swiper.$on("swiper", /*setControlledSwiper*/ ctx[5]);
    	swiper.$on("snapIndexChange", /*snapIndexChange_handler_1*/ ctx[8]);

    	const block = {
    		c: function create() {
    			link0 = element("link");
    			link1 = element("link");
    			link2 = element("link");
    			t = space();
    			create_component(swiper.$$.fragment);
    			attr_dev(link0, "rel", "preconnect");
    			attr_dev(link0, "href", "https://p.typekit.net/");
    			attr_dev(link0, "class", "svelte-1fj2vis");
    			add_location(link0, file$8, 42, 2, 1796);
    			attr_dev(link1, "rel", "preload");
    			attr_dev(link1, "href", "/swiper-bundle.min.css");
    			attr_dev(link1, "as", "style");
    			attr_dev(link1, "class", "svelte-1fj2vis");
    			add_location(link1, file$8, 43, 2, 1852);
    			attr_dev(link2, "rel", "stylesheet");
    			attr_dev(link2, "type", "text/css");
    			attr_dev(link2, "href", "/swiper-bundle.min.css");
    			attr_dev(link2, "class", "svelte-1fj2vis");
    			add_location(link2, file$8, 44, 2, 1916);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			append_dev(document_1.head, link0);
    			append_dev(document_1.head, link1);
    			append_dev(document_1.head, link2);
    			insert_dev(target, t, anchor);
    			mount_component(swiper, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const swiper_changes = {};
    			if (dirty[0] & /*contents*/ 2) swiper_changes.loopAdditionalSlides = /*contents*/ ctx[1].articles.length - 1;

    			if (dirty[0] & /*contents, globalSettings, standardWidth*/ 7 | dirty[1] & /*$$scope*/ 64) {
    				swiper_changes.$$scope = { dirty, ctx };
    			}

    			swiper.$set(swiper_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(swiper.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(swiper.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			detach_dev(link0);
    			detach_dev(link1);
    			detach_dev(link2);
    			if (detaching) detach_dev(t);
    			destroy_component(swiper, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let $sync;
    	validate_store(sync, "sync");
    	component_subscribe($$self, sync, $$value => $$invalidate(9, $sync = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Slide_description", slots, []);

    	let { pairId } = $$props,
    		{ globalSettings } = $$props,
    		{ contents } = $$props,
    		{ standardWidth } = $$props;

    	const transitionDuration = globalSettings.transitionDuration,
    		backgroundColor = contents.articles.map(v => color(v.themeColor).lightness(95).desaturate(0.3).hex());

    	Swiper$2.use([Controller$1, EffectFade]);

    	const setControlledSwiper = e => {
    		const [swiper] = e.detail;
    		set_store_value(sync, $sync.controlledSwiper = null, $sync);

    		// set Controller swiper instance
    		window.addEventListener("pictureGroup_load", e => {
    			if (e.detail == "slideHero") {
    				swiper.update();
    				set_store_value(sync, $sync.controlledSwiper = swiper, $sync);
    				dispatchEvent(new CustomEvent("controllee_load", { detail: pairId }));
    			}
    		});
    	};

    	//Adobe font loading
    	addEventListener("pictureGroup_load", e => {
    		if (e.detail == "slideHero") {
    			(d => {
    				var config = {
    						kitId: "egn6fhp",
    						scriptTimeout: 3000,
    						async: !0
    					},
    					h = d.documentElement,
    					t = setTimeout(
    						() => {
    							h.className = h.className.replace(/\bwf-loading\b/g, "") + " wf-inactive";
    						},
    						config.scriptTimeout
    					),
    					tk = d.createElement("script"),
    					f = !1,
    					s = d.getElementsByTagName("script")[0],
    					a;

    				h.className += " wf-loading";
    				tk.src = "https://use.typekit.net/" + config.kitId + ".js";
    				tk.async = !0;

    				tk.onload = tk.onreadystatechange = function () {
    					a = this.readyState;
    					if (f || a && a != "complete" && a != "loaded") return;
    					f = !0;
    					clearTimeout(t);

    					try {
    						Typekit.load(config);
    					} catch(e) {
    						
    					}
    				};

    				s.parentNode.insertBefore(tk, s);
    			})(document);
    		}
    	});

    	const writable_props = ["pairId", "globalSettings", "contents", "standardWidth"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Slide_description> was created with unknown prop '${key}'`);
    	});

    	const snapIndexChange_handler = () => window.dispatchEvent(new CustomEvent("slide"));
    	const snapIndexChange_handler_1 = () => window.dispatchEvent(new CustomEvent("slide"));

    	$$self.$$set = $$props => {
    		if ("pairId" in $$props) $$invalidate(6, pairId = $$props.pairId);
    		if ("globalSettings" in $$props) $$invalidate(0, globalSettings = $$props.globalSettings);
    		if ("contents" in $$props) $$invalidate(1, contents = $$props.contents);
    		if ("standardWidth" in $$props) $$invalidate(2, standardWidth = $$props.standardWidth);
    	};

    	$$self.$capture_state = () => ({
    		Button,
    		Yframe: Youtube_iframe,
    		Swiper: Swiper$1,
    		SwiperSlide: Swiper,
    		SwiperCore: Swiper$2,
    		Controller: Controller$1,
    		EffectFade,
    		sync,
    		Color: color,
    		pairId,
    		globalSettings,
    		contents,
    		standardWidth,
    		transitionDuration,
    		backgroundColor,
    		setControlledSwiper,
    		$sync
    	});

    	$$self.$inject_state = $$props => {
    		if ("pairId" in $$props) $$invalidate(6, pairId = $$props.pairId);
    		if ("globalSettings" in $$props) $$invalidate(0, globalSettings = $$props.globalSettings);
    		if ("contents" in $$props) $$invalidate(1, contents = $$props.contents);
    		if ("standardWidth" in $$props) $$invalidate(2, standardWidth = $$props.standardWidth);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		globalSettings,
    		contents,
    		standardWidth,
    		transitionDuration,
    		backgroundColor,
    		setControlledSwiper,
    		pairId,
    		snapIndexChange_handler,
    		snapIndexChange_handler_1
    	];
    }

    class Slide_description extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$8,
    			create_fragment$8,
    			safe_not_equal,
    			{
    				pairId: 6,
    				globalSettings: 0,
    				contents: 1,
    				standardWidth: 2
    			},
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Slide_description",
    			options,
    			id: create_fragment$8.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*pairId*/ ctx[6] === undefined && !("pairId" in props)) {
    			console.warn("<Slide_description> was created without expected prop 'pairId'");
    		}

    		if (/*globalSettings*/ ctx[0] === undefined && !("globalSettings" in props)) {
    			console.warn("<Slide_description> was created without expected prop 'globalSettings'");
    		}

    		if (/*contents*/ ctx[1] === undefined && !("contents" in props)) {
    			console.warn("<Slide_description> was created without expected prop 'contents'");
    		}

    		if (/*standardWidth*/ ctx[2] === undefined && !("standardWidth" in props)) {
    			console.warn("<Slide_description> was created without expected prop 'standardWidth'");
    		}
    	}

    	get pairId() {
    		throw new Error("<Slide_description>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pairId(value) {
    		throw new Error("<Slide_description>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get globalSettings() {
    		throw new Error("<Slide_description>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set globalSettings(value) {
    		throw new Error("<Slide_description>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get contents() {
    		throw new Error("<Slide_description>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set contents(value) {
    		throw new Error("<Slide_description>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get standardWidth() {
    		throw new Error("<Slide_description>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set standardWidth(value) {
    		throw new Error("<Slide_description>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/footer.svelte generated by Svelte v3.38.2 */

    const { Object: Object_1$1 } = globals;
    const file$7 = "src/components/footer.svelte";

    function get_each_context$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[3] = list[i];
    	child_ctx[5] = i;
    	return child_ctx;
    }

    // (42:2) {#if contents.copyright}
    function create_if_block_4$1(ctx) {
    	let section;
    	let div;
    	let show_if;
    	let t0;
    	let span0;
    	let t2;
    	let span1;

    	function select_block_type(ctx, dirty) {
    		if (show_if == null || dirty & /*contents*/ 1) show_if = !!Array.isArray(/*contents*/ ctx[0].copyright);
    		if (show_if) return create_if_block_5$1;
    		return create_else_block;
    	}

    	let current_block_type = select_block_type(ctx, -1);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			div = element("div");
    			if_block.c();
    			t0 = space();
    			span0 = element("span");
    			span0.textContent = "Hash: 124260";
    			t2 = space();
    			span1 = element("span");
    			span1.textContent = "Build: 21/9/23-18:11";
    			attr_dev(span0, "class", "break-scope");
    			add_location(span0, file$7, 51, 8, 2388);
    			attr_dev(span1, "class", "break-scope");
    			add_location(span1, file$7, 52, 8, 2442);
    			add_location(div, file$7, 43, 6, 2046);
    			attr_dev(section, "class", "copyright svelte-13gzqik");
    			add_location(section, file$7, 42, 4, 2012);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div);
    			if_block.m(div, null);
    			append_dev(div, t0);
    			append_dev(div, span0);
    			append_dev(div, t2);
    			append_dev(div, span1);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div, t0);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$1.name,
    		type: "if",
    		source: "(42:2) {#if contents.copyright}",
    		ctx
    	});

    	return block;
    }

    // (49:8) {:else}
    function create_else_block(ctx) {
    	let span;
    	let raw_value = /*contents*/ ctx[0].copyright + "";

    	const block = {
    		c: function create() {
    			span = element("span");
    			attr_dev(span, "class", "break-scope");
    			add_location(span, file$7, 49, 10, 2306);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			span.innerHTML = raw_value;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*contents*/ 1 && raw_value !== (raw_value = /*contents*/ ctx[0].copyright + "")) span.innerHTML = raw_value;		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(49:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (45:8) {#if Array.isArray(contents.copyright)}
    function create_if_block_5$1(ctx) {
    	let each_1_anchor;
    	let each_value = /*contents*/ ctx[0].copyright;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*contents*/ 1) {
    				each_value = /*contents*/ ctx[0].copyright;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$4(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$4(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$1.name,
    		type: "if",
    		source: "(45:8) {#if Array.isArray(contents.copyright)}",
    		ctx
    	});

    	return block;
    }

    // (46:10) {#each contents.copyright as copyright, i}
    function create_each_block$4(ctx) {
    	let span;
    	let html_tag;
    	let raw_value = /*copyright*/ ctx[3] + "";

    	let t_value = (/*i*/ ctx[5] + 1 != /*contents*/ ctx[0].copyright.length
    	? ", "
    	: "") + "";

    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text$1(t_value);
    			html_tag = new HtmlTag(t);
    			attr_dev(span, "class", "break-scope");
    			add_location(span, file$7, 46, 12, 2165);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			html_tag.m(raw_value, span);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*contents*/ 1 && raw_value !== (raw_value = /*copyright*/ ctx[3] + "")) html_tag.p(raw_value);

    			if (dirty & /*contents*/ 1 && t_value !== (t_value = (/*i*/ ctx[5] + 1 != /*contents*/ ctx[0].copyright.length
    			? ", "
    			: "") + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$4.name,
    		type: "each",
    		source: "(46:10) {#each contents.copyright as copyright, i}",
    		ctx
    	});

    	return block;
    }

    // (57:2) {#if contents.codeLicense}
    function create_if_block_1$2(ctx) {
    	let section0;
    	let div0;
    	let t0;
    	let t1_value = /*licenses*/ ctx[1][/*contents*/ ctx[0].codeLicense.license] + "";
    	let t1;

    	let t2_value = (/*contents*/ ctx[0].codeLicense.linkLabel && /*contents*/ ctx[0].codeLicense.url
    	? " and available at "
    	: ".") + "";

    	let t2;
    	let t3;
    	let t4;
    	let section1;
    	let div1;
    	let t5;
    	let t6_value = /*licenses*/ ctx[1][/*contents*/ ctx[0].codeLicense.license] + "";
    	let t6;
    	let t7;

    	let t8_value = (/*contents*/ ctx[0].codeLicense.linkLabel && /*contents*/ ctx[0].codeLicense.url
    	? "おり、"
    	: "います。") + "";

    	let t8;
    	let t9;
    	let if_block0 = /*contents*/ ctx[0].codeLicense.linkLabel && /*contents*/ ctx[0].codeLicense.url && create_if_block_3$1(ctx);
    	let if_block1 = /*contents*/ ctx[0].codeLicense.linkLabel && /*contents*/ ctx[0].codeLicense.url && create_if_block_2$1(ctx);

    	const block = {
    		c: function create() {
    			section0 = element("section");
    			div0 = element("div");
    			t0 = text$1("The source code of this web site is licensed under a ");
    			t1 = text$1(t1_value);
    			t2 = text$1(t2_value);
    			t3 = space();
    			if (if_block0) if_block0.c();
    			t4 = space();
    			section1 = element("section");
    			div1 = element("div");
    			t5 = text$1("このWebサイトのソースコードは");
    			t6 = text$1(t6_value);
    			t7 = text$1("ライセンスの下で提供されて");
    			t8 = text$1(t8_value);
    			t9 = space();
    			if (if_block1) if_block1.c();
    			add_location(div0, file$7, 58, 6, 2597);
    			attr_dev(section0, "class", "license svelte-13gzqik");
    			add_location(section0, file$7, 57, 4, 2565);
    			add_location(div1, file$7, 66, 6, 3099);
    			attr_dev(section1, "class", "license svelte-13gzqik");
    			add_location(section1, file$7, 65, 4, 3067);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section0, anchor);
    			append_dev(section0, div0);
    			append_dev(div0, t0);
    			append_dev(div0, t1);
    			append_dev(div0, t2);
    			append_dev(div0, t3);
    			if (if_block0) if_block0.m(div0, null);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, section1, anchor);
    			append_dev(section1, div1);
    			append_dev(div1, t5);
    			append_dev(div1, t6);
    			append_dev(div1, t7);
    			append_dev(div1, t8);
    			append_dev(div1, t9);
    			if (if_block1) if_block1.m(div1, null);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*contents*/ 1 && t1_value !== (t1_value = /*licenses*/ ctx[1][/*contents*/ ctx[0].codeLicense.license] + "")) set_data_dev(t1, t1_value);

    			if (dirty & /*contents*/ 1 && t2_value !== (t2_value = (/*contents*/ ctx[0].codeLicense.linkLabel && /*contents*/ ctx[0].codeLicense.url
    			? " and available at "
    			: ".") + "")) set_data_dev(t2, t2_value);

    			if (/*contents*/ ctx[0].codeLicense.linkLabel && /*contents*/ ctx[0].codeLicense.url) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_3$1(ctx);
    					if_block0.c();
    					if_block0.m(div0, null);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (dirty & /*contents*/ 1 && t6_value !== (t6_value = /*licenses*/ ctx[1][/*contents*/ ctx[0].codeLicense.license] + "")) set_data_dev(t6, t6_value);

    			if (dirty & /*contents*/ 1 && t8_value !== (t8_value = (/*contents*/ ctx[0].codeLicense.linkLabel && /*contents*/ ctx[0].codeLicense.url
    			? "おり、"
    			: "います。") + "")) set_data_dev(t8, t8_value);

    			if (/*contents*/ ctx[0].codeLicense.linkLabel && /*contents*/ ctx[0].codeLicense.url) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_2$1(ctx);
    					if_block1.c();
    					if_block1.m(div1, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section0);
    			if (if_block0) if_block0.d();
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(section1);
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$2.name,
    		type: "if",
    		source: "(57:2) {#if contents.codeLicense}",
    		ctx
    	});

    	return block;
    }

    // (61:8) {#if contents.codeLicense.linkLabel && contents.codeLicense.url}
    function create_if_block_3$1(ctx) {
    	let a;
    	let t0_value = /*contents*/ ctx[0].codeLicense.linkLabel + "";
    	let t0;
    	let a_href_value;
    	let a_style_value;
    	let t1;

    	const block = {
    		c: function create() {
    			a = element("a");
    			t0 = text$1(t0_value);
    			t1 = text$1(".");
    			attr_dev(a, "href", a_href_value = /*contents*/ ctx[0].codeLicense.url);

    			attr_dev(a, "style", a_style_value = /*contents*/ ctx[0].anchorColor
    			? `color: ${/*contents*/ ctx[0].anchorColor}`
    			: "");

    			add_location(a, file$7, 61, 10, 2877);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			append_dev(a, t0);
    			insert_dev(target, t1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*contents*/ 1 && t0_value !== (t0_value = /*contents*/ ctx[0].codeLicense.linkLabel + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*contents*/ 1 && a_href_value !== (a_href_value = /*contents*/ ctx[0].codeLicense.url)) {
    				attr_dev(a, "href", a_href_value);
    			}

    			if (dirty & /*contents*/ 1 && a_style_value !== (a_style_value = /*contents*/ ctx[0].anchorColor
    			? `color: ${/*contents*/ ctx[0].anchorColor}`
    			: "")) {
    				attr_dev(a, "style", a_style_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (detaching) detach_dev(t1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$1.name,
    		type: "if",
    		source: "(61:8) {#if contents.codeLicense.linkLabel && contents.codeLicense.url}",
    		ctx
    	});

    	return block;
    }

    // (69:8) {#if contents.codeLicense.linkLabel && contents.codeLicense.url}
    function create_if_block_2$1(ctx) {
    	let a;
    	let t0_value = /*contents*/ ctx[0].codeLicense.linkLabel + "";
    	let t0;
    	let a_href_value;
    	let a_style_value;
    	let t1;

    	const block = {
    		c: function create() {
    			a = element("a");
    			t0 = text$1(t0_value);
    			t1 = text$1("から入手して利用できます。");
    			attr_dev(a, "href", a_href_value = /*contents*/ ctx[0].codeLicense.url);

    			attr_dev(a, "style", a_style_value = /*contents*/ ctx[0].anchorColor
    			? `color: ${/*contents*/ ctx[0].anchorColor}`
    			: "");

    			add_location(a, file$7, 69, 10, 3343);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			append_dev(a, t0);
    			insert_dev(target, t1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*contents*/ 1 && t0_value !== (t0_value = /*contents*/ ctx[0].codeLicense.linkLabel + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*contents*/ 1 && a_href_value !== (a_href_value = /*contents*/ ctx[0].codeLicense.url)) {
    				attr_dev(a, "href", a_href_value);
    			}

    			if (dirty & /*contents*/ 1 && a_style_value !== (a_style_value = /*contents*/ ctx[0].anchorColor
    			? `color: ${/*contents*/ ctx[0].anchorColor}`
    			: "")) {
    				attr_dev(a, "style", a_style_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (detaching) detach_dev(t1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(69:8) {#if contents.codeLicense.linkLabel && contents.codeLicense.url}",
    		ctx
    	});

    	return block;
    }

    // (75:2) {#if contents.assetsLicense.ccType}
    function create_if_block$4(ctx) {
    	let section0;
    	let div0;
    	let a0;
    	let img0;
    	let img0_src_value;
    	let a0_href_value;
    	let t0;
    	let a1;
    	let t1;

    	let t2_value = (/*contents*/ ctx[0].assetsLicense.ccType.match(/by/i)
    	? "Attribution"
    	: "") + "";

    	let t2;

    	let t3_value = (/*contents*/ ctx[0].assetsLicense.ccType.match(/-/gi).length >= 1
    	? "-"
    	: "") + "";

    	let t3;

    	let t4_value = (/*contents*/ ctx[0].assetsLicense.ccType.match(/nc/i)
    	? "NonCommercial"
    	: "") + "";

    	let t4;

    	let t5_value = (/*contents*/ ctx[0].assetsLicense.ccType.match(/-/gi).length >= 2
    	? "-"
    	: "") + "";

    	let t5;

    	let t6_value = (/*contents*/ ctx[0].assetsLicense.ccType.match(/nd/i)
    	? "NoDerivatives"
    	: "") + "";

    	let t6;

    	let t7_value = (/*contents*/ ctx[0].assetsLicense.ccType.match(/-/gi).length >= 3
    	? "-"
    	: "") + "";

    	let t7;

    	let t8_value = (/*contents*/ ctx[0].assetsLicense.ccType.match(/sa/i)
    	? "ShareAlike"
    	: "") + "";

    	let t8;
    	let t9;
    	let a1_href_value;
    	let a1_style_value;
    	let t10;
    	let t11;
    	let section1;
    	let div1;
    	let a2;
    	let img1;
    	let img1_src_value;
    	let a2_href_value;
    	let t12;
    	let a3;
    	let t13;

    	let t14_value = (/*contents*/ ctx[0].assetsLicense.ccType.match(/by/i)
    	? "表示"
    	: "") + "";

    	let t14;

    	let t15_value = (/*contents*/ ctx[0].assetsLicense.ccType.match(/-/gi).length >= 1
    	? " - "
    	: "") + "";

    	let t15;

    	let t16_value = (/*contents*/ ctx[0].assetsLicense.ccType.match(/nc/i)
    	? "非営利"
    	: "") + "";

    	let t16;

    	let t17_value = (/*contents*/ ctx[0].assetsLicense.ccType.match(/-/gi).length >= 2
    	? " - "
    	: "") + "";

    	let t17;

    	let t18_value = (/*contents*/ ctx[0].assetsLicense.ccType.match(/nd/i)
    	? "改変禁止"
    	: "") + "";

    	let t18;

    	let t19_value = (/*contents*/ ctx[0].assetsLicense.ccType.match(/-/gi).length >= 3
    	? " - "
    	: "") + "";

    	let t19;

    	let t20_value = (/*contents*/ ctx[0].assetsLicense.ccType.match(/sa/i)
    	? "継承"
    	: "") + "";

    	let t20;
    	let t21;
    	let a3_style_value;
    	let t22;

    	const block = {
    		c: function create() {
    			section0 = element("section");
    			div0 = element("div");
    			a0 = element("a");
    			img0 = element("img");
    			t0 = text$1("All non-source code resources such as images and videos are licensed under a ");
    			a1 = element("a");
    			t1 = text$1("Creative Commons ");
    			t2 = text$1(t2_value);
    			t3 = text$1(t3_value);
    			t4 = text$1(t4_value);
    			t5 = text$1(t5_value);
    			t6 = text$1(t6_value);
    			t7 = text$1(t7_value);
    			t8 = text$1(t8_value);
    			t9 = text$1(" 4.0 International License");
    			t10 = text$1(".");
    			t11 = space();
    			section1 = element("section");
    			div1 = element("div");
    			a2 = element("a");
    			img1 = element("img");
    			t12 = text$1("全てのソースコード以外の画像や動画などのリソースは ");
    			a3 = element("a");
    			t13 = text$1("クリエイティブ・コモンズ ");
    			t14 = text$1(t14_value);
    			t15 = text$1(t15_value);
    			t16 = text$1(t16_value);
    			t17 = text$1(t17_value);
    			t18 = text$1(t18_value);
    			t19 = text$1(t19_value);
    			t20 = text$1(t20_value);
    			t21 = text$1(" 4.0 国際 ライセンス");
    			t22 = text$1("の下に提供されています。");
    			attr_dev(img0, "alt", "Creative Commons License");
    			set_style(img0, "border-width", "0");
    			set_style(img0, "display", "inline-block");
    			set_style(img0, "vertical-align", "middle");
    			set_style(img0, "margin-right", "1ch");
    			if (img0.src !== (img0_src_value = "https://i.creativecommons.org/l/" + /*contents*/ ctx[0].assetsLicense.ccType + "/4.0/80x15.png")) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "width", "80");
    			attr_dev(img0, "height", "15");
    			attr_dev(img0, "loading", "lazy");
    			add_location(img0, file$7, 77, 105, 3743);
    			attr_dev(a0, "rel", "license");
    			attr_dev(a0, "href", a0_href_value = "http://creativecommons.org/licenses/" + /*contents*/ ctx[0].assetsLicense.ccType + "/4.0/");
    			add_location(a0, file$7, 77, 8, 3646);
    			attr_dev(a1, "rel", "license");
    			attr_dev(a1, "href", a1_href_value = "http://creativecommons.org/licenses/" + /*contents*/ ctx[0].assetsLicense.ccType + "/4.0/");

    			attr_dev(a1, "style", a1_style_value = /*contents*/ ctx[0].anchorColor
    			? `color: ${/*contents*/ ctx[0].anchorColor}`
    			: "");

    			add_location(a1, file$7, 77, 430, 4068);
    			add_location(div0, file$7, 76, 6, 3632);
    			attr_dev(section0, "class", "creative-commons svelte-13gzqik");
    			add_location(section0, file$7, 75, 4, 3591);
    			attr_dev(img1, "alt", "クリエイティブ・コモンズ・ライセンス");
    			set_style(img1, "border-width", "0");
    			set_style(img1, "display", "inline-block");
    			set_style(img1, "vertical-align", "middle");
    			set_style(img1, "margin-right", "1ch");
    			if (img1.src !== (img1_src_value = "https://i.creativecommons.org/l/" + /*contents*/ ctx[0].assetsLicense.ccType + "/4.0/80x15.png")) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "width", "80");
    			attr_dev(img1, "height", "15");
    			attr_dev(img1, "loading", "lazy");
    			add_location(img1, file$7, 82, 113, 4941);
    			attr_dev(a2, "rel", "license");
    			attr_dev(a2, "href", a2_href_value = "https://creativecommons.org/licenses/" + /*contents*/ ctx[0].assetsLicense.ccType + "/4.0/deed.ja");
    			add_location(a2, file$7, 82, 8, 4836);
    			attr_dev(a3, "rel", "license");
    			attr_dev(a3, "href", "https://creativecommons.org/licenses/by-nd/4.0/deed.ja");

    			attr_dev(a3, "style", a3_style_value = /*contents*/ ctx[0].anchorColor
    			? `color: ${/*contents*/ ctx[0].anchorColor}`
    			: "");

    			add_location(a3, file$7, 82, 381, 5209);
    			add_location(div1, file$7, 81, 6, 4822);
    			attr_dev(section1, "class", "creative-commons svelte-13gzqik");
    			add_location(section1, file$7, 80, 4, 4781);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section0, anchor);
    			append_dev(section0, div0);
    			append_dev(div0, a0);
    			append_dev(a0, img0);
    			append_dev(div0, t0);
    			append_dev(div0, a1);
    			append_dev(a1, t1);
    			append_dev(a1, t2);
    			append_dev(a1, t3);
    			append_dev(a1, t4);
    			append_dev(a1, t5);
    			append_dev(a1, t6);
    			append_dev(a1, t7);
    			append_dev(a1, t8);
    			append_dev(a1, t9);
    			append_dev(div0, t10);
    			insert_dev(target, t11, anchor);
    			insert_dev(target, section1, anchor);
    			append_dev(section1, div1);
    			append_dev(div1, a2);
    			append_dev(a2, img1);
    			append_dev(div1, t12);
    			append_dev(div1, a3);
    			append_dev(a3, t13);
    			append_dev(a3, t14);
    			append_dev(a3, t15);
    			append_dev(a3, t16);
    			append_dev(a3, t17);
    			append_dev(a3, t18);
    			append_dev(a3, t19);
    			append_dev(a3, t20);
    			append_dev(a3, t21);
    			append_dev(div1, t22);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*contents*/ 1 && img0.src !== (img0_src_value = "https://i.creativecommons.org/l/" + /*contents*/ ctx[0].assetsLicense.ccType + "/4.0/80x15.png")) {
    				attr_dev(img0, "src", img0_src_value);
    			}

    			if (dirty & /*contents*/ 1 && a0_href_value !== (a0_href_value = "http://creativecommons.org/licenses/" + /*contents*/ ctx[0].assetsLicense.ccType + "/4.0/")) {
    				attr_dev(a0, "href", a0_href_value);
    			}

    			if (dirty & /*contents*/ 1 && t2_value !== (t2_value = (/*contents*/ ctx[0].assetsLicense.ccType.match(/by/i)
    			? "Attribution"
    			: "") + "")) set_data_dev(t2, t2_value);

    			if (dirty & /*contents*/ 1 && t3_value !== (t3_value = (/*contents*/ ctx[0].assetsLicense.ccType.match(/-/gi).length >= 1
    			? "-"
    			: "") + "")) set_data_dev(t3, t3_value);

    			if (dirty & /*contents*/ 1 && t4_value !== (t4_value = (/*contents*/ ctx[0].assetsLicense.ccType.match(/nc/i)
    			? "NonCommercial"
    			: "") + "")) set_data_dev(t4, t4_value);

    			if (dirty & /*contents*/ 1 && t5_value !== (t5_value = (/*contents*/ ctx[0].assetsLicense.ccType.match(/-/gi).length >= 2
    			? "-"
    			: "") + "")) set_data_dev(t5, t5_value);

    			if (dirty & /*contents*/ 1 && t6_value !== (t6_value = (/*contents*/ ctx[0].assetsLicense.ccType.match(/nd/i)
    			? "NoDerivatives"
    			: "") + "")) set_data_dev(t6, t6_value);

    			if (dirty & /*contents*/ 1 && t7_value !== (t7_value = (/*contents*/ ctx[0].assetsLicense.ccType.match(/-/gi).length >= 3
    			? "-"
    			: "") + "")) set_data_dev(t7, t7_value);

    			if (dirty & /*contents*/ 1 && t8_value !== (t8_value = (/*contents*/ ctx[0].assetsLicense.ccType.match(/sa/i)
    			? "ShareAlike"
    			: "") + "")) set_data_dev(t8, t8_value);

    			if (dirty & /*contents*/ 1 && a1_href_value !== (a1_href_value = "http://creativecommons.org/licenses/" + /*contents*/ ctx[0].assetsLicense.ccType + "/4.0/")) {
    				attr_dev(a1, "href", a1_href_value);
    			}

    			if (dirty & /*contents*/ 1 && a1_style_value !== (a1_style_value = /*contents*/ ctx[0].anchorColor
    			? `color: ${/*contents*/ ctx[0].anchorColor}`
    			: "")) {
    				attr_dev(a1, "style", a1_style_value);
    			}

    			if (dirty & /*contents*/ 1 && img1.src !== (img1_src_value = "https://i.creativecommons.org/l/" + /*contents*/ ctx[0].assetsLicense.ccType + "/4.0/80x15.png")) {
    				attr_dev(img1, "src", img1_src_value);
    			}

    			if (dirty & /*contents*/ 1 && a2_href_value !== (a2_href_value = "https://creativecommons.org/licenses/" + /*contents*/ ctx[0].assetsLicense.ccType + "/4.0/deed.ja")) {
    				attr_dev(a2, "href", a2_href_value);
    			}

    			if (dirty & /*contents*/ 1 && t14_value !== (t14_value = (/*contents*/ ctx[0].assetsLicense.ccType.match(/by/i)
    			? "表示"
    			: "") + "")) set_data_dev(t14, t14_value);

    			if (dirty & /*contents*/ 1 && t15_value !== (t15_value = (/*contents*/ ctx[0].assetsLicense.ccType.match(/-/gi).length >= 1
    			? " - "
    			: "") + "")) set_data_dev(t15, t15_value);

    			if (dirty & /*contents*/ 1 && t16_value !== (t16_value = (/*contents*/ ctx[0].assetsLicense.ccType.match(/nc/i)
    			? "非営利"
    			: "") + "")) set_data_dev(t16, t16_value);

    			if (dirty & /*contents*/ 1 && t17_value !== (t17_value = (/*contents*/ ctx[0].assetsLicense.ccType.match(/-/gi).length >= 2
    			? " - "
    			: "") + "")) set_data_dev(t17, t17_value);

    			if (dirty & /*contents*/ 1 && t18_value !== (t18_value = (/*contents*/ ctx[0].assetsLicense.ccType.match(/nd/i)
    			? "改変禁止"
    			: "") + "")) set_data_dev(t18, t18_value);

    			if (dirty & /*contents*/ 1 && t19_value !== (t19_value = (/*contents*/ ctx[0].assetsLicense.ccType.match(/-/gi).length >= 3
    			? " - "
    			: "") + "")) set_data_dev(t19, t19_value);

    			if (dirty & /*contents*/ 1 && t20_value !== (t20_value = (/*contents*/ ctx[0].assetsLicense.ccType.match(/sa/i)
    			? "継承"
    			: "") + "")) set_data_dev(t20, t20_value);

    			if (dirty & /*contents*/ 1 && a3_style_value !== (a3_style_value = /*contents*/ ctx[0].anchorColor
    			? `color: ${/*contents*/ ctx[0].anchorColor}`
    			: "")) {
    				attr_dev(a3, "style", a3_style_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section0);
    			if (detaching) detach_dev(t11);
    			if (detaching) detach_dev(section1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(75:2) {#if contents.assetsLicense.ccType}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$7(ctx) {
    	let footer;
    	let t0;
    	let t1;
    	let footer_style_value;
    	let if_block0 = /*contents*/ ctx[0].copyright && create_if_block_4$1(ctx);
    	let if_block1 = /*contents*/ ctx[0].codeLicense && create_if_block_1$2(ctx);
    	let if_block2 = /*contents*/ ctx[0].assetsLicense.ccType && create_if_block$4(ctx);

    	const block = {
    		c: function create() {
    			footer = element("footer");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();

    			attr_dev(footer, "style", footer_style_value = "--itemsCount: " + /*func*/ ctx[2]() + ";" + (/*contents*/ ctx[0].transparent || /*contents*/ ctx[0].backgroundColor
    			? `--ui-bg: ${/*contents*/ ctx[0].transparent
				? "transparent"
				: /*contents*/ ctx[0].backgroundColor};`
    			: ""));

    			attr_dev(footer, "class", "svelte-13gzqik");
    			add_location(footer, file$7, 40, 0, 1702);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, footer, anchor);
    			if (if_block0) if_block0.m(footer, null);
    			append_dev(footer, t0);
    			if (if_block1) if_block1.m(footer, null);
    			append_dev(footer, t1);
    			if (if_block2) if_block2.m(footer, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*contents*/ ctx[0].copyright) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_4$1(ctx);
    					if_block0.c();
    					if_block0.m(footer, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*contents*/ ctx[0].codeLicense) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_1$2(ctx);
    					if_block1.c();
    					if_block1.m(footer, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*contents*/ ctx[0].assetsLicense.ccType) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block$4(ctx);
    					if_block2.c();
    					if_block2.m(footer, null);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (dirty & /*contents*/ 1 && footer_style_value !== (footer_style_value = "--itemsCount: " + /*func*/ ctx[2]() + ";" + (/*contents*/ ctx[0].transparent || /*contents*/ ctx[0].backgroundColor
    			? `--ui-bg: ${/*contents*/ ctx[0].transparent
				? "transparent"
				: /*contents*/ ctx[0].backgroundColor};`
    			: ""))) {
    				attr_dev(footer, "style", footer_style_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(footer);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Footer", slots, []);
    	let { contents } = $$props;

    	const licenses = {
    		"afl-3.0": "Academic Free License v3.0",
    		"apache-2.0": "Apache license 2.0",
    		"artistic-2.0": "Artistic license 2.0",
    		"bsl-1.0": "Boost Software License 1.0",
    		"bsd-2-clause": "BSD 2-clause \"Simplified\" license",
    		"bsd-3-clause": "BSD 3-clause \"New\" or \"Revised\" license",
    		"bsd-3-clause-clear": "BSD 3-clause Clear license",
    		"cc": "Creative Commons license family",
    		"cc0-1.0": "Creative Commons Zero v1.0 Universal",
    		"cc-by-4.0": "Creative Commons Attribution 4.0",
    		"cc-by-sa-4.0": "Creative Commons Attribution Share Alike 4.0",
    		"wtfpl": "Do What The F*ck You Want To Public License",
    		"ecl-2.0": "Educational Community License v2.0",
    		"epl-1.0": "Eclipse Public License 1.0",
    		"epl-2.0": "Eclipse Public License 2.0",
    		"eupl-1.1": "European Union Public License 1.1",
    		"agpl-3.0": "GNU Affero General Public License v3.0",
    		"gpl": "GNU General Public License family",
    		"gpl-2.0": "GNU General Public License v2.0",
    		"gpl-3.0": "GNU General Public License v3.0",
    		"lgpl": "GNU Lesser General Public License family",
    		"lgpl-2.1": "GNU Lesser General Public License v2.1",
    		"lgpl-3.0": "GNU Lesser General Public License v3.0",
    		"isc": "ISC",
    		"lppl-1.3c": "LaTeX Project Public License v1.3c",
    		"ms-pl": "Microsoft Public License",
    		"mit": "MIT",
    		"mpl-2.0": "Mozilla Public License 2.0",
    		"osl-3.0": "Open Software License 3.0",
    		"postgresql": "PostgreSQL License",
    		"ofl-1.1": "SIL Open Font License 1.1",
    		"ncsa": "University of Illinois/NCSA Open Source License",
    		"unlicense": "The Unlicense",
    		"zlib": "zLib License"
    	};

    	const writable_props = ["contents"];

    	Object_1$1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Footer> was created with unknown prop '${key}'`);
    	});

    	const func = () => {
    		let count = 0;
    		Object.keys(contents).forEach(v => count += v == "copyright" ? 1 : 2);
    		return count;
    	};

    	$$self.$$set = $$props => {
    		if ("contents" in $$props) $$invalidate(0, contents = $$props.contents);
    	};

    	$$self.$capture_state = () => ({ contents, licenses });

    	$$self.$inject_state = $$props => {
    		if ("contents" in $$props) $$invalidate(0, contents = $$props.contents);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [contents, licenses, func];
    }

    class Footer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$7, create_fragment$7, safe_not_equal, { contents: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Footer",
    			options,
    			id: create_fragment$7.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*contents*/ ctx[0] === undefined && !("contents" in props)) {
    			console.warn("<Footer> was created without expected prop 'contents'");
    		}
    	}

    	get contents() {
    		throw new Error("<Footer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set contents(value) {
    		throw new Error("<Footer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/cards.svelte generated by Svelte v3.38.2 */
    const file$6 = "src/components/cards.svelte";

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[11] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[14] = list[i];
    	return child_ctx;
    }

    function get_each_context_2$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[17] = list[i];
    	return child_ctx;
    }

    // (62:10) {#if card.imageId}
    function create_if_block$3(ctx) {
    	let div;
    	let picture;
    	let current;

    	picture = new Picture({
    			props: {
    				imgClass: "card_left-img card_img",
    				contents: /*contents*/ ctx[0],
    				globalSettings: /*globalSettings*/ ctx[1],
    				imageId: /*card*/ ctx[11].imageId,
    				sizes: "(min-aspect-ratio: 16/9) " + /*standardWidth*/ ctx[2] / 3 / 3 + "vw, " + /*standardWidth*/ ctx[2] / 2 / 3 + "vw, (max-aspect-ratio: 1/1) " + /*standardWidth*/ ctx[2] * 0.8 / 3 + "vw, (max-aspect-ratio: 3/4) " + /*standardWidth*/ ctx[2] / 3 + "vw",
    				width: "1",
    				height: "1"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(picture.$$.fragment);
    			attr_dev(div, "class", "left svelte-uyh0sc");
    			add_location(div, file$6, 62, 12, 2618);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(picture, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const picture_changes = {};
    			if (dirty & /*contents*/ 1) picture_changes.contents = /*contents*/ ctx[0];
    			if (dirty & /*globalSettings*/ 2) picture_changes.globalSettings = /*globalSettings*/ ctx[1];
    			if (dirty & /*contents*/ 1) picture_changes.imageId = /*card*/ ctx[11].imageId;
    			if (dirty & /*standardWidth*/ 4) picture_changes.sizes = "(min-aspect-ratio: 16/9) " + /*standardWidth*/ ctx[2] / 3 / 3 + "vw, " + /*standardWidth*/ ctx[2] / 2 / 3 + "vw, (max-aspect-ratio: 1/1) " + /*standardWidth*/ ctx[2] * 0.8 / 3 + "vw, (max-aspect-ratio: 3/4) " + /*standardWidth*/ ctx[2] / 3 + "vw";
    			picture.$set(picture_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(picture.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(picture.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(picture);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(62:10) {#if card.imageId}",
    		ctx
    	});

    	return block;
    }

    // (70:14) {#each card.post as post}
    function create_each_block_2$1(ctx) {
    	let span;
    	let t_value = /*post*/ ctx[17] + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text$1(t_value);
    			attr_dev(span, "class", "svelte-uyh0sc");
    			add_location(span, file$6, 70, 16, 3186);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*contents*/ 1 && t_value !== (t_value = /*post*/ ctx[17] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2$1.name,
    		type: "each",
    		source: "(70:14) {#each card.post as post}",
    		ctx
    	});

    	return block;
    }

    // (81:10) {#each card.accounts as account}
    function create_each_block_1$1(ctx) {
    	let a;
    	let img;
    	let img_src_value;
    	let img_alt_value;
    	let img_width_value;
    	let img_height_value;
    	let t0;
    	let span;
    	let t1_value = /*account*/ ctx[14].id + "";
    	let t1;
    	let t2;
    	let a_class_value;
    	let a_href_value;

    	const block = {
    		c: function create() {
    			a = element("a");
    			img = element("img");
    			t0 = space();
    			span = element("span");
    			t1 = text$1(t1_value);
    			t2 = space();

    			if (img.src !== (img_src_value = "" + (/*globalSettings*/ ctx[1].imageDirectory + (/*account*/ ctx[14].name == "youtube"
    			? "youtube-white"
    			: /*account*/ ctx[14].name) + ".svg"))) attr_dev(img, "src", img_src_value);

    			attr_dev(img, "alt", img_alt_value = "" + (/*account*/ ctx[14].name + "のアイコン"));
    			attr_dev(img, "width", img_width_value = /*socialConsts*/ ctx[7].aspectRatios[/*account*/ ctx[14].name].width);
    			attr_dev(img, "height", img_height_value = /*socialConsts*/ ctx[7].aspectRatios[/*account*/ ctx[14].name].height);
    			attr_dev(img, "class", "svelte-uyh0sc");
    			add_location(img, file$6, 83, 14, 4095);
    			attr_dev(span, "class", "id svelte-uyh0sc");
    			add_location(span, file$6, 84, 14, 4353);
    			attr_dev(a, "class", a_class_value = "social-button " + /*account*/ ctx[14].name + " " + (/*card*/ ctx[11].accounts.length > 2 ? "iconOnly" : "") + " svelte-uyh0sc");

    			attr_dev(a, "href", a_href_value = /*account*/ ctx[14].customUrl
    			? /*account*/ ctx[14].customUrl
    			: `https://${/*socialConsts*/ ctx[7].urls[/*account*/ ctx[14].name]}/${/*account*/ ctx[14].id}`);

    			set_style(a, "--popupContent", "'" + ((/*account*/ ctx[14].name == "twitter" ? "@" : "") + /*account*/ ctx[14].id) + "'");
    			add_location(a, file$6, 81, 12, 3795);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			append_dev(a, img);
    			append_dev(a, t0);
    			append_dev(a, span);
    			append_dev(span, t1);
    			append_dev(a, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*globalSettings, contents*/ 3 && img.src !== (img_src_value = "" + (/*globalSettings*/ ctx[1].imageDirectory + (/*account*/ ctx[14].name == "youtube"
    			? "youtube-white"
    			: /*account*/ ctx[14].name) + ".svg"))) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty & /*contents*/ 1 && img_alt_value !== (img_alt_value = "" + (/*account*/ ctx[14].name + "のアイコン"))) {
    				attr_dev(img, "alt", img_alt_value);
    			}

    			if (dirty & /*contents*/ 1 && img_width_value !== (img_width_value = /*socialConsts*/ ctx[7].aspectRatios[/*account*/ ctx[14].name].width)) {
    				attr_dev(img, "width", img_width_value);
    			}

    			if (dirty & /*contents*/ 1 && img_height_value !== (img_height_value = /*socialConsts*/ ctx[7].aspectRatios[/*account*/ ctx[14].name].height)) {
    				attr_dev(img, "height", img_height_value);
    			}

    			if (dirty & /*contents*/ 1 && t1_value !== (t1_value = /*account*/ ctx[14].id + "")) set_data_dev(t1, t1_value);

    			if (dirty & /*contents*/ 1 && a_class_value !== (a_class_value = "social-button " + /*account*/ ctx[14].name + " " + (/*card*/ ctx[11].accounts.length > 2 ? "iconOnly" : "") + " svelte-uyh0sc")) {
    				attr_dev(a, "class", a_class_value);
    			}

    			if (dirty & /*contents*/ 1 && a_href_value !== (a_href_value = /*account*/ ctx[14].customUrl
    			? /*account*/ ctx[14].customUrl
    			: `https://${/*socialConsts*/ ctx[7].urls[/*account*/ ctx[14].name]}/${/*account*/ ctx[14].id}`)) {
    				attr_dev(a, "href", a_href_value);
    			}

    			if (dirty & /*contents*/ 1) {
    				set_style(a, "--popupContent", "'" + ((/*account*/ ctx[14].name == "twitter" ? "@" : "") + /*account*/ ctx[14].id) + "'");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$1.name,
    		type: "each",
    		source: "(81:10) {#each card.accounts as account}",
    		ctx
    	});

    	return block;
    }

    // (32:2) {#each contents.cards as card}
    function create_each_block$3(ctx) {
    	let div9;
    	let div7;
    	let div5;
    	let t0;
    	let div4;
    	let div0;
    	let t1_value = /*card*/ ctx[11].name + "";
    	let t1;
    	let t2;
    	let div1;
    	let t3;
    	let div3;
    	let div2;
    	let t4;
    	let picture0;
    	let div4_class_value;
    	let t5;
    	let div6;
    	let t6;
    	let div8;
    	let picture1;
    	let t7;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = /*card*/ ctx[11].imageId && create_if_block$3(ctx);
    	let each_value_2 = /*card*/ ctx[11].post;
    	validate_each_argument(each_value_2);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks_1[i] = create_each_block_2$1(get_each_context_2$1(ctx, each_value_2, i));
    	}

    	picture0 = new Picture({
    			props: {
    				imgClass: "card_img",
    				contents: /*contents*/ ctx[0],
    				globalSettings: /*globalSettings*/ ctx[1],
    				imageDirectory: /*globalSettings*/ ctx[1].imageDirectory,
    				imageId: /*contents*/ ctx[0].logoImageId,
    				imageExtensionsShort: /*contents*/ ctx[0].logoImageExtensionsShort,
    				sizes: "" + (3 * /*ch*/ ctx[4] + "px"),
    				width: /*contents*/ ctx[0].logoAspectRatio.width,
    				height: /*contents*/ ctx[0].logoAspectRatio.height
    			},
    			$$inline: true
    		});

    	let each_value_1 = /*card*/ ctx[11].accounts;
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
    	}

    	picture1 = new Picture({
    			props: {
    				pictureClass: "backface_logo_picture",
    				imgClass: "backface_logo",
    				contents: /*contents*/ ctx[0],
    				globalSettings: /*globalSettings*/ ctx[1],
    				imageDirectory: /*globalSettings*/ ctx[1].imageDirectory,
    				imageId: /*contents*/ ctx[0].backfaceLogoImageId,
    				imageExtensionsShort: /*contents*/ ctx[0].backfaceLogoImageExtensionsShort,
    				width: /*contents*/ ctx[0].backfaceLogoAspectRatio.width,
    				height: /*contents*/ ctx[0].backfaceLogoAspectRatio.height
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div9 = element("div");
    			div7 = element("div");
    			div5 = element("div");
    			if (if_block) if_block.c();
    			t0 = space();
    			div4 = element("div");
    			div0 = element("div");
    			t1 = text$1(t1_value);
    			t2 = space();
    			div1 = element("div");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t3 = space();
    			div3 = element("div");
    			div2 = element("div");
    			t4 = space();
    			create_component(picture0.$$.fragment);
    			t5 = space();
    			div6 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t6 = space();
    			div8 = element("div");
    			create_component(picture1.$$.fragment);
    			t7 = space();
    			attr_dev(div0, "class", "name svelte-uyh0sc");
    			add_location(div0, file$6, 67, 12, 3063);
    			attr_dev(div1, "class", "post svelte-uyh0sc");
    			add_location(div1, file$6, 68, 12, 3111);
    			set_style(div2, "opacity", "0");
    			set_style(div2, "width", "1ch");
    			add_location(div2, file$6, 74, 14, 3292);
    			attr_dev(div3, "class", "logo svelte-uyh0sc");
    			add_location(div3, file$6, 73, 12, 3259);
    			attr_dev(div4, "class", div4_class_value = "right " + (/*card*/ ctx[11].imageId ? "" : "noImage") + " svelte-uyh0sc");
    			add_location(div4, file$6, 66, 10, 2999);
    			attr_dev(div5, "class", "upper svelte-uyh0sc");
    			add_location(div5, file$6, 60, 8, 2557);
    			attr_dev(div6, "class", "lower svelte-uyh0sc");
    			add_location(div6, file$6, 79, 8, 3720);
    			attr_dev(div7, "class", "card svelte-uyh0sc");
    			add_location(div7, file$6, 59, 6, 2530);
    			attr_dev(div8, "class", "backface svelte-uyh0sc");
    			add_location(div8, file$6, 91, 6, 4491);
    			attr_dev(div9, "class", "card_wrapper svelte-uyh0sc");
    			set_style(div9, "--backfaceColor", /*card*/ ctx[11].backfaceColor);
    			set_style(div9, "--backfaceLogoBrightness", /*card*/ ctx[11].backfaceLogoBrightness);
    			add_location(div9, file$6, 32, 4, 1082);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div9, anchor);
    			append_dev(div9, div7);
    			append_dev(div7, div5);
    			if (if_block) if_block.m(div5, null);
    			append_dev(div5, t0);
    			append_dev(div5, div4);
    			append_dev(div4, div0);
    			append_dev(div0, t1);
    			append_dev(div4, t2);
    			append_dev(div4, div1);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(div1, null);
    			}

    			append_dev(div4, t3);
    			append_dev(div4, div3);
    			append_dev(div3, div2);
    			/*div2_binding*/ ctx[8](div2);
    			append_dev(div3, t4);
    			mount_component(picture0, div3, null);
    			append_dev(div7, t5);
    			append_dev(div7, div6);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div6, null);
    			}

    			append_dev(div9, t6);
    			append_dev(div9, div8);
    			mount_component(picture1, div8, null);
    			append_dev(div9, t7);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div9, "mousemove", /*mousemove_handler*/ ctx[9], false, false, false),
    					listen_dev(div9, "click", /*click_handler*/ ctx[10], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (/*card*/ ctx[11].imageId) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*contents*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$3(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div5, t0);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if ((!current || dirty & /*contents*/ 1) && t1_value !== (t1_value = /*card*/ ctx[11].name + "")) set_data_dev(t1, t1_value);

    			if (dirty & /*contents*/ 1) {
    				each_value_2 = /*card*/ ctx[11].post;
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2$1(ctx, each_value_2, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_2$1(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(div1, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_2.length;
    			}

    			const picture0_changes = {};
    			if (dirty & /*contents*/ 1) picture0_changes.contents = /*contents*/ ctx[0];
    			if (dirty & /*globalSettings*/ 2) picture0_changes.globalSettings = /*globalSettings*/ ctx[1];
    			if (dirty & /*globalSettings*/ 2) picture0_changes.imageDirectory = /*globalSettings*/ ctx[1].imageDirectory;
    			if (dirty & /*contents*/ 1) picture0_changes.imageId = /*contents*/ ctx[0].logoImageId;
    			if (dirty & /*contents*/ 1) picture0_changes.imageExtensionsShort = /*contents*/ ctx[0].logoImageExtensionsShort;
    			if (dirty & /*ch*/ 16) picture0_changes.sizes = "" + (3 * /*ch*/ ctx[4] + "px");
    			if (dirty & /*contents*/ 1) picture0_changes.width = /*contents*/ ctx[0].logoAspectRatio.width;
    			if (dirty & /*contents*/ 1) picture0_changes.height = /*contents*/ ctx[0].logoAspectRatio.height;
    			picture0.$set(picture0_changes);

    			if (!current || dirty & /*contents*/ 1 && div4_class_value !== (div4_class_value = "right " + (/*card*/ ctx[11].imageId ? "" : "noImage") + " svelte-uyh0sc")) {
    				attr_dev(div4, "class", div4_class_value);
    			}

    			if (dirty & /*contents, socialConsts, globalSettings*/ 131) {
    				each_value_1 = /*card*/ ctx[11].accounts;
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div6, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}

    			const picture1_changes = {};
    			if (dirty & /*contents*/ 1) picture1_changes.contents = /*contents*/ ctx[0];
    			if (dirty & /*globalSettings*/ 2) picture1_changes.globalSettings = /*globalSettings*/ ctx[1];
    			if (dirty & /*globalSettings*/ 2) picture1_changes.imageDirectory = /*globalSettings*/ ctx[1].imageDirectory;
    			if (dirty & /*contents*/ 1) picture1_changes.imageId = /*contents*/ ctx[0].backfaceLogoImageId;
    			if (dirty & /*contents*/ 1) picture1_changes.imageExtensionsShort = /*contents*/ ctx[0].backfaceLogoImageExtensionsShort;
    			if (dirty & /*contents*/ 1) picture1_changes.width = /*contents*/ ctx[0].backfaceLogoAspectRatio.width;
    			if (dirty & /*contents*/ 1) picture1_changes.height = /*contents*/ ctx[0].backfaceLogoAspectRatio.height;
    			picture1.$set(picture1_changes);

    			if (!current || dirty & /*contents*/ 1) {
    				set_style(div9, "--backfaceColor", /*card*/ ctx[11].backfaceColor);
    			}

    			if (!current || dirty & /*contents*/ 1) {
    				set_style(div9, "--backfaceLogoBrightness", /*card*/ ctx[11].backfaceLogoBrightness);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			transition_in(picture0.$$.fragment, local);
    			transition_in(picture1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			transition_out(picture0.$$.fragment, local);
    			transition_out(picture1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div9);
    			if (if_block) if_block.d();
    			destroy_each(each_blocks_1, detaching);
    			/*div2_binding*/ ctx[8](null);
    			destroy_component(picture0);
    			destroy_each(each_blocks, detaching);
    			destroy_component(picture1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(32:2) {#each contents.cards as card}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$6(ctx) {
    	let div;
    	let current;
    	let each_value = /*contents*/ ctx[0].cards;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "card_container svelte-uyh0sc");
    			set_style(div, "--rotateX", /*rotateX*/ ctx[5] + "deg");
    			set_style(div, "--rotateY", /*rotateY*/ ctx[6] + "deg");
    			add_location(div, file$6, 30, 0, 959);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*contents, rotateX, rotateY, setTimeout, globalSettings, socialConsts, ch, ch2px, standardWidth*/ 255) {
    				each_value = /*contents*/ ctx[0].cards;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$3(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$3(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (!current || dirty & /*rotateX*/ 32) {
    				set_style(div, "--rotateX", /*rotateX*/ ctx[5] + "deg");
    			}

    			if (!current || dirty & /*rotateY*/ 64) {
    				set_style(div, "--rotateY", /*rotateY*/ ctx[6] + "deg");
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Cards", slots, []);

    	let { contents } = $$props,
    		{ globalSettings } = $$props,
    		{ standardWidth } = $$props;

    	const socialConsts = {
    		urls: {
    			"twitter": "twitter.com",
    			"facebook": "facebook.com",
    			"note": "note.com",
    			"github": "github.com",
    			"qiita": "qiita.com",
    			"youtube": "www.youtube.com/c",
    			"lastfm": "www.last.fm/ja/user"
    		},
    		aspectRatios: {
    			"twitter": { width: 2499, height: 2032 },
    			"facebook": { width: 971, height: 965 },
    			"note": { width: 167, height: 188 },
    			"github": { width: 362, height: 354 },
    			"qiita": { width: 1, height: 1 },
    			"youtube": { width: 44, height: 31 },
    			"lastfm": { width: 70877, height: 17833 }
    		}
    	};

    	let ch2px, ch, rotateX, rotateY;

    	onMount(() => {
    		$$invalidate(4, ch = ch2px.getBoundingClientRect().width);
    	});

    	const writable_props = ["contents", "globalSettings", "standardWidth"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Cards> was created with unknown prop '${key}'`);
    	});

    	function div2_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			ch2px = $$value;
    			$$invalidate(3, ch2px);
    		});
    	}

    	const mousemove_handler = e => {
    		const cardClass = e.currentTarget.querySelector(".card").classList;

    		if (!cardClass.contains("isFliping")) {
    			$$invalidate(5, rotateX = ((e.clientY - e.currentTarget.getBoundingClientRect().top) / (e.currentTarget.getBoundingClientRect().height / 2) - 1) * 10);
    			$$invalidate(6, rotateY = ((e.clientX - e.currentTarget.getBoundingClientRect().left) / (e.currentTarget.getBoundingClientRect().width / 2) - 1) * -10 + (cardClass.contains("fliped") ? 180 : 0));
    		}
    	};

    	const click_handler = e => {
    		const cardClass = e.currentTarget.querySelector(".card").classList;
    		const backfaceClass = e.currentTarget.querySelector(".backface").classList;

    		if (!cardClass.contains("isFliping") && !e.currentTarget.querySelector(".card .lower").contains(e.target)) {
    			cardClass.add("isFliping");
    			backfaceClass.add("isFliping");

    			setTimeout(
    				() => {
    					cardClass.remove("isFliping");
    					backfaceClass.remove("isFliping");
    					cardClass[!cardClass.contains("fliped") ? "add" : "remove"]("fliped");
    					backfaceClass[!backfaceClass.contains("fliped") ? "add" : "remove"]("fliped");
    					$$invalidate(6, rotateY += 180);
    				},
    				600
    			);
    		}
    	};

    	$$self.$$set = $$props => {
    		if ("contents" in $$props) $$invalidate(0, contents = $$props.contents);
    		if ("globalSettings" in $$props) $$invalidate(1, globalSettings = $$props.globalSettings);
    		if ("standardWidth" in $$props) $$invalidate(2, standardWidth = $$props.standardWidth);
    	};

    	$$self.$capture_state = () => ({
    		contents,
    		globalSettings,
    		standardWidth,
    		Picture,
    		onMount,
    		socialConsts,
    		ch2px,
    		ch,
    		rotateX,
    		rotateY
    	});

    	$$self.$inject_state = $$props => {
    		if ("contents" in $$props) $$invalidate(0, contents = $$props.contents);
    		if ("globalSettings" in $$props) $$invalidate(1, globalSettings = $$props.globalSettings);
    		if ("standardWidth" in $$props) $$invalidate(2, standardWidth = $$props.standardWidth);
    		if ("ch2px" in $$props) $$invalidate(3, ch2px = $$props.ch2px);
    		if ("ch" in $$props) $$invalidate(4, ch = $$props.ch);
    		if ("rotateX" in $$props) $$invalidate(5, rotateX = $$props.rotateX);
    		if ("rotateY" in $$props) $$invalidate(6, rotateY = $$props.rotateY);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		contents,
    		globalSettings,
    		standardWidth,
    		ch2px,
    		ch,
    		rotateX,
    		rotateY,
    		socialConsts,
    		div2_binding,
    		mousemove_handler,
    		click_handler
    	];
    }

    class Cards extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$6, create_fragment$6, safe_not_equal, {
    			contents: 0,
    			globalSettings: 1,
    			standardWidth: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Cards",
    			options,
    			id: create_fragment$6.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*contents*/ ctx[0] === undefined && !("contents" in props)) {
    			console.warn("<Cards> was created without expected prop 'contents'");
    		}

    		if (/*globalSettings*/ ctx[1] === undefined && !("globalSettings" in props)) {
    			console.warn("<Cards> was created without expected prop 'globalSettings'");
    		}

    		if (/*standardWidth*/ ctx[2] === undefined && !("standardWidth" in props)) {
    			console.warn("<Cards> was created without expected prop 'standardWidth'");
    		}
    	}

    	get contents() {
    		throw new Error("<Cards>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set contents(value) {
    		throw new Error("<Cards>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get globalSettings() {
    		throw new Error("<Cards>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set globalSettings(value) {
    		throw new Error("<Cards>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get standardWidth() {
    		throw new Error("<Cards>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set standardWidth(value) {
    		throw new Error("<Cards>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const settings = [
      {
        sectionType: 'navHeader',
        themeColor: '#fff',
        contents: {
          imageId: 'ssm-logo-landscape',
          aspectRatio: { width: 157213, height: 60041 },
          imageExtensionsShort: ['svg'],
          items: [
            {id: 'top', label: '作品'},
            {id: 'news', label: 'ニュース'},
            {id: 'about', label: 'チームについて'},
            {id: 'members', label: 'メンバー'}
          ]
        }
      },
      {
        sectionType: 'slideHero',
        pairId: 'hero',
      },
      {
        sectionType: 'slideDesc',
        pairId: 'hero',
        isParent: true,
        contents: {
          articles: [
            {
              title: 'れーぞく！ネクロマンスちゃん',
              subtitle: 'れーぞく全方位シューティングゲーム',
              themeColor: '#ed773e',
              imageId: 'necromance_ss',
              alt: 'れーぞく！ネクロマンスちゃんのプレイ画面',
              aspectRatio: {width: 16, height: 9},
              description: [
                'スーパースターマイン第一作目のSTG。',
                '敵弾をスレスレでかわすことで強大な必殺技をブッ放せる、という『れーぞくシステム』を搭載。リスクとリターンの取捨選択に手に汗握る、白熱したバトルを楽しめる。',
                'ストーリーや世界観をこだわり抜き、カットイン映像やボイス付きシナリオパートといったリッチな表現にも挑戦。',
                'ゲームクリエイター甲子園2020にて総合大賞3位、審査員特別賞、話題賞受賞。コミックマーケット97、デジゲー博2020に出展。',
                'Boothにて体験版を配信中。'
              ],
              buttons: [
                {
                  popup: '今すぐアクセス',
                  title: '公式サイトに行く',
                  target: '/necromance/',
                  spaMode: true
                }
              ],
              slides: [
                {
                  type: 'youtube',
                  id: 'foh7rj5YI_E'
                }
              ],
              specs: {
                times: [
                  {
                    year: '2019',
                    month: '8',
                    annotation: '〜',
                  }
                ],
                platforms: [
                  {
                    name: 'Windows',
                    version: '7',
                    orLater: true
                  },
                  {
                    name: 'macOS',
                    version: 'Sierra',
                    orLater: true
                  }
                ]
              }
            },
            {
              title: 'SPINNER',
              subtitle: '新感覚ホッケーアクションゲーム',
              themeColor: '#464646',
              imageId: 'spinner_ss',
              alt: 'SPINNERのプレイ画面',
              aspectRatio: {width: 16, height: 9},
              description: [
                'ハンドルコントローラーを用いて戦う1vs1のホッケーゲーム。',
                'ゴールがなく、パックが端のラインを超えると対となるラインにワープするという仕様が特徴。',
                'GCGEXPO2019にて総合優勝。',
                '2020年2月に開催され、200名近くの業界人が参加したゲーム業界年始あいさつ会では体験会を開催し、プロクリエイターの方々から建設的なフィードバックをいただいた。'
              ],
              buttons: [
                {
                  title: '紹介記事を読む',
                  target: 'https://game.creators-guild.com/g4c/%e3%82%b2%e3%83%bc%e3%83%a0%e6%a5%ad%e7%95%8c%e4%ba%a4%e6%b5%81%e4%bc%9a%e3%81%ab%e6%bd%9c%e5%85%a5%ef%bc%81/'
                }
              ],
              specs: {
                times: [
                  {
                    year: '2019',
                    month: '11',
                    annotation: '(2週間)',
                  }
                ],
                platforms: [
                  {
                    name: 'Windows',
                    version: '7',
                    orLater: true
                  },
                  {
                    name: 'macOS',
                    version: 'Sierra',
                    orLater: true
                  }
                ]
              }
            },
            {
              title: 'CUPRUNMEN',
              subtitle: 'VRMタイムアタックランゲーム',
              themeColor: '#b56c4e',
              imageId: 'cup-run_ss',
              alt: 'CUPRUNMENのプレイ画面',
              aspectRatio: {width: 16, height: 9},
              description: [
                '初となるフルリモート体制で制作したランゲーム。',
                '技術的にユニークな点として、「プレイヤーの向きとステージの法線ベクトルから溢れるスープ量を算出する」という処理を行っている。',
                'また、ローカルのVRMアバターをゲームに用いるという試みを行った。',
                'ニコニコネット超会議超ハッカソンに出展。'
              ],
              buttons: [
                {
                  popup: '今すぐプレイ',
                  title: [
                    'unityroomで',
                    '遊ぶ'
                  ],
                  target: 'https://unityroom.com/games/cuprunmen'
                }
              ],
              slides: [
                {
                  type: 'youtube',
                  id: 'm44wTn8nk9Y'
                }
              ],
              specs: {
                times: [
                  {
                    year: '2020',
                    month: '4',
                    annotation: '(5日)',
                  }
                ],
                platforms: [
                  {
                    name: 'WebGL'
                  }
                ]
              }
            },
            {
              title: 'フォーリンパフェ',
              subtitle: 'パフェ積みアクションゲーム',
              themeColor: '#4ae0ef',
              imageId: 'fall_in_parfait-ss1',
              alt: 'フォーリンパフェのプレイ画面',
              aspectRatio: {width: 16, height: 9},
              description: [
                '2020年8月に開催されたUnity1Weekで制作したゲーム。',
                '『上から落ちてくる材料を器でキャッチしてパフェを作る』というシンプルな操作性ながら、パフェを大きくなるにつれて爆弾に当たりやすくなる、オンラインランキングの実装といった工夫により、上級者にとってもやり込みがいのあるゲームとなった。',
                '一番の特長は『フォトモード』で、プレイヤーは自分の作ったパフェを撮影してTwitterに投稿することができる。',
                'ゲームデザインの中にマーケティングの視点を持ち込んだ、ゲーム“商品”としての草分け的な作品となった。',
                'Unity1Weekゲームジャムにて約500作品中総合部門46位、絵作り部門35位獲得。',
                'デベロッパーズゲームコンテスト2020にて企業賞受賞。',
                '福岡ゲームコンテスト2021、Ohayoo Casual Game Contestに出展。'
              ],
              buttons: [
                {
                  popup: '今すぐプレイ',
                  title: [
                    'unityroomで',
                    '遊ぶ'
                  ],
                  target: 'https://unityroom.com/games/fallinparfait'
                }
              ],
              slides: [
                {
                  type: 'youtube',
                  id: 'ZIFt6yuOMAQ'
                }
              ],
              specs: {
                times: [
                  {
                    year: '2020',
                    month: '8',
                    annotation: '(1週間)',
                  },
                  {
                    year: '2020',
                    month: '12',
                    annotation: '(1ヶ月)',
                  }
                ],
                platforms: [
                  {
                    name: 'iOS',
                    version: '10',
                    orLater: true
                  },
                  {
                    name: 'Android',
                    version: '8',
                    orLater: true
                  },
                  {
                    name: 'WebGL'
                  }
                ]
              }
            },
            {
              title: '爆買いマーケット',
              subtitle: '爆買いアクションランゲーム',
              themeColor: '#da3c26',
              imageId: 'bakugai-img',
              aspectRatio: {width: 1, height: 1},
              alt: '',
              description: [
                'フォーリンパフェに続く、Unity1Week二作目。',
                'ショッピングカートに搭乗してスーパーマーケットを爆走し、床の商品を拾ったり商品棚や他のプレイヤーを攻撃することでスコアを稼ぐ。',
                '今回は初めてAIプレイヤーを導入した。それぞれのAIに性格付け（攻撃型・収集型・逃亡型）をすることで、プレイヤーは毎回刺激的なゲーム展開を楽しめるようになった。',
                'Unity1Weekゲームジャムに出展。'
              ],
              buttons: [
                {
                  popup: '今すぐプレイ',
                  title: [
                    'unityroomで',
                    '遊ぶ'
                  ],
                  target: 'https://unityroom.com/games/bakugaimarket'
                }
              ],
              slides: [
                {
                  type: 'youtube',
                  id: 'vTsy8NCYSNE'
                }
              ],
              specs: {
                times: [
                  {
                    year: '2020',
                    month: '2',
                    annotation: '(12日)',
                  }
                ],
                platforms: [
                  {
                    name: 'WebGL'
                  }
                ]
              }
            }
          ]
        }
      },
      {
        sectionType: 'dateList',
        title: 'NEWS',
        subtitle: 'チームからのお知らせ',
        themeColor: '#f73f23',
        id: 'news',
        contents: {
          shownItemsCount: 3,
          articles: [
            {
              title: '『フォーリンパフェ』がデベロッパーズゲームコンテスト2020にて企業賞（f4samurai賞）を受賞！',
              date: {
                year: '2021',
                month: '1',
                day: '29'
              },
              url: 'https://twitter.com/MachiCollider/status/1355123713226625027'
            },
            {
              title: 'スーパースターマインが「活躍する電大人」に掲載！',
              date: {
                year: '2021',
                month: '1',
                day: '28'
              },
              url: 'https://www.dendai.ac.jp/dendai-people/20210128-01.html'
            },
            {
              title: '『れーぞく！ネクロマンスちゃん』がゲームクリエイター甲子園2020にて総合大賞3位、審査員特別賞（鈴木英仁賞）、話題賞を受賞！',
              date: {
                year: '2020',
                month: '12',
                day: '19'
              },
              url: 'https://www.4gamer.net/games/999/G999905/20201228102/'
            },
            {
              title: '『れーぞく！ネクロマンスちゃん』をデジゲー博2020に出展！',
              date: {
                year: '2020',
                month: '11',
                day: '29'
              },
              url: 'http://digigame-expo.org/'
            },
            {
              title: '『フォーリンパフェ』がUnity 1Weekゲームジャムにて総合ランキング、絵作りランキングに入賞！',
              date: {
                year: '2020',
                month: '8',
                day: '30'
              },
              url: 'https://unityroom.com/unity1weeks/17'
            },
            {
              title: '『SPINNER』をゲーム業界交流会に出展！',
              date: {
                year: '2020',
                month: '2',
                day: '6'
              },
              url: 'https://game.creators-guild.com/g4c/%E3%82%B2%E3%83%BC%E3%83%A0%E6%A5%AD%E7%95%8C%E4%BA%A4%E6%B5%81%E4%BC%9A%E3%81%AB%E6%BD%9C%E5%85%A5%EF%BC%81/'
            },
            {
              title: 'ゲームクリエイターズギルド様からインタビューをしていただきました！',
              date: {
                year: '2019',
                month: '12',
                day: '27'
              },
              url: 'https://game.creators-guild.com/g4c/interview-studentgamescreator-20190114/'
            },
            {
              title: '『SPINNER』がGCG EXPO 2019で最優秀賞を受賞！',
              date: {
                year: '2019',
                month: '11',
                day: '30'
              },
              url: 'https://game.creators-guild.com/g4c/event-realevent-20191205/'
            },
            {
              title: '『れーぞく！ネクロマンスちゃん』をゲーム制作者交流会 GAME^3に出展！',
              date: {
                year: '2019',
                month: '9',
                day: '8'
              },
              url: 'https://game3.trap.jp/10th/'
            }
          ]
        }
      },
      {
        sectionType: 'static',
        title: 'ABOUT',
        themeColor: '#f78323',
        id: 'about',
        contents: {
          imageId: 'ssm-logo-landscape',
          aspectRatio: { width: 157213, height: 60041 },
          imageExtensionsShort: ['svg'],
          article: [
            "スーパースターマインは大学サークル発、新進気鋭のゲーム制作チーム。",
            "面白いものが大好きです。"
          ],
          bottomButtonsLayout: 'left',
          bottomButtons: [
            {
              title: [
                'お問い合わせ'
              ],
              target: 'https://docs.google.com/forms/d/e/1FAIpQLSd6Z3feC7onaq9SJa1Blfdd7frPFCsm4zQUCfQr9XqPxM3gzA/viewform'
            },
            {
              title: 'Twitter',
              target: 'https://twitter.com/necromance_chan'
            }
          ]
        }
      },
      {
        sectionType: 'cards',
        title: 'MEMBERS',
        themeColor: '#f7a723',
        id: 'members',
        contents: {
          logoImageId: 'ssm-logo',
          logoImageExtensionsShort: ['svg'],
          logoAspectRatio: {width: 47581, height: 90047},
          backfaceLogoImageId: 'ssm-logo-landscape',
          backfaceLogoImageExtensionsShort: ['svg'],
          backfaceLogoAspectRatio: {width: 157213, height: 60041},
          imageDirectory: './img/members/',
          cards: [
            {
              name: 'マチコー',
              imageId: 'machiko',
              post: [
                'リーダー',
                'プランナー'
              ],
              accounts: [
                {
                  name: 'twitter',
                  id: 'MachiCollider'
                },
                {
                  name: 'note',
                  id: 'machikou_mk2'
                },
                {
                  name: 'qiita',
                  id: 'Machikof'
                }
              ],
              backfaceColor: '#E03D16',
              backfaceLogoBrightness: 10
            },
            {
              name: 'いーだ',
              imageId: 'i-da',
              post: [
                'プログラマー',
                'マスタリングエンジニア'
              ],
              accounts: [
                {
                  name: 'twitter',
                  id: 'GoodPaddyField5'
                },
                {
                  name: 'note',
                  id: '203_'
                }
              ],
              backfaceColor: '#57e827',
              backfaceLogoBrightness: 10
            },
            {
              name: 'Amu',
              imageId: 'amu',
              post: [
                'UI/ロゴデザイナー',
                'エフェクトクリエーター'
              ],
              accounts: [
                {
                  name: 'twitter',
                  id: 'Amu_dsgn'
                }
              ],
              backfaceColor: '#e84327',
              backfaceLogoBrightness: 10
            },
            {
              name: 'HIBIKI CUBE',
              imageId: 'hibiki',
              post: [
                'Webエンジニア',
                'CGモデラー'
              ],
              accounts: [
                {
                  name: 'twitter',
                  id: 'hibiki_cube'
                },
                {
                  name: 'github',
                  id: 'HIBIKI-CUBE'
                },
                {
                  name: 'qiita',
                  id: 'HIBIKI-CUBE'
                },
                {
                  name: 'lastfm',
                  id: 'HIBIKI_CUBE'
                }
              ],
              backfaceColor: '#27b1e8',
              backfaceLogoBrightness: 10
            },
            {
              name: 'Matsu',
              imageId: '',
              post: [
                'プログラマー',
                'レベルデザイナー'
              ],
              accounts: [
                {
                  name: 'twitter',
                  id: 'sake_unity_stu'
                },
                {
                  name: 'github',
                  id: 'AtaruMatsudaira'
                }
              ],
              backfaceColor: '#e82727',
              backfaceLogoBrightness: 10
            },
            {
              name: 'ナミー',
              imageId: '',
              post: [
                'デバッガー'
              ],
              accounts: [
                {
                  name: 'twitter',
                  id: 'fi_matsu'
                }
              ],
              backfaceColor: '#6e27e8',
              backfaceLogoBrightness: 10
            },
            {
              name: 'えちょ',
              imageId: 'echo',
              post: [
                'レベルデザイナー'
              ],
              accounts: [
                {
                  name: 'twitter',
                  id: 'ysXKPSlvMZqVtIW'
                }
              ],
              backfaceColor: '#000000',
              backfaceLogoBrightness: 10
            },
            {
              name: '十二月ねこ',
              imageId: '',
              post: [
                'CGモデラー'
              ],
              accounts: [
                {
                  name: 'twitter',
                  id: 'Subamaru_7'
                }
              ],
              backfaceColor: '#e82781',
              backfaceLogoBrightness: 10
            },
            {
              name: 'かずえもん',
              imageId: 'kazuemon',
              post: [
                'Webデザイナー'
              ],
              accounts: [
                {
                  name: 'twitter',
                  id: 'kazuemon_0602',
                  customUrl: '//k6n.jp/tw'
                },
                {
                  name: 'youtube',
                  id: 'kazuemon',
                  customUrl: '//k6n.jp/yt'
                },
                {
                  name: 'github',
                  id: 'kazuemon',
                  customUrl: '//k6n.jp/gh'
                },
              ],
              backfaceColor: '#e8a127',
              backfaceLogoBrightness: 10
            },
            {
              name: 'NEO',
              imageId: 'neo',
              post: [
                'エフェクト',
                'サウンドデザイン'
              ],
              accounts: [
                {
                  name: 'twitter',
                  id: 'neo_97m'
                },
                {
                  name: 'github',
                  id: 'NEON1212121'
                },
              ],
              backfaceColor: '#7de8bd',
              backfaceLogoBrightness: 10
            },
            {
              name: 'すぎのこ',
              post: [
                '3Dモデラー',
              ],
              accounts: [
                {
                  name: 'twitter',
                  id: 'ucSzlqTS3y78lIN'
                }
              ],
              backfaceColor: '#145866',
              backfaceLogoBrightness: 10
            }
          ]
        }
      },
      {
        sectionType: 'footer',
        themeColor: '#fff',
        contents: {
          copyright: ['&copy; 2021', 'HIBIKI CUBE', 'スーパースターマイン'],
          codeLicense: {
            license: 'mpl-2.0',
            linkLabel: 'GitHub',
            url: 'https://github.com/HIBIKI-CUBE/superstarmine-web',
          },
          assetsLicense: {
            ccType: 'by-nd'
          }
        }
      }
    ];

    /* src/pages/index.svelte generated by Svelte v3.38.2 */
    const file$5 = "src/pages/index.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[2] = list[i].title;
    	child_ctx[3] = list[i].subtitle;
    	child_ctx[4] = list[i].themeColor;
    	child_ctx[5] = list[i].sectionType;
    	child_ctx[6] = list[i].contents;
    	child_ctx[7] = list[i].id;
    	child_ctx[8] = list[i].pairId;
    	return child_ctx;
    }

    // (16:0) {#if settings.find(v => v.sectionType == 'navHeader')}
    function create_if_block_7(ctx) {
    	let nheader;
    	let current;

    	nheader = new Nav_header({
    			props: {
    				contents: settings.find(func_1).contents,
    				globalSettings
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(nheader.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(nheader, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(nheader.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(nheader.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(nheader, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7.name,
    		type: "if",
    		source: "(16:0) {#if settings.find(v => v.sectionType == 'navHeader')}",
    		ctx
    	});

    	return block;
    }

    // (27:41) 
    function create_if_block_3(ctx) {
    	let cframe;
    	let current;

    	cframe = new Common_frame({
    			props: {
    				id: /*id*/ ctx[7],
    				title: /*title*/ ctx[2],
    				subtitle: /*subtitle*/ ctx[3],
    				themeColor: /*themeColor*/ ctx[4],
    				$$slots: { default: [create_default_slot$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(cframe.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(cframe, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cframe_changes = {};

    			if (dirty & /*$$scope, $sync*/ 2049) {
    				cframe_changes.$$scope = { dirty, ctx };
    			}

    			cframe.$set(cframe_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cframe.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cframe.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cframe, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(27:41) ",
    		ctx
    	});

    	return block;
    }

    // (25:38) 
    function create_if_block_2(ctx) {
    	let footer;
    	let current;

    	footer = new Footer({
    			props: { contents: /*contents*/ ctx[6] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(footer.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(footer, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(footer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(footer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(footer, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(25:38) ",
    		ctx
    	});

    	return block;
    }

    // (23:41) 
    function create_if_block_1$1(ctx) {
    	let desc;
    	let current;

    	desc = new Slide_description({
    			props: {
    				contents: /*contents*/ ctx[6],
    				globalSettings,
    				pairId: /*pairId*/ ctx[8],
    				standardWidth: /*$sync*/ ctx[0].standardWidth
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(desc.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(desc, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const desc_changes = {};
    			if (dirty & /*$sync*/ 1) desc_changes.standardWidth = /*$sync*/ ctx[0].standardWidth;
    			desc.$set(desc_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(desc.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(desc.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(desc, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(23:41) ",
    		ctx
    	});

    	return block;
    }

    // (21:4) {#if sectionType == "slideHero"}
    function create_if_block$2(ctx) {
    	let heros;
    	let current;

    	function func_2(...args) {
    		return /*func_2*/ ctx[1](/*pairId*/ ctx[8], ...args);
    	}

    	heros = new Slide_hero_swiper({
    			props: {
    				contents: /*contents*/ ctx[6] || settings.find(func_2).contents,
    				globalSettings,
    				pairId: /*pairId*/ ctx[8],
    				standardWidth: /*$sync*/ ctx[0].standardWidth
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(heros.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(heros, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const heros_changes = {};
    			if (dirty & /*$sync*/ 1) heros_changes.standardWidth = /*$sync*/ ctx[0].standardWidth;
    			heros.$set(heros_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(heros.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(heros.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(heros, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(21:4) {#if sectionType == \\\"slideHero\\\"}",
    		ctx
    	});

    	return block;
    }

    // (33:41) 
    function create_if_block_6(ctx) {
    	let cards;
    	let current;

    	cards = new Cards({
    			props: {
    				contents: /*contents*/ ctx[6],
    				globalSettings,
    				standardWidth: /*$sync*/ ctx[0].standardWidth
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(cards.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(cards, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const cards_changes = {};
    			if (dirty & /*$sync*/ 1) cards_changes.standardWidth = /*$sync*/ ctx[0].standardWidth;
    			cards.$set(cards_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(cards.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(cards.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(cards, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6.name,
    		type: "if",
    		source: "(33:41) ",
    		ctx
    	});

    	return block;
    }

    // (31:44) 
    function create_if_block_5(ctx) {
    	let dlist;
    	let current;

    	dlist = new Date_list({
    			props: { contents: /*contents*/ ctx[6] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(dlist.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(dlist, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(dlist.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(dlist.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(dlist, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5.name,
    		type: "if",
    		source: "(31:44) ",
    		ctx
    	});

    	return block;
    }

    // (29:8) {#if sectionType == "static"}
    function create_if_block_4(ctx) {
    	let static_1;
    	let current;

    	static_1 = new Static_content({
    			props: {
    				contents: /*contents*/ ctx[6],
    				globalSettings,
    				standardWidth: /*$sync*/ ctx[0].standardWidth
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(static_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(static_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const static_1_changes = {};
    			if (dirty & /*$sync*/ 1) static_1_changes.standardWidth = /*$sync*/ ctx[0].standardWidth;
    			static_1.$set(static_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(static_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(static_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(static_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4.name,
    		type: "if",
    		source: "(29:8) {#if sectionType == \\\"static\\\"}",
    		ctx
    	});

    	return block;
    }

    // (28:6) <Cframe {id} {title} {subtitle} {themeColor}>
    function create_default_slot$1(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let t;
    	let current;
    	const if_block_creators = [create_if_block_4, create_if_block_5, create_if_block_6];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*sectionType*/ ctx[5] == "static") return 0;
    		if (/*sectionType*/ ctx[5] == "dateList") return 1;
    		if (/*sectionType*/ ctx[5] == "cards") return 2;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type_1(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			t = space();
    		},
    		m: function mount(target, anchor) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(target, anchor);
    			}

    			insert_dev(target, t, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (if_block) if_block.p(ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d(detaching);
    			}

    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$1.name,
    		type: "slot",
    		source: "(28:6) <Cframe {id} {title} {subtitle} {themeColor}>",
    		ctx
    	});

    	return block;
    }

    // (20:2) {#each settings as {title, subtitle, themeColor, sectionType, contents, id, pairId}}
    function create_each_block$2(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$2, create_if_block_1$1, create_if_block_2, create_if_block_3];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*sectionType*/ ctx[5] == "slideHero") return 0;
    		if (/*sectionType*/ ctx[5] == "slideDesc") return 1;
    		if (/*sectionType*/ ctx[5] == "footer") return 2;
    		if (/*sectionType*/ ctx[5] != "navHeader") return 3;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(target, anchor);
    			}

    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (if_block) if_block.p(ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(20:2) {#each settings as {title, subtitle, themeColor, sectionType, contents, id, pairId}}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$5(ctx) {
    	let show_if = settings.find(func$1);
    	let t;
    	let main;
    	let current;
    	let if_block = show_if && create_if_block_7(ctx);
    	let each_value = settings;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			t = space();
    			main = element("main");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			set_style(main, "--transitionDuration", globalSettings.transitionDuration + "ms");
    			set_style(main, "--standardWidth", /*$sync*/ ctx[0].standardWidth + "vw");
    			add_location(main, file$5, 18, 0, 787);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, main, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(main, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (show_if) if_block.p(ctx, dirty);

    			if (dirty & /*settings, globalSettings, $sync*/ 1) {
    				each_value = settings;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$2(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$2(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(main, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (!current || dirty & /*$sync*/ 1) {
    				set_style(main, "--standardWidth", /*$sync*/ ctx[0].standardWidth + "vw");
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(main);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const func$1 = v => v.sectionType == "navHeader";
    const func_1 = v => v.sectionType == "navHeader";

    function instance$5($$self, $$props, $$invalidate) {
    	let $sync;
    	validate_store(sync, "sync");
    	component_subscribe($$self, sync, $$value => $$invalidate(0, $sync = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Pages", slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Pages> was created with unknown prop '${key}'`);
    	});

    	const func_2 = (pairId, v) => v.pairId == pairId && v.isParent;

    	$$self.$capture_state = () => ({
    		Cframe: Common_frame,
    		Nheader: Nav_header,
    		Static: Static_content,
    		Dlist: Date_list,
    		HeroS: Slide_hero_swiper,
    		Desc: Slide_description,
    		Footer,
    		Cards,
    		settings,
    		globalSettings,
    		sync,
    		$sync
    	});

    	return [$sync, func_2];
    }

    class Pages extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$5, create_fragment$5, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Pages",
    			options,
    			id: create_fragment$5.name
    		});
    	}
    }

    var hls = createCommonjsModule(function (module, exports) {
    typeof window !== "undefined" &&
    (function webpackUniversalModuleDefinition(root, factory) {
    	module.exports = factory();
    })(commonjsGlobal, function() {
    return /******/ (function(modules) { // webpackBootstrap
    /******/ 	// The module cache
    /******/ 	var installedModules = {};
    /******/
    /******/ 	// The require function
    /******/ 	function __webpack_require__(moduleId) {
    /******/
    /******/ 		// Check if module is in cache
    /******/ 		if(installedModules[moduleId]) {
    /******/ 			return installedModules[moduleId].exports;
    /******/ 		}
    /******/ 		// Create a new module (and put it into the cache)
    /******/ 		var module = installedModules[moduleId] = {
    /******/ 			i: moduleId,
    /******/ 			l: false,
    /******/ 			exports: {}
    /******/ 		};
    /******/
    /******/ 		// Execute the module function
    /******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ 		// Flag the module as loaded
    /******/ 		module.l = true;
    /******/
    /******/ 		// Return the exports of the module
    /******/ 		return module.exports;
    /******/ 	}
    /******/
    /******/
    /******/ 	// expose the modules object (__webpack_modules__)
    /******/ 	__webpack_require__.m = modules;
    /******/
    /******/ 	// expose the module cache
    /******/ 	__webpack_require__.c = installedModules;
    /******/
    /******/ 	// define getter function for harmony exports
    /******/ 	__webpack_require__.d = function(exports, name, getter) {
    /******/ 		if(!__webpack_require__.o(exports, name)) {
    /******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
    /******/ 		}
    /******/ 	};
    /******/
    /******/ 	// define __esModule on exports
    /******/ 	__webpack_require__.r = function(exports) {
    /******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
    /******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
    /******/ 		}
    /******/ 		Object.defineProperty(exports, '__esModule', { value: true });
    /******/ 	};
    /******/
    /******/ 	// create a fake namespace object
    /******/ 	// mode & 1: value is a module id, require it
    /******/ 	// mode & 2: merge all properties of value into the ns
    /******/ 	// mode & 4: return value when already ns object
    /******/ 	// mode & 8|1: behave like require
    /******/ 	__webpack_require__.t = function(value, mode) {
    /******/ 		if(mode & 1) value = __webpack_require__(value);
    /******/ 		if(mode & 8) return value;
    /******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
    /******/ 		var ns = Object.create(null);
    /******/ 		__webpack_require__.r(ns);
    /******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
    /******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
    /******/ 		return ns;
    /******/ 	};
    /******/
    /******/ 	// getDefaultExport function for compatibility with non-harmony modules
    /******/ 	__webpack_require__.n = function(module) {
    /******/ 		var getter = module && module.__esModule ?
    /******/ 			function getDefault() { return module['default']; } :
    /******/ 			function getModuleExports() { return module; };
    /******/ 		__webpack_require__.d(getter, 'a', getter);
    /******/ 		return getter;
    /******/ 	};
    /******/
    /******/ 	// Object.prototype.hasOwnProperty.call
    /******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
    /******/
    /******/ 	// __webpack_public_path__
    /******/ 	__webpack_require__.p = "/dist/";
    /******/
    /******/
    /******/ 	// Load entry module and return exports
    /******/ 	return __webpack_require__(__webpack_require__.s = "./src/hls.ts");
    /******/ })
    /************************************************************************/
    /******/ ({

    /***/ "./node_modules/eventemitter3/index.js":
    /*!*********************************************!*\
      !*** ./node_modules/eventemitter3/index.js ***!
      \*********************************************/
    /*! no static exports found */
    /***/ (function(module, exports, __webpack_require__) {


    var has = Object.prototype.hasOwnProperty
      , prefix = '~';

    /**
     * Constructor to create a storage for our `EE` objects.
     * An `Events` instance is a plain object whose properties are event names.
     *
     * @constructor
     * @private
     */
    function Events() {}

    //
    // We try to not inherit from `Object.prototype`. In some engines creating an
    // instance in this way is faster than calling `Object.create(null)` directly.
    // If `Object.create(null)` is not supported we prefix the event names with a
    // character to make sure that the built-in object properties are not
    // overridden or used as an attack vector.
    //
    if (Object.create) {
      Events.prototype = Object.create(null);

      //
      // This hack is needed because the `__proto__` property is still inherited in
      // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
      //
      if (!new Events().__proto__) prefix = false;
    }

    /**
     * Representation of a single event listener.
     *
     * @param {Function} fn The listener function.
     * @param {*} context The context to invoke the listener with.
     * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
     * @constructor
     * @private
     */
    function EE(fn, context, once) {
      this.fn = fn;
      this.context = context;
      this.once = once || false;
    }

    /**
     * Add a listener for a given event.
     *
     * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn The listener function.
     * @param {*} context The context to invoke the listener with.
     * @param {Boolean} once Specify if the listener is a one-time listener.
     * @returns {EventEmitter}
     * @private
     */
    function addListener(emitter, event, fn, context, once) {
      if (typeof fn !== 'function') {
        throw new TypeError('The listener must be a function');
      }

      var listener = new EE(fn, context || emitter, once)
        , evt = prefix ? prefix + event : event;

      if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
      else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
      else emitter._events[evt] = [emitter._events[evt], listener];

      return emitter;
    }

    /**
     * Clear event by name.
     *
     * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
     * @param {(String|Symbol)} evt The Event name.
     * @private
     */
    function clearEvent(emitter, evt) {
      if (--emitter._eventsCount === 0) emitter._events = new Events();
      else delete emitter._events[evt];
    }

    /**
     * Minimal `EventEmitter` interface that is molded against the Node.js
     * `EventEmitter` interface.
     *
     * @constructor
     * @public
     */
    function EventEmitter() {
      this._events = new Events();
      this._eventsCount = 0;
    }

    /**
     * Return an array listing the events for which the emitter has registered
     * listeners.
     *
     * @returns {Array}
     * @public
     */
    EventEmitter.prototype.eventNames = function eventNames() {
      var names = []
        , events
        , name;

      if (this._eventsCount === 0) return names;

      for (name in (events = this._events)) {
        if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
      }

      if (Object.getOwnPropertySymbols) {
        return names.concat(Object.getOwnPropertySymbols(events));
      }

      return names;
    };

    /**
     * Return the listeners registered for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @returns {Array} The registered listeners.
     * @public
     */
    EventEmitter.prototype.listeners = function listeners(event) {
      var evt = prefix ? prefix + event : event
        , handlers = this._events[evt];

      if (!handlers) return [];
      if (handlers.fn) return [handlers.fn];

      for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
        ee[i] = handlers[i].fn;
      }

      return ee;
    };

    /**
     * Return the number of listeners listening to a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @returns {Number} The number of listeners.
     * @public
     */
    EventEmitter.prototype.listenerCount = function listenerCount(event) {
      var evt = prefix ? prefix + event : event
        , listeners = this._events[evt];

      if (!listeners) return 0;
      if (listeners.fn) return 1;
      return listeners.length;
    };

    /**
     * Calls each of the listeners registered for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @returns {Boolean} `true` if the event had listeners, else `false`.
     * @public
     */
    EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
      var evt = prefix ? prefix + event : event;

      if (!this._events[evt]) return false;

      var listeners = this._events[evt]
        , len = arguments.length
        , args
        , i;

      if (listeners.fn) {
        if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

        switch (len) {
          case 1: return listeners.fn.call(listeners.context), true;
          case 2: return listeners.fn.call(listeners.context, a1), true;
          case 3: return listeners.fn.call(listeners.context, a1, a2), true;
          case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
          case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
          case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }

        for (i = 1, args = new Array(len -1); i < len; i++) {
          args[i - 1] = arguments[i];
        }

        listeners.fn.apply(listeners.context, args);
      } else {
        var length = listeners.length
          , j;

        for (i = 0; i < length; i++) {
          if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

          switch (len) {
            case 1: listeners[i].fn.call(listeners[i].context); break;
            case 2: listeners[i].fn.call(listeners[i].context, a1); break;
            case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
            case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
            default:
              if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
                args[j - 1] = arguments[j];
              }

              listeners[i].fn.apply(listeners[i].context, args);
          }
        }
      }

      return true;
    };

    /**
     * Add a listener for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn The listener function.
     * @param {*} [context=this] The context to invoke the listener with.
     * @returns {EventEmitter} `this`.
     * @public
     */
    EventEmitter.prototype.on = function on(event, fn, context) {
      return addListener(this, event, fn, context, false);
    };

    /**
     * Add a one-time listener for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn The listener function.
     * @param {*} [context=this] The context to invoke the listener with.
     * @returns {EventEmitter} `this`.
     * @public
     */
    EventEmitter.prototype.once = function once(event, fn, context) {
      return addListener(this, event, fn, context, true);
    };

    /**
     * Remove the listeners of a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn Only remove the listeners that match this function.
     * @param {*} context Only remove the listeners that have this context.
     * @param {Boolean} once Only remove one-time listeners.
     * @returns {EventEmitter} `this`.
     * @public
     */
    EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
      var evt = prefix ? prefix + event : event;

      if (!this._events[evt]) return this;
      if (!fn) {
        clearEvent(this, evt);
        return this;
      }

      var listeners = this._events[evt];

      if (listeners.fn) {
        if (
          listeners.fn === fn &&
          (!once || listeners.once) &&
          (!context || listeners.context === context)
        ) {
          clearEvent(this, evt);
        }
      } else {
        for (var i = 0, events = [], length = listeners.length; i < length; i++) {
          if (
            listeners[i].fn !== fn ||
            (once && !listeners[i].once) ||
            (context && listeners[i].context !== context)
          ) {
            events.push(listeners[i]);
          }
        }

        //
        // Reset the array, or remove it completely if we have no more listeners.
        //
        if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
        else clearEvent(this, evt);
      }

      return this;
    };

    /**
     * Remove all listeners, or those of the specified event.
     *
     * @param {(String|Symbol)} [event] The event name.
     * @returns {EventEmitter} `this`.
     * @public
     */
    EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
      var evt;

      if (event) {
        evt = prefix ? prefix + event : event;
        if (this._events[evt]) clearEvent(this, evt);
      } else {
        this._events = new Events();
        this._eventsCount = 0;
      }

      return this;
    };

    //
    // Alias methods names because people roll like that.
    //
    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    EventEmitter.prototype.addListener = EventEmitter.prototype.on;

    //
    // Expose the prefix.
    //
    EventEmitter.prefixed = prefix;

    //
    // Allow `EventEmitter` to be imported as module namespace.
    //
    EventEmitter.EventEmitter = EventEmitter;

    //
    // Expose the module.
    //
    {
      module.exports = EventEmitter;
    }


    /***/ }),

    /***/ "./node_modules/url-toolkit/src/url-toolkit.js":
    /*!*****************************************************!*\
      !*** ./node_modules/url-toolkit/src/url-toolkit.js ***!
      \*****************************************************/
    /*! no static exports found */
    /***/ (function(module, exports, __webpack_require__) {

    // see https://tools.ietf.org/html/rfc1808

    (function (root) {
      var URL_REGEX = /^((?:[a-zA-Z0-9+\-.]+:)?)(\/\/[^\/?#]*)?((?:[^\/?#]*\/)*[^;?#]*)?(;[^?#]*)?(\?[^#]*)?(#[^]*)?$/;
      var FIRST_SEGMENT_REGEX = /^([^\/?#]*)([^]*)$/;
      var SLASH_DOT_REGEX = /(?:\/|^)\.(?=\/)/g;
      var SLASH_DOT_DOT_REGEX = /(?:\/|^)\.\.\/(?!\.\.\/)[^\/]*(?=\/)/g;

      var URLToolkit = {
        // If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //
        // E.g
        // With opts.alwaysNormalize = false (default, spec compliant)
        // http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g
        // With opts.alwaysNormalize = true (not spec compliant)
        // http://a.com/b/cd + /e/f/../g => http://a.com/e/g
        buildAbsoluteURL: function (baseURL, relativeURL, opts) {
          opts = opts || {};
          // remove any remaining space and CRLF
          baseURL = baseURL.trim();
          relativeURL = relativeURL.trim();
          if (!relativeURL) {
            // 2a) If the embedded URL is entirely empty, it inherits the
            // entire base URL (i.e., is set equal to the base URL)
            // and we are done.
            if (!opts.alwaysNormalize) {
              return baseURL;
            }
            var basePartsForNormalise = URLToolkit.parseURL(baseURL);
            if (!basePartsForNormalise) {
              throw new Error('Error trying to parse base URL.');
            }
            basePartsForNormalise.path = URLToolkit.normalizePath(
              basePartsForNormalise.path
            );
            return URLToolkit.buildURLFromParts(basePartsForNormalise);
          }
          var relativeParts = URLToolkit.parseURL(relativeURL);
          if (!relativeParts) {
            throw new Error('Error trying to parse relative URL.');
          }
          if (relativeParts.scheme) {
            // 2b) If the embedded URL starts with a scheme name, it is
            // interpreted as an absolute URL and we are done.
            if (!opts.alwaysNormalize) {
              return relativeURL;
            }
            relativeParts.path = URLToolkit.normalizePath(relativeParts.path);
            return URLToolkit.buildURLFromParts(relativeParts);
          }
          var baseParts = URLToolkit.parseURL(baseURL);
          if (!baseParts) {
            throw new Error('Error trying to parse base URL.');
          }
          if (!baseParts.netLoc && baseParts.path && baseParts.path[0] !== '/') {
            // If netLoc missing and path doesn't start with '/', assume everthing before the first '/' is the netLoc
            // This causes 'example.com/a' to be handled as '//example.com/a' instead of '/example.com/a'
            var pathParts = FIRST_SEGMENT_REGEX.exec(baseParts.path);
            baseParts.netLoc = pathParts[1];
            baseParts.path = pathParts[2];
          }
          if (baseParts.netLoc && !baseParts.path) {
            baseParts.path = '/';
          }
          var builtParts = {
            // 2c) Otherwise, the embedded URL inherits the scheme of
            // the base URL.
            scheme: baseParts.scheme,
            netLoc: relativeParts.netLoc,
            path: null,
            params: relativeParts.params,
            query: relativeParts.query,
            fragment: relativeParts.fragment,
          };
          if (!relativeParts.netLoc) {
            // 3) If the embedded URL's <net_loc> is non-empty, we skip to
            // Step 7.  Otherwise, the embedded URL inherits the <net_loc>
            // (if any) of the base URL.
            builtParts.netLoc = baseParts.netLoc;
            // 4) If the embedded URL path is preceded by a slash "/", the
            // path is not relative and we skip to Step 7.
            if (relativeParts.path[0] !== '/') {
              if (!relativeParts.path) {
                // 5) If the embedded URL path is empty (and not preceded by a
                // slash), then the embedded URL inherits the base URL path
                builtParts.path = baseParts.path;
                // 5a) if the embedded URL's <params> is non-empty, we skip to
                // step 7; otherwise, it inherits the <params> of the base
                // URL (if any) and
                if (!relativeParts.params) {
                  builtParts.params = baseParts.params;
                  // 5b) if the embedded URL's <query> is non-empty, we skip to
                  // step 7; otherwise, it inherits the <query> of the base
                  // URL (if any) and we skip to step 7.
                  if (!relativeParts.query) {
                    builtParts.query = baseParts.query;
                  }
                }
              } else {
                // 6) The last segment of the base URL's path (anything
                // following the rightmost slash "/", or the entire path if no
                // slash is present) is removed and the embedded URL's path is
                // appended in its place.
                var baseURLPath = baseParts.path;
                var newPath =
                  baseURLPath.substring(0, baseURLPath.lastIndexOf('/') + 1) +
                  relativeParts.path;
                builtParts.path = URLToolkit.normalizePath(newPath);
              }
            }
          }
          if (builtParts.path === null) {
            builtParts.path = opts.alwaysNormalize
              ? URLToolkit.normalizePath(relativeParts.path)
              : relativeParts.path;
          }
          return URLToolkit.buildURLFromParts(builtParts);
        },
        parseURL: function (url) {
          var parts = URL_REGEX.exec(url);
          if (!parts) {
            return null;
          }
          return {
            scheme: parts[1] || '',
            netLoc: parts[2] || '',
            path: parts[3] || '',
            params: parts[4] || '',
            query: parts[5] || '',
            fragment: parts[6] || '',
          };
        },
        normalizePath: function (path) {
          // The following operations are
          // then applied, in order, to the new path:
          // 6a) All occurrences of "./", where "." is a complete path
          // segment, are removed.
          // 6b) If the path ends with "." as a complete path segment,
          // that "." is removed.
          path = path.split('').reverse().join('').replace(SLASH_DOT_REGEX, '');
          // 6c) All occurrences of "<segment>/../", where <segment> is a
          // complete path segment not equal to "..", are removed.
          // Removal of these path segments is performed iteratively,
          // removing the leftmost matching pattern on each iteration,
          // until no matching pattern remains.
          // 6d) If the path ends with "<segment>/..", where <segment> is a
          // complete path segment not equal to "..", that
          // "<segment>/.." is removed.
          while (
            path.length !== (path = path.replace(SLASH_DOT_DOT_REGEX, '')).length
          ) {}
          return path.split('').reverse().join('');
        },
        buildURLFromParts: function (parts) {
          return (
            parts.scheme +
            parts.netLoc +
            parts.path +
            parts.params +
            parts.query +
            parts.fragment
          );
        },
      };

      module.exports = URLToolkit;
    })();


    /***/ }),

    /***/ "./node_modules/webworkify-webpack/index.js":
    /*!**************************************************!*\
      !*** ./node_modules/webworkify-webpack/index.js ***!
      \**************************************************/
    /*! no static exports found */
    /***/ (function(module, exports, __webpack_require__) {

    function webpackBootstrapFunc (modules) {
    /******/  // The module cache
    /******/  var installedModules = {};

    /******/  // The require function
    /******/  function __webpack_require__(moduleId) {

    /******/    // Check if module is in cache
    /******/    if(installedModules[moduleId])
    /******/      return installedModules[moduleId].exports;

    /******/    // Create a new module (and put it into the cache)
    /******/    var module = installedModules[moduleId] = {
    /******/      i: moduleId,
    /******/      l: false,
    /******/      exports: {}
    /******/    };

    /******/    // Execute the module function
    /******/    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

    /******/    // Flag the module as loaded
    /******/    module.l = true;

    /******/    // Return the exports of the module
    /******/    return module.exports;
    /******/  }

    /******/  // expose the modules object (__webpack_modules__)
    /******/  __webpack_require__.m = modules;

    /******/  // expose the module cache
    /******/  __webpack_require__.c = installedModules;

    /******/  // identity function for calling harmony imports with the correct context
    /******/  __webpack_require__.i = function(value) { return value; };

    /******/  // define getter function for harmony exports
    /******/  __webpack_require__.d = function(exports, name, getter) {
    /******/    if(!__webpack_require__.o(exports, name)) {
    /******/      Object.defineProperty(exports, name, {
    /******/        configurable: false,
    /******/        enumerable: true,
    /******/        get: getter
    /******/      });
    /******/    }
    /******/  };

    /******/  // define __esModule on exports
    /******/  __webpack_require__.r = function(exports) {
    /******/    Object.defineProperty(exports, '__esModule', { value: true });
    /******/  };

    /******/  // getDefaultExport function for compatibility with non-harmony modules
    /******/  __webpack_require__.n = function(module) {
    /******/    var getter = module && module.__esModule ?
    /******/      function getDefault() { return module['default']; } :
    /******/      function getModuleExports() { return module; };
    /******/    __webpack_require__.d(getter, 'a', getter);
    /******/    return getter;
    /******/  };

    /******/  // Object.prototype.hasOwnProperty.call
    /******/  __webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };

    /******/  // __webpack_public_path__
    /******/  __webpack_require__.p = "/";

    /******/  // on error function for async loading
    /******/  __webpack_require__.oe = function(err) { console.error(err); throw err; };

      var f = __webpack_require__(__webpack_require__.s = ENTRY_MODULE);
      return f.default || f // try to call default if defined to also support babel esmodule exports
    }

    var moduleNameReqExp = '[\\.|\\-|\\+|\\w|\/|@]+';
    var dependencyRegExp = '\\(\\s*(\/\\*.*?\\*\/)?\\s*.*?(' + moduleNameReqExp + ').*?\\)'; // additional chars when output.pathinfo is true

    // http://stackoverflow.com/a/2593661/130442
    function quoteRegExp (str) {
      return (str + '').replace(/[.?*+^$[\]\\(){}|-]/g, '\\$&')
    }

    function isNumeric(n) {
      return !isNaN(1 * n); // 1 * n converts integers, integers as string ("123"), 1e3 and "1e3" to integers and strings to NaN
    }

    function getModuleDependencies (sources, module, queueName) {
      var retval = {};
      retval[queueName] = [];

      var fnString = module.toString();
      var wrapperSignature = fnString.match(/^function\s?\w*\(\w+,\s*\w+,\s*(\w+)\)/);
      if (!wrapperSignature) return retval
      var webpackRequireName = wrapperSignature[1];

      // main bundle deps
      var re = new RegExp('(\\\\n|\\W)' + quoteRegExp(webpackRequireName) + dependencyRegExp, 'g');
      var match;
      while ((match = re.exec(fnString))) {
        if (match[3] === 'dll-reference') continue
        retval[queueName].push(match[3]);
      }

      // dll deps
      re = new RegExp('\\(' + quoteRegExp(webpackRequireName) + '\\("(dll-reference\\s(' + moduleNameReqExp + '))"\\)\\)' + dependencyRegExp, 'g');
      while ((match = re.exec(fnString))) {
        if (!sources[match[2]]) {
          retval[queueName].push(match[1]);
          sources[match[2]] = __webpack_require__(match[1]).m;
        }
        retval[match[2]] = retval[match[2]] || [];
        retval[match[2]].push(match[4]);
      }

      // convert 1e3 back to 1000 - this can be important after uglify-js converted 1000 to 1e3
      var keys = Object.keys(retval);
      for (var i = 0; i < keys.length; i++) {
        for (var j = 0; j < retval[keys[i]].length; j++) {
          if (isNumeric(retval[keys[i]][j])) {
            retval[keys[i]][j] = 1 * retval[keys[i]][j];
          }
        }
      }

      return retval
    }

    function hasValuesInQueues (queues) {
      var keys = Object.keys(queues);
      return keys.reduce(function (hasValues, key) {
        return hasValues || queues[key].length > 0
      }, false)
    }

    function getRequiredModules (sources, moduleId) {
      var modulesQueue = {
        main: [moduleId]
      };
      var requiredModules = {
        main: []
      };
      var seenModules = {
        main: {}
      };

      while (hasValuesInQueues(modulesQueue)) {
        var queues = Object.keys(modulesQueue);
        for (var i = 0; i < queues.length; i++) {
          var queueName = queues[i];
          var queue = modulesQueue[queueName];
          var moduleToCheck = queue.pop();
          seenModules[queueName] = seenModules[queueName] || {};
          if (seenModules[queueName][moduleToCheck] || !sources[queueName][moduleToCheck]) continue
          seenModules[queueName][moduleToCheck] = true;
          requiredModules[queueName] = requiredModules[queueName] || [];
          requiredModules[queueName].push(moduleToCheck);
          var newModules = getModuleDependencies(sources, sources[queueName][moduleToCheck], queueName);
          var newModulesKeys = Object.keys(newModules);
          for (var j = 0; j < newModulesKeys.length; j++) {
            modulesQueue[newModulesKeys[j]] = modulesQueue[newModulesKeys[j]] || [];
            modulesQueue[newModulesKeys[j]] = modulesQueue[newModulesKeys[j]].concat(newModules[newModulesKeys[j]]);
          }
        }
      }

      return requiredModules
    }

    module.exports = function (moduleId, options) {
      options = options || {};
      var sources = {
        main: __webpack_require__.m
      };

      var requiredModules = options.all ? { main: Object.keys(sources.main) } : getRequiredModules(sources, moduleId);

      var src = '';

      Object.keys(requiredModules).filter(function (m) { return m !== 'main' }).forEach(function (module) {
        var entryModule = 0;
        while (requiredModules[module][entryModule]) {
          entryModule++;
        }
        requiredModules[module].push(entryModule);
        sources[module][entryModule] = '(function(module, exports, __webpack_require__) { module.exports = __webpack_require__; })';
        src = src + 'var ' + module + ' = (' + webpackBootstrapFunc.toString().replace('ENTRY_MODULE', JSON.stringify(entryModule)) + ')({' + requiredModules[module].map(function (id) { return '' + JSON.stringify(id) + ': ' + sources[module][id].toString() }).join(',') + '});\n';
      });

      src = src + 'new ((' + webpackBootstrapFunc.toString().replace('ENTRY_MODULE', JSON.stringify(moduleId)) + ')({' + requiredModules.main.map(function (id) { return '' + JSON.stringify(id) + ': ' + sources.main[id].toString() }).join(',') + '}))(self);';

      var blob = new window.Blob([src], { type: 'text/javascript' });
      if (options.bare) { return blob }

      var URL = window.URL || window.webkitURL || window.mozURL || window.msURL;

      var workerUrl = URL.createObjectURL(blob);
      var worker = new window.Worker(workerUrl);
      worker.objectURL = workerUrl;

      return worker
    };


    /***/ }),

    /***/ "./src/config.ts":
    /*!***********************!*\
      !*** ./src/config.ts ***!
      \***********************/
    /*! exports provided: hlsDefaultConfig, mergeConfig, enableStreamingMode */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hlsDefaultConfig", function() { return hlsDefaultConfig; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mergeConfig", function() { return mergeConfig; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "enableStreamingMode", function() { return enableStreamingMode; });
    /* harmony import */ var _controller_abr_controller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./controller/abr-controller */ "./src/controller/abr-controller.ts");
    /* harmony import */ var _controller_audio_stream_controller__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./controller/audio-stream-controller */ "./src/controller/audio-stream-controller.ts");
    /* harmony import */ var _controller_audio_track_controller__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./controller/audio-track-controller */ "./src/controller/audio-track-controller.ts");
    /* harmony import */ var _controller_subtitle_stream_controller__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./controller/subtitle-stream-controller */ "./src/controller/subtitle-stream-controller.ts");
    /* harmony import */ var _controller_subtitle_track_controller__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./controller/subtitle-track-controller */ "./src/controller/subtitle-track-controller.ts");
    /* harmony import */ var _controller_buffer_controller__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./controller/buffer-controller */ "./src/controller/buffer-controller.ts");
    /* harmony import */ var _controller_timeline_controller__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./controller/timeline-controller */ "./src/controller/timeline-controller.ts");
    /* harmony import */ var _controller_cap_level_controller__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./controller/cap-level-controller */ "./src/controller/cap-level-controller.ts");
    /* harmony import */ var _controller_fps_controller__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./controller/fps-controller */ "./src/controller/fps-controller.ts");
    /* harmony import */ var _controller_eme_controller__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./controller/eme-controller */ "./src/controller/eme-controller.ts");
    /* harmony import */ var _utils_xhr_loader__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/xhr-loader */ "./src/utils/xhr-loader.ts");
    /* harmony import */ var _utils_fetch_loader__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./utils/fetch-loader */ "./src/utils/fetch-loader.ts");
    /* harmony import */ var _utils_cues__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./utils/cues */ "./src/utils/cues.ts");
    /* harmony import */ var _utils_mediakeys_helper__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./utils/mediakeys-helper */ "./src/utils/mediakeys-helper.ts");
    /* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./utils/logger */ "./src/utils/logger.ts");
    function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

    function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
















    // If possible, keep hlsDefaultConfig shallow
    // It is cloned whenever a new Hls instance is created, by keeping the config
    // shallow the properties are cloned, and we don't end up manipulating the default
    var hlsDefaultConfig = _objectSpread(_objectSpread({
      autoStartLoad: true,
      // used by stream-controller
      startPosition: -1,
      // used by stream-controller
      defaultAudioCodec: undefined,
      // used by stream-controller
      debug: false,
      // used by logger
      capLevelOnFPSDrop: false,
      // used by fps-controller
      capLevelToPlayerSize: false,
      // used by cap-level-controller
      initialLiveManifestSize: 1,
      // used by stream-controller
      maxBufferLength: 30,
      // used by stream-controller
      backBufferLength: Infinity,
      // used by buffer-controller
      maxBufferSize: 60 * 1000 * 1000,
      // used by stream-controller
      maxBufferHole: 0.1,
      // used by stream-controller
      highBufferWatchdogPeriod: 2,
      // used by stream-controller
      nudgeOffset: 0.1,
      // used by stream-controller
      nudgeMaxRetry: 3,
      // used by stream-controller
      maxFragLookUpTolerance: 0.25,
      // used by stream-controller
      liveSyncDurationCount: 3,
      // used by latency-controller
      liveMaxLatencyDurationCount: Infinity,
      // used by latency-controller
      liveSyncDuration: undefined,
      // used by latency-controller
      liveMaxLatencyDuration: undefined,
      // used by latency-controller
      maxLiveSyncPlaybackRate: 1,
      // used by latency-controller
      liveDurationInfinity: false,
      // used by buffer-controller
      liveBackBufferLength: null,
      // used by buffer-controller
      maxMaxBufferLength: 600,
      // used by stream-controller
      enableWorker: true,
      // used by demuxer
      enableSoftwareAES: true,
      // used by decrypter
      manifestLoadingTimeOut: 10000,
      // used by playlist-loader
      manifestLoadingMaxRetry: 1,
      // used by playlist-loader
      manifestLoadingRetryDelay: 1000,
      // used by playlist-loader
      manifestLoadingMaxRetryTimeout: 64000,
      // used by playlist-loader
      startLevel: undefined,
      // used by level-controller
      levelLoadingTimeOut: 10000,
      // used by playlist-loader
      levelLoadingMaxRetry: 4,
      // used by playlist-loader
      levelLoadingRetryDelay: 1000,
      // used by playlist-loader
      levelLoadingMaxRetryTimeout: 64000,
      // used by playlist-loader
      fragLoadingTimeOut: 20000,
      // used by fragment-loader
      fragLoadingMaxRetry: 6,
      // used by fragment-loader
      fragLoadingRetryDelay: 1000,
      // used by fragment-loader
      fragLoadingMaxRetryTimeout: 64000,
      // used by fragment-loader
      startFragPrefetch: false,
      // used by stream-controller
      fpsDroppedMonitoringPeriod: 5000,
      // used by fps-controller
      fpsDroppedMonitoringThreshold: 0.2,
      // used by fps-controller
      appendErrorMaxRetry: 3,
      // used by buffer-controller
      loader: _utils_xhr_loader__WEBPACK_IMPORTED_MODULE_10__["default"],
      // loader: FetchLoader,
      fLoader: undefined,
      // used by fragment-loader
      pLoader: undefined,
      // used by playlist-loader
      xhrSetup: undefined,
      // used by xhr-loader
      licenseXhrSetup: undefined,
      // used by eme-controller
      licenseResponseCallback: undefined,
      // used by eme-controller
      abrController: _controller_abr_controller__WEBPACK_IMPORTED_MODULE_0__["default"],
      bufferController: _controller_buffer_controller__WEBPACK_IMPORTED_MODULE_5__["default"],
      capLevelController: _controller_cap_level_controller__WEBPACK_IMPORTED_MODULE_7__["default"],
      fpsController: _controller_fps_controller__WEBPACK_IMPORTED_MODULE_8__["default"],
      stretchShortVideoTrack: false,
      // used by mp4-remuxer
      maxAudioFramesDrift: 1,
      // used by mp4-remuxer
      forceKeyFrameOnDiscontinuity: true,
      // used by ts-demuxer
      abrEwmaFastLive: 3,
      // used by abr-controller
      abrEwmaSlowLive: 9,
      // used by abr-controller
      abrEwmaFastVoD: 3,
      // used by abr-controller
      abrEwmaSlowVoD: 9,
      // used by abr-controller
      abrEwmaDefaultEstimate: 5e5,
      // 500 kbps  // used by abr-controller
      abrBandWidthFactor: 0.95,
      // used by abr-controller
      abrBandWidthUpFactor: 0.7,
      // used by abr-controller
      abrMaxWithRealBitrate: false,
      // used by abr-controller
      maxStarvationDelay: 4,
      // used by abr-controller
      maxLoadingDelay: 4,
      // used by abr-controller
      minAutoBitrate: 0,
      // used by hls
      emeEnabled: false,
      // used by eme-controller
      widevineLicenseUrl: undefined,
      // used by eme-controller
      drmSystemOptions: {},
      // used by eme-controller
      requestMediaKeySystemAccessFunc: _utils_mediakeys_helper__WEBPACK_IMPORTED_MODULE_13__["requestMediaKeySystemAccess"],
      // used by eme-controller
      testBandwidth: true,
      progressive: false,
      lowLatencyMode: true
    }, timelineConfig()), {}, {
      subtitleStreamController:  _controller_subtitle_stream_controller__WEBPACK_IMPORTED_MODULE_3__["SubtitleStreamController"] ,
      subtitleTrackController:  _controller_subtitle_track_controller__WEBPACK_IMPORTED_MODULE_4__["default"] ,
      timelineController:  _controller_timeline_controller__WEBPACK_IMPORTED_MODULE_6__["TimelineController"] ,
      audioStreamController:  _controller_audio_stream_controller__WEBPACK_IMPORTED_MODULE_1__["default"] ,
      audioTrackController:  _controller_audio_track_controller__WEBPACK_IMPORTED_MODULE_2__["default"] ,
      emeController:  _controller_eme_controller__WEBPACK_IMPORTED_MODULE_9__["default"] 
    });

    function timelineConfig() {
      return {
        cueHandler: _utils_cues__WEBPACK_IMPORTED_MODULE_12__["default"],
        // used by timeline-controller
        enableCEA708Captions: true,
        // used by timeline-controller
        enableWebVTT: true,
        // used by timeline-controller
        enableIMSC1: true,
        // used by timeline-controller
        captionsTextTrack1Label: 'English',
        // used by timeline-controller
        captionsTextTrack1LanguageCode: 'en',
        // used by timeline-controller
        captionsTextTrack2Label: 'Spanish',
        // used by timeline-controller
        captionsTextTrack2LanguageCode: 'es',
        // used by timeline-controller
        captionsTextTrack3Label: 'Unknown CC',
        // used by timeline-controller
        captionsTextTrack3LanguageCode: '',
        // used by timeline-controller
        captionsTextTrack4Label: 'Unknown CC',
        // used by timeline-controller
        captionsTextTrack4LanguageCode: '',
        // used by timeline-controller
        renderTextTracksNatively: true
      };
    }

    function mergeConfig(defaultConfig, userConfig) {
      if ((userConfig.liveSyncDurationCount || userConfig.liveMaxLatencyDurationCount) && (userConfig.liveSyncDuration || userConfig.liveMaxLatencyDuration)) {
        throw new Error("Illegal hls.js config: don't mix up liveSyncDurationCount/liveMaxLatencyDurationCount and liveSyncDuration/liveMaxLatencyDuration");
      }

      if (userConfig.liveMaxLatencyDurationCount !== undefined && (userConfig.liveSyncDurationCount === undefined || userConfig.liveMaxLatencyDurationCount <= userConfig.liveSyncDurationCount)) {
        throw new Error('Illegal hls.js config: "liveMaxLatencyDurationCount" must be greater than "liveSyncDurationCount"');
      }

      if (userConfig.liveMaxLatencyDuration !== undefined && (userConfig.liveSyncDuration === undefined || userConfig.liveMaxLatencyDuration <= userConfig.liveSyncDuration)) {
        throw new Error('Illegal hls.js config: "liveMaxLatencyDuration" must be greater than "liveSyncDuration"');
      }

      return _extends({}, defaultConfig, userConfig);
    }
    function enableStreamingMode(config) {
      var currentLoader = config.loader;

      if (currentLoader !== _utils_fetch_loader__WEBPACK_IMPORTED_MODULE_11__["default"] && currentLoader !== _utils_xhr_loader__WEBPACK_IMPORTED_MODULE_10__["default"]) {
        // If a developer has configured their own loader, respect that choice
        _utils_logger__WEBPACK_IMPORTED_MODULE_14__["logger"].log('[config]: Custom loader detected, cannot enable progressive streaming');
        config.progressive = false;
      } else {
        var canStreamProgressively = Object(_utils_fetch_loader__WEBPACK_IMPORTED_MODULE_11__["fetchSupported"])();

        if (canStreamProgressively) {
          config.loader = _utils_fetch_loader__WEBPACK_IMPORTED_MODULE_11__["default"];
          config.progressive = true;
          config.enableSoftwareAES = true;
          _utils_logger__WEBPACK_IMPORTED_MODULE_14__["logger"].log('[config]: Progressive streaming enabled, using FetchLoader');
        }
      }
    }

    /***/ }),

    /***/ "./src/controller/abr-controller.ts":
    /*!******************************************!*\
      !*** ./src/controller/abr-controller.ts ***!
      \******************************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony import */ var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/polyfills/number */ "./src/polyfills/number.ts");
    /* harmony import */ var _utils_ewma_bandwidth_estimator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/ewma-bandwidth-estimator */ "./src/utils/ewma-bandwidth-estimator.ts");
    /* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../events */ "./src/events.ts");
    /* harmony import */ var _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/buffer-helper */ "./src/utils/buffer-helper.ts");
    /* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../errors */ "./src/errors.ts");
    /* harmony import */ var _types_loader__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../types/loader */ "./src/types/loader.ts");
    /* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/logger */ "./src/utils/logger.ts");



    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }








    var AbrController = /*#__PURE__*/function () {
      function AbrController(hls) {
        this.hls = void 0;
        this.lastLoadedFragLevel = 0;
        this._nextAutoLevel = -1;
        this.timer = void 0;
        this.onCheck = this._abandonRulesCheck.bind(this);
        this.fragCurrent = null;
        this.partCurrent = null;
        this.bitrateTestDelay = 0;
        this.bwEstimator = void 0;
        this.hls = hls;
        var config = hls.config;
        this.bwEstimator = new _utils_ewma_bandwidth_estimator__WEBPACK_IMPORTED_MODULE_1__["default"](config.abrEwmaSlowVoD, config.abrEwmaFastVoD, config.abrEwmaDefaultEstimate);
        this.registerListeners();
      }

      var _proto = AbrController.prototype;

      _proto.registerListeners = function registerListeners() {
        var hls = this.hls;
        hls.on(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].FRAG_LOADING, this.onFragLoading, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].FRAG_LOADED, this.onFragLoaded, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].FRAG_BUFFERED, this.onFragBuffered, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].LEVEL_LOADED, this.onLevelLoaded, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].ERROR, this.onError, this);
      };

      _proto.unregisterListeners = function unregisterListeners() {
        var hls = this.hls;
        hls.off(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].FRAG_LOADING, this.onFragLoading, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].FRAG_LOADED, this.onFragLoaded, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].FRAG_BUFFERED, this.onFragBuffered, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].LEVEL_LOADED, this.onLevelLoaded, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].ERROR, this.onError, this);
      };

      _proto.destroy = function destroy() {
        this.unregisterListeners();
        this.clearTimer(); // @ts-ignore

        this.hls = this.onCheck = null;
        this.fragCurrent = this.partCurrent = null;
      };

      _proto.onFragLoading = function onFragLoading(event, data) {
        var frag = data.frag;

        if (frag.type === _types_loader__WEBPACK_IMPORTED_MODULE_5__["PlaylistLevelType"].MAIN) {
          if (!this.timer) {
            var _data$part;

            this.fragCurrent = frag;
            this.partCurrent = (_data$part = data.part) != null ? _data$part : null;
            this.timer = self.setInterval(this.onCheck, 100);
          }
        }
      };

      _proto.onLevelLoaded = function onLevelLoaded(event, data) {
        var config = this.hls.config;

        if (data.details.live) {
          this.bwEstimator.update(config.abrEwmaSlowLive, config.abrEwmaFastLive);
        } else {
          this.bwEstimator.update(config.abrEwmaSlowVoD, config.abrEwmaFastVoD);
        }
      }
      /*
          This method monitors the download rate of the current fragment, and will downswitch if that fragment will not load
          quickly enough to prevent underbuffering
        */
      ;

      _proto._abandonRulesCheck = function _abandonRulesCheck() {
        var frag = this.fragCurrent,
            part = this.partCurrent,
            hls = this.hls;
        var autoLevelEnabled = hls.autoLevelEnabled,
            config = hls.config,
            media = hls.media;

        if (!frag || !media) {
          return;
        }

        var stats = part ? part.stats : frag.stats;
        var duration = part ? part.duration : frag.duration; // If loading has been aborted and not in lowLatencyMode, stop timer and return

        if (stats.aborted) {
          _utils_logger__WEBPACK_IMPORTED_MODULE_6__["logger"].warn('frag loader destroy or aborted, disarm abandonRules');
          this.clearTimer(); // reset forced auto level value so that next level will be selected

          this._nextAutoLevel = -1;
          return;
        } // This check only runs if we're in ABR mode and actually playing


        if (!autoLevelEnabled || media.paused || !media.playbackRate || !media.readyState) {
          return;
        }

        var requestDelay = performance.now() - stats.loading.start;
        var playbackRate = Math.abs(media.playbackRate); // In order to work with a stable bandwidth, only begin monitoring bandwidth after half of the fragment has been loaded

        if (requestDelay <= 500 * duration / playbackRate) {
          return;
        }

        var levels = hls.levels,
            minAutoLevel = hls.minAutoLevel;
        var level = levels[frag.level];
        var expectedLen = stats.total || Math.max(stats.loaded, Math.round(duration * level.maxBitrate / 8));
        var loadRate = Math.max(1, stats.bwEstimate ? stats.bwEstimate / 8 : stats.loaded * 1000 / requestDelay); // fragLoadDelay is an estimate of the time (in seconds) it will take to buffer the entire fragment

        var fragLoadedDelay = (expectedLen - stats.loaded) / loadRate;
        var pos = media.currentTime; // bufferStarvationDelay is an estimate of the amount time (in seconds) it will take to exhaust the buffer

        var bufferStarvationDelay = (_utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__["BufferHelper"].bufferInfo(media, pos, config.maxBufferHole).end - pos) / playbackRate; // Attempt an emergency downswitch only if less than 2 fragment lengths are buffered, and the time to finish loading
        // the current fragment is greater than the amount of buffer we have left

        if (bufferStarvationDelay >= 2 * duration / playbackRate || fragLoadedDelay <= bufferStarvationDelay) {
          return;
        }

        var fragLevelNextLoadedDelay = Number.POSITIVE_INFINITY;
        var nextLoadLevel; // Iterate through lower level and try to find the largest one that avoids rebuffering

        for (nextLoadLevel = frag.level - 1; nextLoadLevel > minAutoLevel; nextLoadLevel--) {
          // compute time to load next fragment at lower level
          // 0.8 : consider only 80% of current bw to be conservative
          // 8 = bits per byte (bps/Bps)
          var levelNextBitrate = levels[nextLoadLevel].maxBitrate;
          fragLevelNextLoadedDelay = duration * levelNextBitrate / (8 * 0.8 * loadRate);

          if (fragLevelNextLoadedDelay < bufferStarvationDelay) {
            break;
          }
        } // Only emergency switch down if it takes less time to load a new fragment at lowest level instead of continuing
        // to load the current one


        if (fragLevelNextLoadedDelay >= fragLoadedDelay) {
          return;
        }

        var bwEstimate = this.bwEstimator.getEstimate();
        _utils_logger__WEBPACK_IMPORTED_MODULE_6__["logger"].warn("Fragment " + frag.sn + (part ? ' part ' + part.index : '') + " of level " + frag.level + " is loading too slowly and will cause an underbuffer; aborting and switching to level " + nextLoadLevel + "\n      Current BW estimate: " + (Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(bwEstimate) ? (bwEstimate / 1024).toFixed(3) : 'Unknown') + " Kb/s\n      Estimated load time for current fragment: " + fragLoadedDelay.toFixed(3) + " s\n      Estimated load time for the next fragment: " + fragLevelNextLoadedDelay.toFixed(3) + " s\n      Time to underbuffer: " + bufferStarvationDelay.toFixed(3) + " s");
        hls.nextLoadLevel = nextLoadLevel;
        this.bwEstimator.sample(requestDelay, stats.loaded);
        this.clearTimer();

        if (frag.loader) {
          this.fragCurrent = this.partCurrent = null;
          frag.loader.abort();
        }

        hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].FRAG_LOAD_EMERGENCY_ABORTED, {
          frag: frag,
          part: part,
          stats: stats
        });
      };

      _proto.onFragLoaded = function onFragLoaded(event, _ref) {
        var frag = _ref.frag,
            part = _ref.part;

        if (frag.type === _types_loader__WEBPACK_IMPORTED_MODULE_5__["PlaylistLevelType"].MAIN && Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(frag.sn)) {
          var stats = part ? part.stats : frag.stats;
          var duration = part ? part.duration : frag.duration; // stop monitoring bw once frag loaded

          this.clearTimer(); // store level id after successful fragment load

          this.lastLoadedFragLevel = frag.level; // reset forced auto level value so that next level will be selected

          this._nextAutoLevel = -1; // compute level average bitrate

          if (this.hls.config.abrMaxWithRealBitrate) {
            var level = this.hls.levels[frag.level];
            var loadedBytes = (level.loaded ? level.loaded.bytes : 0) + stats.loaded;
            var loadedDuration = (level.loaded ? level.loaded.duration : 0) + duration;
            level.loaded = {
              bytes: loadedBytes,
              duration: loadedDuration
            };
            level.realBitrate = Math.round(8 * loadedBytes / loadedDuration);
          }

          if (frag.bitrateTest) {
            var fragBufferedData = {
              stats: stats,
              frag: frag,
              part: part,
              id: frag.type
            };
            this.onFragBuffered(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].FRAG_BUFFERED, fragBufferedData);
            frag.bitrateTest = false;
          }
        }
      };

      _proto.onFragBuffered = function onFragBuffered(event, data) {
        var frag = data.frag,
            part = data.part;
        var stats = part ? part.stats : frag.stats;

        if (stats.aborted) {
          return;
        } // Only count non-alt-audio frags which were actually buffered in our BW calculations


        if (frag.type !== _types_loader__WEBPACK_IMPORTED_MODULE_5__["PlaylistLevelType"].MAIN || frag.sn === 'initSegment') {
          return;
        } // Use the difference between parsing and request instead of buffering and request to compute fragLoadingProcessing;
        // rationale is that buffer appending only happens once media is attached. This can happen when config.startFragPrefetch
        // is used. If we used buffering in that case, our BW estimate sample will be very large.


        var processingMs = stats.parsing.end - stats.loading.start;
        this.bwEstimator.sample(processingMs, stats.loaded);
        stats.bwEstimate = this.bwEstimator.getEstimate();

        if (frag.bitrateTest) {
          this.bitrateTestDelay = processingMs / 1000;
        } else {
          this.bitrateTestDelay = 0;
        }
      };

      _proto.onError = function onError(event, data) {
        // stop timer in case of frag loading error
        switch (data.details) {
          case _errors__WEBPACK_IMPORTED_MODULE_4__["ErrorDetails"].FRAG_LOAD_ERROR:
          case _errors__WEBPACK_IMPORTED_MODULE_4__["ErrorDetails"].FRAG_LOAD_TIMEOUT:
            this.clearTimer();
            break;
        }
      };

      _proto.clearTimer = function clearTimer() {
        self.clearInterval(this.timer);
        this.timer = undefined;
      } // return next auto level
      ;

      _proto.getNextABRAutoLevel = function getNextABRAutoLevel() {
        var fragCurrent = this.fragCurrent,
            partCurrent = this.partCurrent,
            hls = this.hls;
        var maxAutoLevel = hls.maxAutoLevel,
            config = hls.config,
            minAutoLevel = hls.minAutoLevel,
            media = hls.media;
        var currentFragDuration = partCurrent ? partCurrent.duration : fragCurrent ? fragCurrent.duration : 0;
        var pos = media ? media.currentTime : 0; // playbackRate is the absolute value of the playback rate; if media.playbackRate is 0, we use 1 to load as
        // if we're playing back at the normal rate.

        var playbackRate = media && media.playbackRate !== 0 ? Math.abs(media.playbackRate) : 1.0;
        var avgbw = this.bwEstimator ? this.bwEstimator.getEstimate() : config.abrEwmaDefaultEstimate; // bufferStarvationDelay is the wall-clock time left until the playback buffer is exhausted.

        var bufferStarvationDelay = (_utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__["BufferHelper"].bufferInfo(media, pos, config.maxBufferHole).end - pos) / playbackRate; // First, look to see if we can find a level matching with our avg bandwidth AND that could also guarantee no rebuffering at all

        var bestLevel = this.findBestLevel(avgbw, minAutoLevel, maxAutoLevel, bufferStarvationDelay, config.abrBandWidthFactor, config.abrBandWidthUpFactor);

        if (bestLevel >= 0) {
          return bestLevel;
        }

        _utils_logger__WEBPACK_IMPORTED_MODULE_6__["logger"].trace((bufferStarvationDelay ? 'rebuffering expected' : 'buffer is empty') + ", finding optimal quality level"); // not possible to get rid of rebuffering ... let's try to find level that will guarantee less than maxStarvationDelay of rebuffering
        // if no matching level found, logic will return 0

        var maxStarvationDelay = currentFragDuration ? Math.min(currentFragDuration, config.maxStarvationDelay) : config.maxStarvationDelay;
        var bwFactor = config.abrBandWidthFactor;
        var bwUpFactor = config.abrBandWidthUpFactor;

        if (!bufferStarvationDelay) {
          // in case buffer is empty, let's check if previous fragment was loaded to perform a bitrate test
          var bitrateTestDelay = this.bitrateTestDelay;

          if (bitrateTestDelay) {
            // if it is the case, then we need to adjust our max starvation delay using maxLoadingDelay config value
            // max video loading delay used in  automatic start level selection :
            // in that mode ABR controller will ensure that video loading time (ie the time to fetch the first fragment at lowest quality level +
            // the time to fetch the fragment at the appropriate quality level is less than ```maxLoadingDelay``` )
            // cap maxLoadingDelay and ensure it is not bigger 'than bitrate test' frag duration
            var maxLoadingDelay = currentFragDuration ? Math.min(currentFragDuration, config.maxLoadingDelay) : config.maxLoadingDelay;
            maxStarvationDelay = maxLoadingDelay - bitrateTestDelay;
            _utils_logger__WEBPACK_IMPORTED_MODULE_6__["logger"].trace("bitrate test took " + Math.round(1000 * bitrateTestDelay) + "ms, set first fragment max fetchDuration to " + Math.round(1000 * maxStarvationDelay) + " ms"); // don't use conservative factor on bitrate test

            bwFactor = bwUpFactor = 1;
          }
        }

        bestLevel = this.findBestLevel(avgbw, minAutoLevel, maxAutoLevel, bufferStarvationDelay + maxStarvationDelay, bwFactor, bwUpFactor);
        return Math.max(bestLevel, 0);
      };

      _proto.findBestLevel = function findBestLevel(currentBw, minAutoLevel, maxAutoLevel, maxFetchDuration, bwFactor, bwUpFactor) {
        var _level$details;

        var fragCurrent = this.fragCurrent,
            partCurrent = this.partCurrent,
            currentLevel = this.lastLoadedFragLevel;
        var levels = this.hls.levels;
        var level = levels[currentLevel];
        var live = !!(level !== null && level !== void 0 && (_level$details = level.details) !== null && _level$details !== void 0 && _level$details.live);
        var currentCodecSet = level === null || level === void 0 ? void 0 : level.codecSet;
        var currentFragDuration = partCurrent ? partCurrent.duration : fragCurrent ? fragCurrent.duration : 0;

        for (var i = maxAutoLevel; i >= minAutoLevel; i--) {
          var levelInfo = levels[i];

          if (!levelInfo || currentCodecSet && levelInfo.codecSet !== currentCodecSet) {
            continue;
          }

          var levelDetails = levelInfo.details;
          var avgDuration = (partCurrent ? levelDetails === null || levelDetails === void 0 ? void 0 : levelDetails.partTarget : levelDetails === null || levelDetails === void 0 ? void 0 : levelDetails.averagetargetduration) || currentFragDuration;
          var adjustedbw = void 0; // follow algorithm captured from stagefright :
          // https://android.googlesource.com/platform/frameworks/av/+/master/media/libstagefright/httplive/LiveSession.cpp
          // Pick the highest bandwidth stream below or equal to estimated bandwidth.
          // consider only 80% of the available bandwidth, but if we are switching up,
          // be even more conservative (70%) to avoid overestimating and immediately
          // switching back.

          if (i <= currentLevel) {
            adjustedbw = bwFactor * currentBw;
          } else {
            adjustedbw = bwUpFactor * currentBw;
          }

          var bitrate = levels[i].maxBitrate;
          var fetchDuration = bitrate * avgDuration / adjustedbw;
          _utils_logger__WEBPACK_IMPORTED_MODULE_6__["logger"].trace("level/adjustedbw/bitrate/avgDuration/maxFetchDuration/fetchDuration: " + i + "/" + Math.round(adjustedbw) + "/" + bitrate + "/" + avgDuration + "/" + maxFetchDuration + "/" + fetchDuration); // if adjusted bw is greater than level bitrate AND

          if (adjustedbw > bitrate && ( // fragment fetchDuration unknown OR live stream OR fragment fetchDuration less than max allowed fetch duration, then this level matches
          // we don't account for max Fetch Duration for live streams, this is to avoid switching down when near the edge of live sliding window ...
          // special case to support startLevel = -1 (bitrateTest) on live streams : in that case we should not exit loop so that findBestLevel will return -1
          !fetchDuration || live && !this.bitrateTestDelay || fetchDuration < maxFetchDuration)) {
            // as we are looping from highest to lowest, this will return the best achievable quality level
            return i;
          }
        } // not enough time budget even with quality level 0 ... rebuffering might happen


        return -1;
      };

      _createClass(AbrController, [{
        key: "nextAutoLevel",
        get: function get() {
          var forcedAutoLevel = this._nextAutoLevel;
          var bwEstimator = this.bwEstimator; // in case next auto level has been forced, and bw not available or not reliable, return forced value

          if (forcedAutoLevel !== -1 && (!bwEstimator || !bwEstimator.canEstimate())) {
            return forcedAutoLevel;
          } // compute next level using ABR logic


          var nextABRAutoLevel = this.getNextABRAutoLevel(); // if forced auto level has been defined, use it to cap ABR computed quality level

          if (forcedAutoLevel !== -1) {
            nextABRAutoLevel = Math.min(forcedAutoLevel, nextABRAutoLevel);
          }

          return nextABRAutoLevel;
        },
        set: function set(nextLevel) {
          this._nextAutoLevel = nextLevel;
        }
      }]);

      return AbrController;
    }();

    /* harmony default export */ __webpack_exports__["default"] = (AbrController);

    /***/ }),

    /***/ "./src/controller/audio-stream-controller.ts":
    /*!***************************************************!*\
      !*** ./src/controller/audio-stream-controller.ts ***!
      \***************************************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony import */ var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/polyfills/number */ "./src/polyfills/number.ts");
    /* harmony import */ var _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base-stream-controller */ "./src/controller/base-stream-controller.ts");
    /* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../events */ "./src/events.ts");
    /* harmony import */ var _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/buffer-helper */ "./src/utils/buffer-helper.ts");
    /* harmony import */ var _fragment_tracker__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./fragment-tracker */ "./src/controller/fragment-tracker.ts");
    /* harmony import */ var _types_level__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../types/level */ "./src/types/level.ts");
    /* harmony import */ var _types_loader__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../types/loader */ "./src/types/loader.ts");
    /* harmony import */ var _loader_fragment__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../loader/fragment */ "./src/loader/fragment.ts");
    /* harmony import */ var _demux_chunk_cache__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../demux/chunk-cache */ "./src/demux/chunk-cache.ts");
    /* harmony import */ var _demux_transmuxer_interface__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../demux/transmuxer-interface */ "./src/demux/transmuxer-interface.ts");
    /* harmony import */ var _types_transmuxer__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../types/transmuxer */ "./src/types/transmuxer.ts");
    /* harmony import */ var _fragment_finders__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./fragment-finders */ "./src/controller/fragment-finders.ts");
    /* harmony import */ var _utils_discontinuities__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../utils/discontinuities */ "./src/utils/discontinuities.ts");
    /* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../errors */ "./src/errors.ts");
    /* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../utils/logger */ "./src/utils/logger.ts");


    function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

    function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }















    var TICK_INTERVAL = 100; // how often to tick in ms

    var AudioStreamController = /*#__PURE__*/function (_BaseStreamController) {
      _inheritsLoose(AudioStreamController, _BaseStreamController);

      function AudioStreamController(hls, fragmentTracker) {
        var _this;

        _this = _BaseStreamController.call(this, hls, fragmentTracker, '[audio-stream-controller]') || this;
        _this.videoBuffer = null;
        _this.videoTrackCC = -1;
        _this.waitingVideoCC = -1;
        _this.audioSwitch = false;
        _this.trackId = -1;
        _this.waitingData = null;
        _this.mainDetails = null;
        _this.bufferFlushed = false;

        _this._registerListeners();

        return _this;
      }

      var _proto = AudioStreamController.prototype;

      _proto.onHandlerDestroying = function onHandlerDestroying() {
        this._unregisterListeners();

        this.mainDetails = null;
      };

      _proto._registerListeners = function _registerListeners() {
        var hls = this.hls;
        hls.on(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].MEDIA_ATTACHED, this.onMediaAttached, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].MEDIA_DETACHING, this.onMediaDetaching, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].MANIFEST_LOADING, this.onManifestLoading, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].LEVEL_LOADED, this.onLevelLoaded, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].AUDIO_TRACKS_UPDATED, this.onAudioTracksUpdated, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].ERROR, this.onError, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].BUFFER_RESET, this.onBufferReset, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].BUFFER_CREATED, this.onBufferCreated, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].BUFFER_FLUSHED, this.onBufferFlushed, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].INIT_PTS_FOUND, this.onInitPtsFound, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].FRAG_BUFFERED, this.onFragBuffered, this);
      };

      _proto._unregisterListeners = function _unregisterListeners() {
        var hls = this.hls;
        hls.off(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].MEDIA_ATTACHED, this.onMediaAttached, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].MEDIA_DETACHING, this.onMediaDetaching, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].MANIFEST_LOADING, this.onManifestLoading, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].LEVEL_LOADED, this.onLevelLoaded, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].AUDIO_TRACKS_UPDATED, this.onAudioTracksUpdated, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].ERROR, this.onError, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].BUFFER_RESET, this.onBufferReset, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].BUFFER_CREATED, this.onBufferCreated, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].BUFFER_FLUSHED, this.onBufferFlushed, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].INIT_PTS_FOUND, this.onInitPtsFound, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].FRAG_BUFFERED, this.onFragBuffered, this);
      } // INIT_PTS_FOUND is triggered when the video track parsed in the stream-controller has a new PTS value
      ;

      _proto.onInitPtsFound = function onInitPtsFound(event, _ref) {
        var frag = _ref.frag,
            id = _ref.id,
            initPTS = _ref.initPTS;

        // Always update the new INIT PTS
        // Can change due level switch
        if (id === 'main') {
          var cc = frag.cc;
          this.initPTS[frag.cc] = initPTS;
          this.log("InitPTS for cc: " + cc + " found from main: " + initPTS);
          this.videoTrackCC = cc; // If we are waiting, tick immediately to unblock audio fragment transmuxing

          if (this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].WAITING_INIT_PTS) {
            this.tick();
          }
        }
      };

      _proto.startLoad = function startLoad(startPosition) {
        if (!this.levels) {
          this.startPosition = startPosition;
          this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].STOPPED;
          return;
        }

        var lastCurrentTime = this.lastCurrentTime;
        this.stopLoad();
        this.setInterval(TICK_INTERVAL);
        this.fragLoadError = 0;

        if (lastCurrentTime > 0 && startPosition === -1) {
          this.log("Override startPosition with lastCurrentTime @" + lastCurrentTime.toFixed(3));
          this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE;
        } else {
          this.loadedmetadata = false;
          this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].WAITING_TRACK;
        }

        this.nextLoadPosition = this.startPosition = this.lastCurrentTime = startPosition;
        this.tick();
      };

      _proto.doTick = function doTick() {
        switch (this.state) {
          case _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE:
            this.doTickIdle();
            break;

          case _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].WAITING_TRACK:
            {
              var _levels$trackId;

              var levels = this.levels,
                  trackId = this.trackId;
              var details = levels === null || levels === void 0 ? void 0 : (_levels$trackId = levels[trackId]) === null || _levels$trackId === void 0 ? void 0 : _levels$trackId.details;

              if (details) {
                if (this.waitForCdnTuneIn(details)) {
                  break;
                }

                this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].WAITING_INIT_PTS;
              }

              break;
            }

          case _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].FRAG_LOADING_WAITING_RETRY:
            {
              var _this$media;

              var now = performance.now();
              var retryDate = this.retryDate; // if current time is gt than retryDate, or if media seeking let's switch to IDLE state to retry loading

              if (!retryDate || now >= retryDate || (_this$media = this.media) !== null && _this$media !== void 0 && _this$media.seeking) {
                this.log('RetryDate reached, switch back to IDLE state');
                this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE;
              }

              break;
            }

          case _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].WAITING_INIT_PTS:
            {
              // Ensure we don't get stuck in the WAITING_INIT_PTS state if the waiting frag CC doesn't match any initPTS
              var waitingData = this.waitingData;

              if (waitingData) {
                var frag = waitingData.frag,
                    part = waitingData.part,
                    cache = waitingData.cache,
                    complete = waitingData.complete;

                if (this.initPTS[frag.cc] !== undefined) {
                  this.waitingData = null;
                  this.waitingVideoCC = -1;
                  this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].FRAG_LOADING;
                  var payload = cache.flush();
                  var data = {
                    frag: frag,
                    part: part,
                    payload: payload,
                    networkDetails: null
                  };

                  this._handleFragmentLoadProgress(data);

                  if (complete) {
                    _BaseStreamController.prototype._handleFragmentLoadComplete.call(this, data);
                  }
                } else if (this.videoTrackCC !== this.waitingVideoCC) {
                  // Drop waiting fragment if videoTrackCC has changed since waitingFragment was set and initPTS was not found
                  _utils_logger__WEBPACK_IMPORTED_MODULE_14__["logger"].log("Waiting fragment cc (" + frag.cc + ") cancelled because video is at cc " + this.videoTrackCC);
                  this.clearWaitingFragment();
                } else {
                  // Drop waiting fragment if an earlier fragment is needed
                  var pos = this.getLoadPosition();
                  var bufferInfo = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__["BufferHelper"].bufferInfo(this.mediaBuffer, pos, this.config.maxBufferHole);
                  var waitingFragmentAtPosition = Object(_fragment_finders__WEBPACK_IMPORTED_MODULE_11__["fragmentWithinToleranceTest"])(bufferInfo.end, this.config.maxFragLookUpTolerance, frag);

                  if (waitingFragmentAtPosition < 0) {
                    _utils_logger__WEBPACK_IMPORTED_MODULE_14__["logger"].log("Waiting fragment cc (" + frag.cc + ") @ " + frag.start + " cancelled because another fragment at " + bufferInfo.end + " is needed");
                    this.clearWaitingFragment();
                  }
                }
              } else {
                this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE;
              }
            }
        }

        this.onTickEnd();
      };

      _proto.clearWaitingFragment = function clearWaitingFragment() {
        var waitingData = this.waitingData;

        if (waitingData) {
          this.fragmentTracker.removeFragment(waitingData.frag);
          this.waitingData = null;
          this.waitingVideoCC = -1;
          this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE;
        }
      };

      _proto.onTickEnd = function onTickEnd() {
        var media = this.media;

        if (!media || !media.readyState) {
          // Exit early if we don't have media or if the media hasn't buffered anything yet (readyState 0)
          return;
        }

        var mediaBuffer = this.mediaBuffer ? this.mediaBuffer : media;
        var buffered = mediaBuffer.buffered;

        if (!this.loadedmetadata && buffered.length) {
          this.loadedmetadata = true;
        }

        this.lastCurrentTime = media.currentTime;
      };

      _proto.doTickIdle = function doTickIdle() {
        var _frag$decryptdata, _frag$decryptdata2;

        var hls = this.hls,
            levels = this.levels,
            media = this.media,
            trackId = this.trackId;
        var config = hls.config;

        if (!levels || !levels[trackId]) {
          return;
        } // if video not attached AND
        // start fragment already requested OR start frag prefetch not enabled
        // exit loop
        // => if media not attached but start frag prefetch is enabled and start frag not requested yet, we will not exit loop


        if (!media && (this.startFragRequested || !config.startFragPrefetch)) {
          return;
        }

        var levelInfo = levels[trackId];
        var trackDetails = levelInfo.details;

        if (!trackDetails || trackDetails.live && this.levelLastLoaded !== trackId || this.waitForCdnTuneIn(trackDetails)) {
          this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].WAITING_TRACK;
          return;
        }

        if (this.bufferFlushed) {
          this.bufferFlushed = false;
          this.afterBufferFlushed(this.mediaBuffer ? this.mediaBuffer : this.media, _loader_fragment__WEBPACK_IMPORTED_MODULE_7__["ElementaryStreamTypes"].AUDIO, _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].AUDIO);
        }

        var bufferInfo = this.getFwdBufferInfo(this.mediaBuffer ? this.mediaBuffer : this.media, _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].AUDIO);

        if (bufferInfo === null) {
          return;
        }

        var bufferLen = bufferInfo.len;
        var maxBufLen = this.getMaxBufferLength();
        var audioSwitch = this.audioSwitch; // if buffer length is less than maxBufLen try to load a new fragment

        if (bufferLen >= maxBufLen && !audioSwitch) {
          return;
        }

        if (!audioSwitch && this._streamEnded(bufferInfo, trackDetails)) {
          hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].BUFFER_EOS, {
            type: 'audio'
          });
          this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].ENDED;
          return;
        }

        var fragments = trackDetails.fragments;
        var start = fragments[0].start;
        var targetBufferTime = bufferInfo.end;

        if (audioSwitch) {
          var pos = this.getLoadPosition();
          targetBufferTime = pos; // if currentTime (pos) is less than alt audio playlist start time, it means that alt audio is ahead of currentTime

          if (trackDetails.PTSKnown && pos < start) {
            // if everything is buffered from pos to start or if audio buffer upfront, let's seek to start
            if (bufferInfo.end > start || bufferInfo.nextStart) {
              this.log('Alt audio track ahead of main track, seek to start of alt audio track');
              media.currentTime = start + 0.05;
            }
          }
        }

        var frag = this.getNextFragment(targetBufferTime, trackDetails);

        if (!frag) {
          this.bufferFlushed = true;
          return;
        }

        if (((_frag$decryptdata = frag.decryptdata) === null || _frag$decryptdata === void 0 ? void 0 : _frag$decryptdata.keyFormat) === 'identity' && !((_frag$decryptdata2 = frag.decryptdata) !== null && _frag$decryptdata2 !== void 0 && _frag$decryptdata2.key)) {
          this.loadKey(frag, trackDetails);
        } else {
          this.loadFragment(frag, trackDetails, targetBufferTime);
        }
      };

      _proto.getMaxBufferLength = function getMaxBufferLength() {
        var maxConfigBuffer = _BaseStreamController.prototype.getMaxBufferLength.call(this);

        var mainBufferInfo = this.getFwdBufferInfo(this.videoBuffer ? this.videoBuffer : this.media, _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].MAIN);

        if (mainBufferInfo === null) {
          return maxConfigBuffer;
        }

        return Math.max(maxConfigBuffer, mainBufferInfo.len);
      };

      _proto.onMediaDetaching = function onMediaDetaching() {
        this.videoBuffer = null;

        _BaseStreamController.prototype.onMediaDetaching.call(this);
      };

      _proto.onAudioTracksUpdated = function onAudioTracksUpdated(event, _ref2) {
        var audioTracks = _ref2.audioTracks;
        this.resetTransmuxer();
        this.levels = audioTracks.map(function (mediaPlaylist) {
          return new _types_level__WEBPACK_IMPORTED_MODULE_5__["Level"](mediaPlaylist);
        });
      };

      _proto.onAudioTrackSwitching = function onAudioTrackSwitching(event, data) {
        // if any URL found on new audio track, it is an alternate audio track
        var altAudio = !!data.url;
        this.trackId = data.id;
        var fragCurrent = this.fragCurrent;

        if (fragCurrent !== null && fragCurrent !== void 0 && fragCurrent.loader) {
          fragCurrent.loader.abort();
        }

        this.fragCurrent = null;
        this.clearWaitingFragment(); // destroy useless transmuxer when switching audio to main

        if (!altAudio) {
          this.resetTransmuxer();
        } else {
          // switching to audio track, start timer if not already started
          this.setInterval(TICK_INTERVAL);
        } // should we switch tracks ?


        if (altAudio) {
          this.audioSwitch = true; // main audio track are handled by stream-controller, just do something if switching to alt audio track

          this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE;
        } else {
          this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].STOPPED;
        }

        this.tick();
      };

      _proto.onManifestLoading = function onManifestLoading() {
        this.mainDetails = null;
        this.fragmentTracker.removeAllFragments();
        this.startPosition = this.lastCurrentTime = 0;
        this.bufferFlushed = false;
      };

      _proto.onLevelLoaded = function onLevelLoaded(event, data) {
        this.mainDetails = data.details;
      };

      _proto.onAudioTrackLoaded = function onAudioTrackLoaded(event, data) {
        var _track$details;

        var levels = this.levels;
        var newDetails = data.details,
            trackId = data.id;

        if (!levels) {
          this.warn("Audio tracks were reset while loading level " + trackId);
          return;
        }

        this.log("Track " + trackId + " loaded [" + newDetails.startSN + "," + newDetails.endSN + "],duration:" + newDetails.totalduration);
        var track = levels[trackId];
        var sliding = 0;

        if (newDetails.live || (_track$details = track.details) !== null && _track$details !== void 0 && _track$details.live) {
          var mainDetails = this.mainDetails;

          if (!newDetails.fragments[0]) {
            newDetails.deltaUpdateFailed = true;
          }

          if (newDetails.deltaUpdateFailed || !mainDetails) {
            return;
          }

          if (!track.details && newDetails.hasProgramDateTime && mainDetails.hasProgramDateTime) {
            Object(_utils_discontinuities__WEBPACK_IMPORTED_MODULE_12__["alignPDT"])(newDetails, mainDetails);
            sliding = newDetails.fragments[0].start;
          } else {
            sliding = this.alignPlaylists(newDetails, track.details);
          }
        }

        track.details = newDetails;
        this.levelLastLoaded = trackId; // compute start position if we are aligned with the main playlist

        if (!this.startFragRequested && (this.mainDetails || !newDetails.live)) {
          this.setStartPosition(track.details, sliding);
        } // only switch back to IDLE state if we were waiting for track to start downloading a new fragment


        if (this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].WAITING_TRACK && !this.waitForCdnTuneIn(newDetails)) {
          this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE;
        } // trigger handler right now


        this.tick();
      };

      _proto._handleFragmentLoadProgress = function _handleFragmentLoadProgress(data) {
        var _frag$initSegment;

        var frag = data.frag,
            part = data.part,
            payload = data.payload;
        var config = this.config,
            trackId = this.trackId,
            levels = this.levels;

        if (!levels) {
          this.warn("Audio tracks were reset while fragment load was in progress. Fragment " + frag.sn + " of level " + frag.level + " will not be buffered");
          return;
        }

        var track = levels[trackId];
        console.assert(track, 'Audio track is defined on fragment load progress');
        var details = track.details;
        console.assert(details, 'Audio track details are defined on fragment load progress');
        var audioCodec = config.defaultAudioCodec || track.audioCodec || 'mp4a.40.2';
        var transmuxer = this.transmuxer;

        if (!transmuxer) {
          transmuxer = this.transmuxer = new _demux_transmuxer_interface__WEBPACK_IMPORTED_MODULE_9__["default"](this.hls, _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].AUDIO, this._handleTransmuxComplete.bind(this), this._handleTransmuxerFlush.bind(this));
        } // Check if we have video initPTS
        // If not we need to wait for it


        var initPTS = this.initPTS[frag.cc];
        var initSegmentData = (_frag$initSegment = frag.initSegment) === null || _frag$initSegment === void 0 ? void 0 : _frag$initSegment.data;

        if (initPTS !== undefined) {
          // this.log(`Transmuxing ${sn} of [${details.startSN} ,${details.endSN}],track ${trackId}`);
          // time Offset is accurate if level PTS is known, or if playlist is not sliding (not live)
          var accurateTimeOffset = false; // details.PTSKnown || !details.live;

          var partIndex = part ? part.index : -1;
          var partial = partIndex !== -1;
          var chunkMeta = new _types_transmuxer__WEBPACK_IMPORTED_MODULE_10__["ChunkMetadata"](frag.level, frag.sn, frag.stats.chunkCount, payload.byteLength, partIndex, partial);
          transmuxer.push(payload, initSegmentData, audioCodec, '', frag, part, details.totalduration, accurateTimeOffset, chunkMeta, initPTS);
        } else {
          _utils_logger__WEBPACK_IMPORTED_MODULE_14__["logger"].log("Unknown video PTS for cc " + frag.cc + ", waiting for video PTS before demuxing audio frag " + frag.sn + " of [" + details.startSN + " ," + details.endSN + "],track " + trackId);

          var _this$waitingData = this.waitingData = this.waitingData || {
            frag: frag,
            part: part,
            cache: new _demux_chunk_cache__WEBPACK_IMPORTED_MODULE_8__["default"](),
            complete: false
          },
              cache = _this$waitingData.cache;

          cache.push(new Uint8Array(payload));
          this.waitingVideoCC = this.videoTrackCC;
          this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].WAITING_INIT_PTS;
        }
      };

      _proto._handleFragmentLoadComplete = function _handleFragmentLoadComplete(fragLoadedData) {
        if (this.waitingData) {
          this.waitingData.complete = true;
          return;
        }

        _BaseStreamController.prototype._handleFragmentLoadComplete.call(this, fragLoadedData);
      };

      _proto.onBufferReset = function onBufferReset()
      /* event: Events.BUFFER_RESET */
      {
        // reset reference to sourcebuffers
        this.mediaBuffer = this.videoBuffer = null;
        this.loadedmetadata = false;
      };

      _proto.onBufferCreated = function onBufferCreated(event, data) {
        var audioTrack = data.tracks.audio;

        if (audioTrack) {
          this.mediaBuffer = audioTrack.buffer;
        }

        if (data.tracks.video) {
          this.videoBuffer = data.tracks.video.buffer;
        }
      };

      _proto.onFragBuffered = function onFragBuffered(event, data) {
        var frag = data.frag,
            part = data.part;

        if (frag.type !== _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].AUDIO) {
          return;
        }

        if (this.fragContextChanged(frag)) {
          // If a level switch was requested while a fragment was buffering, it will emit the FRAG_BUFFERED event upon completion
          // Avoid setting state back to IDLE or concluding the audio switch; otherwise, the switched-to track will not buffer
          this.warn("Fragment " + frag.sn + (part ? ' p: ' + part.index : '') + " of level " + frag.level + " finished buffering, but was aborted. state: " + this.state + ", audioSwitch: " + this.audioSwitch);
          return;
        }

        if (frag.sn !== 'initSegment') {
          this.fragPrevious = frag;

          if (this.audioSwitch) {
            this.audioSwitch = false;
            this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].AUDIO_TRACK_SWITCHED, {
              id: this.trackId
            });
          }
        }

        this.fragBufferedComplete(frag, part);
      };

      _proto.onError = function onError(event, data) {
        switch (data.details) {
          case _errors__WEBPACK_IMPORTED_MODULE_13__["ErrorDetails"].FRAG_LOAD_ERROR:
          case _errors__WEBPACK_IMPORTED_MODULE_13__["ErrorDetails"].FRAG_LOAD_TIMEOUT:
          case _errors__WEBPACK_IMPORTED_MODULE_13__["ErrorDetails"].KEY_LOAD_ERROR:
          case _errors__WEBPACK_IMPORTED_MODULE_13__["ErrorDetails"].KEY_LOAD_TIMEOUT:
            // TODO: Skip fragments that do not belong to this.fragCurrent audio-group id
            this.onFragmentOrKeyLoadError(_types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].AUDIO, data);
            break;

          case _errors__WEBPACK_IMPORTED_MODULE_13__["ErrorDetails"].AUDIO_TRACK_LOAD_ERROR:
          case _errors__WEBPACK_IMPORTED_MODULE_13__["ErrorDetails"].AUDIO_TRACK_LOAD_TIMEOUT:
            //  when in ERROR state, don't switch back to IDLE state in case a non-fatal error is received
            if (this.state !== _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].ERROR && this.state !== _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].STOPPED) {
              // if fatal error, stop processing, otherwise move to IDLE to retry loading
              this.state = data.fatal ? _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].ERROR : _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE;
              this.warn(data.details + " while loading frag, switching to " + this.state + " state");
            }

            break;

          case _errors__WEBPACK_IMPORTED_MODULE_13__["ErrorDetails"].BUFFER_FULL_ERROR:
            // if in appending state
            if (data.parent === 'audio' && (this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].PARSING || this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].PARSED)) {
              var flushBuffer = true;
              var bufferedInfo = this.getFwdBufferInfo(this.mediaBuffer, _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].AUDIO); // 0.5 : tolerance needed as some browsers stalls playback before reaching buffered end
              // reduce max buf len if current position is buffered

              if (bufferedInfo && bufferedInfo.len > 0.5) {
                flushBuffer = !this.reduceMaxBufferLength(bufferedInfo.len);
              }

              if (flushBuffer) {
                // current position is not buffered, but browser is still complaining about buffer full error
                // this happens on IE/Edge, refer to https://github.com/video-dev/hls.js/pull/708
                // in that case flush the whole audio buffer to recover
                this.warn('Buffer full error also media.currentTime is not buffered, flush audio buffer');
                this.fragCurrent = null;

                _BaseStreamController.prototype.flushMainBuffer.call(this, 0, Number.POSITIVE_INFINITY, 'audio');
              }

              this.resetLoadingState();
            }

            break;
        }
      };

      _proto.onBufferFlushed = function onBufferFlushed(event, _ref3) {
        var type = _ref3.type;

        if (type === _loader_fragment__WEBPACK_IMPORTED_MODULE_7__["ElementaryStreamTypes"].AUDIO) {
          this.bufferFlushed = true;
        }
      };

      _proto._handleTransmuxComplete = function _handleTransmuxComplete(transmuxResult) {
        var _id3$samples;

        var id = 'audio';
        var hls = this.hls;
        var remuxResult = transmuxResult.remuxResult,
            chunkMeta = transmuxResult.chunkMeta;
        var context = this.getCurrentContext(chunkMeta);

        if (!context) {
          this.warn("The loading context changed while buffering fragment " + chunkMeta.sn + " of level " + chunkMeta.level + ". This chunk will not be buffered.");
          this.resetLiveStartWhenNotLoaded(chunkMeta.level);
          return;
        }

        var frag = context.frag,
            part = context.part;
        var audio = remuxResult.audio,
            text = remuxResult.text,
            id3 = remuxResult.id3,
            initSegment = remuxResult.initSegment; // Check if the current fragment has been aborted. We check this by first seeing if we're still playing the current level.
        // If we are, subsequently check if the currently loading fragment (fragCurrent) has changed.

        if (this.fragContextChanged(frag)) {
          return;
        }

        this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].PARSING;

        if (this.audioSwitch && audio) {
          this.completeAudioSwitch();
        }

        if (initSegment !== null && initSegment !== void 0 && initSegment.tracks) {
          this._bufferInitSegment(initSegment.tracks, frag, chunkMeta);

          hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].FRAG_PARSING_INIT_SEGMENT, {
            frag: frag,
            id: id,
            tracks: initSegment.tracks
          }); // Only flush audio from old audio tracks when PTS is known on new audio track
        }

        if (audio) {
          var startPTS = audio.startPTS,
              endPTS = audio.endPTS,
              startDTS = audio.startDTS,
              endDTS = audio.endDTS;

          if (part) {
            part.elementaryStreams[_loader_fragment__WEBPACK_IMPORTED_MODULE_7__["ElementaryStreamTypes"].AUDIO] = {
              startPTS: startPTS,
              endPTS: endPTS,
              startDTS: startDTS,
              endDTS: endDTS
            };
          }

          frag.setElementaryStreamInfo(_loader_fragment__WEBPACK_IMPORTED_MODULE_7__["ElementaryStreamTypes"].AUDIO, startPTS, endPTS, startDTS, endDTS);
          this.bufferFragmentData(audio, frag, part, chunkMeta);
        }

        if (id3 !== null && id3 !== void 0 && (_id3$samples = id3.samples) !== null && _id3$samples !== void 0 && _id3$samples.length) {
          var emittedID3 = _extends({
            frag: frag,
            id: id
          }, id3);

          hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].FRAG_PARSING_METADATA, emittedID3);
        }

        if (text) {
          var emittedText = _extends({
            frag: frag,
            id: id
          }, text);

          hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].FRAG_PARSING_USERDATA, emittedText);
        }
      };

      _proto._bufferInitSegment = function _bufferInitSegment(tracks, frag, chunkMeta) {
        if (this.state !== _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].PARSING) {
          return;
        } // delete any video track found on audio transmuxer


        if (tracks.video) {
          delete tracks.video;
        } // include levelCodec in audio and video tracks


        var track = tracks.audio;

        if (!track) {
          return;
        }

        track.levelCodec = track.codec;
        track.id = 'audio';
        this.log("Init audio buffer, container:" + track.container + ", codecs[parsed]=[" + track.codec + "]");
        this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].BUFFER_CODECS, tracks);
        var initSegment = track.initSegment;

        if (initSegment !== null && initSegment !== void 0 && initSegment.byteLength) {
          var segment = {
            type: 'audio',
            frag: frag,
            part: null,
            chunkMeta: chunkMeta,
            parent: frag.type,
            data: initSegment
          };
          this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].BUFFER_APPENDING, segment);
        } // trigger handler right now


        this.tick();
      };

      _proto.loadFragment = function loadFragment(frag, trackDetails, targetBufferTime) {
        // only load if fragment is not loaded or if in audio switch
        var fragState = this.fragmentTracker.getState(frag);
        this.fragCurrent = frag; // we force a frag loading in audio switch as fragment tracker might not have evicted previous frags in case of quick audio switch

        if (this.audioSwitch || fragState === _fragment_tracker__WEBPACK_IMPORTED_MODULE_4__["FragmentState"].NOT_LOADED || fragState === _fragment_tracker__WEBPACK_IMPORTED_MODULE_4__["FragmentState"].PARTIAL) {
          if (frag.sn === 'initSegment') {
            this._loadInitSegment(frag);
          } else if (trackDetails.live && !Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(this.initPTS[frag.cc])) {
            this.log("Waiting for video PTS in continuity counter " + frag.cc + " of live stream before loading audio fragment " + frag.sn + " of level " + this.trackId);
            this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].WAITING_INIT_PTS;
          } else {
            this.startFragRequested = true;

            _BaseStreamController.prototype.loadFragment.call(this, frag, trackDetails, targetBufferTime);
          }
        }
      };

      _proto.completeAudioSwitch = function completeAudioSwitch() {
        var hls = this.hls,
            media = this.media,
            trackId = this.trackId;

        if (media) {
          this.log('Switching audio track : flushing all audio');

          _BaseStreamController.prototype.flushMainBuffer.call(this, 0, Number.POSITIVE_INFINITY, 'audio');
        }

        this.audioSwitch = false;
        hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].AUDIO_TRACK_SWITCHED, {
          id: trackId
        });
      };

      return AudioStreamController;
    }(_base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["default"]);

    /* harmony default export */ __webpack_exports__["default"] = (AudioStreamController);

    /***/ }),

    /***/ "./src/controller/audio-track-controller.ts":
    /*!**************************************************!*\
      !*** ./src/controller/audio-track-controller.ts ***!
      \**************************************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./src/events.ts");
    /* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors */ "./src/errors.ts");
    /* harmony import */ var _base_playlist_controller__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base-playlist-controller */ "./src/controller/base-playlist-controller.ts");
    /* harmony import */ var _types_loader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../types/loader */ "./src/types/loader.ts");
    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }






    var AudioTrackController = /*#__PURE__*/function (_BasePlaylistControll) {
      _inheritsLoose(AudioTrackController, _BasePlaylistControll);

      function AudioTrackController(hls) {
        var _this;

        _this = _BasePlaylistControll.call(this, hls, '[audio-track-controller]') || this;
        _this.tracks = [];
        _this.groupId = null;
        _this.tracksInGroup = [];
        _this.trackId = -1;
        _this.trackName = '';
        _this.selectDefaultTrack = true;

        _this.registerListeners();

        return _this;
      }

      var _proto = AudioTrackController.prototype;

      _proto.registerListeners = function registerListeners() {
        var hls = this.hls;
        hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MANIFEST_LOADING, this.onManifestLoading, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MANIFEST_PARSED, this.onManifestParsed, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].LEVEL_LOADING, this.onLevelLoading, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].LEVEL_SWITCHING, this.onLevelSwitching, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, this.onError, this);
      };

      _proto.unregisterListeners = function unregisterListeners() {
        var hls = this.hls;
        hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MANIFEST_LOADING, this.onManifestLoading, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MANIFEST_PARSED, this.onManifestParsed, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].LEVEL_LOADING, this.onLevelLoading, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].LEVEL_SWITCHING, this.onLevelSwitching, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, this.onError, this);
      };

      _proto.destroy = function destroy() {
        this.unregisterListeners();
        this.tracks.length = 0;
        this.tracksInGroup.length = 0;

        _BasePlaylistControll.prototype.destroy.call(this);
      };

      _proto.onManifestLoading = function onManifestLoading() {
        this.tracks = [];
        this.groupId = null;
        this.tracksInGroup = [];
        this.trackId = -1;
        this.trackName = '';
        this.selectDefaultTrack = true;
      };

      _proto.onManifestParsed = function onManifestParsed(event, data) {
        this.tracks = data.audioTracks || [];
      };

      _proto.onAudioTrackLoaded = function onAudioTrackLoaded(event, data) {
        var id = data.id,
            details = data.details;
        var currentTrack = this.tracksInGroup[id];

        if (!currentTrack) {
          this.warn("Invalid audio track id " + id);
          return;
        }

        var curDetails = currentTrack.details;
        currentTrack.details = data.details;
        this.log("audioTrack " + id + " loaded [" + details.startSN + "-" + details.endSN + "]");

        if (id === this.trackId) {
          this.retryCount = 0;
          this.playlistLoaded(id, data, curDetails);
        }
      };

      _proto.onLevelLoading = function onLevelLoading(event, data) {
        this.switchLevel(data.level);
      };

      _proto.onLevelSwitching = function onLevelSwitching(event, data) {
        this.switchLevel(data.level);
      };

      _proto.switchLevel = function switchLevel(levelIndex) {
        var levelInfo = this.hls.levels[levelIndex];

        if (!(levelInfo !== null && levelInfo !== void 0 && levelInfo.audioGroupIds)) {
          return;
        }

        var audioGroupId = levelInfo.audioGroupIds[levelInfo.urlId];

        if (this.groupId !== audioGroupId) {
          this.groupId = audioGroupId;
          var audioTracks = this.tracks.filter(function (track) {
            return !audioGroupId || track.groupId === audioGroupId;
          }); // Disable selectDefaultTrack if there are no default tracks

          if (this.selectDefaultTrack && !audioTracks.some(function (track) {
            return track.default;
          })) {
            this.selectDefaultTrack = false;
          }

          this.tracksInGroup = audioTracks;
          var audioTracksUpdated = {
            audioTracks: audioTracks
          };
          this.log("Updating audio tracks, " + audioTracks.length + " track(s) found in \"" + audioGroupId + "\" group-id");
          this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].AUDIO_TRACKS_UPDATED, audioTracksUpdated);
          this.selectInitialTrack();
        }
      };

      _proto.onError = function onError(event, data) {
        _BasePlaylistControll.prototype.onError.call(this, event, data);

        if (data.fatal || !data.context) {
          return;
        }

        if (data.context.type === _types_loader__WEBPACK_IMPORTED_MODULE_3__["PlaylistContextType"].AUDIO_TRACK && data.context.id === this.trackId && data.context.groupId === this.groupId) {
          this.retryLoadingOrFail(data);
        }
      };

      _proto.setAudioTrack = function setAudioTrack(newId) {
        var tracks = this.tracksInGroup; // check if level idx is valid

        if (newId < 0 || newId >= tracks.length) {
          this.warn('Invalid id passed to audio-track controller');
          return;
        } // stopping live reloading timer if any


        this.clearTimer();
        var lastTrack = tracks[this.trackId];
        this.log("Now switching to audio-track index " + newId);
        var track = tracks[newId];
        var id = track.id,
            _track$groupId = track.groupId,
            groupId = _track$groupId === void 0 ? '' : _track$groupId,
            name = track.name,
            type = track.type,
            url = track.url;
        this.trackId = newId;
        this.trackName = name;
        this.selectDefaultTrack = false;
        this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].AUDIO_TRACK_SWITCHING, {
          id: id,
          groupId: groupId,
          name: name,
          type: type,
          url: url
        }); // Do not reload track unless live

        if (track.details && !track.details.live) {
          return;
        }

        var hlsUrlParameters = this.switchParams(track.url, lastTrack === null || lastTrack === void 0 ? void 0 : lastTrack.details);
        this.loadPlaylist(hlsUrlParameters);
      };

      _proto.selectInitialTrack = function selectInitialTrack() {
        var audioTracks = this.tracksInGroup;
        console.assert(audioTracks.length, 'Initial audio track should be selected when tracks are known');
        var currentAudioTrackName = this.trackName;
        var trackId = this.findTrackId(currentAudioTrackName) || this.findTrackId();

        if (trackId !== -1) {
          this.setAudioTrack(trackId);
        } else {
          this.warn("No track found for running audio group-ID: " + this.groupId);
          this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, {
            type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].MEDIA_ERROR,
            details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].AUDIO_TRACK_LOAD_ERROR,
            fatal: true
          });
        }
      };

      _proto.findTrackId = function findTrackId(name) {
        var audioTracks = this.tracksInGroup;

        for (var i = 0; i < audioTracks.length; i++) {
          var track = audioTracks[i];

          if (!this.selectDefaultTrack || track.default) {
            if (!name || name === track.name) {
              return track.id;
            }
          }
        }

        return -1;
      };

      _proto.loadPlaylist = function loadPlaylist(hlsUrlParameters) {
        var audioTrack = this.tracksInGroup[this.trackId];

        if (this.shouldLoadTrack(audioTrack)) {
          var id = audioTrack.id;
          var groupId = audioTrack.groupId;
          var url = audioTrack.url;

          if (hlsUrlParameters) {
            try {
              url = hlsUrlParameters.addDirectives(url);
            } catch (error) {
              this.warn("Could not construct new URL with HLS Delivery Directives: " + error);
            }
          } // track not retrieved yet, or live playlist we need to (re)load it


          this.log("loading audio-track playlist for id: " + id);
          this.clearTimer();
          this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].AUDIO_TRACK_LOADING, {
            url: url,
            id: id,
            groupId: groupId,
            deliveryDirectives: hlsUrlParameters || null
          });
        }
      };

      _createClass(AudioTrackController, [{
        key: "audioTracks",
        get: function get() {
          return this.tracksInGroup;
        }
      }, {
        key: "audioTrack",
        get: function get() {
          return this.trackId;
        },
        set: function set(newId) {
          // If audio track is selected from API then don't choose from the manifest default track
          this.selectDefaultTrack = false;
          this.setAudioTrack(newId);
        }
      }]);

      return AudioTrackController;
    }(_base_playlist_controller__WEBPACK_IMPORTED_MODULE_2__["default"]);

    /* harmony default export */ __webpack_exports__["default"] = (AudioTrackController);

    /***/ }),

    /***/ "./src/controller/base-playlist-controller.ts":
    /*!****************************************************!*\
      !*** ./src/controller/base-playlist-controller.ts ***!
      \****************************************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return BasePlaylistController; });
    /* harmony import */ var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/polyfills/number */ "./src/polyfills/number.ts");
    /* harmony import */ var _types_level__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types/level */ "./src/types/level.ts");
    /* harmony import */ var _level_helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./level-helper */ "./src/controller/level-helper.ts");
    /* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/logger */ "./src/utils/logger.ts");
    /* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../errors */ "./src/errors.ts");







    var BasePlaylistController = /*#__PURE__*/function () {
      function BasePlaylistController(hls, logPrefix) {
        this.hls = void 0;
        this.timer = -1;
        this.canLoad = false;
        this.retryCount = 0;
        this.log = void 0;
        this.warn = void 0;
        this.log = _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].log.bind(_utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"], logPrefix + ":");
        this.warn = _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].warn.bind(_utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"], logPrefix + ":");
        this.hls = hls;
      }

      var _proto = BasePlaylistController.prototype;

      _proto.destroy = function destroy() {
        this.clearTimer(); // @ts-ignore

        this.hls = this.log = this.warn = null;
      };

      _proto.onError = function onError(event, data) {
        if (data.fatal && data.type === _errors__WEBPACK_IMPORTED_MODULE_4__["ErrorTypes"].NETWORK_ERROR) {
          this.clearTimer();
        }
      };

      _proto.clearTimer = function clearTimer() {
        clearTimeout(this.timer);
        this.timer = -1;
      };

      _proto.startLoad = function startLoad() {
        this.canLoad = true;
        this.retryCount = 0;
        this.loadPlaylist();
      };

      _proto.stopLoad = function stopLoad() {
        this.canLoad = false;
        this.clearTimer();
      };

      _proto.switchParams = function switchParams(playlistUri, previous) {
        var renditionReports = previous === null || previous === void 0 ? void 0 : previous.renditionReports;

        if (renditionReports) {
          for (var i = 0; i < renditionReports.length; i++) {
            var attr = renditionReports[i];
            var uri = '' + attr.URI;

            if (uri === playlistUri.substr(-uri.length)) {
              var msn = parseInt(attr['LAST-MSN']);
              var part = parseInt(attr['LAST-PART']);

              if (previous && this.hls.config.lowLatencyMode) {
                var currentGoal = Math.min(previous.age - previous.partTarget, previous.targetduration);

                if (part !== undefined && currentGoal > previous.partTarget) {
                  part += 1;
                }
              }

              if (Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(msn)) {
                return new _types_level__WEBPACK_IMPORTED_MODULE_1__["HlsUrlParameters"](msn, Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(part) ? part : undefined, _types_level__WEBPACK_IMPORTED_MODULE_1__["HlsSkip"].No);
              }
            }
          }
        }
      };

      _proto.loadPlaylist = function loadPlaylist(hlsUrlParameters) {};

      _proto.shouldLoadTrack = function shouldLoadTrack(track) {
        return this.canLoad && track && !!track.url && (!track.details || track.details.live);
      };

      _proto.playlistLoaded = function playlistLoaded(index, data, previousDetails) {
        var _this = this;

        var details = data.details,
            stats = data.stats; // Set last updated date-time

        var elapsed = stats.loading.end ? Math.max(0, self.performance.now() - stats.loading.end) : 0;
        details.advancedDateTime = Date.now() - elapsed; // if current playlist is a live playlist, arm a timer to reload it

        if (details.live || previousDetails !== null && previousDetails !== void 0 && previousDetails.live) {
          details.reloaded(previousDetails);

          if (previousDetails) {
            this.log("live playlist " + index + " " + (details.advanced ? 'REFRESHED ' + details.lastPartSn + '-' + details.lastPartIndex : 'MISSED'));
          } // Merge live playlists to adjust fragment starts and fill in delta playlist skipped segments


          if (previousDetails && details.fragments.length > 0) {
            Object(_level_helper__WEBPACK_IMPORTED_MODULE_2__["mergeDetails"])(previousDetails, details);
          }

          if (!this.canLoad || !details.live) {
            return;
          }

          var deliveryDirectives;
          var msn = undefined;
          var part = undefined;

          if (details.canBlockReload && details.endSN && details.advanced) {
            // Load level with LL-HLS delivery directives
            var lowLatencyMode = this.hls.config.lowLatencyMode;
            var lastPartSn = details.lastPartSn;
            var endSn = details.endSN;
            var lastPartIndex = details.lastPartIndex;
            var hasParts = lastPartIndex !== -1;
            var lastPart = lastPartSn === endSn; // When low latency mode is disabled, we'll skip part requests once the last part index is found

            var nextSnStartIndex = lowLatencyMode ? 0 : lastPartIndex;

            if (hasParts) {
              msn = lastPart ? endSn + 1 : lastPartSn;
              part = lastPart ? nextSnStartIndex : lastPartIndex + 1;
            } else {
              msn = endSn + 1;
            } // Low-Latency CDN Tune-in: "age" header and time since load indicates we're behind by more than one part
            // Update directives to obtain the Playlist that has the estimated additional duration of media


            var lastAdvanced = details.age;
            var cdnAge = lastAdvanced + details.ageHeader;
            var currentGoal = Math.min(cdnAge - details.partTarget, details.targetduration * 1.5);

            if (currentGoal > 0) {
              if (previousDetails && currentGoal > previousDetails.tuneInGoal) {
                // If we attempted to get the next or latest playlist update, but currentGoal increased,
                // then we either can't catchup, or the "age" header cannot be trusted.
                this.warn("CDN Tune-in goal increased from: " + previousDetails.tuneInGoal + " to: " + currentGoal + " with playlist age: " + details.age);
                currentGoal = 0;
              } else {
                var segments = Math.floor(currentGoal / details.targetduration);
                msn += segments;

                if (part !== undefined) {
                  var parts = Math.round(currentGoal % details.targetduration / details.partTarget);
                  part += parts;
                }

                this.log("CDN Tune-in age: " + details.ageHeader + "s last advanced " + lastAdvanced.toFixed(2) + "s goal: " + currentGoal + " skip sn " + segments + " to part " + part);
              }

              details.tuneInGoal = currentGoal;
            }

            deliveryDirectives = this.getDeliveryDirectives(details, data.deliveryDirectives, msn, part);

            if (lowLatencyMode || !lastPart) {
              this.loadPlaylist(deliveryDirectives);
              return;
            }
          } else {
            deliveryDirectives = this.getDeliveryDirectives(details, data.deliveryDirectives, msn, part);
          }

          var reloadInterval = Object(_level_helper__WEBPACK_IMPORTED_MODULE_2__["computeReloadInterval"])(details, stats);

          if (msn !== undefined && details.canBlockReload) {
            reloadInterval -= details.partTarget || 1;
          }

          this.log("reload live playlist " + index + " in " + Math.round(reloadInterval) + " ms");
          this.timer = self.setTimeout(function () {
            return _this.loadPlaylist(deliveryDirectives);
          }, reloadInterval);
        } else {
          this.clearTimer();
        }
      };

      _proto.getDeliveryDirectives = function getDeliveryDirectives(details, previousDeliveryDirectives, msn, part) {
        var skip = Object(_types_level__WEBPACK_IMPORTED_MODULE_1__["getSkipValue"])(details, msn);

        if (previousDeliveryDirectives !== null && previousDeliveryDirectives !== void 0 && previousDeliveryDirectives.skip && details.deltaUpdateFailed) {
          msn = previousDeliveryDirectives.msn;
          part = previousDeliveryDirectives.part;
          skip = _types_level__WEBPACK_IMPORTED_MODULE_1__["HlsSkip"].No;
        }

        return new _types_level__WEBPACK_IMPORTED_MODULE_1__["HlsUrlParameters"](msn, part, skip);
      };

      _proto.retryLoadingOrFail = function retryLoadingOrFail(errorEvent) {
        var _this2 = this;

        var config = this.hls.config;
        var retry = this.retryCount < config.levelLoadingMaxRetry;

        if (retry) {
          var _errorEvent$context;

          this.retryCount++;

          if (errorEvent.details.indexOf('LoadTimeOut') > -1 && (_errorEvent$context = errorEvent.context) !== null && _errorEvent$context !== void 0 && _errorEvent$context.deliveryDirectives) {
            // The LL-HLS request already timed out so retry immediately
            this.warn("retry playlist loading #" + this.retryCount + " after \"" + errorEvent.details + "\"");
            this.loadPlaylist();
          } else {
            // exponential backoff capped to max retry timeout
            var delay = Math.min(Math.pow(2, this.retryCount) * config.levelLoadingRetryDelay, config.levelLoadingMaxRetryTimeout); // Schedule level/track reload

            this.timer = self.setTimeout(function () {
              return _this2.loadPlaylist();
            }, delay);
            this.warn("retry playlist loading #" + this.retryCount + " in " + delay + " ms after \"" + errorEvent.details + "\"");
          }
        } else {
          this.warn("cannot recover from error \"" + errorEvent.details + "\""); // stopping live reloading timer if any

          this.clearTimer(); // switch error to fatal

          errorEvent.fatal = true;
        }

        return retry;
      };

      return BasePlaylistController;
    }();



    /***/ }),

    /***/ "./src/controller/base-stream-controller.ts":
    /*!**************************************************!*\
      !*** ./src/controller/base-stream-controller.ts ***!
      \**************************************************/
    /*! exports provided: State, default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "State", function() { return State; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return BaseStreamController; });
    /* harmony import */ var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/polyfills/number */ "./src/polyfills/number.ts");
    /* harmony import */ var _task_loop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../task-loop */ "./src/task-loop.ts");
    /* harmony import */ var _fragment_tracker__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fragment-tracker */ "./src/controller/fragment-tracker.ts");
    /* harmony import */ var _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/buffer-helper */ "./src/utils/buffer-helper.ts");
    /* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/logger */ "./src/utils/logger.ts");
    /* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../events */ "./src/events.ts");
    /* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../errors */ "./src/errors.ts");
    /* harmony import */ var _types_transmuxer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../types/transmuxer */ "./src/types/transmuxer.ts");
    /* harmony import */ var _utils_mp4_tools__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/mp4-tools */ "./src/utils/mp4-tools.ts");
    /* harmony import */ var _utils_discontinuities__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/discontinuities */ "./src/utils/discontinuities.ts");
    /* harmony import */ var _fragment_finders__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./fragment-finders */ "./src/controller/fragment-finders.ts");
    /* harmony import */ var _level_helper__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./level-helper */ "./src/controller/level-helper.ts");
    /* harmony import */ var _loader_fragment_loader__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../loader/fragment-loader */ "./src/loader/fragment-loader.ts");
    /* harmony import */ var _crypt_decrypter__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../crypt/decrypter */ "./src/crypt/decrypter.ts");
    /* harmony import */ var _utils_time_ranges__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../utils/time-ranges */ "./src/utils/time-ranges.ts");
    /* harmony import */ var _types_loader__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../types/loader */ "./src/types/loader.ts");






    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
















    var State = {
      STOPPED: 'STOPPED',
      IDLE: 'IDLE',
      KEY_LOADING: 'KEY_LOADING',
      FRAG_LOADING: 'FRAG_LOADING',
      FRAG_LOADING_WAITING_RETRY: 'FRAG_LOADING_WAITING_RETRY',
      WAITING_TRACK: 'WAITING_TRACK',
      PARSING: 'PARSING',
      PARSED: 'PARSED',
      BACKTRACKING: 'BACKTRACKING',
      ENDED: 'ENDED',
      ERROR: 'ERROR',
      WAITING_INIT_PTS: 'WAITING_INIT_PTS',
      WAITING_LEVEL: 'WAITING_LEVEL'
    };

    var BaseStreamController = /*#__PURE__*/function (_TaskLoop) {
      _inheritsLoose(BaseStreamController, _TaskLoop);

      function BaseStreamController(hls, fragmentTracker, logPrefix) {
        var _this;

        _this = _TaskLoop.call(this) || this;
        _this.hls = void 0;
        _this.fragPrevious = null;
        _this.fragCurrent = null;
        _this.fragmentTracker = void 0;
        _this.transmuxer = null;
        _this._state = State.STOPPED;
        _this.media = void 0;
        _this.mediaBuffer = void 0;
        _this.config = void 0;
        _this.bitrateTest = false;
        _this.lastCurrentTime = 0;
        _this.nextLoadPosition = 0;
        _this.startPosition = 0;
        _this.loadedmetadata = false;
        _this.fragLoadError = 0;
        _this.retryDate = 0;
        _this.levels = null;
        _this.fragmentLoader = void 0;
        _this.levelLastLoaded = null;
        _this.startFragRequested = false;
        _this.decrypter = void 0;
        _this.initPTS = [];
        _this.onvseeking = null;
        _this.onvended = null;
        _this.logPrefix = '';
        _this.log = void 0;
        _this.warn = void 0;
        _this.logPrefix = logPrefix;
        _this.log = _utils_logger__WEBPACK_IMPORTED_MODULE_4__["logger"].log.bind(_utils_logger__WEBPACK_IMPORTED_MODULE_4__["logger"], logPrefix + ":");
        _this.warn = _utils_logger__WEBPACK_IMPORTED_MODULE_4__["logger"].warn.bind(_utils_logger__WEBPACK_IMPORTED_MODULE_4__["logger"], logPrefix + ":");
        _this.hls = hls;
        _this.fragmentLoader = new _loader_fragment_loader__WEBPACK_IMPORTED_MODULE_12__["default"](hls.config);
        _this.fragmentTracker = fragmentTracker;
        _this.config = hls.config;
        _this.decrypter = new _crypt_decrypter__WEBPACK_IMPORTED_MODULE_13__["default"](hls, hls.config);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_5__["Events"].KEY_LOADED, _this.onKeyLoaded, _assertThisInitialized(_this));
        return _this;
      }

      var _proto = BaseStreamController.prototype;

      _proto.doTick = function doTick() {
        this.onTickEnd();
      };

      _proto.onTickEnd = function onTickEnd() {} // eslint-disable-next-line @typescript-eslint/no-unused-vars
      ;

      _proto.startLoad = function startLoad(startPosition) {};

      _proto.stopLoad = function stopLoad() {
        this.fragmentLoader.abort();
        var frag = this.fragCurrent;

        if (frag) {
          this.fragmentTracker.removeFragment(frag);
        }

        this.resetTransmuxer();
        this.fragCurrent = null;
        this.fragPrevious = null;
        this.clearInterval();
        this.clearNextTick();
        this.state = State.STOPPED;
      };

      _proto._streamEnded = function _streamEnded(bufferInfo, levelDetails) {
        var fragCurrent = this.fragCurrent,
            fragmentTracker = this.fragmentTracker; // we just got done loading the final fragment and there is no other buffered range after ...
        // rationale is that in case there are any buffered ranges after, it means that there are unbuffered portion in between
        // so we should not switch to ENDED in that case, to be able to buffer them

        if (!levelDetails.live && fragCurrent && fragCurrent.sn === levelDetails.endSN && !bufferInfo.nextStart) {
          var fragState = fragmentTracker.getState(fragCurrent);
          return fragState === _fragment_tracker__WEBPACK_IMPORTED_MODULE_2__["FragmentState"].PARTIAL || fragState === _fragment_tracker__WEBPACK_IMPORTED_MODULE_2__["FragmentState"].OK;
        }

        return false;
      };

      _proto.onMediaAttached = function onMediaAttached(event, data) {
        var media = this.media = this.mediaBuffer = data.media;
        this.onvseeking = this.onMediaSeeking.bind(this);
        this.onvended = this.onMediaEnded.bind(this);
        media.addEventListener('seeking', this.onvseeking);
        media.addEventListener('ended', this.onvended);
        var config = this.config;

        if (this.levels && config.autoStartLoad && this.state === State.STOPPED) {
          this.startLoad(config.startPosition);
        }
      };

      _proto.onMediaDetaching = function onMediaDetaching() {
        var media = this.media;

        if (media !== null && media !== void 0 && media.ended) {
          this.log('MSE detaching and video ended, reset startPosition');
          this.startPosition = this.lastCurrentTime = 0;
        } // remove video listeners


        if (media) {
          media.removeEventListener('seeking', this.onvseeking);
          media.removeEventListener('ended', this.onvended);
          this.onvseeking = this.onvended = null;
        }

        this.media = this.mediaBuffer = null;
        this.loadedmetadata = false;
        this.fragmentTracker.removeAllFragments();
        this.stopLoad();
      };

      _proto.onMediaSeeking = function onMediaSeeking() {
        var config = this.config,
            fragCurrent = this.fragCurrent,
            media = this.media,
            mediaBuffer = this.mediaBuffer,
            state = this.state;
        var currentTime = media ? media.currentTime : 0;
        var bufferInfo = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__["BufferHelper"].bufferInfo(mediaBuffer || media, currentTime, config.maxBufferHole);
        this.log("media seeking to " + (Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(currentTime) ? currentTime.toFixed(3) : currentTime) + ", state: " + state);

        if (state === State.ENDED) {
          this.resetLoadingState();
        } else if (fragCurrent && !bufferInfo.len) {
          // check if we are seeking to a unbuffered area AND if frag loading is in progress
          var tolerance = config.maxFragLookUpTolerance;
          var fragStartOffset = fragCurrent.start - tolerance;
          var fragEndOffset = fragCurrent.start + fragCurrent.duration + tolerance;
          var pastFragment = currentTime > fragEndOffset; // check if the seek position is past current fragment, and if so abort loading

          if (currentTime < fragStartOffset || pastFragment) {
            if (pastFragment && fragCurrent.loader) {
              this.log('seeking outside of buffer while fragment load in progress, cancel fragment load');
              fragCurrent.loader.abort();
            }

            this.resetLoadingState();
          }
        }

        if (media) {
          this.lastCurrentTime = currentTime;
        } // in case seeking occurs although no media buffered, adjust startPosition and nextLoadPosition to seek target


        if (!this.loadedmetadata && !bufferInfo.len) {
          this.nextLoadPosition = this.startPosition = currentTime;
        } // Async tick to speed up processing


        this.tickImmediate();
      };

      _proto.onMediaEnded = function onMediaEnded() {
        // reset startPosition and lastCurrentTime to restart playback @ stream beginning
        this.startPosition = this.lastCurrentTime = 0;
      };

      _proto.onKeyLoaded = function onKeyLoaded(event, data) {
        if (this.state !== State.KEY_LOADING || data.frag !== this.fragCurrent || !this.levels) {
          return;
        }

        this.state = State.IDLE;
        var levelDetails = this.levels[data.frag.level].details;

        if (levelDetails) {
          this.loadFragment(data.frag, levelDetails, data.frag.start);
        }
      };

      _proto.onHandlerDestroying = function onHandlerDestroying() {
        this.stopLoad();

        _TaskLoop.prototype.onHandlerDestroying.call(this);
      };

      _proto.onHandlerDestroyed = function onHandlerDestroyed() {
        this.state = State.STOPPED;
        this.hls.off(_events__WEBPACK_IMPORTED_MODULE_5__["Events"].KEY_LOADED, this.onKeyLoaded, this);

        if (this.fragmentLoader) {
          this.fragmentLoader.destroy();
        }

        if (this.decrypter) {
          this.decrypter.destroy();
        }

        this.hls = this.log = this.warn = this.decrypter = this.fragmentLoader = this.fragmentTracker = null;

        _TaskLoop.prototype.onHandlerDestroyed.call(this);
      };

      _proto.loadKey = function loadKey(frag, details) {
        this.log("Loading key for " + frag.sn + " of [" + details.startSN + "-" + details.endSN + "], " + (this.logPrefix === '[stream-controller]' ? 'level' : 'track') + " " + frag.level);
        this.state = State.KEY_LOADING;
        this.fragCurrent = frag;
        this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_5__["Events"].KEY_LOADING, {
          frag: frag
        });
      };

      _proto.loadFragment = function loadFragment(frag, levelDetails, targetBufferTime) {
        this._loadFragForPlayback(frag, levelDetails, targetBufferTime);
      };

      _proto._loadFragForPlayback = function _loadFragForPlayback(frag, levelDetails, targetBufferTime) {
        var _this2 = this;

        var progressCallback = function progressCallback(data) {
          if (_this2.fragContextChanged(frag)) {
            _this2.warn("Fragment " + frag.sn + (data.part ? ' p: ' + data.part.index : '') + " of level " + frag.level + " was dropped during download.");

            _this2.fragmentTracker.removeFragment(frag);

            return;
          }

          frag.stats.chunkCount++;

          _this2._handleFragmentLoadProgress(data);
        };

        this._doFragLoad(frag, levelDetails, targetBufferTime, progressCallback).then(function (data) {
          if (!data) {
            // if we're here we probably needed to backtrack or are waiting for more parts
            return;
          }

          _this2.fragLoadError = 0;
          var state = _this2.state;

          if (_this2.fragContextChanged(frag)) {
            if (state === State.FRAG_LOADING || state === State.BACKTRACKING || !_this2.fragCurrent && state === State.PARSING) {
              _this2.fragmentTracker.removeFragment(frag);

              _this2.state = State.IDLE;
            }

            return;
          }

          if ('payload' in data) {
            _this2.log("Loaded fragment " + frag.sn + " of level " + frag.level);

            _this2.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_5__["Events"].FRAG_LOADED, data); // Tracker backtrack must be called after onFragLoaded to update the fragment entity state to BACKTRACKED
            // This happens after handleTransmuxComplete when the worker or progressive is disabled


            if (_this2.state === State.BACKTRACKING) {
              _this2.fragmentTracker.backtrack(frag, data);

              _this2.resetFragmentLoading(frag);

              return;
            }
          } // Pass through the whole payload; controllers not implementing progressive loading receive data from this callback


          _this2._handleFragmentLoadComplete(data);
        }).catch(function (reason) {
          _this2.warn(reason);

          _this2.resetFragmentLoading(frag);
        });
      };

      _proto.flushMainBuffer = function flushMainBuffer(startOffset, endOffset, type) {
        if (type === void 0) {
          type = null;
        }

        if (!(startOffset - endOffset)) {
          return;
        } // When alternate audio is playing, the audio-stream-controller is responsible for the audio buffer. Otherwise,
        // passing a null type flushes both buffers


        var flushScope = {
          startOffset: startOffset,
          endOffset: endOffset,
          type: type
        }; // Reset load errors on flush

        this.fragLoadError = 0;
        this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_5__["Events"].BUFFER_FLUSHING, flushScope);
      };

      _proto._loadInitSegment = function _loadInitSegment(frag) {
        var _this3 = this;

        this._doFragLoad(frag).then(function (data) {
          if (!data || _this3.fragContextChanged(frag) || !_this3.levels) {
            throw new Error('init load aborted');
          }

          return data;
        }).then(function (data) {
          var hls = _this3.hls;
          var payload = data.payload;
          var decryptData = frag.decryptdata; // check to see if the payload needs to be decrypted

          if (payload && payload.byteLength > 0 && decryptData && decryptData.key && decryptData.iv && decryptData.method === 'AES-128') {
            var startTime = self.performance.now(); // decrypt the subtitles

            return _this3.decrypter.webCryptoDecrypt(new Uint8Array(payload), decryptData.key.buffer, decryptData.iv.buffer).then(function (decryptedData) {
              var endTime = self.performance.now();
              hls.trigger(_events__WEBPACK_IMPORTED_MODULE_5__["Events"].FRAG_DECRYPTED, {
                frag: frag,
                payload: decryptedData,
                stats: {
                  tstart: startTime,
                  tdecrypt: endTime
                }
              });
              data.payload = decryptedData;
              return data;
            });
          }

          return data;
        }).then(function (data) {
          var fragCurrent = _this3.fragCurrent,
              hls = _this3.hls,
              levels = _this3.levels;

          if (!levels) {
            throw new Error('init load aborted, missing levels');
          }

          var details = levels[frag.level].details;
          console.assert(details, 'Level details are defined when init segment is loaded');
          var stats = frag.stats;
          _this3.state = State.IDLE;
          _this3.fragLoadError = 0;
          frag.data = new Uint8Array(data.payload);
          stats.parsing.start = stats.buffering.start = self.performance.now();
          stats.parsing.end = stats.buffering.end = self.performance.now(); // Silence FRAG_BUFFERED event if fragCurrent is null

          if (data.frag === fragCurrent) {
            hls.trigger(_events__WEBPACK_IMPORTED_MODULE_5__["Events"].FRAG_BUFFERED, {
              stats: stats,
              frag: fragCurrent,
              part: null,
              id: frag.type
            });
          }

          _this3.tick();
        }).catch(function (reason) {
          _this3.warn(reason);

          _this3.resetFragmentLoading(frag);
        });
      };

      _proto.fragContextChanged = function fragContextChanged(frag) {
        var fragCurrent = this.fragCurrent;
        return !frag || !fragCurrent || frag.level !== fragCurrent.level || frag.sn !== fragCurrent.sn || frag.urlId !== fragCurrent.urlId;
      };

      _proto.fragBufferedComplete = function fragBufferedComplete(frag, part) {
        var media = this.mediaBuffer ? this.mediaBuffer : this.media;
        this.log("Buffered " + frag.type + " sn: " + frag.sn + (part ? ' part: ' + part.index : '') + " of " + (this.logPrefix === '[stream-controller]' ? 'level' : 'track') + " " + frag.level + " " + _utils_time_ranges__WEBPACK_IMPORTED_MODULE_14__["default"].toString(_utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__["BufferHelper"].getBuffered(media)));
        this.state = State.IDLE;
        this.tick();
      };

      _proto._handleFragmentLoadComplete = function _handleFragmentLoadComplete(fragLoadedEndData) {
        var transmuxer = this.transmuxer;

        if (!transmuxer) {
          return;
        }

        var frag = fragLoadedEndData.frag,
            part = fragLoadedEndData.part,
            partsLoaded = fragLoadedEndData.partsLoaded; // If we did not load parts, or loaded all parts, we have complete (not partial) fragment data

        var complete = !partsLoaded || partsLoaded.length === 0 || partsLoaded.some(function (fragLoaded) {
          return !fragLoaded;
        });
        var chunkMeta = new _types_transmuxer__WEBPACK_IMPORTED_MODULE_7__["ChunkMetadata"](frag.level, frag.sn, frag.stats.chunkCount + 1, 0, part ? part.index : -1, !complete);
        transmuxer.flush(chunkMeta);
      } // eslint-disable-next-line @typescript-eslint/no-unused-vars
      ;

      _proto._handleFragmentLoadProgress = function _handleFragmentLoadProgress(frag) {};

      _proto._doFragLoad = function _doFragLoad(frag, details, targetBufferTime, progressCallback) {
        var _this4 = this;

        if (targetBufferTime === void 0) {
          targetBufferTime = null;
        }

        if (!this.levels) {
          throw new Error('frag load aborted, missing levels');
        }

        targetBufferTime = Math.max(frag.start, targetBufferTime || 0);

        if (this.config.lowLatencyMode && details) {
          var partList = details.partList;

          if (partList && progressCallback) {
            if (targetBufferTime > frag.end && details.fragmentHint) {
              frag = details.fragmentHint;
            }

            var partIndex = this.getNextPart(partList, frag, targetBufferTime);

            if (partIndex > -1) {
              var part = partList[partIndex];
              this.log("Loading part sn: " + frag.sn + " p: " + part.index + " cc: " + frag.cc + " of playlist [" + details.startSN + "-" + details.endSN + "] parts [0-" + partIndex + "-" + (partList.length - 1) + "] " + (this.logPrefix === '[stream-controller]' ? 'level' : 'track') + ": " + frag.level + ", target: " + parseFloat(targetBufferTime.toFixed(3)));
              this.nextLoadPosition = part.start + part.duration;
              this.state = State.FRAG_LOADING;
              this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_5__["Events"].FRAG_LOADING, {
                frag: frag,
                part: partList[partIndex],
                targetBufferTime: targetBufferTime
              });
              return this.doFragPartsLoad(frag, partList, partIndex, progressCallback).catch(function (error) {
                return _this4.handleFragLoadError(error);
              });
            } else if (!frag.url || this.loadedEndOfParts(partList, targetBufferTime)) {
              // Fragment hint has no parts
              return Promise.resolve(null);
            }
          }
        }

        this.log("Loading fragment " + frag.sn + " cc: " + frag.cc + " " + (details ? 'of [' + details.startSN + '-' + details.endSN + '] ' : '') + (this.logPrefix === '[stream-controller]' ? 'level' : 'track') + ": " + frag.level + ", target: " + parseFloat(targetBufferTime.toFixed(3))); // Don't update nextLoadPosition for fragments which are not buffered

        if (Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(frag.sn) && !this.bitrateTest) {
          this.nextLoadPosition = frag.start + frag.duration;
        }

        this.state = State.FRAG_LOADING;
        this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_5__["Events"].FRAG_LOADING, {
          frag: frag,
          targetBufferTime: targetBufferTime
        });
        return this.fragmentLoader.load(frag, progressCallback).catch(function (error) {
          return _this4.handleFragLoadError(error);
        });
      };

      _proto.doFragPartsLoad = function doFragPartsLoad(frag, partList, partIndex, progressCallback) {
        var _this5 = this;

        return new Promise(function (resolve, reject) {
          var partsLoaded = [];

          var loadPartIndex = function loadPartIndex(index) {
            var part = partList[index];

            _this5.fragmentLoader.loadPart(frag, part, progressCallback).then(function (partLoadedData) {
              partsLoaded[part.index] = partLoadedData;
              var loadedPart = partLoadedData.part;

              _this5.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_5__["Events"].FRAG_LOADED, partLoadedData);

              var nextPart = partList[index + 1];

              if (nextPart && nextPart.fragment === frag) {
                loadPartIndex(index + 1);
              } else {
                return resolve({
                  frag: frag,
                  part: loadedPart,
                  partsLoaded: partsLoaded
                });
              }
            }).catch(reject);
          };

          loadPartIndex(partIndex);
        });
      };

      _proto.handleFragLoadError = function handleFragLoadError(_ref) {
        var data = _ref.data;

        if (data && data.details === _errors__WEBPACK_IMPORTED_MODULE_6__["ErrorDetails"].INTERNAL_ABORTED) {
          this.handleFragLoadAborted(data.frag, data.part);
        } else {
          this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_5__["Events"].ERROR, data);
        }

        return null;
      };

      _proto._handleTransmuxerFlush = function _handleTransmuxerFlush(chunkMeta) {
        var context = this.getCurrentContext(chunkMeta);

        if (!context || this.state !== State.PARSING) {
          if (!this.fragCurrent) {
            this.state = State.IDLE;
          }

          return;
        }

        var frag = context.frag,
            part = context.part,
            level = context.level;
        var now = self.performance.now();
        frag.stats.parsing.end = now;

        if (part) {
          part.stats.parsing.end = now;
        }

        this.updateLevelTiming(frag, part, level, chunkMeta.partial);
      };

      _proto.getCurrentContext = function getCurrentContext(chunkMeta) {
        var levels = this.levels;
        var levelIndex = chunkMeta.level,
            sn = chunkMeta.sn,
            partIndex = chunkMeta.part;

        if (!levels || !levels[levelIndex]) {
          this.warn("Levels object was unset while buffering fragment " + sn + " of level " + levelIndex + ". The current chunk will not be buffered.");
          return null;
        }

        var level = levels[levelIndex];
        var part = partIndex > -1 ? Object(_level_helper__WEBPACK_IMPORTED_MODULE_11__["getPartWith"])(level, sn, partIndex) : null;
        var frag = part ? part.fragment : Object(_level_helper__WEBPACK_IMPORTED_MODULE_11__["getFragmentWithSN"])(level, sn, this.fragCurrent);

        if (!frag) {
          return null;
        }

        return {
          frag: frag,
          part: part,
          level: level
        };
      };

      _proto.bufferFragmentData = function bufferFragmentData(data, frag, part, chunkMeta) {
        if (!data || this.state !== State.PARSING) {
          return;
        }

        var data1 = data.data1,
            data2 = data.data2;
        var buffer = data1;

        if (data1 && data2) {
          // Combine the moof + mdat so that we buffer with a single append
          buffer = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_8__["appendUint8Array"])(data1, data2);
        }

        if (!buffer || !buffer.length) {
          return;
        }

        var segment = {
          type: data.type,
          frag: frag,
          part: part,
          chunkMeta: chunkMeta,
          parent: frag.type,
          data: buffer
        };
        this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_5__["Events"].BUFFER_APPENDING, segment);

        if (data.dropped && data.independent && !part) {
          // Clear buffer so that we reload previous segments sequentially if required
          this.flushBufferGap(frag);
        }
      };

      _proto.flushBufferGap = function flushBufferGap(frag) {
        var media = this.media;

        if (!media) {
          return;
        } // If currentTime is not buffered, clear the back buffer so that we can backtrack as much as needed


        if (!_utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__["BufferHelper"].isBuffered(media, media.currentTime)) {
          this.flushMainBuffer(0, frag.start);
          return;
        } // Remove back-buffer without interrupting playback to allow back tracking


        var currentTime = media.currentTime;
        var bufferInfo = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__["BufferHelper"].bufferInfo(media, currentTime, 0);
        var fragDuration = frag.duration;
        var segmentFraction = Math.min(this.config.maxFragLookUpTolerance * 2, fragDuration * 0.25);
        var start = Math.max(Math.min(frag.start - segmentFraction, bufferInfo.end - segmentFraction), currentTime + segmentFraction);

        if (frag.start - start > segmentFraction) {
          this.flushMainBuffer(start, frag.start);
        }
      };

      _proto.getFwdBufferInfo = function getFwdBufferInfo(bufferable, type) {
        var config = this.config;
        var pos = this.getLoadPosition();

        if (!Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(pos)) {
          return null;
        }

        var bufferInfo = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__["BufferHelper"].bufferInfo(bufferable, pos, config.maxBufferHole); // Workaround flaw in getting forward buffer when maxBufferHole is smaller than gap at current pos

        if (bufferInfo.len === 0 && bufferInfo.nextStart !== undefined) {
          var bufferedFragAtPos = this.fragmentTracker.getBufferedFrag(pos, type);

          if (bufferedFragAtPos && bufferInfo.nextStart < bufferedFragAtPos.end) {
            return _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__["BufferHelper"].bufferInfo(bufferable, pos, Math.max(bufferInfo.nextStart, config.maxBufferHole));
          }
        }

        return bufferInfo;
      };

      _proto.getMaxBufferLength = function getMaxBufferLength(levelBitrate) {
        var config = this.config;
        var maxBufLen;

        if (levelBitrate) {
          maxBufLen = Math.max(8 * config.maxBufferSize / levelBitrate, config.maxBufferLength);
        } else {
          maxBufLen = config.maxBufferLength;
        }

        return Math.min(maxBufLen, config.maxMaxBufferLength);
      };

      _proto.reduceMaxBufferLength = function reduceMaxBufferLength(threshold) {
        var config = this.config;
        var minLength = threshold || config.maxBufferLength;

        if (config.maxMaxBufferLength >= minLength) {
          // reduce max buffer length as it might be too high. we do this to avoid loop flushing ...
          config.maxMaxBufferLength /= 2;
          this.warn("Reduce max buffer length to " + config.maxMaxBufferLength + "s");
          return true;
        }

        return false;
      };

      _proto.getNextFragment = function getNextFragment(pos, levelDetails) {
        var _frag, _frag2;

        var fragments = levelDetails.fragments;
        var fragLen = fragments.length;

        if (!fragLen) {
          return null;
        } // find fragment index, contiguous with end of buffer position


        var config = this.config;
        var start = fragments[0].start;
        var frag;

        if (levelDetails.live) {
          var initialLiveManifestSize = config.initialLiveManifestSize;

          if (fragLen < initialLiveManifestSize) {
            this.warn("Not enough fragments to start playback (have: " + fragLen + ", need: " + initialLiveManifestSize + ")");
            return null;
          } // The real fragment start times for a live stream are only known after the PTS range for that level is known.
          // In order to discover the range, we load the best matching fragment for that level and demux it.
          // Do not load using live logic if the starting frag is requested - we want to use getFragmentAtPosition() so that
          // we get the fragment matching that start time


          if (!levelDetails.PTSKnown && !this.startFragRequested && this.startPosition === -1) {
            frag = this.getInitialLiveFragment(levelDetails, fragments);
            this.startPosition = frag ? this.hls.liveSyncPosition || frag.start : pos;
          }
        } else if (pos <= start) {
          // VoD playlist: if loadPosition before start of playlist, load first fragment
          frag = fragments[0];
        } // If we haven't run into any special cases already, just load the fragment most closely matching the requested position


        if (!frag) {
          var end = config.lowLatencyMode ? levelDetails.partEnd : levelDetails.fragmentEnd;
          frag = this.getFragmentAtPosition(pos, end, levelDetails);
        } // If an initSegment is present, it must be buffered first


        if ((_frag = frag) !== null && _frag !== void 0 && _frag.initSegment && !((_frag2 = frag) !== null && _frag2 !== void 0 && _frag2.initSegment.data) && !this.bitrateTest) {
          frag = frag.initSegment;
        }

        return frag;
      };

      _proto.getNextPart = function getNextPart(partList, frag, targetBufferTime) {
        var nextPart = -1;
        var contiguous = false;
        var independentAttrOmitted = true;

        for (var i = 0, len = partList.length; i < len; i++) {
          var part = partList[i];
          independentAttrOmitted = independentAttrOmitted && !part.independent;

          if (nextPart > -1 && targetBufferTime < part.start) {
            break;
          }

          var loaded = part.loaded;

          if (!loaded && (contiguous || part.independent || independentAttrOmitted) && part.fragment === frag) {
            nextPart = i;
          }

          contiguous = loaded;
        }

        return nextPart;
      };

      _proto.loadedEndOfParts = function loadedEndOfParts(partList, targetBufferTime) {
        var lastPart = partList[partList.length - 1];
        return lastPart && targetBufferTime > lastPart.start && lastPart.loaded;
      }
      /*
       This method is used find the best matching first fragment for a live playlist. This fragment is used to calculate the
       "sliding" of the playlist, which is its offset from the start of playback. After sliding we can compute the real
       start and end times for each fragment in the playlist (after which this method will not need to be called).
      */
      ;

      _proto.getInitialLiveFragment = function getInitialLiveFragment(levelDetails, fragments) {
        var fragPrevious = this.fragPrevious;
        var frag = null;

        if (fragPrevious) {
          if (levelDetails.hasProgramDateTime) {
            // Prefer using PDT, because it can be accurate enough to choose the correct fragment without knowing the level sliding
            this.log("Live playlist, switching playlist, load frag with same PDT: " + fragPrevious.programDateTime);
            frag = Object(_fragment_finders__WEBPACK_IMPORTED_MODULE_10__["findFragmentByPDT"])(fragments, fragPrevious.endProgramDateTime, this.config.maxFragLookUpTolerance);
          }

          if (!frag) {
            // SN does not need to be accurate between renditions, but depending on the packaging it may be so.
            var targetSN = fragPrevious.sn + 1;

            if (targetSN >= levelDetails.startSN && targetSN <= levelDetails.endSN) {
              var fragNext = fragments[targetSN - levelDetails.startSN]; // Ensure that we're staying within the continuity range, since PTS resets upon a new range

              if (fragPrevious.cc === fragNext.cc) {
                frag = fragNext;
                this.log("Live playlist, switching playlist, load frag with next SN: " + frag.sn);
              }
            } // It's important to stay within the continuity range if available; otherwise the fragments in the playlist
            // will have the wrong start times


            if (!frag) {
              frag = Object(_fragment_finders__WEBPACK_IMPORTED_MODULE_10__["findFragWithCC"])(fragments, fragPrevious.cc);

              if (frag) {
                this.log("Live playlist, switching playlist, load frag with same CC: " + frag.sn);
              }
            }
          }
        } else {
          // Find a new start fragment when fragPrevious is null
          var liveStart = this.hls.liveSyncPosition;

          if (liveStart !== null) {
            frag = this.getFragmentAtPosition(liveStart, this.bitrateTest ? levelDetails.fragmentEnd : levelDetails.edge, levelDetails);
          }
        }

        return frag;
      }
      /*
      This method finds the best matching fragment given the provided position.
       */
      ;

      _proto.getFragmentAtPosition = function getFragmentAtPosition(bufferEnd, end, levelDetails) {
        var config = this.config,
            fragPrevious = this.fragPrevious;
        var fragments = levelDetails.fragments,
            endSN = levelDetails.endSN;
        var fragmentHint = levelDetails.fragmentHint;
        var tolerance = config.maxFragLookUpTolerance;
        var loadingParts = !!(config.lowLatencyMode && levelDetails.partList && fragmentHint);

        if (loadingParts && fragmentHint && !this.bitrateTest) {
          // Include incomplete fragment with parts at end
          fragments = fragments.concat(fragmentHint);
          endSN = fragmentHint.sn;
        }

        var frag;

        if (bufferEnd < end) {
          var lookupTolerance = bufferEnd > end - tolerance ? 0 : tolerance; // Remove the tolerance if it would put the bufferEnd past the actual end of stream
          // Uses buffer and sequence number to calculate switch segment (required if using EXT-X-DISCONTINUITY-SEQUENCE)

          frag = Object(_fragment_finders__WEBPACK_IMPORTED_MODULE_10__["findFragmentByPTS"])(fragPrevious, fragments, bufferEnd, lookupTolerance);
        } else {
          // reach end of playlist
          frag = fragments[fragments.length - 1];
        }

        if (frag) {
          var curSNIdx = frag.sn - levelDetails.startSN;
          var sameLevel = fragPrevious && frag.level === fragPrevious.level;
          var nextFrag = fragments[curSNIdx + 1];
          var fragState = this.fragmentTracker.getState(frag);

          if (fragState === _fragment_tracker__WEBPACK_IMPORTED_MODULE_2__["FragmentState"].BACKTRACKED) {
            frag = null;
            var i = curSNIdx;

            while (fragments[i] && this.fragmentTracker.getState(fragments[i]) === _fragment_tracker__WEBPACK_IMPORTED_MODULE_2__["FragmentState"].BACKTRACKED) {
              // When fragPrevious is null, backtrack to first the first fragment is not BACKTRACKED for loading
              // When fragPrevious is set, we want the first BACKTRACKED fragment for parsing and buffering
              if (!fragPrevious) {
                frag = fragments[--i];
              } else {
                frag = fragments[i--];
              }
            }

            if (!frag) {
              frag = nextFrag;
            }
          } else if (fragPrevious && frag.sn === fragPrevious.sn && !loadingParts) {
            // Force the next fragment to load if the previous one was already selected. This can occasionally happen with
            // non-uniform fragment durations
            if (sameLevel) {
              if (frag.sn < endSN && this.fragmentTracker.getState(nextFrag) !== _fragment_tracker__WEBPACK_IMPORTED_MODULE_2__["FragmentState"].OK) {
                this.log("SN " + frag.sn + " just loaded, load next one: " + nextFrag.sn);
                frag = nextFrag;
              } else {
                frag = null;
              }
            }
          }
        }

        return frag;
      };

      _proto.synchronizeToLiveEdge = function synchronizeToLiveEdge(levelDetails) {
        var config = this.config,
            media = this.media;

        if (!media) {
          return;
        }

        var liveSyncPosition = this.hls.liveSyncPosition;
        var currentTime = media.currentTime;
        var start = levelDetails.fragments[0].start;
        var end = levelDetails.edge;
        var withinSlidingWindow = currentTime >= start - config.maxFragLookUpTolerance && currentTime <= end; // Continue if we can seek forward to sync position or if current time is outside of sliding window

        if (liveSyncPosition !== null && media.duration > liveSyncPosition && (currentTime < liveSyncPosition || !withinSlidingWindow)) {
          // Continue if buffer is starving or if current time is behind max latency
          var maxLatency = config.liveMaxLatencyDuration !== undefined ? config.liveMaxLatencyDuration : config.liveMaxLatencyDurationCount * levelDetails.targetduration;

          if (!withinSlidingWindow && media.readyState < 4 || currentTime < end - maxLatency) {
            if (!this.loadedmetadata) {
              this.nextLoadPosition = liveSyncPosition;
            } // Only seek if ready and there is not a significant forward buffer available for playback


            if (media.readyState) {
              this.warn("Playback: " + currentTime.toFixed(3) + " is located too far from the end of live sliding playlist: " + end + ", reset currentTime to : " + liveSyncPosition.toFixed(3));
              media.currentTime = liveSyncPosition;
            }
          }
        }
      };

      _proto.alignPlaylists = function alignPlaylists(details, previousDetails) {
        var levels = this.levels,
            levelLastLoaded = this.levelLastLoaded,
            fragPrevious = this.fragPrevious;
        var lastLevel = levelLastLoaded !== null ? levels[levelLastLoaded] : null; // FIXME: If not for `shouldAlignOnDiscontinuities` requiring fragPrevious.cc,
        //  this could all go in level-helper mergeDetails()

        var length = details.fragments.length;

        if (!length) {
          this.warn("No fragments in live playlist");
          return 0;
        }

        var slidingStart = details.fragments[0].start;
        var firstLevelLoad = !previousDetails;

        var aligned = details.alignedSliding && Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(slidingStart);

        if (firstLevelLoad || !aligned && !slidingStart) {
          Object(_utils_discontinuities__WEBPACK_IMPORTED_MODULE_9__["alignStream"])(fragPrevious, lastLevel, details);
          var alignedSlidingStart = details.fragments[0].start;
          this.log("Live playlist sliding: " + alignedSlidingStart.toFixed(2) + " start-sn: " + (previousDetails ? previousDetails.startSN : 'na') + "->" + details.startSN + " prev-sn: " + (fragPrevious ? fragPrevious.sn : 'na') + " fragments: " + length);
          return alignedSlidingStart;
        }

        return slidingStart;
      };

      _proto.waitForCdnTuneIn = function waitForCdnTuneIn(details) {
        // Wait for Low-Latency CDN Tune-in to get an updated playlist
        var advancePartLimit = 3;
        return details.live && details.canBlockReload && details.tuneInGoal > Math.max(details.partHoldBack, details.partTarget * advancePartLimit);
      };

      _proto.setStartPosition = function setStartPosition(details, sliding) {
        // compute start position if set to -1. use it straight away if value is defined
        var startPosition = this.startPosition;

        if (startPosition < sliding) {
          startPosition = -1;
        }

        if (startPosition === -1 || this.lastCurrentTime === -1) {
          // first, check if start time offset has been set in playlist, if yes, use this value
          var startTimeOffset = details.startTimeOffset;

          if (Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(startTimeOffset)) {
            startPosition = sliding + startTimeOffset;

            if (startTimeOffset < 0) {
              startPosition += details.totalduration;
            }

            startPosition = Math.min(Math.max(sliding, startPosition), sliding + details.totalduration);
            this.log("Start time offset " + startTimeOffset + " found in playlist, adjust startPosition to " + startPosition);
            this.startPosition = startPosition;
          } else if (details.live) {
            // Leave this.startPosition at -1, so that we can use `getInitialLiveFragment` logic when startPosition has
            // not been specified via the config or an as an argument to startLoad (#3736).
            startPosition = this.hls.liveSyncPosition || sliding;
          } else {
            this.startPosition = startPosition = 0;
          }

          this.lastCurrentTime = startPosition;
        }

        this.nextLoadPosition = startPosition;
      };

      _proto.getLoadPosition = function getLoadPosition() {
        var media = this.media; // if we have not yet loaded any fragment, start loading from start position

        var pos = 0;

        if (this.loadedmetadata && media) {
          pos = media.currentTime;
        } else if (this.nextLoadPosition) {
          pos = this.nextLoadPosition;
        }

        return pos;
      };

      _proto.handleFragLoadAborted = function handleFragLoadAborted(frag, part) {
        if (this.transmuxer && frag.sn !== 'initSegment' && frag.stats.aborted) {
          this.warn("Fragment " + frag.sn + (part ? ' part' + part.index : '') + " of level " + frag.level + " was aborted");
          this.resetFragmentLoading(frag);
        }
      };

      _proto.resetFragmentLoading = function resetFragmentLoading(frag) {
        if (!this.fragCurrent || !this.fragContextChanged(frag)) {
          this.state = State.IDLE;
        }
      };

      _proto.onFragmentOrKeyLoadError = function onFragmentOrKeyLoadError(filterType, data) {
        if (data.fatal) {
          return;
        }

        var frag = data.frag; // Handle frag error related to caller's filterType

        if (!frag || frag.type !== filterType) {
          return;
        }

        var fragCurrent = this.fragCurrent;
        console.assert(fragCurrent && frag.sn === fragCurrent.sn && frag.level === fragCurrent.level && frag.urlId === fragCurrent.urlId, 'Frag load error must match current frag to retry');
        var config = this.config; // keep retrying until the limit will be reached

        if (this.fragLoadError + 1 <= config.fragLoadingMaxRetry) {
          if (this.resetLiveStartWhenNotLoaded(frag.level)) {
            return;
          } // exponential backoff capped to config.fragLoadingMaxRetryTimeout


          var delay = Math.min(Math.pow(2, this.fragLoadError) * config.fragLoadingRetryDelay, config.fragLoadingMaxRetryTimeout);
          this.warn("Fragment " + frag.sn + " of " + filterType + " " + frag.level + " failed to load, retrying in " + delay + "ms");
          this.retryDate = self.performance.now() + delay;
          this.fragLoadError++;
          this.state = State.FRAG_LOADING_WAITING_RETRY;
        } else if (data.levelRetry) {
          if (filterType === _types_loader__WEBPACK_IMPORTED_MODULE_15__["PlaylistLevelType"].AUDIO) {
            // Reset current fragment since audio track audio is essential and may not have a fail-over track
            this.fragCurrent = null;
          } // Fragment errors that result in a level switch or redundant fail-over
          // should reset the stream controller state to idle


          this.fragLoadError = 0;
          this.state = State.IDLE;
        } else {
          _utils_logger__WEBPACK_IMPORTED_MODULE_4__["logger"].error(data.details + " reaches max retry, redispatch as fatal ..."); // switch error to fatal

          data.fatal = true;
          this.hls.stopLoad();
          this.state = State.ERROR;
        }
      };

      _proto.afterBufferFlushed = function afterBufferFlushed(media, bufferType, playlistType) {
        if (!media) {
          return;
        } // After successful buffer flushing, filter flushed fragments from bufferedFrags use mediaBuffered instead of media
        // (so that we will check against video.buffered ranges in case of alt audio track)


        var bufferedTimeRanges = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__["BufferHelper"].getBuffered(media);
        this.fragmentTracker.detectEvictedFragments(bufferType, bufferedTimeRanges, playlistType);

        if (this.state === State.ENDED) {
          this.resetLoadingState();
        }
      };

      _proto.resetLoadingState = function resetLoadingState() {
        this.fragCurrent = null;
        this.fragPrevious = null;
        this.state = State.IDLE;
      };

      _proto.resetLiveStartWhenNotLoaded = function resetLiveStartWhenNotLoaded(level) {
        // if loadedmetadata is not set, it means that we are emergency switch down on first frag
        // in that case, reset startFragRequested flag
        if (!this.loadedmetadata) {
          this.startFragRequested = false;
          var details = this.levels ? this.levels[level].details : null;

          if (details !== null && details !== void 0 && details.live) {
            // We can't afford to retry after a delay in a live scenario. Update the start position and return to IDLE.
            this.startPosition = -1;
            this.setStartPosition(details, 0);
            this.resetLoadingState();
            return true;
          }

          this.nextLoadPosition = this.startPosition;
        }

        return false;
      };

      _proto.updateLevelTiming = function updateLevelTiming(frag, part, level, partial) {
        var _this6 = this;

        var details = level.details;
        console.assert(!!details, 'level.details must be defined');
        var parsed = Object.keys(frag.elementaryStreams).reduce(function (result, type) {
          var info = frag.elementaryStreams[type];

          if (info) {
            var parsedDuration = info.endPTS - info.startPTS;

            if (parsedDuration <= 0) {
              // Destroy the transmuxer after it's next time offset failed to advance because duration was <= 0.
              // The new transmuxer will be configured with a time offset matching the next fragment start,
              // preventing the timeline from shifting.
              _this6.warn("Could not parse fragment " + frag.sn + " " + type + " duration reliably (" + parsedDuration + ") resetting transmuxer to fallback to playlist timing");

              _this6.resetTransmuxer();

              return result || false;
            }

            var drift = partial ? 0 : Object(_level_helper__WEBPACK_IMPORTED_MODULE_11__["updateFragPTSDTS"])(details, frag, info.startPTS, info.endPTS, info.startDTS, info.endDTS);

            _this6.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_5__["Events"].LEVEL_PTS_UPDATED, {
              details: details,
              level: level,
              drift: drift,
              type: type,
              frag: frag,
              start: info.startPTS,
              end: info.endPTS
            });

            return true;
          }

          return result;
        }, false);

        if (parsed) {
          this.state = State.PARSED;
          this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_5__["Events"].FRAG_PARSED, {
            frag: frag,
            part: part
          });
        } else {
          this.resetLoadingState();
        }
      };

      _proto.resetTransmuxer = function resetTransmuxer() {
        if (this.transmuxer) {
          this.transmuxer.destroy();
          this.transmuxer = null;
        }
      };

      _createClass(BaseStreamController, [{
        key: "state",
        get: function get() {
          return this._state;
        },
        set: function set(nextState) {
          var previousState = this._state;

          if (previousState !== nextState) {
            this._state = nextState;
            this.log(previousState + "->" + nextState);
          }
        }
      }]);

      return BaseStreamController;
    }(_task_loop__WEBPACK_IMPORTED_MODULE_1__["default"]);



    /***/ }),

    /***/ "./src/controller/buffer-controller.ts":
    /*!*********************************************!*\
      !*** ./src/controller/buffer-controller.ts ***!
      \*********************************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return BufferController; });
    /* harmony import */ var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/polyfills/number */ "./src/polyfills/number.ts");
    /* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./src/events.ts");
    /* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/logger */ "./src/utils/logger.ts");
    /* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../errors */ "./src/errors.ts");
    /* harmony import */ var _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/buffer-helper */ "./src/utils/buffer-helper.ts");
    /* harmony import */ var _utils_mediasource_helper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/mediasource-helper */ "./src/utils/mediasource-helper.ts");
    /* harmony import */ var _loader_fragment__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../loader/fragment */ "./src/loader/fragment.ts");
    /* harmony import */ var _buffer_operation_queue__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./buffer-operation-queue */ "./src/controller/buffer-operation-queue.ts");












    var MediaSource = Object(_utils_mediasource_helper__WEBPACK_IMPORTED_MODULE_5__["getMediaSource"])();
    var VIDEO_CODEC_PROFILE_REPACE = /([ha]vc.)(?:\.[^.,]+)+/;

    var BufferController = /*#__PURE__*/function () {
      // The level details used to determine duration, target-duration and live
      // cache the self generated object url to detect hijack of video tag
      // A queue of buffer operations which require the SourceBuffer to not be updating upon execution
      // References to event listeners for each SourceBuffer, so that they can be referenced for event removal
      // The number of BUFFER_CODEC events received before any sourceBuffers are created
      // The total number of BUFFER_CODEC events received
      // A reference to the attached media element
      // A reference to the active media source
      // counters
      function BufferController(_hls) {
        var _this = this;

        this.details = null;
        this._objectUrl = null;
        this.operationQueue = void 0;
        this.listeners = void 0;
        this.hls = void 0;
        this.bufferCodecEventsExpected = 0;
        this._bufferCodecEventsTotal = 0;
        this.media = null;
        this.mediaSource = null;
        this.appendError = 0;
        this.tracks = {};
        this.pendingTracks = {};
        this.sourceBuffer = void 0;

        this._onMediaSourceOpen = function () {
          var hls = _this.hls,
              media = _this.media,
              mediaSource = _this.mediaSource;
          _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log('[buffer-controller]: Media source opened');

          if (media) {
            _this.updateMediaElementDuration();

            hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MEDIA_ATTACHED, {
              media: media
            });
          }

          if (mediaSource) {
            // once received, don't listen anymore to sourceopen event
            mediaSource.removeEventListener('sourceopen', _this._onMediaSourceOpen);
          }

          _this.checkPendingTracks();
        };

        this._onMediaSourceClose = function () {
          _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log('[buffer-controller]: Media source closed');
        };

        this._onMediaSourceEnded = function () {
          _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log('[buffer-controller]: Media source ended');
        };

        this.hls = _hls;

        this._initSourceBuffer();

        this.registerListeners();
      }

      var _proto = BufferController.prototype;

      _proto.hasSourceTypes = function hasSourceTypes() {
        return this.getSourceBufferTypes().length > 0 || Object.keys(this.pendingTracks).length > 0;
      };

      _proto.destroy = function destroy() {
        this.unregisterListeners();
        this.details = null;
      };

      _proto.registerListeners = function registerListeners() {
        var hls = this.hls;
        hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MEDIA_ATTACHING, this.onMediaAttaching, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MEDIA_DETACHING, this.onMediaDetaching, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MANIFEST_PARSED, this.onManifestParsed, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].BUFFER_RESET, this.onBufferReset, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].BUFFER_APPENDING, this.onBufferAppending, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].BUFFER_CODECS, this.onBufferCodecs, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].BUFFER_EOS, this.onBufferEos, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].BUFFER_FLUSHING, this.onBufferFlushing, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].LEVEL_UPDATED, this.onLevelUpdated, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_PARSED, this.onFragParsed, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_CHANGED, this.onFragChanged, this);
      };

      _proto.unregisterListeners = function unregisterListeners() {
        var hls = this.hls;
        hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MEDIA_ATTACHING, this.onMediaAttaching, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MEDIA_DETACHING, this.onMediaDetaching, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MANIFEST_PARSED, this.onManifestParsed, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].BUFFER_RESET, this.onBufferReset, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].BUFFER_APPENDING, this.onBufferAppending, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].BUFFER_CODECS, this.onBufferCodecs, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].BUFFER_EOS, this.onBufferEos, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].BUFFER_FLUSHING, this.onBufferFlushing, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].LEVEL_UPDATED, this.onLevelUpdated, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_PARSED, this.onFragParsed, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_CHANGED, this.onFragChanged, this);
      };

      _proto._initSourceBuffer = function _initSourceBuffer() {
        this.sourceBuffer = {};
        this.operationQueue = new _buffer_operation_queue__WEBPACK_IMPORTED_MODULE_7__["default"](this.sourceBuffer);
        this.listeners = {
          audio: [],
          video: [],
          audiovideo: []
        };
      };

      _proto.onManifestParsed = function onManifestParsed(event, data) {
        // in case of alt audio 2 BUFFER_CODECS events will be triggered, one per stream controller
        // sourcebuffers will be created all at once when the expected nb of tracks will be reached
        // in case alt audio is not used, only one BUFFER_CODEC event will be fired from main stream controller
        // it will contain the expected nb of source buffers, no need to compute it
        var codecEvents = 2;

        if (data.audio && !data.video || !data.altAudio) {
          codecEvents = 1;
        }

        this.bufferCodecEventsExpected = this._bufferCodecEventsTotal = codecEvents;
        this.details = null;
        _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log(this.bufferCodecEventsExpected + " bufferCodec event(s) expected");
      };

      _proto.onMediaAttaching = function onMediaAttaching(event, data) {
        var media = this.media = data.media;

        if (media && MediaSource) {
          var ms = this.mediaSource = new MediaSource(); // MediaSource listeners are arrow functions with a lexical scope, and do not need to be bound

          ms.addEventListener('sourceopen', this._onMediaSourceOpen);
          ms.addEventListener('sourceended', this._onMediaSourceEnded);
          ms.addEventListener('sourceclose', this._onMediaSourceClose); // link video and media Source

          media.src = self.URL.createObjectURL(ms); // cache the locally generated object url

          this._objectUrl = media.src;
        }
      };

      _proto.onMediaDetaching = function onMediaDetaching() {
        var media = this.media,
            mediaSource = this.mediaSource,
            _objectUrl = this._objectUrl;

        if (mediaSource) {
          _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log('[buffer-controller]: media source detaching');

          if (mediaSource.readyState === 'open') {
            try {
              // endOfStream could trigger exception if any sourcebuffer is in updating state
              // we don't really care about checking sourcebuffer state here,
              // as we are anyway detaching the MediaSource
              // let's just avoid this exception to propagate
              mediaSource.endOfStream();
            } catch (err) {
              _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].warn("[buffer-controller]: onMediaDetaching: " + err.message + " while calling endOfStream");
            }
          } // Clean up the SourceBuffers by invoking onBufferReset


          this.onBufferReset();
          mediaSource.removeEventListener('sourceopen', this._onMediaSourceOpen);
          mediaSource.removeEventListener('sourceended', this._onMediaSourceEnded);
          mediaSource.removeEventListener('sourceclose', this._onMediaSourceClose); // Detach properly the MediaSource from the HTMLMediaElement as
          // suggested in https://github.com/w3c/media-source/issues/53.

          if (media) {
            if (_objectUrl) {
              self.URL.revokeObjectURL(_objectUrl);
            } // clean up video tag src only if it's our own url. some external libraries might
            // hijack the video tag and change its 'src' without destroying the Hls instance first


            if (media.src === _objectUrl) {
              media.removeAttribute('src');
              media.load();
            } else {
              _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].warn('[buffer-controller]: media.src was changed by a third party - skip cleanup');
            }
          }

          this.mediaSource = null;
          this.media = null;
          this._objectUrl = null;
          this.bufferCodecEventsExpected = this._bufferCodecEventsTotal;
          this.pendingTracks = {};
          this.tracks = {};
        }

        this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MEDIA_DETACHED, undefined);
      };

      _proto.onBufferReset = function onBufferReset() {
        var _this2 = this;

        this.getSourceBufferTypes().forEach(function (type) {
          var sb = _this2.sourceBuffer[type];

          try {
            if (sb) {
              _this2.removeBufferListeners(type);

              if (_this2.mediaSource) {
                _this2.mediaSource.removeSourceBuffer(sb);
              } // Synchronously remove the SB from the map before the next call in order to prevent an async function from
              // accessing it


              _this2.sourceBuffer[type] = undefined;
            }
          } catch (err) {
            _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].warn("[buffer-controller]: Failed to reset the " + type + " buffer", err);
          }
        });

        this._initSourceBuffer();
      };

      _proto.onBufferCodecs = function onBufferCodecs(event, data) {
        var _this3 = this;

        var sourceBufferCount = this.getSourceBufferTypes().length;
        Object.keys(data).forEach(function (trackName) {
          if (sourceBufferCount) {
            // check if SourceBuffer codec needs to change
            var track = _this3.tracks[trackName];

            if (track && typeof track.buffer.changeType === 'function') {
              var _data$trackName = data[trackName],
                  codec = _data$trackName.codec,
                  levelCodec = _data$trackName.levelCodec,
                  container = _data$trackName.container;
              var currentCodec = (track.levelCodec || track.codec).replace(VIDEO_CODEC_PROFILE_REPACE, '$1');
              var nextCodec = (levelCodec || codec).replace(VIDEO_CODEC_PROFILE_REPACE, '$1');

              if (currentCodec !== nextCodec) {
                var mimeType = container + ";codecs=" + (levelCodec || codec);

                _this3.appendChangeType(trackName, mimeType);
              }
            }
          } else {
            // if source buffer(s) not created yet, appended buffer tracks in this.pendingTracks
            _this3.pendingTracks[trackName] = data[trackName];
          }
        }); // if sourcebuffers already created, do nothing ...

        if (sourceBufferCount) {
          return;
        }

        this.bufferCodecEventsExpected = Math.max(this.bufferCodecEventsExpected - 1, 0);

        if (this.mediaSource && this.mediaSource.readyState === 'open') {
          this.checkPendingTracks();
        }
      };

      _proto.appendChangeType = function appendChangeType(type, mimeType) {
        var _this4 = this;

        var operationQueue = this.operationQueue;
        var operation = {
          execute: function execute() {
            var sb = _this4.sourceBuffer[type];

            if (sb) {
              _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log("[buffer-controller]: changing " + type + " sourceBuffer type to " + mimeType);
              sb.changeType(mimeType);
            }

            operationQueue.shiftAndExecuteNext(type);
          },
          onStart: function onStart() {},
          onComplete: function onComplete() {},
          onError: function onError(e) {
            _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].warn("[buffer-controller]: Failed to change " + type + " SourceBuffer type", e);
          }
        };
        operationQueue.append(operation, type);
      };

      _proto.onBufferAppending = function onBufferAppending(event, eventData) {
        var _this5 = this;

        var hls = this.hls,
            operationQueue = this.operationQueue,
            tracks = this.tracks;
        var data = eventData.data,
            type = eventData.type,
            frag = eventData.frag,
            part = eventData.part,
            chunkMeta = eventData.chunkMeta;
        var chunkStats = chunkMeta.buffering[type];
        var bufferAppendingStart = self.performance.now();
        chunkStats.start = bufferAppendingStart;
        var fragBuffering = frag.stats.buffering;
        var partBuffering = part ? part.stats.buffering : null;

        if (fragBuffering.start === 0) {
          fragBuffering.start = bufferAppendingStart;
        }

        if (partBuffering && partBuffering.start === 0) {
          partBuffering.start = bufferAppendingStart;
        } // TODO: Only update timestampOffset when audio/mpeg fragment or part is not contiguous with previously appended
        // Adjusting `SourceBuffer.timestampOffset` (desired point in the timeline where the next frames should be appended)
        // in Chrome browser when we detect MPEG audio container and time delta between level PTS and `SourceBuffer.timestampOffset`
        // is greater than 100ms (this is enough to handle seek for VOD or level change for LIVE videos).
        // More info here: https://github.com/video-dev/hls.js/issues/332#issuecomment-257986486


        var audioTrack = tracks.audio;
        var checkTimestampOffset = type === 'audio' && chunkMeta.id === 1 && (audioTrack === null || audioTrack === void 0 ? void 0 : audioTrack.container) === 'audio/mpeg';
        var operation = {
          execute: function execute() {
            chunkStats.executeStart = self.performance.now();

            if (checkTimestampOffset) {
              var sb = _this5.sourceBuffer[type];

              if (sb) {
                var delta = frag.start - sb.timestampOffset;

                if (Math.abs(delta) >= 0.1) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log("[buffer-controller]: Updating audio SourceBuffer timestampOffset to " + frag.start + " (delta: " + delta + ") sn: " + frag.sn + ")");
                  sb.timestampOffset = frag.start;
                }
              }
            }

            _this5.appendExecutor(data, type);
          },
          onStart: function onStart() {// logger.debug(`[buffer-controller]: ${type} SourceBuffer updatestart`);
          },
          onComplete: function onComplete() {
            // logger.debug(`[buffer-controller]: ${type} SourceBuffer updateend`);
            var end = self.performance.now();
            chunkStats.executeEnd = chunkStats.end = end;

            if (fragBuffering.first === 0) {
              fragBuffering.first = end;
            }

            if (partBuffering && partBuffering.first === 0) {
              partBuffering.first = end;
            }

            var sourceBuffer = _this5.sourceBuffer;
            var timeRanges = {};

            for (var _type in sourceBuffer) {
              timeRanges[_type] = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_4__["BufferHelper"].getBuffered(sourceBuffer[_type]);
            }

            _this5.appendError = 0;

            _this5.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].BUFFER_APPENDED, {
              type: type,
              frag: frag,
              part: part,
              chunkMeta: chunkMeta,
              parent: frag.type,
              timeRanges: timeRanges
            });
          },
          onError: function onError(err) {
            // in case any error occured while appending, put back segment in segments table
            _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].error("[buffer-controller]: Error encountered while trying to append to the " + type + " SourceBuffer", err);
            var event = {
              type: _errors__WEBPACK_IMPORTED_MODULE_3__["ErrorTypes"].MEDIA_ERROR,
              parent: frag.type,
              details: _errors__WEBPACK_IMPORTED_MODULE_3__["ErrorDetails"].BUFFER_APPEND_ERROR,
              err: err,
              fatal: false
            };

            if (err.code === DOMException.QUOTA_EXCEEDED_ERR) {
              // QuotaExceededError: http://www.w3.org/TR/html5/infrastructure.html#quotaexceedederror
              // let's stop appending any segments, and report BUFFER_FULL_ERROR error
              event.details = _errors__WEBPACK_IMPORTED_MODULE_3__["ErrorDetails"].BUFFER_FULL_ERROR;
            } else {
              _this5.appendError++;
              event.details = _errors__WEBPACK_IMPORTED_MODULE_3__["ErrorDetails"].BUFFER_APPEND_ERROR;
              /* with UHD content, we could get loop of quota exceeded error until
                browser is able to evict some data from sourcebuffer. Retrying can help recover.
              */

              if (_this5.appendError > hls.config.appendErrorMaxRetry) {
                _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].error("[buffer-controller]: Failed " + hls.config.appendErrorMaxRetry + " times to append segment in sourceBuffer");
                event.fatal = true;
              }
            }

            hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].ERROR, event);
          }
        };
        operationQueue.append(operation, type);
      };

      _proto.onBufferFlushing = function onBufferFlushing(event, data) {
        var _this6 = this;

        var operationQueue = this.operationQueue;

        var flushOperation = function flushOperation(type) {
          return {
            execute: _this6.removeExecutor.bind(_this6, type, data.startOffset, data.endOffset),
            onStart: function onStart() {// logger.debug(`[buffer-controller]: Started flushing ${data.startOffset} -> ${data.endOffset} for ${type} Source Buffer`);
            },
            onComplete: function onComplete() {
              // logger.debug(`[buffer-controller]: Finished flushing ${data.startOffset} -> ${data.endOffset} for ${type} Source Buffer`);
              _this6.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].BUFFER_FLUSHED, {
                type: type
              });
            },
            onError: function onError(e) {
              _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].warn("[buffer-controller]: Failed to remove from " + type + " SourceBuffer", e);
            }
          };
        };

        if (data.type) {
          operationQueue.append(flushOperation(data.type), data.type);
        } else {
          this.getSourceBufferTypes().forEach(function (type) {
            operationQueue.append(flushOperation(type), type);
          });
        }
      };

      _proto.onFragParsed = function onFragParsed(event, data) {
        var _this7 = this;

        var frag = data.frag,
            part = data.part;
        var buffersAppendedTo = [];
        var elementaryStreams = part ? part.elementaryStreams : frag.elementaryStreams;

        if (elementaryStreams[_loader_fragment__WEBPACK_IMPORTED_MODULE_6__["ElementaryStreamTypes"].AUDIOVIDEO]) {
          buffersAppendedTo.push('audiovideo');
        } else {
          if (elementaryStreams[_loader_fragment__WEBPACK_IMPORTED_MODULE_6__["ElementaryStreamTypes"].AUDIO]) {
            buffersAppendedTo.push('audio');
          }

          if (elementaryStreams[_loader_fragment__WEBPACK_IMPORTED_MODULE_6__["ElementaryStreamTypes"].VIDEO]) {
            buffersAppendedTo.push('video');
          }
        }

        var onUnblocked = function onUnblocked() {
          var now = self.performance.now();
          frag.stats.buffering.end = now;

          if (part) {
            part.stats.buffering.end = now;
          }

          var stats = part ? part.stats : frag.stats;

          _this7.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_BUFFERED, {
            frag: frag,
            part: part,
            stats: stats,
            id: frag.type
          });
        };

        if (buffersAppendedTo.length === 0) {
          _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].warn("Fragments must have at least one ElementaryStreamType set. type: " + frag.type + " level: " + frag.level + " sn: " + frag.sn);
        }

        this.blockBuffers(onUnblocked, buffersAppendedTo);
      };

      _proto.onFragChanged = function onFragChanged(event, data) {
        this.flushBackBuffer();
      } // on BUFFER_EOS mark matching sourcebuffer(s) as ended and trigger checkEos()
      // an undefined data.type will mark all buffers as EOS.
      ;

      _proto.onBufferEos = function onBufferEos(event, data) {
        var _this8 = this;

        var ended = this.getSourceBufferTypes().reduce(function (acc, type) {
          var sb = _this8.sourceBuffer[type];

          if (!data.type || data.type === type) {
            if (sb && !sb.ended) {
              sb.ended = true;
              _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log("[buffer-controller]: " + type + " sourceBuffer now EOS");
            }
          }

          return acc && !!(!sb || sb.ended);
        }, true);

        if (ended) {
          this.blockBuffers(function () {
            var mediaSource = _this8.mediaSource;

            if (!mediaSource || mediaSource.readyState !== 'open') {
              return;
            } // Allow this to throw and be caught by the enqueueing function


            mediaSource.endOfStream();
          });
        }
      };

      _proto.onLevelUpdated = function onLevelUpdated(event, _ref) {
        var details = _ref.details;

        if (!details.fragments.length) {
          return;
        }

        this.details = details;

        if (this.getSourceBufferTypes().length) {
          this.blockBuffers(this.updateMediaElementDuration.bind(this));
        } else {
          this.updateMediaElementDuration();
        }
      };

      _proto.flushBackBuffer = function flushBackBuffer() {
        var hls = this.hls,
            details = this.details,
            media = this.media,
            sourceBuffer = this.sourceBuffer;

        if (!media || details === null) {
          return;
        }

        var sourceBufferTypes = this.getSourceBufferTypes();

        if (!sourceBufferTypes.length) {
          return;
        } // Support for deprecated liveBackBufferLength


        var backBufferLength = details.live && hls.config.liveBackBufferLength !== null ? hls.config.liveBackBufferLength : hls.config.backBufferLength;

        if (!Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(backBufferLength) || backBufferLength < 0) {
          return;
        }

        var currentTime = media.currentTime;
        var targetDuration = details.levelTargetDuration;
        var maxBackBufferLength = Math.max(backBufferLength, targetDuration);
        var targetBackBufferPosition = Math.floor(currentTime / targetDuration) * targetDuration - maxBackBufferLength;
        sourceBufferTypes.forEach(function (type) {
          var sb = sourceBuffer[type];

          if (sb) {
            var buffered = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_4__["BufferHelper"].getBuffered(sb); // when target buffer start exceeds actual buffer start

            if (buffered.length > 0 && targetBackBufferPosition > buffered.start(0)) {
              hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].BACK_BUFFER_REACHED, {
                bufferEnd: targetBackBufferPosition
              }); // Support for deprecated event:

              if (details.live) {
                hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].LIVE_BACK_BUFFER_REACHED, {
                  bufferEnd: targetBackBufferPosition
                });
              }

              hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].BUFFER_FLUSHING, {
                startOffset: 0,
                endOffset: targetBackBufferPosition,
                type: type
              });
            }
          }
        });
      }
      /**
       * Update Media Source duration to current level duration or override to Infinity if configuration parameter
       * 'liveDurationInfinity` is set to `true`
       * More details: https://github.com/video-dev/hls.js/issues/355
       */
      ;

      _proto.updateMediaElementDuration = function updateMediaElementDuration() {
        if (!this.details || !this.media || !this.mediaSource || this.mediaSource.readyState !== 'open') {
          return;
        }

        var details = this.details,
            hls = this.hls,
            media = this.media,
            mediaSource = this.mediaSource;
        var levelDuration = details.fragments[0].start + details.totalduration;
        var mediaDuration = media.duration;
        var msDuration = Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(mediaSource.duration) ? mediaSource.duration : 0;

        if (details.live && hls.config.liveDurationInfinity) {
          // Override duration to Infinity
          _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log('[buffer-controller]: Media Source duration is set to Infinity');
          mediaSource.duration = Infinity;
          this.updateSeekableRange(details);
        } else if (levelDuration > msDuration && levelDuration > mediaDuration || !Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(mediaDuration)) {
          // levelDuration was the last value we set.
          // not using mediaSource.duration as the browser may tweak this value
          // only update Media Source duration if its value increase, this is to avoid
          // flushing already buffered portion when switching between quality level
          _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log("[buffer-controller]: Updating Media Source duration to " + levelDuration.toFixed(3));
          mediaSource.duration = levelDuration;
        }
      };

      _proto.updateSeekableRange = function updateSeekableRange(levelDetails) {
        var mediaSource = this.mediaSource;
        var fragments = levelDetails.fragments;
        var len = fragments.length;

        if (len && levelDetails.live && mediaSource !== null && mediaSource !== void 0 && mediaSource.setLiveSeekableRange) {
          var start = Math.max(0, fragments[0].start);
          var end = Math.max(start, start + levelDetails.totalduration);
          mediaSource.setLiveSeekableRange(start, end);
        }
      };

      _proto.checkPendingTracks = function checkPendingTracks() {
        var bufferCodecEventsExpected = this.bufferCodecEventsExpected,
            operationQueue = this.operationQueue,
            pendingTracks = this.pendingTracks; // Check if we've received all of the expected bufferCodec events. When none remain, create all the sourceBuffers at once.
        // This is important because the MSE spec allows implementations to throw QuotaExceededErrors if creating new sourceBuffers after
        // data has been appended to existing ones.
        // 2 tracks is the max (one for audio, one for video). If we've reach this max go ahead and create the buffers.

        var pendingTracksCount = Object.keys(pendingTracks).length;

        if (pendingTracksCount && !bufferCodecEventsExpected || pendingTracksCount === 2) {
          // ok, let's create them now !
          this.createSourceBuffers(pendingTracks);
          this.pendingTracks = {}; // append any pending segments now !

          var buffers = this.getSourceBufferTypes();

          if (buffers.length === 0) {
            this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].ERROR, {
              type: _errors__WEBPACK_IMPORTED_MODULE_3__["ErrorTypes"].MEDIA_ERROR,
              details: _errors__WEBPACK_IMPORTED_MODULE_3__["ErrorDetails"].BUFFER_INCOMPATIBLE_CODECS_ERROR,
              fatal: true,
              reason: 'could not create source buffer for media codec(s)'
            });
            return;
          }

          buffers.forEach(function (type) {
            operationQueue.executeNext(type);
          });
        }
      };

      _proto.createSourceBuffers = function createSourceBuffers(tracks) {
        var sourceBuffer = this.sourceBuffer,
            mediaSource = this.mediaSource;

        if (!mediaSource) {
          throw Error('createSourceBuffers called when mediaSource was null');
        }

        var tracksCreated = 0;

        for (var trackName in tracks) {
          if (!sourceBuffer[trackName]) {
            var track = tracks[trackName];

            if (!track) {
              throw Error("source buffer exists for track " + trackName + ", however track does not");
            } // use levelCodec as first priority


            var codec = track.levelCodec || track.codec;
            var mimeType = track.container + ";codecs=" + codec;
            _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log("[buffer-controller]: creating sourceBuffer(" + mimeType + ")");

            try {
              var sb = sourceBuffer[trackName] = mediaSource.addSourceBuffer(mimeType);
              var sbName = trackName;
              this.addBufferListener(sbName, 'updatestart', this._onSBUpdateStart);
              this.addBufferListener(sbName, 'updateend', this._onSBUpdateEnd);
              this.addBufferListener(sbName, 'error', this._onSBUpdateError);
              this.tracks[trackName] = {
                buffer: sb,
                codec: codec,
                container: track.container,
                levelCodec: track.levelCodec,
                id: track.id
              };
              tracksCreated++;
            } catch (err) {
              _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].error("[buffer-controller]: error while trying to add sourceBuffer: " + err.message);
              this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].ERROR, {
                type: _errors__WEBPACK_IMPORTED_MODULE_3__["ErrorTypes"].MEDIA_ERROR,
                details: _errors__WEBPACK_IMPORTED_MODULE_3__["ErrorDetails"].BUFFER_ADD_CODEC_ERROR,
                fatal: false,
                error: err,
                mimeType: mimeType
              });
            }
          }
        }

        if (tracksCreated) {
          this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].BUFFER_CREATED, {
            tracks: this.tracks
          });
        }
      } // Keep as arrow functions so that we can directly reference these functions directly as event listeners
      ;

      _proto._onSBUpdateStart = function _onSBUpdateStart(type) {
        var operationQueue = this.operationQueue;
        var operation = operationQueue.current(type);
        operation.onStart();
      };

      _proto._onSBUpdateEnd = function _onSBUpdateEnd(type) {
        var operationQueue = this.operationQueue;
        var operation = operationQueue.current(type);
        operation.onComplete();
        operationQueue.shiftAndExecuteNext(type);
      };

      _proto._onSBUpdateError = function _onSBUpdateError(type, event) {
        _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].error("[buffer-controller]: " + type + " SourceBuffer error", event); // according to http://www.w3.org/TR/media-source/#sourcebuffer-append-error
        // SourceBuffer errors are not necessarily fatal; if so, the HTMLMediaElement will fire an error event

        this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].ERROR, {
          type: _errors__WEBPACK_IMPORTED_MODULE_3__["ErrorTypes"].MEDIA_ERROR,
          details: _errors__WEBPACK_IMPORTED_MODULE_3__["ErrorDetails"].BUFFER_APPENDING_ERROR,
          fatal: false
        }); // updateend is always fired after error, so we'll allow that to shift the current operation off of the queue

        var operation = this.operationQueue.current(type);

        if (operation) {
          operation.onError(event);
        }
      } // This method must result in an updateend event; if remove is not called, _onSBUpdateEnd must be called manually
      ;

      _proto.removeExecutor = function removeExecutor(type, startOffset, endOffset) {
        var media = this.media,
            mediaSource = this.mediaSource,
            operationQueue = this.operationQueue,
            sourceBuffer = this.sourceBuffer;
        var sb = sourceBuffer[type];

        if (!media || !mediaSource || !sb) {
          _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].warn("[buffer-controller]: Attempting to remove from the " + type + " SourceBuffer, but it does not exist");
          operationQueue.shiftAndExecuteNext(type);
          return;
        }

        var mediaDuration = Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(media.duration) ? media.duration : Infinity;
        var msDuration = Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(mediaSource.duration) ? mediaSource.duration : Infinity;
        var removeStart = Math.max(0, startOffset);
        var removeEnd = Math.min(endOffset, mediaDuration, msDuration);

        if (removeEnd > removeStart) {
          _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log("[buffer-controller]: Removing [" + removeStart + "," + removeEnd + "] from the " + type + " SourceBuffer");
          console.assert(!sb.updating, type + " sourceBuffer must not be updating");
          sb.remove(removeStart, removeEnd);
        } else {
          // Cycle the queue
          operationQueue.shiftAndExecuteNext(type);
        }
      } // This method must result in an updateend event; if append is not called, _onSBUpdateEnd must be called manually
      ;

      _proto.appendExecutor = function appendExecutor(data, type) {
        var operationQueue = this.operationQueue,
            sourceBuffer = this.sourceBuffer;
        var sb = sourceBuffer[type];

        if (!sb) {
          _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].warn("[buffer-controller]: Attempting to append to the " + type + " SourceBuffer, but it does not exist");
          operationQueue.shiftAndExecuteNext(type);
          return;
        }

        sb.ended = false;
        console.assert(!sb.updating, type + " sourceBuffer must not be updating");
        sb.appendBuffer(data);
      } // Enqueues an operation to each SourceBuffer queue which, upon execution, resolves a promise. When all promises
      // resolve, the onUnblocked function is executed. Functions calling this method do not need to unblock the queue
      // upon completion, since we already do it here
      ;

      _proto.blockBuffers = function blockBuffers(onUnblocked, buffers) {
        var _this9 = this;

        if (buffers === void 0) {
          buffers = this.getSourceBufferTypes();
        }

        if (!buffers.length) {
          _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log('[buffer-controller]: Blocking operation requested, but no SourceBuffers exist');
          Promise.resolve(onUnblocked);
          return;
        }

        var operationQueue = this.operationQueue; // logger.debug(`[buffer-controller]: Blocking ${buffers} SourceBuffer`);

        var blockingOperations = buffers.map(function (type) {
          return operationQueue.appendBlocker(type);
        });
        Promise.all(blockingOperations).then(function () {
          // logger.debug(`[buffer-controller]: Blocking operation resolved; unblocking ${buffers} SourceBuffer`);
          onUnblocked();
          buffers.forEach(function (type) {
            var sb = _this9.sourceBuffer[type]; // Only cycle the queue if the SB is not updating. There's a bug in Chrome which sets the SB updating flag to
            // true when changing the MediaSource duration (https://bugs.chromium.org/p/chromium/issues/detail?id=959359&can=2&q=mediasource%20duration)
            // While this is a workaround, it's probably useful to have around

            if (!sb || !sb.updating) {
              operationQueue.shiftAndExecuteNext(type);
            }
          });
        });
      };

      _proto.getSourceBufferTypes = function getSourceBufferTypes() {
        return Object.keys(this.sourceBuffer);
      };

      _proto.addBufferListener = function addBufferListener(type, event, fn) {
        var buffer = this.sourceBuffer[type];

        if (!buffer) {
          return;
        }

        var listener = fn.bind(this, type);
        this.listeners[type].push({
          event: event,
          listener: listener
        });
        buffer.addEventListener(event, listener);
      };

      _proto.removeBufferListeners = function removeBufferListeners(type) {
        var buffer = this.sourceBuffer[type];

        if (!buffer) {
          return;
        }

        this.listeners[type].forEach(function (l) {
          buffer.removeEventListener(l.event, l.listener);
        });
      };

      return BufferController;
    }();



    /***/ }),

    /***/ "./src/controller/buffer-operation-queue.ts":
    /*!**************************************************!*\
      !*** ./src/controller/buffer-operation-queue.ts ***!
      \**************************************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return BufferOperationQueue; });
    /* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/logger */ "./src/utils/logger.ts");


    var BufferOperationQueue = /*#__PURE__*/function () {
      function BufferOperationQueue(sourceBufferReference) {
        this.buffers = void 0;
        this.queues = {
          video: [],
          audio: [],
          audiovideo: []
        };
        this.buffers = sourceBufferReference;
      }

      var _proto = BufferOperationQueue.prototype;

      _proto.append = function append(operation, type) {
        var queue = this.queues[type];
        queue.push(operation);

        if (queue.length === 1 && this.buffers[type]) {
          this.executeNext(type);
        }
      };

      _proto.insertAbort = function insertAbort(operation, type) {
        var queue = this.queues[type];
        queue.unshift(operation);
        this.executeNext(type);
      };

      _proto.appendBlocker = function appendBlocker(type) {
        var execute;
        var promise = new Promise(function (resolve) {
          execute = resolve;
        });
        var operation = {
          execute: execute,
          onStart: function onStart() {},
          onComplete: function onComplete() {},
          onError: function onError() {}
        };
        this.append(operation, type);
        return promise;
      };

      _proto.executeNext = function executeNext(type) {
        var buffers = this.buffers,
            queues = this.queues;
        var sb = buffers[type];
        var queue = queues[type];

        if (queue.length) {
          var operation = queue[0];

          try {
            // Operations are expected to result in an 'updateend' event being fired. If not, the queue will lock. Operations
            // which do not end with this event must call _onSBUpdateEnd manually
            operation.execute();
          } catch (e) {
            _utils_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].warn('[buffer-operation-queue]: Unhandled exception executing the current operation');
            operation.onError(e); // Only shift the current operation off, otherwise the updateend handler will do this for us

            if (!sb || !sb.updating) {
              queue.shift();
              this.executeNext(type);
            }
          }
        }
      };

      _proto.shiftAndExecuteNext = function shiftAndExecuteNext(type) {
        this.queues[type].shift();
        this.executeNext(type);
      };

      _proto.current = function current(type) {
        return this.queues[type][0];
      };

      return BufferOperationQueue;
    }();



    /***/ }),

    /***/ "./src/controller/cap-level-controller.ts":
    /*!************************************************!*\
      !*** ./src/controller/cap-level-controller.ts ***!
      \************************************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./src/events.ts");
    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    /*
     * cap stream level to media size dimension controller
     */


    var CapLevelController = /*#__PURE__*/function () {
      function CapLevelController(hls) {
        this.autoLevelCapping = void 0;
        this.firstLevel = void 0;
        this.media = void 0;
        this.restrictedLevels = void 0;
        this.timer = void 0;
        this.hls = void 0;
        this.streamController = void 0;
        this.clientRect = void 0;
        this.hls = hls;
        this.autoLevelCapping = Number.POSITIVE_INFINITY;
        this.firstLevel = -1;
        this.media = null;
        this.restrictedLevels = [];
        this.timer = undefined;
        this.clientRect = null;
        this.registerListeners();
      }

      var _proto = CapLevelController.prototype;

      _proto.setStreamController = function setStreamController(streamController) {
        this.streamController = streamController;
      };

      _proto.destroy = function destroy() {
        this.unregisterListener();

        if (this.hls.config.capLevelToPlayerSize) {
          this.stopCapping();
        }

        this.media = null;
        this.clientRect = null; // @ts-ignore

        this.hls = this.streamController = null;
      };

      _proto.registerListeners = function registerListeners() {
        var hls = this.hls;
        hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].FPS_DROP_LEVEL_CAPPING, this.onFpsDropLevelCapping, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_ATTACHING, this.onMediaAttaching, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MANIFEST_PARSED, this.onManifestParsed, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].BUFFER_CODECS, this.onBufferCodecs, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_DETACHING, this.onMediaDetaching, this);
      };

      _proto.unregisterListener = function unregisterListener() {
        var hls = this.hls;
        hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].FPS_DROP_LEVEL_CAPPING, this.onFpsDropLevelCapping, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_ATTACHING, this.onMediaAttaching, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MANIFEST_PARSED, this.onManifestParsed, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].BUFFER_CODECS, this.onBufferCodecs, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_DETACHING, this.onMediaDetaching, this);
      };

      _proto.onFpsDropLevelCapping = function onFpsDropLevelCapping(event, data) {
        // Don't add a restricted level more than once
        if (CapLevelController.isLevelAllowed(data.droppedLevel, this.restrictedLevels)) {
          this.restrictedLevels.push(data.droppedLevel);
        }
      };

      _proto.onMediaAttaching = function onMediaAttaching(event, data) {
        this.media = data.media instanceof HTMLVideoElement ? data.media : null;
      };

      _proto.onManifestParsed = function onManifestParsed(event, data) {
        var hls = this.hls;
        this.restrictedLevels = [];
        this.firstLevel = data.firstLevel;

        if (hls.config.capLevelToPlayerSize && data.video) {
          // Start capping immediately if the manifest has signaled video codecs
          this.startCapping();
        }
      } // Only activate capping when playing a video stream; otherwise, multi-bitrate audio-only streams will be restricted
      // to the first level
      ;

      _proto.onBufferCodecs = function onBufferCodecs(event, data) {
        var hls = this.hls;

        if (hls.config.capLevelToPlayerSize && data.video) {
          // If the manifest did not signal a video codec capping has been deferred until we're certain video is present
          this.startCapping();
        }
      };

      _proto.onMediaDetaching = function onMediaDetaching() {
        this.stopCapping();
      };

      _proto.detectPlayerSize = function detectPlayerSize() {
        if (this.media && this.mediaHeight > 0 && this.mediaWidth > 0) {
          var levels = this.hls.levels;

          if (levels.length) {
            var hls = this.hls;
            hls.autoLevelCapping = this.getMaxLevel(levels.length - 1);

            if (hls.autoLevelCapping > this.autoLevelCapping && this.streamController) {
              // if auto level capping has a higher value for the previous one, flush the buffer using nextLevelSwitch
              // usually happen when the user go to the fullscreen mode.
              this.streamController.nextLevelSwitch();
            }

            this.autoLevelCapping = hls.autoLevelCapping;
          }
        }
      }
      /*
       * returns level should be the one with the dimensions equal or greater than the media (player) dimensions (so the video will be downscaled)
       */
      ;

      _proto.getMaxLevel = function getMaxLevel(capLevelIndex) {
        var _this = this;

        var levels = this.hls.levels;

        if (!levels.length) {
          return -1;
        }

        var validLevels = levels.filter(function (level, index) {
          return CapLevelController.isLevelAllowed(index, _this.restrictedLevels) && index <= capLevelIndex;
        });
        this.clientRect = null;
        return CapLevelController.getMaxLevelByMediaSize(validLevels, this.mediaWidth, this.mediaHeight);
      };

      _proto.startCapping = function startCapping() {
        if (this.timer) {
          // Don't reset capping if started twice; this can happen if the manifest signals a video codec
          return;
        }

        this.autoLevelCapping = Number.POSITIVE_INFINITY;
        this.hls.firstLevel = this.getMaxLevel(this.firstLevel);
        self.clearInterval(this.timer);
        this.timer = self.setInterval(this.detectPlayerSize.bind(this), 1000);
        this.detectPlayerSize();
      };

      _proto.stopCapping = function stopCapping() {
        this.restrictedLevels = [];
        this.firstLevel = -1;
        this.autoLevelCapping = Number.POSITIVE_INFINITY;

        if (this.timer) {
          self.clearInterval(this.timer);
          this.timer = undefined;
        }
      };

      _proto.getDimensions = function getDimensions() {
        if (this.clientRect) {
          return this.clientRect;
        }

        var media = this.media;
        var boundsRect = {
          width: 0,
          height: 0
        };

        if (media) {
          var clientRect = media.getBoundingClientRect();
          boundsRect.width = clientRect.width;
          boundsRect.height = clientRect.height;

          if (!boundsRect.width && !boundsRect.height) {
            // When the media element has no width or height (equivalent to not being in the DOM),
            // then use its width and height attributes (media.width, media.height)
            boundsRect.width = clientRect.right - clientRect.left || media.width || 0;
            boundsRect.height = clientRect.bottom - clientRect.top || media.height || 0;
          }
        }

        this.clientRect = boundsRect;
        return boundsRect;
      };

      CapLevelController.isLevelAllowed = function isLevelAllowed(level, restrictedLevels) {
        if (restrictedLevels === void 0) {
          restrictedLevels = [];
        }

        return restrictedLevels.indexOf(level) === -1;
      };

      CapLevelController.getMaxLevelByMediaSize = function getMaxLevelByMediaSize(levels, width, height) {
        if (!levels || !levels.length) {
          return -1;
        } // Levels can have the same dimensions but differing bandwidths - since levels are ordered, we can look to the next
        // to determine whether we've chosen the greatest bandwidth for the media's dimensions


        var atGreatestBandiwdth = function atGreatestBandiwdth(curLevel, nextLevel) {
          if (!nextLevel) {
            return true;
          }

          return curLevel.width !== nextLevel.width || curLevel.height !== nextLevel.height;
        }; // If we run through the loop without breaking, the media's dimensions are greater than every level, so default to
        // the max level


        var maxLevelIndex = levels.length - 1;

        for (var i = 0; i < levels.length; i += 1) {
          var level = levels[i];

          if ((level.width >= width || level.height >= height) && atGreatestBandiwdth(level, levels[i + 1])) {
            maxLevelIndex = i;
            break;
          }
        }

        return maxLevelIndex;
      };

      _createClass(CapLevelController, [{
        key: "mediaWidth",
        get: function get() {
          return this.getDimensions().width * CapLevelController.contentScaleFactor;
        }
      }, {
        key: "mediaHeight",
        get: function get() {
          return this.getDimensions().height * CapLevelController.contentScaleFactor;
        }
      }], [{
        key: "contentScaleFactor",
        get: function get() {
          var pixelRatio = 1;

          try {
            pixelRatio = self.devicePixelRatio;
          } catch (e) {
            /* no-op */
          }

          return pixelRatio;
        }
      }]);

      return CapLevelController;
    }();

    /* harmony default export */ __webpack_exports__["default"] = (CapLevelController);

    /***/ }),

    /***/ "./src/controller/eme-controller.ts":
    /*!******************************************!*\
      !*** ./src/controller/eme-controller.ts ***!
      \******************************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./src/events.ts");
    /* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors */ "./src/errors.ts");
    /* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/logger */ "./src/utils/logger.ts");
    /* harmony import */ var _utils_mediakeys_helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/mediakeys-helper */ "./src/utils/mediakeys-helper.ts");
    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    /**
     * @author Stephan Hesse <disparat@gmail.com> | <tchakabam@gmail.com>
     *
     * DRM support for Hls.js
     */




    var MAX_LICENSE_REQUEST_FAILURES = 3;
    /**
     * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration
     * @param {Array<string>} audioCodecs List of required audio codecs to support
     * @param {Array<string>} videoCodecs List of required video codecs to support
     * @param {object} drmSystemOptions Optional parameters/requirements for the key-system
     * @returns {Array<MediaSystemConfiguration>} An array of supported configurations
     */

    var createWidevineMediaKeySystemConfigurations = function createWidevineMediaKeySystemConfigurations(audioCodecs, videoCodecs, drmSystemOptions) {
      /* jshint ignore:line */
      var baseConfig = {
        // initDataTypes: ['keyids', 'mp4'],
        // label: "",
        // persistentState: "not-allowed", // or "required" ?
        // distinctiveIdentifier: "not-allowed", // or "required" ?
        // sessionTypes: ['temporary'],
        audioCapabilities: [],
        // { contentType: 'audio/mp4; codecs="mp4a.40.2"' }
        videoCapabilities: [] // { contentType: 'video/mp4; codecs="avc1.42E01E"' }

      };
      audioCodecs.forEach(function (codec) {
        baseConfig.audioCapabilities.push({
          contentType: "audio/mp4; codecs=\"" + codec + "\"",
          robustness: drmSystemOptions.audioRobustness || ''
        });
      });
      videoCodecs.forEach(function (codec) {
        baseConfig.videoCapabilities.push({
          contentType: "video/mp4; codecs=\"" + codec + "\"",
          robustness: drmSystemOptions.videoRobustness || ''
        });
      });
      return [baseConfig];
    };
    /**
     * The idea here is to handle key-system (and their respective platforms) specific configuration differences
     * in order to work with the local requestMediaKeySystemAccess method.
     *
     * We can also rule-out platform-related key-system support at this point by throwing an error.
     *
     * @param {string} keySystem Identifier for the key-system, see `KeySystems` enum
     * @param {Array<string>} audioCodecs List of required audio codecs to support
     * @param {Array<string>} videoCodecs List of required video codecs to support
     * @throws will throw an error if a unknown key system is passed
     * @returns {Array<MediaSystemConfiguration>} A non-empty Array of MediaKeySystemConfiguration objects
     */


    var getSupportedMediaKeySystemConfigurations = function getSupportedMediaKeySystemConfigurations(keySystem, audioCodecs, videoCodecs, drmSystemOptions) {
      switch (keySystem) {
        case _utils_mediakeys_helper__WEBPACK_IMPORTED_MODULE_3__["KeySystems"].WIDEVINE:
          return createWidevineMediaKeySystemConfigurations(audioCodecs, videoCodecs, drmSystemOptions);

        default:
          throw new Error("Unknown key-system: " + keySystem);
      }
    };

    /**
     * Controller to deal with encrypted media extensions (EME)
     * @see https://developer.mozilla.org/en-US/docs/Web/API/Encrypted_Media_Extensions_API
     *
     * @class
     * @constructor
     */
    var EMEController = /*#__PURE__*/function () {
      /**
       * @constructs
       * @param {Hls} hls Our Hls.js instance
       */
      function EMEController(hls) {
        this.hls = void 0;
        this._widevineLicenseUrl = void 0;
        this._licenseXhrSetup = void 0;
        this._licenseResponseCallback = void 0;
        this._emeEnabled = void 0;
        this._requestMediaKeySystemAccess = void 0;
        this._drmSystemOptions = void 0;
        this._config = void 0;
        this._mediaKeysList = [];
        this._media = null;
        this._hasSetMediaKeys = false;
        this._requestLicenseFailureCount = 0;
        this.mediaKeysPromise = null;
        this._onMediaEncrypted = this.onMediaEncrypted.bind(this);
        this.hls = hls;
        this._config = hls.config;
        this._widevineLicenseUrl = this._config.widevineLicenseUrl;
        this._licenseXhrSetup = this._config.licenseXhrSetup;
        this._licenseResponseCallback = this._config.licenseResponseCallback;
        this._emeEnabled = this._config.emeEnabled;
        this._requestMediaKeySystemAccess = this._config.requestMediaKeySystemAccessFunc;
        this._drmSystemOptions = this._config.drmSystemOptions;

        this._registerListeners();
      }

      var _proto = EMEController.prototype;

      _proto.destroy = function destroy() {
        this._unregisterListeners(); // @ts-ignore


        this.hls = this._onMediaEncrypted = null;
        this._requestMediaKeySystemAccess = null;
      };

      _proto._registerListeners = function _registerListeners() {
        this.hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_ATTACHED, this.onMediaAttached, this);
        this.hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_DETACHED, this.onMediaDetached, this);
        this.hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MANIFEST_PARSED, this.onManifestParsed, this);
      };

      _proto._unregisterListeners = function _unregisterListeners() {
        this.hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_ATTACHED, this.onMediaAttached, this);
        this.hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_DETACHED, this.onMediaDetached, this);
        this.hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MANIFEST_PARSED, this.onManifestParsed, this);
      }
      /**
       * @param {string} keySystem Identifier for the key-system, see `KeySystems` enum
       * @returns {string} License server URL for key-system (if any configured, otherwise causes error)
       * @throws if a unsupported keysystem is passed
       */
      ;

      _proto.getLicenseServerUrl = function getLicenseServerUrl(keySystem) {
        switch (keySystem) {
          case _utils_mediakeys_helper__WEBPACK_IMPORTED_MODULE_3__["KeySystems"].WIDEVINE:
            if (!this._widevineLicenseUrl) {
              break;
            }

            return this._widevineLicenseUrl;
        }

        throw new Error("no license server URL configured for key-system \"" + keySystem + "\"");
      }
      /**
       * Requests access object and adds it to our list upon success
       * @private
       * @param {string} keySystem System ID (see `KeySystems`)
       * @param {Array<string>} audioCodecs List of required audio codecs to support
       * @param {Array<string>} videoCodecs List of required video codecs to support
       * @throws When a unsupported KeySystem is passed
       */
      ;

      _proto._attemptKeySystemAccess = function _attemptKeySystemAccess(keySystem, audioCodecs, videoCodecs) {
        var _this = this;

        // This can throw, but is caught in event handler callpath
        var mediaKeySystemConfigs = getSupportedMediaKeySystemConfigurations(keySystem, audioCodecs, videoCodecs, this._drmSystemOptions);
        _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log('Requesting encrypted media key-system access'); // expecting interface like window.navigator.requestMediaKeySystemAccess

        var keySystemAccessPromise = this.requestMediaKeySystemAccess(keySystem, mediaKeySystemConfigs);
        this.mediaKeysPromise = keySystemAccessPromise.then(function (mediaKeySystemAccess) {
          return _this._onMediaKeySystemAccessObtained(keySystem, mediaKeySystemAccess);
        });
        keySystemAccessPromise.catch(function (err) {
          _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].error("Failed to obtain key-system \"" + keySystem + "\" access:", err);
        });
      };

      /**
       * Handles obtaining access to a key-system
       * @private
       * @param {string} keySystem
       * @param {MediaKeySystemAccess} mediaKeySystemAccess https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemAccess
       */
      _proto._onMediaKeySystemAccessObtained = function _onMediaKeySystemAccessObtained(keySystem, mediaKeySystemAccess) {
        var _this2 = this;

        _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log("Access for key-system \"" + keySystem + "\" obtained");
        var mediaKeysListItem = {
          mediaKeysSessionInitialized: false,
          mediaKeySystemAccess: mediaKeySystemAccess,
          mediaKeySystemDomain: keySystem
        };

        this._mediaKeysList.push(mediaKeysListItem);

        var mediaKeysPromise = Promise.resolve().then(function () {
          return mediaKeySystemAccess.createMediaKeys();
        }).then(function (mediaKeys) {
          mediaKeysListItem.mediaKeys = mediaKeys;
          _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log("Media-keys created for key-system \"" + keySystem + "\"");

          _this2._onMediaKeysCreated();

          return mediaKeys;
        });
        mediaKeysPromise.catch(function (err) {
          _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].error('Failed to create media-keys:', err);
        });
        return mediaKeysPromise;
      }
      /**
       * Handles key-creation (represents access to CDM). We are going to create key-sessions upon this
       * for all existing keys where no session exists yet.
       *
       * @private
       */
      ;

      _proto._onMediaKeysCreated = function _onMediaKeysCreated() {
        var _this3 = this;

        // check for all key-list items if a session exists, otherwise, create one
        this._mediaKeysList.forEach(function (mediaKeysListItem) {
          if (!mediaKeysListItem.mediaKeysSession) {
            // mediaKeys is definitely initialized here
            mediaKeysListItem.mediaKeysSession = mediaKeysListItem.mediaKeys.createSession();

            _this3._onNewMediaKeySession(mediaKeysListItem.mediaKeysSession);
          }
        });
      }
      /**
       * @private
       * @param {*} keySession
       */
      ;

      _proto._onNewMediaKeySession = function _onNewMediaKeySession(keySession) {
        var _this4 = this;

        _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log("New key-system session " + keySession.sessionId);
        keySession.addEventListener('message', function (event) {
          _this4._onKeySessionMessage(keySession, event.message);
        }, false);
      }
      /**
       * @private
       * @param {MediaKeySession} keySession
       * @param {ArrayBuffer} message
       */
      ;

      _proto._onKeySessionMessage = function _onKeySessionMessage(keySession, message) {
        _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log('Got EME message event, creating license request');

        this._requestLicense(message, function (data) {
          _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log("Received license data (length: " + (data ? data.byteLength : data) + "), updating key-session");
          keySession.update(data);
        });
      }
      /**
       * @private
       * @param e {MediaEncryptedEvent}
       */
      ;

      _proto.onMediaEncrypted = function onMediaEncrypted(e) {
        var _this5 = this;

        _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log("Media is encrypted using \"" + e.initDataType + "\" init data type");

        if (!this.mediaKeysPromise) {
          _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].error('Fatal: Media is encrypted but no CDM access or no keys have been requested');
          this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, {
            type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].KEY_SYSTEM_ERROR,
            details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].KEY_SYSTEM_NO_KEYS,
            fatal: true
          });
          return;
        }

        var finallySetKeyAndStartSession = function finallySetKeyAndStartSession(mediaKeys) {
          if (!_this5._media) {
            return;
          }

          _this5._attemptSetMediaKeys(mediaKeys);

          _this5._generateRequestWithPreferredKeySession(e.initDataType, e.initData);
        }; // Could use `Promise.finally` but some Promise polyfills are missing it


        this.mediaKeysPromise.then(finallySetKeyAndStartSession).catch(finallySetKeyAndStartSession);
      }
      /**
       * @private
       */
      ;

      _proto._attemptSetMediaKeys = function _attemptSetMediaKeys(mediaKeys) {
        if (!this._media) {
          throw new Error('Attempted to set mediaKeys without first attaching a media element');
        }

        if (!this._hasSetMediaKeys) {
          // FIXME: see if we can/want/need-to really to deal with several potential key-sessions?
          var keysListItem = this._mediaKeysList[0];

          if (!keysListItem || !keysListItem.mediaKeys) {
            _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].error('Fatal: Media is encrypted but no CDM access or no keys have been obtained yet');
            this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, {
              type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].KEY_SYSTEM_ERROR,
              details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].KEY_SYSTEM_NO_KEYS,
              fatal: true
            });
            return;
          }

          _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log('Setting keys for encrypted media');

          this._media.setMediaKeys(keysListItem.mediaKeys);

          this._hasSetMediaKeys = true;
        }
      }
      /**
       * @private
       */
      ;

      _proto._generateRequestWithPreferredKeySession = function _generateRequestWithPreferredKeySession(initDataType, initData) {
        var _this6 = this;

        // FIXME: see if we can/want/need-to really to deal with several potential key-sessions?
        var keysListItem = this._mediaKeysList[0];

        if (!keysListItem) {
          _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].error('Fatal: Media is encrypted but not any key-system access has been obtained yet');
          this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, {
            type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].KEY_SYSTEM_ERROR,
            details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].KEY_SYSTEM_NO_ACCESS,
            fatal: true
          });
          return;
        }

        if (keysListItem.mediaKeysSessionInitialized) {
          _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].warn('Key-Session already initialized but requested again');
          return;
        }

        var keySession = keysListItem.mediaKeysSession;

        if (!keySession) {
          _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].error('Fatal: Media is encrypted but no key-session existing');
          this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, {
            type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].KEY_SYSTEM_ERROR,
            details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].KEY_SYSTEM_NO_SESSION,
            fatal: true
          });
          return;
        } // initData is null if the media is not CORS-same-origin


        if (!initData) {
          _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].warn('Fatal: initData required for generating a key session is null');
          this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, {
            type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].KEY_SYSTEM_ERROR,
            details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].KEY_SYSTEM_NO_INIT_DATA,
            fatal: true
          });
          return;
        }

        _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log("Generating key-session request for \"" + initDataType + "\" init data type");
        keysListItem.mediaKeysSessionInitialized = true;
        keySession.generateRequest(initDataType, initData).then(function () {
          _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].debug('Key-session generation succeeded');
        }).catch(function (err) {
          _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].error('Error generating key-session request:', err);

          _this6.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, {
            type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].KEY_SYSTEM_ERROR,
            details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].KEY_SYSTEM_NO_SESSION,
            fatal: false
          });
        });
      }
      /**
       * @private
       * @param {string} url License server URL
       * @param {ArrayBuffer} keyMessage Message data issued by key-system
       * @param {function} callback Called when XHR has succeeded
       * @returns {XMLHttpRequest} Unsent (but opened state) XHR object
       * @throws if XMLHttpRequest construction failed
       */
      ;

      _proto._createLicenseXhr = function _createLicenseXhr(url, keyMessage, callback) {
        var xhr = new XMLHttpRequest();
        xhr.responseType = 'arraybuffer';
        xhr.onreadystatechange = this._onLicenseRequestReadyStageChange.bind(this, xhr, url, keyMessage, callback);
        var licenseXhrSetup = this._licenseXhrSetup;

        if (licenseXhrSetup) {
          try {
            licenseXhrSetup.call(this.hls, xhr, url);
            licenseXhrSetup = undefined;
          } catch (e) {
            _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].error(e);
          }
        }

        try {
          // if licenseXhrSetup did not yet call open, let's do it now
          if (!xhr.readyState) {
            xhr.open('POST', url, true);
          }

          if (licenseXhrSetup) {
            licenseXhrSetup.call(this.hls, xhr, url);
          }
        } catch (e) {
          // IE11 throws an exception on xhr.open if attempting to access an HTTP resource over HTTPS
          throw new Error("issue setting up KeySystem license XHR " + e);
        }

        return xhr;
      }
      /**
       * @private
       * @param {XMLHttpRequest} xhr
       * @param {string} url License server URL
       * @param {ArrayBuffer} keyMessage Message data issued by key-system
       * @param {function} callback Called when XHR has succeeded
       */
      ;

      _proto._onLicenseRequestReadyStageChange = function _onLicenseRequestReadyStageChange(xhr, url, keyMessage, callback) {
        switch (xhr.readyState) {
          case 4:
            if (xhr.status === 200) {
              this._requestLicenseFailureCount = 0;
              _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log('License request succeeded');
              var _data = xhr.response;
              var licenseResponseCallback = this._licenseResponseCallback;

              if (licenseResponseCallback) {
                try {
                  _data = licenseResponseCallback.call(this.hls, xhr, url);
                } catch (e) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].error(e);
                }
              }

              callback(_data);
            } else {
              _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].error("License Request XHR failed (" + url + "). Status: " + xhr.status + " (" + xhr.statusText + ")");
              this._requestLicenseFailureCount++;

              if (this._requestLicenseFailureCount > MAX_LICENSE_REQUEST_FAILURES) {
                this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, {
                  type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].KEY_SYSTEM_ERROR,
                  details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].KEY_SYSTEM_LICENSE_REQUEST_FAILED,
                  fatal: true
                });
                return;
              }

              var attemptsLeft = MAX_LICENSE_REQUEST_FAILURES - this._requestLicenseFailureCount + 1;
              _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].warn("Retrying license request, " + attemptsLeft + " attempts left");

              this._requestLicense(keyMessage, callback);
            }

            break;
        }
      }
      /**
       * @private
       * @param {MediaKeysListItem} keysListItem
       * @param {ArrayBuffer} keyMessage
       * @returns {ArrayBuffer} Challenge data posted to license server
       * @throws if KeySystem is unsupported
       */
      ;

      _proto._generateLicenseRequestChallenge = function _generateLicenseRequestChallenge(keysListItem, keyMessage) {
        switch (keysListItem.mediaKeySystemDomain) {
          // case KeySystems.PLAYREADY:
          // from https://github.com/MicrosoftEdge/Demos/blob/master/eme/scripts/demo.js

          /*
          if (this.licenseType !== this.LICENSE_TYPE_WIDEVINE) {
            // For PlayReady CDMs, we need to dig the Challenge out of the XML.
            var keyMessageXml = new DOMParser().parseFromString(String.fromCharCode.apply(null, new Uint16Array(keyMessage)), 'application/xml');
            if (keyMessageXml.getElementsByTagName('Challenge')[0]) {
                challenge = atob(keyMessageXml.getElementsByTagName('Challenge')[0].childNodes[0].nodeValue);
            } else {
                throw 'Cannot find <Challenge> in key message';
            }
            var headerNames = keyMessageXml.getElementsByTagName('name');
            var headerValues = keyMessageXml.getElementsByTagName('value');
            if (headerNames.length !== headerValues.length) {
                throw 'Mismatched header <name>/<value> pair in key message';
            }
            for (var i = 0; i < headerNames.length; i++) {
                xhr.setRequestHeader(headerNames[i].childNodes[0].nodeValue, headerValues[i].childNodes[0].nodeValue);
            }
          }
          break;
          */
          case _utils_mediakeys_helper__WEBPACK_IMPORTED_MODULE_3__["KeySystems"].WIDEVINE:
            // For Widevine CDMs, the challenge is the keyMessage.
            return keyMessage;
        }

        throw new Error("unsupported key-system: " + keysListItem.mediaKeySystemDomain);
      }
      /**
       * @private
       * @param keyMessage
       * @param callback
       */
      ;

      _proto._requestLicense = function _requestLicense(keyMessage, callback) {
        _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log('Requesting content license for key-system');
        var keysListItem = this._mediaKeysList[0];

        if (!keysListItem) {
          _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].error('Fatal error: Media is encrypted but no key-system access has been obtained yet');
          this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, {
            type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].KEY_SYSTEM_ERROR,
            details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].KEY_SYSTEM_NO_ACCESS,
            fatal: true
          });
          return;
        }

        try {
          var _url = this.getLicenseServerUrl(keysListItem.mediaKeySystemDomain);

          var _xhr = this._createLicenseXhr(_url, keyMessage, callback);

          _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log("Sending license request to URL: " + _url);

          var challenge = this._generateLicenseRequestChallenge(keysListItem, keyMessage);

          _xhr.send(challenge);
        } catch (e) {
          _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].error("Failure requesting DRM license: " + e);
          this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, {
            type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].KEY_SYSTEM_ERROR,
            details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].KEY_SYSTEM_LICENSE_REQUEST_FAILED,
            fatal: true
          });
        }
      };

      _proto.onMediaAttached = function onMediaAttached(event, data) {
        if (!this._emeEnabled) {
          return;
        }

        var media = data.media; // keep reference of media

        this._media = media;
        media.addEventListener('encrypted', this._onMediaEncrypted);
      };

      _proto.onMediaDetached = function onMediaDetached() {
        var media = this._media;
        var mediaKeysList = this._mediaKeysList;

        if (!media) {
          return;
        }

        media.removeEventListener('encrypted', this._onMediaEncrypted);
        this._media = null;
        this._mediaKeysList = []; // Close all sessions and remove media keys from the video element.

        Promise.all(mediaKeysList.map(function (mediaKeysListItem) {
          if (mediaKeysListItem.mediaKeysSession) {
            return mediaKeysListItem.mediaKeysSession.close().catch(function () {// Ignore errors when closing the sessions. Closing a session that
              // generated no key requests will throw an error.
            });
          }
        })).then(function () {
          return media.setMediaKeys(null);
        }).catch(function () {// Ignore any failures while removing media keys from the video element.
        });
      };

      _proto.onManifestParsed = function onManifestParsed(event, data) {
        if (!this._emeEnabled) {
          return;
        }

        var audioCodecs = data.levels.map(function (level) {
          return level.audioCodec;
        }).filter(function (audioCodec) {
          return !!audioCodec;
        });
        var videoCodecs = data.levels.map(function (level) {
          return level.videoCodec;
        }).filter(function (videoCodec) {
          return !!videoCodec;
        });

        this._attemptKeySystemAccess(_utils_mediakeys_helper__WEBPACK_IMPORTED_MODULE_3__["KeySystems"].WIDEVINE, audioCodecs, videoCodecs);
      };

      _createClass(EMEController, [{
        key: "requestMediaKeySystemAccess",
        get: function get() {
          if (!this._requestMediaKeySystemAccess) {
            throw new Error('No requestMediaKeySystemAccess function configured');
          }

          return this._requestMediaKeySystemAccess;
        }
      }]);

      return EMEController;
    }();

    /* harmony default export */ __webpack_exports__["default"] = (EMEController);

    /***/ }),

    /***/ "./src/controller/fps-controller.ts":
    /*!******************************************!*\
      !*** ./src/controller/fps-controller.ts ***!
      \******************************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./src/events.ts");
    /* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/logger */ "./src/utils/logger.ts");



    var FPSController = /*#__PURE__*/function () {
      // stream controller must be provided as a dependency!
      function FPSController(hls) {
        this.hls = void 0;
        this.isVideoPlaybackQualityAvailable = false;
        this.timer = void 0;
        this.media = null;
        this.lastTime = void 0;
        this.lastDroppedFrames = 0;
        this.lastDecodedFrames = 0;
        this.streamController = void 0;
        this.hls = hls;
        this.registerListeners();
      }

      var _proto = FPSController.prototype;

      _proto.setStreamController = function setStreamController(streamController) {
        this.streamController = streamController;
      };

      _proto.registerListeners = function registerListeners() {
        this.hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_ATTACHING, this.onMediaAttaching, this);
      };

      _proto.unregisterListeners = function unregisterListeners() {
        this.hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_ATTACHING, this.onMediaAttaching);
      };

      _proto.destroy = function destroy() {
        if (this.timer) {
          clearInterval(this.timer);
        }

        this.unregisterListeners();
        this.isVideoPlaybackQualityAvailable = false;
        this.media = null;
      };

      _proto.onMediaAttaching = function onMediaAttaching(event, data) {
        var config = this.hls.config;

        if (config.capLevelOnFPSDrop) {
          var media = data.media instanceof self.HTMLVideoElement ? data.media : null;
          this.media = media;

          if (media && typeof media.getVideoPlaybackQuality === 'function') {
            this.isVideoPlaybackQualityAvailable = true;
          }

          self.clearInterval(this.timer);
          this.timer = self.setInterval(this.checkFPSInterval.bind(this), config.fpsDroppedMonitoringPeriod);
        }
      };

      _proto.checkFPS = function checkFPS(video, decodedFrames, droppedFrames) {
        var currentTime = performance.now();

        if (decodedFrames) {
          if (this.lastTime) {
            var currentPeriod = currentTime - this.lastTime;
            var currentDropped = droppedFrames - this.lastDroppedFrames;
            var currentDecoded = decodedFrames - this.lastDecodedFrames;
            var droppedFPS = 1000 * currentDropped / currentPeriod;
            var hls = this.hls;
            hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].FPS_DROP, {
              currentDropped: currentDropped,
              currentDecoded: currentDecoded,
              totalDroppedFrames: droppedFrames
            });

            if (droppedFPS > 0) {
              // logger.log('checkFPS : droppedFPS/decodedFPS:' + droppedFPS/(1000 * currentDecoded / currentPeriod));
              if (currentDropped > hls.config.fpsDroppedMonitoringThreshold * currentDecoded) {
                var currentLevel = hls.currentLevel;
                _utils_logger__WEBPACK_IMPORTED_MODULE_1__["logger"].warn('drop FPS ratio greater than max allowed value for currentLevel: ' + currentLevel);

                if (currentLevel > 0 && (hls.autoLevelCapping === -1 || hls.autoLevelCapping >= currentLevel)) {
                  currentLevel = currentLevel - 1;
                  hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].FPS_DROP_LEVEL_CAPPING, {
                    level: currentLevel,
                    droppedLevel: hls.currentLevel
                  });
                  hls.autoLevelCapping = currentLevel;
                  this.streamController.nextLevelSwitch();
                }
              }
            }
          }

          this.lastTime = currentTime;
          this.lastDroppedFrames = droppedFrames;
          this.lastDecodedFrames = decodedFrames;
        }
      };

      _proto.checkFPSInterval = function checkFPSInterval() {
        var video = this.media;

        if (video) {
          if (this.isVideoPlaybackQualityAvailable) {
            var videoPlaybackQuality = video.getVideoPlaybackQuality();
            this.checkFPS(video, videoPlaybackQuality.totalVideoFrames, videoPlaybackQuality.droppedVideoFrames);
          } else {
            // HTMLVideoElement doesn't include the webkit types
            this.checkFPS(video, video.webkitDecodedFrameCount, video.webkitDroppedFrameCount);
          }
        }
      };

      return FPSController;
    }();

    /* harmony default export */ __webpack_exports__["default"] = (FPSController);

    /***/ }),

    /***/ "./src/controller/fragment-finders.ts":
    /*!********************************************!*\
      !*** ./src/controller/fragment-finders.ts ***!
      \********************************************/
    /*! exports provided: findFragmentByPDT, findFragmentByPTS, fragmentWithinToleranceTest, pdtWithinToleranceTest, findFragWithCC */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findFragmentByPDT", function() { return findFragmentByPDT; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findFragmentByPTS", function() { return findFragmentByPTS; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fragmentWithinToleranceTest", function() { return fragmentWithinToleranceTest; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pdtWithinToleranceTest", function() { return pdtWithinToleranceTest; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findFragWithCC", function() { return findFragWithCC; });
    /* harmony import */ var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/polyfills/number */ "./src/polyfills/number.ts");
    /* harmony import */ var _utils_binary_search__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/binary-search */ "./src/utils/binary-search.ts");



    /**
     * Returns first fragment whose endPdt value exceeds the given PDT.
     * @param {Array<Fragment>} fragments - The array of candidate fragments
     * @param {number|null} [PDTValue = null] - The PDT value which must be exceeded
     * @param {number} [maxFragLookUpTolerance = 0] - The amount of time that a fragment's start/end can be within in order to be considered contiguous
     * @returns {*|null} fragment - The best matching fragment
     */
    function findFragmentByPDT(fragments, PDTValue, maxFragLookUpTolerance) {
      if (PDTValue === null || !Array.isArray(fragments) || !fragments.length || !Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(PDTValue)) {
        return null;
      } // if less than start


      var startPDT = fragments[0].programDateTime;

      if (PDTValue < (startPDT || 0)) {
        return null;
      }

      var endPDT = fragments[fragments.length - 1].endProgramDateTime;

      if (PDTValue >= (endPDT || 0)) {
        return null;
      }

      maxFragLookUpTolerance = maxFragLookUpTolerance || 0;

      for (var seg = 0; seg < fragments.length; ++seg) {
        var frag = fragments[seg];

        if (pdtWithinToleranceTest(PDTValue, maxFragLookUpTolerance, frag)) {
          return frag;
        }
      }

      return null;
    }
    /**
     * Finds a fragment based on the SN of the previous fragment; or based on the needs of the current buffer.
     * This method compensates for small buffer gaps by applying a tolerance to the start of any candidate fragment, thus
     * breaking any traps which would cause the same fragment to be continuously selected within a small range.
     * @param {*} fragPrevious - The last frag successfully appended
     * @param {Array} fragments - The array of candidate fragments
     * @param {number} [bufferEnd = 0] - The end of the contiguous buffered range the playhead is currently within
     * @param {number} maxFragLookUpTolerance - The amount of time that a fragment's start/end can be within in order to be considered contiguous
     * @returns {*} foundFrag - The best matching fragment
     */

    function findFragmentByPTS(fragPrevious, fragments, bufferEnd, maxFragLookUpTolerance) {
      if (bufferEnd === void 0) {
        bufferEnd = 0;
      }

      if (maxFragLookUpTolerance === void 0) {
        maxFragLookUpTolerance = 0;
      }

      var fragNext = null;

      if (fragPrevious) {
        fragNext = fragments[fragPrevious.sn - fragments[0].sn + 1] || null;
      } else if (bufferEnd === 0 && fragments[0].start === 0) {
        fragNext = fragments[0];
      } // Prefer the next fragment if it's within tolerance


      if (fragNext && fragmentWithinToleranceTest(bufferEnd, maxFragLookUpTolerance, fragNext) === 0) {
        return fragNext;
      } // We might be seeking past the tolerance so find the best match


      var foundFragment = _utils_binary_search__WEBPACK_IMPORTED_MODULE_1__["default"].search(fragments, fragmentWithinToleranceTest.bind(null, bufferEnd, maxFragLookUpTolerance));

      if (foundFragment) {
        return foundFragment;
      } // If no match was found return the next fragment after fragPrevious, or null


      return fragNext;
    }
    /**
     * The test function used by the findFragmentBySn's BinarySearch to look for the best match to the current buffer conditions.
     * @param {*} candidate - The fragment to test
     * @param {number} [bufferEnd = 0] - The end of the current buffered range the playhead is currently within
     * @param {number} [maxFragLookUpTolerance = 0] - The amount of time that a fragment's start can be within in order to be considered contiguous
     * @returns {number} - 0 if it matches, 1 if too low, -1 if too high
     */

    function fragmentWithinToleranceTest(bufferEnd, maxFragLookUpTolerance, candidate) {
      if (bufferEnd === void 0) {
        bufferEnd = 0;
      }

      if (maxFragLookUpTolerance === void 0) {
        maxFragLookUpTolerance = 0;
      }

      // offset should be within fragment boundary - config.maxFragLookUpTolerance
      // this is to cope with situations like
      // bufferEnd = 9.991
      // frag[Ø] : [0,10]
      // frag[1] : [10,20]
      // bufferEnd is within frag[0] range ... although what we are expecting is to return frag[1] here
      //              frag start               frag start+duration
      //                  |-----------------------------|
      //              <--->                         <--->
      //  ...--------><-----------------------------><---------....
      // previous frag         matching fragment         next frag
      //  return -1             return 0                 return 1
      // logger.log(`level/sn/start/end/bufEnd:${level}/${candidate.sn}/${candidate.start}/${(candidate.start+candidate.duration)}/${bufferEnd}`);
      // Set the lookup tolerance to be small enough to detect the current segment - ensures we don't skip over very small segments
      var candidateLookupTolerance = Math.min(maxFragLookUpTolerance, candidate.duration + (candidate.deltaPTS ? candidate.deltaPTS : 0));

      if (candidate.start + candidate.duration - candidateLookupTolerance <= bufferEnd) {
        return 1;
      } else if (candidate.start - candidateLookupTolerance > bufferEnd && candidate.start) {
        // if maxFragLookUpTolerance will have negative value then don't return -1 for first element
        return -1;
      }

      return 0;
    }
    /**
     * The test function used by the findFragmentByPdt's BinarySearch to look for the best match to the current buffer conditions.
     * This function tests the candidate's program date time values, as represented in Unix time
     * @param {*} candidate - The fragment to test
     * @param {number} [pdtBufferEnd = 0] - The Unix time representing the end of the current buffered range
     * @param {number} [maxFragLookUpTolerance = 0] - The amount of time that a fragment's start can be within in order to be considered contiguous
     * @returns {boolean} True if contiguous, false otherwise
     */

    function pdtWithinToleranceTest(pdtBufferEnd, maxFragLookUpTolerance, candidate) {
      var candidateLookupTolerance = Math.min(maxFragLookUpTolerance, candidate.duration + (candidate.deltaPTS ? candidate.deltaPTS : 0)) * 1000; // endProgramDateTime can be null, default to zero

      var endProgramDateTime = candidate.endProgramDateTime || 0;
      return endProgramDateTime - candidateLookupTolerance > pdtBufferEnd;
    }
    function findFragWithCC(fragments, cc) {
      return _utils_binary_search__WEBPACK_IMPORTED_MODULE_1__["default"].search(fragments, function (candidate) {
        if (candidate.cc < cc) {
          return 1;
        } else if (candidate.cc > cc) {
          return -1;
        } else {
          return 0;
        }
      });
    }

    /***/ }),

    /***/ "./src/controller/fragment-tracker.ts":
    /*!********************************************!*\
      !*** ./src/controller/fragment-tracker.ts ***!
      \********************************************/
    /*! exports provided: FragmentState, FragmentTracker */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FragmentState", function() { return FragmentState; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FragmentTracker", function() { return FragmentTracker; });
    /* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./src/events.ts");
    /* harmony import */ var _types_loader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types/loader */ "./src/types/loader.ts");


    var FragmentState;

    (function (FragmentState) {
      FragmentState["NOT_LOADED"] = "NOT_LOADED";
      FragmentState["BACKTRACKED"] = "BACKTRACKED";
      FragmentState["APPENDING"] = "APPENDING";
      FragmentState["PARTIAL"] = "PARTIAL";
      FragmentState["OK"] = "OK";
    })(FragmentState || (FragmentState = {}));

    var FragmentTracker = /*#__PURE__*/function () {
      function FragmentTracker(hls) {
        this.activeFragment = null;
        this.activeParts = null;
        this.fragments = Object.create(null);
        this.timeRanges = Object.create(null);
        this.bufferPadding = 0.2;
        this.hls = void 0;
        this.hls = hls;

        this._registerListeners();
      }

      var _proto = FragmentTracker.prototype;

      _proto._registerListeners = function _registerListeners() {
        var hls = this.hls;
        hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].BUFFER_APPENDED, this.onBufferAppended, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].FRAG_BUFFERED, this.onFragBuffered, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].FRAG_LOADED, this.onFragLoaded, this);
      };

      _proto._unregisterListeners = function _unregisterListeners() {
        var hls = this.hls;
        hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].BUFFER_APPENDED, this.onBufferAppended, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].FRAG_BUFFERED, this.onFragBuffered, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].FRAG_LOADED, this.onFragLoaded, this);
      };

      _proto.destroy = function destroy() {
        this._unregisterListeners(); // @ts-ignore


        this.fragments = this.timeRanges = null;
      }
      /**
       * Return a Fragment with an appended range that matches the position and levelType.
       * If not found any Fragment, return null
       */
      ;

      _proto.getAppendedFrag = function getAppendedFrag(position, levelType) {
        if (levelType === _types_loader__WEBPACK_IMPORTED_MODULE_1__["PlaylistLevelType"].MAIN) {
          var activeFragment = this.activeFragment,
              activeParts = this.activeParts;

          if (!activeFragment) {
            return null;
          }

          if (activeParts) {
            for (var i = activeParts.length; i--;) {
              var activePart = activeParts[i];
              var appendedPTS = activePart ? activePart.end : activeFragment.appendedPTS;

              if (activePart.start <= position && appendedPTS !== undefined && position <= appendedPTS) {
                // 9 is a magic number. remove parts from lookup after a match but keep some short seeks back.
                if (i > 9) {
                  this.activeParts = activeParts.slice(i - 9);
                }

                return activePart;
              }
            }
          } else if (activeFragment.start <= position && activeFragment.appendedPTS !== undefined && position <= activeFragment.appendedPTS) {
            return activeFragment;
          }
        }

        return this.getBufferedFrag(position, levelType);
      }
      /**
       * Return a buffered Fragment that matches the position and levelType.
       * A buffered Fragment is one whose loading, parsing and appending is done (completed or "partial" meaning aborted).
       * If not found any Fragment, return null
       */
      ;

      _proto.getBufferedFrag = function getBufferedFrag(position, levelType) {
        var fragments = this.fragments;
        var keys = Object.keys(fragments);

        for (var i = keys.length; i--;) {
          var fragmentEntity = fragments[keys[i]];

          if ((fragmentEntity === null || fragmentEntity === void 0 ? void 0 : fragmentEntity.body.type) === levelType && fragmentEntity.buffered) {
            var frag = fragmentEntity.body;

            if (frag.start <= position && position <= frag.end) {
              return frag;
            }
          }
        }

        return null;
      }
      /**
       * Partial fragments effected by coded frame eviction will be removed
       * The browser will unload parts of the buffer to free up memory for new buffer data
       * Fragments will need to be reloaded when the buffer is freed up, removing partial fragments will allow them to reload(since there might be parts that are still playable)
       */
      ;

      _proto.detectEvictedFragments = function detectEvictedFragments(elementaryStream, timeRange, playlistType) {
        var _this = this;

        // Check if any flagged fragments have been unloaded
        Object.keys(this.fragments).forEach(function (key) {
          var fragmentEntity = _this.fragments[key];

          if (!fragmentEntity) {
            return;
          }

          if (!fragmentEntity.buffered) {
            if (fragmentEntity.body.type === playlistType) {
              _this.removeFragment(fragmentEntity.body);
            }

            return;
          }

          var esData = fragmentEntity.range[elementaryStream];

          if (!esData) {
            return;
          }

          esData.time.some(function (time) {
            var isNotBuffered = !_this.isTimeBuffered(time.startPTS, time.endPTS, timeRange);

            if (isNotBuffered) {
              // Unregister partial fragment as it needs to load again to be reused
              _this.removeFragment(fragmentEntity.body);
            }

            return isNotBuffered;
          });
        });
      }
      /**
       * Checks if the fragment passed in is loaded in the buffer properly
       * Partially loaded fragments will be registered as a partial fragment
       */
      ;

      _proto.detectPartialFragments = function detectPartialFragments(data) {
        var _this2 = this;

        var timeRanges = this.timeRanges;
        var frag = data.frag,
            part = data.part;

        if (!timeRanges || frag.sn === 'initSegment') {
          return;
        }

        var fragKey = getFragmentKey(frag);
        var fragmentEntity = this.fragments[fragKey];

        if (!fragmentEntity) {
          return;
        }

        Object.keys(timeRanges).forEach(function (elementaryStream) {
          var streamInfo = frag.elementaryStreams[elementaryStream];

          if (!streamInfo) {
            return;
          }

          var timeRange = timeRanges[elementaryStream];
          var partial = part !== null || streamInfo.partial === true;
          fragmentEntity.range[elementaryStream] = _this2.getBufferedTimes(frag, part, partial, timeRange);
        });
        fragmentEntity.backtrack = fragmentEntity.loaded = null;

        if (Object.keys(fragmentEntity.range).length) {
          fragmentEntity.buffered = true;
        } else {
          // remove fragment if nothing was appended
          this.removeFragment(fragmentEntity.body);
        }
      };

      _proto.fragBuffered = function fragBuffered(frag) {
        var fragKey = getFragmentKey(frag);
        var fragmentEntity = this.fragments[fragKey];

        if (fragmentEntity) {
          fragmentEntity.backtrack = fragmentEntity.loaded = null;
          fragmentEntity.buffered = true;
        }
      };

      _proto.getBufferedTimes = function getBufferedTimes(fragment, part, partial, timeRange) {
        var buffered = {
          time: [],
          partial: partial
        };
        var startPTS = part ? part.start : fragment.start;
        var endPTS = part ? part.end : fragment.end;
        var minEndPTS = fragment.minEndPTS || endPTS;
        var maxStartPTS = fragment.maxStartPTS || startPTS;

        for (var i = 0; i < timeRange.length; i++) {
          var startTime = timeRange.start(i) - this.bufferPadding;
          var endTime = timeRange.end(i) + this.bufferPadding;

          if (maxStartPTS >= startTime && minEndPTS <= endTime) {
            // Fragment is entirely contained in buffer
            // No need to check the other timeRange times since it's completely playable
            buffered.time.push({
              startPTS: Math.max(startPTS, timeRange.start(i)),
              endPTS: Math.min(endPTS, timeRange.end(i))
            });
            break;
          } else if (startPTS < endTime && endPTS > startTime) {
            buffered.partial = true; // Check for intersection with buffer
            // Get playable sections of the fragment

            buffered.time.push({
              startPTS: Math.max(startPTS, timeRange.start(i)),
              endPTS: Math.min(endPTS, timeRange.end(i))
            });
          } else if (endPTS <= startTime) {
            // No need to check the rest of the timeRange as it is in order
            break;
          }
        }

        return buffered;
      }
      /**
       * Gets the partial fragment for a certain time
       */
      ;

      _proto.getPartialFragment = function getPartialFragment(time) {
        var bestFragment = null;
        var timePadding;
        var startTime;
        var endTime;
        var bestOverlap = 0;
        var bufferPadding = this.bufferPadding,
            fragments = this.fragments;
        Object.keys(fragments).forEach(function (key) {
          var fragmentEntity = fragments[key];

          if (!fragmentEntity) {
            return;
          }

          if (isPartial(fragmentEntity)) {
            startTime = fragmentEntity.body.start - bufferPadding;
            endTime = fragmentEntity.body.end + bufferPadding;

            if (time >= startTime && time <= endTime) {
              // Use the fragment that has the most padding from start and end time
              timePadding = Math.min(time - startTime, endTime - time);

              if (bestOverlap <= timePadding) {
                bestFragment = fragmentEntity.body;
                bestOverlap = timePadding;
              }
            }
          }
        });
        return bestFragment;
      };

      _proto.getState = function getState(fragment) {
        var fragKey = getFragmentKey(fragment);
        var fragmentEntity = this.fragments[fragKey];

        if (fragmentEntity) {
          if (!fragmentEntity.buffered) {
            if (fragmentEntity.backtrack) {
              return FragmentState.BACKTRACKED;
            }

            return FragmentState.APPENDING;
          } else if (isPartial(fragmentEntity)) {
            return FragmentState.PARTIAL;
          } else {
            return FragmentState.OK;
          }
        }

        return FragmentState.NOT_LOADED;
      };

      _proto.backtrack = function backtrack(frag, data) {
        var fragKey = getFragmentKey(frag);
        var fragmentEntity = this.fragments[fragKey];

        if (!fragmentEntity || fragmentEntity.backtrack) {
          return null;
        }

        var backtrack = fragmentEntity.backtrack = data ? data : fragmentEntity.loaded;
        fragmentEntity.loaded = null;
        return backtrack;
      };

      _proto.getBacktrackData = function getBacktrackData(fragment) {
        var fragKey = getFragmentKey(fragment);
        var fragmentEntity = this.fragments[fragKey];

        if (fragmentEntity) {
          var _backtrack$payload;

          var backtrack = fragmentEntity.backtrack; // If data was already sent to Worker it is detached no longer available

          if (backtrack !== null && backtrack !== void 0 && (_backtrack$payload = backtrack.payload) !== null && _backtrack$payload !== void 0 && _backtrack$payload.byteLength) {
            return backtrack;
          } else {
            this.removeFragment(fragment);
          }
        }

        return null;
      };

      _proto.isTimeBuffered = function isTimeBuffered(startPTS, endPTS, timeRange) {
        var startTime;
        var endTime;

        for (var i = 0; i < timeRange.length; i++) {
          startTime = timeRange.start(i) - this.bufferPadding;
          endTime = timeRange.end(i) + this.bufferPadding;

          if (startPTS >= startTime && endPTS <= endTime) {
            return true;
          }

          if (endPTS <= startTime) {
            // No need to check the rest of the timeRange as it is in order
            return false;
          }
        }

        return false;
      };

      _proto.onFragLoaded = function onFragLoaded(event, data) {
        var frag = data.frag,
            part = data.part; // don't track initsegment (for which sn is not a number)
        // don't track frags used for bitrateTest, they're irrelevant.
        // don't track parts for memory efficiency

        if (frag.sn === 'initSegment' || frag.bitrateTest || part) {
          return;
        }

        var fragKey = getFragmentKey(frag);
        this.fragments[fragKey] = {
          body: frag,
          loaded: data,
          backtrack: null,
          buffered: false,
          range: Object.create(null)
        };
      };

      _proto.onBufferAppended = function onBufferAppended(event, data) {
        var _this3 = this;

        var frag = data.frag,
            part = data.part,
            timeRanges = data.timeRanges;

        if (frag.type === _types_loader__WEBPACK_IMPORTED_MODULE_1__["PlaylistLevelType"].MAIN) {
          this.activeFragment = frag;

          if (part) {
            var activeParts = this.activeParts;

            if (!activeParts) {
              this.activeParts = activeParts = [];
            }

            activeParts.push(part);
          } else {
            this.activeParts = null;
          }
        } // Store the latest timeRanges loaded in the buffer


        this.timeRanges = timeRanges;
        Object.keys(timeRanges).forEach(function (elementaryStream) {
          var timeRange = timeRanges[elementaryStream];

          _this3.detectEvictedFragments(elementaryStream, timeRange);

          if (!part) {
            for (var i = 0; i < timeRange.length; i++) {
              frag.appendedPTS = Math.max(timeRange.end(i), frag.appendedPTS || 0);
            }
          }
        });
      };

      _proto.onFragBuffered = function onFragBuffered(event, data) {
        this.detectPartialFragments(data);
      };

      _proto.hasFragment = function hasFragment(fragment) {
        var fragKey = getFragmentKey(fragment);
        return !!this.fragments[fragKey];
      };

      _proto.removeFragmentsInRange = function removeFragmentsInRange(start, end, playlistType) {
        var _this4 = this;

        Object.keys(this.fragments).forEach(function (key) {
          var fragmentEntity = _this4.fragments[key];

          if (!fragmentEntity) {
            return;
          }

          if (fragmentEntity.buffered) {
            var frag = fragmentEntity.body;

            if (frag.type === playlistType && frag.start < end && frag.end > start) {
              _this4.removeFragment(frag);
            }
          }
        });
      };

      _proto.removeFragment = function removeFragment(fragment) {
        var fragKey = getFragmentKey(fragment);
        fragment.stats.loaded = 0;
        fragment.clearElementaryStreamInfo();
        delete this.fragments[fragKey];
      };

      _proto.removeAllFragments = function removeAllFragments() {
        this.fragments = Object.create(null);
        this.activeFragment = null;
        this.activeParts = null;
      };

      return FragmentTracker;
    }();

    function isPartial(fragmentEntity) {
      var _fragmentEntity$range, _fragmentEntity$range2;

      return fragmentEntity.buffered && (((_fragmentEntity$range = fragmentEntity.range.video) === null || _fragmentEntity$range === void 0 ? void 0 : _fragmentEntity$range.partial) || ((_fragmentEntity$range2 = fragmentEntity.range.audio) === null || _fragmentEntity$range2 === void 0 ? void 0 : _fragmentEntity$range2.partial));
    }

    function getFragmentKey(fragment) {
      return fragment.type + "_" + fragment.level + "_" + fragment.urlId + "_" + fragment.sn;
    }

    /***/ }),

    /***/ "./src/controller/gap-controller.ts":
    /*!******************************************!*\
      !*** ./src/controller/gap-controller.ts ***!
      \******************************************/
    /*! exports provided: STALL_MINIMUM_DURATION_MS, MAX_START_GAP_JUMP, SKIP_BUFFER_HOLE_STEP_SECONDS, SKIP_BUFFER_RANGE_START, default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "STALL_MINIMUM_DURATION_MS", function() { return STALL_MINIMUM_DURATION_MS; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAX_START_GAP_JUMP", function() { return MAX_START_GAP_JUMP; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SKIP_BUFFER_HOLE_STEP_SECONDS", function() { return SKIP_BUFFER_HOLE_STEP_SECONDS; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SKIP_BUFFER_RANGE_START", function() { return SKIP_BUFFER_RANGE_START; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return GapController; });
    /* harmony import */ var _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/buffer-helper */ "./src/utils/buffer-helper.ts");
    /* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors */ "./src/errors.ts");
    /* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../events */ "./src/events.ts");
    /* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/logger */ "./src/utils/logger.ts");




    var STALL_MINIMUM_DURATION_MS = 250;
    var MAX_START_GAP_JUMP = 2.0;
    var SKIP_BUFFER_HOLE_STEP_SECONDS = 0.1;
    var SKIP_BUFFER_RANGE_START = 0.05;

    var GapController = /*#__PURE__*/function () {
      function GapController(config, media, fragmentTracker, hls) {
        this.config = void 0;
        this.media = void 0;
        this.fragmentTracker = void 0;
        this.hls = void 0;
        this.nudgeRetry = 0;
        this.stallReported = false;
        this.stalled = null;
        this.moved = false;
        this.seeking = false;
        this.config = config;
        this.media = media;
        this.fragmentTracker = fragmentTracker;
        this.hls = hls;
      }

      var _proto = GapController.prototype;

      _proto.destroy = function destroy() {
        // @ts-ignore
        this.hls = this.fragmentTracker = this.media = null;
      }
      /**
       * Checks if the playhead is stuck within a gap, and if so, attempts to free it.
       * A gap is an unbuffered range between two buffered ranges (or the start and the first buffered range).
       *
       * @param {number} lastCurrentTime Previously read playhead position
       */
      ;

      _proto.poll = function poll(lastCurrentTime) {
        var config = this.config,
            media = this.media,
            stalled = this.stalled;
        var currentTime = media.currentTime,
            seeking = media.seeking;
        var seeked = this.seeking && !seeking;
        var beginSeek = !this.seeking && seeking;
        this.seeking = seeking; // The playhead is moving, no-op

        if (currentTime !== lastCurrentTime) {
          this.moved = true;

          if (stalled !== null) {
            // The playhead is now moving, but was previously stalled
            if (this.stallReported) {
              var _stalledDuration = self.performance.now() - stalled;

              _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].warn("playback not stuck anymore @" + currentTime + ", after " + Math.round(_stalledDuration) + "ms");
              this.stallReported = false;
            }

            this.stalled = null;
            this.nudgeRetry = 0;
          }

          return;
        } // Clear stalled state when beginning or finishing seeking so that we don't report stalls coming out of a seek


        if (beginSeek || seeked) {
          this.stalled = null;
        } // The playhead should not be moving


        if (media.paused || media.ended || media.playbackRate === 0 || !_utils_buffer_helper__WEBPACK_IMPORTED_MODULE_0__["BufferHelper"].getBuffered(media).length) {
          return;
        }

        var bufferInfo = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_0__["BufferHelper"].bufferInfo(media, currentTime, 0);
        var isBuffered = bufferInfo.len > 0;
        var nextStart = bufferInfo.nextStart || 0; // There is no playable buffer (seeked, waiting for buffer)

        if (!isBuffered && !nextStart) {
          return;
        }

        if (seeking) {
          // Waiting for seeking in a buffered range to complete
          var hasEnoughBuffer = bufferInfo.len > MAX_START_GAP_JUMP; // Next buffered range is too far ahead to jump to while still seeking

          var noBufferGap = !nextStart || nextStart - currentTime > MAX_START_GAP_JUMP && !this.fragmentTracker.getPartialFragment(currentTime);

          if (hasEnoughBuffer || noBufferGap) {
            return;
          } // Reset moved state when seeking to a point in or before a gap


          this.moved = false;
        } // Skip start gaps if we haven't played, but the last poll detected the start of a stall
        // The addition poll gives the browser a chance to jump the gap for us


        if (!this.moved && this.stalled !== null) {
          var _level$details;

          // Jump start gaps within jump threshold
          var startJump = Math.max(nextStart, bufferInfo.start || 0) - currentTime; // When joining a live stream with audio tracks, account for live playlist window sliding by allowing
          // a larger jump over start gaps caused by the audio-stream-controller buffering a start fragment
          // that begins over 1 target duration after the video start position.

          var level = this.hls.levels ? this.hls.levels[this.hls.currentLevel] : null;
          var isLive = level === null || level === void 0 ? void 0 : (_level$details = level.details) === null || _level$details === void 0 ? void 0 : _level$details.live;
          var maxStartGapJump = isLive ? level.details.targetduration * 2 : MAX_START_GAP_JUMP;

          if (startJump > 0 && startJump <= maxStartGapJump) {
            this._trySkipBufferHole(null);

            return;
          }
        } // Start tracking stall time


        var tnow = self.performance.now();

        if (stalled === null) {
          this.stalled = tnow;
          return;
        }

        var stalledDuration = tnow - stalled;

        if (!seeking && stalledDuration >= STALL_MINIMUM_DURATION_MS) {
          // Report stalling after trying to fix
          this._reportStall(bufferInfo.len);
        }

        var bufferedWithHoles = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_0__["BufferHelper"].bufferInfo(media, currentTime, config.maxBufferHole);

        this._tryFixBufferStall(bufferedWithHoles, stalledDuration);
      }
      /**
       * Detects and attempts to fix known buffer stalling issues.
       * @param bufferInfo - The properties of the current buffer.
       * @param stalledDurationMs - The amount of time Hls.js has been stalling for.
       * @private
       */
      ;

      _proto._tryFixBufferStall = function _tryFixBufferStall(bufferInfo, stalledDurationMs) {
        var config = this.config,
            fragmentTracker = this.fragmentTracker,
            media = this.media;
        var currentTime = media.currentTime;
        var partial = fragmentTracker.getPartialFragment(currentTime);

        if (partial) {
          // Try to skip over the buffer hole caused by a partial fragment
          // This method isn't limited by the size of the gap between buffered ranges
          var targetTime = this._trySkipBufferHole(partial); // we return here in this case, meaning
          // the branch below only executes when we don't handle a partial fragment


          if (targetTime) {
            return;
          }
        } // if we haven't had to skip over a buffer hole of a partial fragment
        // we may just have to "nudge" the playlist as the browser decoding/rendering engine
        // needs to cross some sort of threshold covering all source-buffers content
        // to start playing properly.


        if (bufferInfo.len > config.maxBufferHole && stalledDurationMs > config.highBufferWatchdogPeriod * 1000) {
          _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].warn('Trying to nudge playhead over buffer-hole'); // Try to nudge currentTime over a buffer hole if we've been stalling for the configured amount of seconds
          // We only try to jump the hole if it's under the configured size
          // Reset stalled so to rearm watchdog timer

          this.stalled = null;

          this._tryNudgeBuffer();
        }
      }
      /**
       * Triggers a BUFFER_STALLED_ERROR event, but only once per stall period.
       * @param bufferLen - The playhead distance from the end of the current buffer segment.
       * @private
       */
      ;

      _proto._reportStall = function _reportStall(bufferLen) {
        var hls = this.hls,
            media = this.media,
            stallReported = this.stallReported;

        if (!stallReported) {
          // Report stalled error once
          this.stallReported = true;
          _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].warn("Playback stalling at @" + media.currentTime + " due to low buffer (buffer=" + bufferLen + ")");
          hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].ERROR, {
            type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].MEDIA_ERROR,
            details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].BUFFER_STALLED_ERROR,
            fatal: false,
            buffer: bufferLen
          });
        }
      }
      /**
       * Attempts to fix buffer stalls by jumping over known gaps caused by partial fragments
       * @param partial - The partial fragment found at the current time (where playback is stalling).
       * @private
       */
      ;

      _proto._trySkipBufferHole = function _trySkipBufferHole(partial) {
        var config = this.config,
            hls = this.hls,
            media = this.media;
        var currentTime = media.currentTime;
        var lastEndTime = 0; // Check if currentTime is between unbuffered regions of partial fragments

        var buffered = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_0__["BufferHelper"].getBuffered(media);

        for (var i = 0; i < buffered.length; i++) {
          var startTime = buffered.start(i);

          if (currentTime + config.maxBufferHole >= lastEndTime && currentTime < startTime) {
            var targetTime = Math.max(startTime + SKIP_BUFFER_RANGE_START, media.currentTime + SKIP_BUFFER_HOLE_STEP_SECONDS);
            _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].warn("skipping hole, adjusting currentTime from " + currentTime + " to " + targetTime);
            this.moved = true;
            this.stalled = null;
            media.currentTime = targetTime;

            if (partial) {
              hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].ERROR, {
                type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].MEDIA_ERROR,
                details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].BUFFER_SEEK_OVER_HOLE,
                fatal: false,
                reason: "fragment loaded with buffer holes, seeking from " + currentTime + " to " + targetTime,
                frag: partial
              });
            }

            return targetTime;
          }

          lastEndTime = buffered.end(i);
        }

        return 0;
      }
      /**
       * Attempts to fix buffer stalls by advancing the mediaElement's current time by a small amount.
       * @private
       */
      ;

      _proto._tryNudgeBuffer = function _tryNudgeBuffer() {
        var config = this.config,
            hls = this.hls,
            media = this.media;
        var currentTime = media.currentTime;
        var nudgeRetry = (this.nudgeRetry || 0) + 1;
        this.nudgeRetry = nudgeRetry;

        if (nudgeRetry < config.nudgeMaxRetry) {
          var targetTime = currentTime + nudgeRetry * config.nudgeOffset; // playback stalled in buffered area ... let's nudge currentTime to try to overcome this

          _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].warn("Nudging 'currentTime' from " + currentTime + " to " + targetTime);
          media.currentTime = targetTime;
          hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].ERROR, {
            type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].MEDIA_ERROR,
            details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].BUFFER_NUDGE_ON_STALL,
            fatal: false
          });
        } else {
          _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].error("Playhead still not moving while enough data buffered @" + currentTime + " after " + config.nudgeMaxRetry + " nudges");
          hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].ERROR, {
            type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].MEDIA_ERROR,
            details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].BUFFER_STALLED_ERROR,
            fatal: true
          });
        }
      };

      return GapController;
    }();



    /***/ }),

    /***/ "./src/controller/id3-track-controller.ts":
    /*!************************************************!*\
      !*** ./src/controller/id3-track-controller.ts ***!
      \************************************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./src/events.ts");
    /* harmony import */ var _utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/texttrack-utils */ "./src/utils/texttrack-utils.ts");
    /* harmony import */ var _demux_id3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../demux/id3 */ "./src/demux/id3.ts");



    var MIN_CUE_DURATION = 0.25;

    var ID3TrackController = /*#__PURE__*/function () {
      function ID3TrackController(hls) {
        this.hls = void 0;
        this.id3Track = null;
        this.media = null;
        this.hls = hls;

        this._registerListeners();
      }

      var _proto = ID3TrackController.prototype;

      _proto.destroy = function destroy() {
        this._unregisterListeners();
      };

      _proto._registerListeners = function _registerListeners() {
        var hls = this.hls;
        hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_ATTACHED, this.onMediaAttached, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_DETACHING, this.onMediaDetaching, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].FRAG_PARSING_METADATA, this.onFragParsingMetadata, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].BUFFER_FLUSHING, this.onBufferFlushing, this);
      };

      _proto._unregisterListeners = function _unregisterListeners() {
        var hls = this.hls;
        hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_ATTACHED, this.onMediaAttached, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_DETACHING, this.onMediaDetaching, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].FRAG_PARSING_METADATA, this.onFragParsingMetadata, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].BUFFER_FLUSHING, this.onBufferFlushing, this);
      } // Add ID3 metatadata text track.
      ;

      _proto.onMediaAttached = function onMediaAttached(event, data) {
        this.media = data.media;
      };

      _proto.onMediaDetaching = function onMediaDetaching() {
        if (!this.id3Track) {
          return;
        }

        Object(_utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_1__["clearCurrentCues"])(this.id3Track);
        this.id3Track = null;
        this.media = null;
      };

      _proto.getID3Track = function getID3Track(textTracks) {
        if (!this.media) {
          return;
        }

        for (var i = 0; i < textTracks.length; i++) {
          var textTrack = textTracks[i];

          if (textTrack.kind === 'metadata' && textTrack.label === 'id3') {
            // send 'addtrack' when reusing the textTrack for metadata,
            // same as what we do for captions
            Object(_utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_1__["sendAddTrackEvent"])(textTrack, this.media);
            return textTrack;
          }
        }

        return this.media.addTextTrack('metadata', 'id3');
      };

      _proto.onFragParsingMetadata = function onFragParsingMetadata(event, data) {
        if (!this.media) {
          return;
        }

        var fragment = data.frag;
        var samples = data.samples; // create track dynamically

        if (!this.id3Track) {
          this.id3Track = this.getID3Track(this.media.textTracks);
          this.id3Track.mode = 'hidden';
        } // Attempt to recreate Safari functionality by creating
        // WebKitDataCue objects when available and store the decoded
        // ID3 data in the value property of the cue


        var Cue = self.WebKitDataCue || self.VTTCue || self.TextTrackCue;

        for (var i = 0; i < samples.length; i++) {
          var frames = _demux_id3__WEBPACK_IMPORTED_MODULE_2__["getID3Frames"](samples[i].data);

          if (frames) {
            var startTime = samples[i].pts;
            var endTime = i < samples.length - 1 ? samples[i + 1].pts : fragment.end;
            var timeDiff = endTime - startTime;

            if (timeDiff <= 0) {
              endTime = startTime + MIN_CUE_DURATION;
            }

            for (var j = 0; j < frames.length; j++) {
              var frame = frames[j]; // Safari doesn't put the timestamp frame in the TextTrack

              if (!_demux_id3__WEBPACK_IMPORTED_MODULE_2__["isTimeStampFrame"](frame)) {
                var cue = new Cue(startTime, endTime, '');
                cue.value = frame;
                this.id3Track.addCue(cue);
              }
            }
          }
        }
      };

      _proto.onBufferFlushing = function onBufferFlushing(event, _ref) {
        var startOffset = _ref.startOffset,
            endOffset = _ref.endOffset,
            type = _ref.type;

        if (!type || type === 'audio') {
          // id3 cues come from parsed audio only remove cues when audio buffer is cleared
          var id3Track = this.id3Track;

          if (id3Track) {
            Object(_utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_1__["removeCuesInRange"])(id3Track, startOffset, endOffset);
          }
        }
      };

      return ID3TrackController;
    }();

    /* harmony default export */ __webpack_exports__["default"] = (ID3TrackController);

    /***/ }),

    /***/ "./src/controller/latency-controller.ts":
    /*!**********************************************!*\
      !*** ./src/controller/latency-controller.ts ***!
      \**********************************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return LatencyController; });
    /* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errors */ "./src/errors.ts");
    /* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./src/events.ts");
    /* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/logger */ "./src/utils/logger.ts");
    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }





    var LatencyController = /*#__PURE__*/function () {
      function LatencyController(hls) {
        var _this = this;

        this.hls = void 0;
        this.config = void 0;
        this.media = null;
        this.levelDetails = null;
        this.currentTime = 0;
        this.stallCount = 0;
        this._latency = null;

        this.timeupdateHandler = function () {
          return _this.timeupdate();
        };

        this.hls = hls;
        this.config = hls.config;
        this.registerListeners();
      }

      var _proto = LatencyController.prototype;

      _proto.destroy = function destroy() {
        this.unregisterListeners();
        this.onMediaDetaching();
        this.levelDetails = null; // @ts-ignore

        this.hls = this.timeupdateHandler = null;
      };

      _proto.registerListeners = function registerListeners() {
        this.hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MEDIA_ATTACHED, this.onMediaAttached, this);
        this.hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MEDIA_DETACHING, this.onMediaDetaching, this);
        this.hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MANIFEST_LOADING, this.onManifestLoading, this);
        this.hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].LEVEL_UPDATED, this.onLevelUpdated, this);
        this.hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].ERROR, this.onError, this);
      };

      _proto.unregisterListeners = function unregisterListeners() {
        this.hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MEDIA_ATTACHED, this.onMediaAttached);
        this.hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MEDIA_DETACHING, this.onMediaDetaching);
        this.hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MANIFEST_LOADING, this.onManifestLoading);
        this.hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].LEVEL_UPDATED, this.onLevelUpdated);
        this.hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].ERROR, this.onError);
      };

      _proto.onMediaAttached = function onMediaAttached(event, data) {
        this.media = data.media;
        this.media.addEventListener('timeupdate', this.timeupdateHandler);
      };

      _proto.onMediaDetaching = function onMediaDetaching() {
        if (this.media) {
          this.media.removeEventListener('timeupdate', this.timeupdateHandler);
          this.media = null;
        }
      };

      _proto.onManifestLoading = function onManifestLoading() {
        this.levelDetails = null;
        this._latency = null;
        this.stallCount = 0;
      };

      _proto.onLevelUpdated = function onLevelUpdated(event, _ref) {
        var details = _ref.details;
        this.levelDetails = details;

        if (details.advanced) {
          this.timeupdate();
        }

        if (!details.live && this.media) {
          this.media.removeEventListener('timeupdate', this.timeupdateHandler);
        }
      };

      _proto.onError = function onError(event, data) {
        if (data.details !== _errors__WEBPACK_IMPORTED_MODULE_0__["ErrorDetails"].BUFFER_STALLED_ERROR) {
          return;
        }

        this.stallCount++;
        _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].warn('[playback-rate-controller]: Stall detected, adjusting target latency');
      };

      _proto.timeupdate = function timeupdate() {
        var media = this.media,
            levelDetails = this.levelDetails;

        if (!media || !levelDetails) {
          return;
        }

        this.currentTime = media.currentTime;
        var latency = this.computeLatency();

        if (latency === null) {
          return;
        }

        this._latency = latency; // Adapt playbackRate to meet target latency in low-latency mode

        var _this$config = this.config,
            lowLatencyMode = _this$config.lowLatencyMode,
            maxLiveSyncPlaybackRate = _this$config.maxLiveSyncPlaybackRate;

        if (!lowLatencyMode || maxLiveSyncPlaybackRate === 1) {
          return;
        }

        var targetLatency = this.targetLatency;

        if (targetLatency === null) {
          return;
        }

        var distanceFromTarget = latency - targetLatency; // Only adjust playbackRate when within one target duration of targetLatency
        // and more than one second from under-buffering.
        // Playback further than one target duration from target can be considered DVR playback.

        var liveMinLatencyDuration = Math.min(this.maxLatency, targetLatency + levelDetails.targetduration);
        var inLiveRange = distanceFromTarget < liveMinLatencyDuration;

        if (levelDetails.live && inLiveRange && distanceFromTarget > 0.05 && this.forwardBufferLength > 1) {
          var max = Math.min(2, Math.max(1.0, maxLiveSyncPlaybackRate));
          var rate = Math.round(2 / (1 + Math.exp(-0.75 * distanceFromTarget - this.edgeStalled)) * 20) / 20;
          media.playbackRate = Math.min(max, Math.max(1, rate));
        } else if (media.playbackRate !== 1 && media.playbackRate !== 0) {
          media.playbackRate = 1;
        }
      };

      _proto.estimateLiveEdge = function estimateLiveEdge() {
        var levelDetails = this.levelDetails;

        if (levelDetails === null) {
          return null;
        }

        return levelDetails.edge + levelDetails.age;
      };

      _proto.computeLatency = function computeLatency() {
        var liveEdge = this.estimateLiveEdge();

        if (liveEdge === null) {
          return null;
        }

        return liveEdge - this.currentTime;
      };

      _createClass(LatencyController, [{
        key: "latency",
        get: function get() {
          return this._latency || 0;
        }
      }, {
        key: "maxLatency",
        get: function get() {
          var config = this.config,
              levelDetails = this.levelDetails;

          if (config.liveMaxLatencyDuration !== undefined) {
            return config.liveMaxLatencyDuration;
          }

          return levelDetails ? config.liveMaxLatencyDurationCount * levelDetails.targetduration : 0;
        }
      }, {
        key: "targetLatency",
        get: function get() {
          var levelDetails = this.levelDetails;

          if (levelDetails === null) {
            return null;
          }

          var holdBack = levelDetails.holdBack,
              partHoldBack = levelDetails.partHoldBack,
              targetduration = levelDetails.targetduration;
          var _this$config2 = this.config,
              liveSyncDuration = _this$config2.liveSyncDuration,
              liveSyncDurationCount = _this$config2.liveSyncDurationCount,
              lowLatencyMode = _this$config2.lowLatencyMode;
          var userConfig = this.hls.userConfig;
          var targetLatency = lowLatencyMode ? partHoldBack || holdBack : holdBack;

          if (userConfig.liveSyncDuration || userConfig.liveSyncDurationCount || targetLatency === 0) {
            targetLatency = liveSyncDuration !== undefined ? liveSyncDuration : liveSyncDurationCount * targetduration;
          }

          var maxLiveSyncOnStallIncrease = targetduration;
          var liveSyncOnStallIncrease = 1.0;
          return targetLatency + Math.min(this.stallCount * liveSyncOnStallIncrease, maxLiveSyncOnStallIncrease);
        }
      }, {
        key: "liveSyncPosition",
        get: function get() {
          var liveEdge = this.estimateLiveEdge();
          var targetLatency = this.targetLatency;
          var levelDetails = this.levelDetails;

          if (liveEdge === null || targetLatency === null || levelDetails === null) {
            return null;
          }

          var edge = levelDetails.edge;
          var syncPosition = liveEdge - targetLatency - this.edgeStalled;
          var min = edge - levelDetails.totalduration;
          var max = edge - (this.config.lowLatencyMode && levelDetails.partTarget || levelDetails.targetduration);
          return Math.min(Math.max(min, syncPosition), max);
        }
      }, {
        key: "drift",
        get: function get() {
          var levelDetails = this.levelDetails;

          if (levelDetails === null) {
            return 1;
          }

          return levelDetails.drift;
        }
      }, {
        key: "edgeStalled",
        get: function get() {
          var levelDetails = this.levelDetails;

          if (levelDetails === null) {
            return 0;
          }

          var maxLevelUpdateAge = (this.config.lowLatencyMode && levelDetails.partTarget || levelDetails.targetduration) * 3;
          return Math.max(levelDetails.age - maxLevelUpdateAge, 0);
        }
      }, {
        key: "forwardBufferLength",
        get: function get() {
          var media = this.media,
              levelDetails = this.levelDetails;

          if (!media || !levelDetails) {
            return 0;
          }

          var bufferedRanges = media.buffered.length;
          return bufferedRanges ? media.buffered.end(bufferedRanges - 1) : levelDetails.edge - this.currentTime;
        }
      }]);

      return LatencyController;
    }();



    /***/ }),

    /***/ "./src/controller/level-controller.ts":
    /*!********************************************!*\
      !*** ./src/controller/level-controller.ts ***!
      \********************************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return LevelController; });
    /* harmony import */ var _types_level__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types/level */ "./src/types/level.ts");
    /* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./src/events.ts");
    /* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../errors */ "./src/errors.ts");
    /* harmony import */ var _utils_codecs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/codecs */ "./src/utils/codecs.ts");
    /* harmony import */ var _level_helper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./level-helper */ "./src/controller/level-helper.ts");
    /* harmony import */ var _base_playlist_controller__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./base-playlist-controller */ "./src/controller/base-playlist-controller.ts");
    /* harmony import */ var _types_loader__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../types/loader */ "./src/types/loader.ts");
    function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    /*
     * Level Controller
     */







    var chromeOrFirefox = /chrome|firefox/.test(navigator.userAgent.toLowerCase());

    var LevelController = /*#__PURE__*/function (_BasePlaylistControll) {
      _inheritsLoose(LevelController, _BasePlaylistControll);

      function LevelController(hls) {
        var _this;

        _this = _BasePlaylistControll.call(this, hls, '[level-controller]') || this;
        _this._levels = [];
        _this._firstLevel = -1;
        _this._startLevel = void 0;
        _this.currentLevelIndex = -1;
        _this.manualLevelIndex = -1;
        _this.onParsedComplete = void 0;

        _this._registerListeners();

        return _this;
      }

      var _proto = LevelController.prototype;

      _proto._registerListeners = function _registerListeners() {
        var hls = this.hls;
        hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MANIFEST_LOADED, this.onManifestLoaded, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].LEVEL_LOADED, this.onLevelLoaded, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_LOADED, this.onFragLoaded, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].ERROR, this.onError, this);
      };

      _proto._unregisterListeners = function _unregisterListeners() {
        var hls = this.hls;
        hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MANIFEST_LOADED, this.onManifestLoaded, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].LEVEL_LOADED, this.onLevelLoaded, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_LOADED, this.onFragLoaded, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].ERROR, this.onError, this);
      };

      _proto.destroy = function destroy() {
        this._unregisterListeners();

        this.manualLevelIndex = -1;
        this._levels.length = 0;

        _BasePlaylistControll.prototype.destroy.call(this);
      };

      _proto.startLoad = function startLoad() {
        var levels = this._levels; // clean up live level details to force reload them, and reset load errors

        levels.forEach(function (level) {
          level.loadError = 0;
        });

        _BasePlaylistControll.prototype.startLoad.call(this);
      };

      _proto.onManifestLoaded = function onManifestLoaded(event, data) {
        var levels = [];
        var audioTracks = [];
        var subtitleTracks = [];
        var bitrateStart;
        var levelSet = {};
        var levelFromSet;
        var resolutionFound = false;
        var videoCodecFound = false;
        var audioCodecFound = false; // regroup redundant levels together

        data.levels.forEach(function (levelParsed) {
          var attributes = levelParsed.attrs;
          resolutionFound = resolutionFound || !!(levelParsed.width && levelParsed.height);
          videoCodecFound = videoCodecFound || !!levelParsed.videoCodec;
          audioCodecFound = audioCodecFound || !!levelParsed.audioCodec; // erase audio codec info if browser does not support mp4a.40.34.
          // demuxer will autodetect codec and fallback to mpeg/audio

          if (chromeOrFirefox && levelParsed.audioCodec && levelParsed.audioCodec.indexOf('mp4a.40.34') !== -1) {
            levelParsed.audioCodec = undefined;
          }

          var levelKey = levelParsed.bitrate + "-" + levelParsed.attrs.RESOLUTION + "-" + levelParsed.attrs.CODECS;
          levelFromSet = levelSet[levelKey];

          if (!levelFromSet) {
            levelFromSet = new _types_level__WEBPACK_IMPORTED_MODULE_0__["Level"](levelParsed);
            levelSet[levelKey] = levelFromSet;
            levels.push(levelFromSet);
          } else {
            levelFromSet.url.push(levelParsed.url);
          }

          if (attributes) {
            if (attributes.AUDIO) {
              Object(_level_helper__WEBPACK_IMPORTED_MODULE_4__["addGroupId"])(levelFromSet, 'audio', attributes.AUDIO);
            }

            if (attributes.SUBTITLES) {
              Object(_level_helper__WEBPACK_IMPORTED_MODULE_4__["addGroupId"])(levelFromSet, 'text', attributes.SUBTITLES);
            }
          }
        }); // remove audio-only level if we also have levels with video codecs or RESOLUTION signalled

        if ((resolutionFound || videoCodecFound) && audioCodecFound) {
          levels = levels.filter(function (_ref) {
            var videoCodec = _ref.videoCodec,
                width = _ref.width,
                height = _ref.height;
            return !!videoCodec || !!(width && height);
          });
        } // only keep levels with supported audio/video codecs


        levels = levels.filter(function (_ref2) {
          var audioCodec = _ref2.audioCodec,
              videoCodec = _ref2.videoCodec;
          return (!audioCodec || Object(_utils_codecs__WEBPACK_IMPORTED_MODULE_3__["isCodecSupportedInMp4"])(audioCodec, 'audio')) && (!videoCodec || Object(_utils_codecs__WEBPACK_IMPORTED_MODULE_3__["isCodecSupportedInMp4"])(videoCodec, 'video'));
        });

        if (data.audioTracks) {
          audioTracks = data.audioTracks.filter(function (track) {
            return !track.audioCodec || Object(_utils_codecs__WEBPACK_IMPORTED_MODULE_3__["isCodecSupportedInMp4"])(track.audioCodec, 'audio');
          }); // Assign ids after filtering as array indices by group-id

          Object(_level_helper__WEBPACK_IMPORTED_MODULE_4__["assignTrackIdsByGroup"])(audioTracks);
        }

        if (data.subtitles) {
          subtitleTracks = data.subtitles;
          Object(_level_helper__WEBPACK_IMPORTED_MODULE_4__["assignTrackIdsByGroup"])(subtitleTracks);
        }

        if (levels.length > 0) {
          // start bitrate is the first bitrate of the manifest
          bitrateStart = levels[0].bitrate; // sort level on bitrate

          levels.sort(function (a, b) {
            return a.bitrate - b.bitrate;
          });
          this._levels = levels; // find index of first level in sorted levels

          for (var i = 0; i < levels.length; i++) {
            if (levels[i].bitrate === bitrateStart) {
              this._firstLevel = i;
              this.log("manifest loaded, " + levels.length + " level(s) found, first bitrate: " + bitrateStart);
              break;
            }
          } // Audio is only alternate if manifest include a URI along with the audio group tag,
          // and this is not an audio-only stream where levels contain audio-only


          var audioOnly = audioCodecFound && !videoCodecFound;
          var edata = {
            levels: levels,
            audioTracks: audioTracks,
            subtitleTracks: subtitleTracks,
            firstLevel: this._firstLevel,
            stats: data.stats,
            audio: audioCodecFound,
            video: videoCodecFound,
            altAudio: !audioOnly && audioTracks.some(function (t) {
              return !!t.url;
            })
          };
          this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MANIFEST_PARSED, edata); // Initiate loading after all controllers have received MANIFEST_PARSED

          if (this.hls.config.autoStartLoad || this.hls.forceStartLoad) {
            this.hls.startLoad(this.hls.config.startPosition);
          }
        } else {
          this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].ERROR, {
            type: _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorTypes"].MEDIA_ERROR,
            details: _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].MANIFEST_INCOMPATIBLE_CODECS_ERROR,
            fatal: true,
            url: data.url,
            reason: 'no level with compatible codecs found in manifest'
          });
        }
      };

      _proto.onError = function onError(event, data) {
        _BasePlaylistControll.prototype.onError.call(this, event, data);

        if (data.fatal) {
          return;
        } // Switch to redundant level when track fails to load


        var context = data.context;
        var level = this._levels[this.currentLevelIndex];

        if (context && (context.type === _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].AUDIO_TRACK && level.audioGroupIds && context.groupId === level.audioGroupIds[level.urlId] || context.type === _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].SUBTITLE_TRACK && level.textGroupIds && context.groupId === level.textGroupIds[level.urlId])) {
          this.redundantFailover(this.currentLevelIndex);
          return;
        }

        var levelError = false;
        var levelSwitch = true;
        var levelIndex; // try to recover not fatal errors

        switch (data.details) {
          case _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].FRAG_LOAD_ERROR:
          case _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].FRAG_LOAD_TIMEOUT:
          case _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].KEY_LOAD_ERROR:
          case _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].KEY_LOAD_TIMEOUT:
            if (data.frag) {
              var _level = this._levels[data.frag.level]; // Set levelIndex when we're out of fragment retries

              if (_level) {
                _level.fragmentError++;

                if (_level.fragmentError > this.hls.config.fragLoadingMaxRetry) {
                  levelIndex = data.frag.level;
                }
              } else {
                levelIndex = data.frag.level;
              }
            }

            break;

          case _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].LEVEL_LOAD_ERROR:
          case _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].LEVEL_LOAD_TIMEOUT:
            // Do not perform level switch if an error occurred using delivery directives
            // Attempt to reload level without directives first
            if (context) {
              if (context.deliveryDirectives) {
                levelSwitch = false;
              }

              levelIndex = context.level;
            }

            levelError = true;
            break;

          case _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].REMUX_ALLOC_ERROR:
            levelIndex = data.level;
            levelError = true;
            break;
        }

        if (levelIndex !== undefined) {
          this.recoverLevel(data, levelIndex, levelError, levelSwitch);
        }
      }
      /**
       * Switch to a redundant stream if any available.
       * If redundant stream is not available, emergency switch down if ABR mode is enabled.
       */
      ;

      _proto.recoverLevel = function recoverLevel(errorEvent, levelIndex, levelError, levelSwitch) {
        var errorDetails = errorEvent.details;
        var level = this._levels[levelIndex];
        level.loadError++;

        if (levelError) {
          var retrying = this.retryLoadingOrFail(errorEvent);

          if (retrying) {
            // boolean used to inform stream controller not to switch back to IDLE on non fatal error
            errorEvent.levelRetry = true;
          } else {
            this.currentLevelIndex = -1;
            return;
          }
        }

        if (levelSwitch) {
          var redundantLevels = level.url.length; // Try redundant fail-over until level.loadError reaches redundantLevels

          if (redundantLevels > 1 && level.loadError < redundantLevels) {
            errorEvent.levelRetry = true;
            this.redundantFailover(levelIndex);
          } else if (this.manualLevelIndex === -1) {
            // Search for available level in auto level selection mode, cycling from highest to lowest bitrate
            var nextLevel = levelIndex === 0 ? this._levels.length - 1 : levelIndex - 1;

            if (this.currentLevelIndex !== nextLevel && this._levels[nextLevel].loadError === 0) {
              this.warn(errorDetails + ": switch to " + nextLevel);
              errorEvent.levelRetry = true;
              this.hls.nextAutoLevel = nextLevel;
            }
          }
        }
      };

      _proto.redundantFailover = function redundantFailover(levelIndex) {
        var level = this._levels[levelIndex];
        var redundantLevels = level.url.length;

        if (redundantLevels > 1) {
          // Update the url id of all levels so that we stay on the same set of variants when level switching
          var newUrlId = (level.urlId + 1) % redundantLevels;
          this.warn("Switching to redundant URL-id " + newUrlId);

          this._levels.forEach(function (level) {
            level.urlId = newUrlId;
          });

          this.level = levelIndex;
        }
      } // reset errors on the successful load of a fragment
      ;

      _proto.onFragLoaded = function onFragLoaded(event, _ref3) {
        var frag = _ref3.frag;

        if (frag !== undefined && frag.type === _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].MAIN) {
          var level = this._levels[frag.level];

          if (level !== undefined) {
            level.fragmentError = 0;
            level.loadError = 0;
          }
        }
      };

      _proto.onLevelLoaded = function onLevelLoaded(event, data) {
        var _data$deliveryDirecti2;

        var level = data.level,
            details = data.details;
        var curLevel = this._levels[level];

        if (!curLevel) {
          var _data$deliveryDirecti;

          this.warn("Invalid level index " + level);

          if ((_data$deliveryDirecti = data.deliveryDirectives) !== null && _data$deliveryDirecti !== void 0 && _data$deliveryDirecti.skip) {
            details.deltaUpdateFailed = true;
          }

          return;
        } // only process level loaded events matching with expected level


        if (level === this.currentLevelIndex) {
          // reset level load error counter on successful level loaded only if there is no issues with fragments
          if (curLevel.fragmentError === 0) {
            curLevel.loadError = 0;
            this.retryCount = 0;
          }

          this.playlistLoaded(level, data, curLevel.details);
        } else if ((_data$deliveryDirecti2 = data.deliveryDirectives) !== null && _data$deliveryDirecti2 !== void 0 && _data$deliveryDirecti2.skip) {
          // received a delta playlist update that cannot be merged
          details.deltaUpdateFailed = true;
        }
      };

      _proto.onAudioTrackSwitched = function onAudioTrackSwitched(event, data) {
        var currentLevel = this.hls.levels[this.currentLevelIndex];

        if (!currentLevel) {
          return;
        }

        if (currentLevel.audioGroupIds) {
          var urlId = -1;
          var audioGroupId = this.hls.audioTracks[data.id].groupId;

          for (var i = 0; i < currentLevel.audioGroupIds.length; i++) {
            if (currentLevel.audioGroupIds[i] === audioGroupId) {
              urlId = i;
              break;
            }
          }

          if (urlId !== currentLevel.urlId) {
            currentLevel.urlId = urlId;
            this.startLoad();
          }
        }
      };

      _proto.loadPlaylist = function loadPlaylist(hlsUrlParameters) {
        var level = this.currentLevelIndex;
        var currentLevel = this._levels[level];

        if (this.canLoad && currentLevel && currentLevel.url.length > 0) {
          var id = currentLevel.urlId;
          var url = currentLevel.url[id];

          if (hlsUrlParameters) {
            try {
              url = hlsUrlParameters.addDirectives(url);
            } catch (error) {
              this.warn("Could not construct new URL with HLS Delivery Directives: " + error);
            }
          }

          this.log("Attempt loading level index " + level + (hlsUrlParameters ? ' at sn ' + hlsUrlParameters.msn + ' part ' + hlsUrlParameters.part : '') + " with URL-id " + id + " " + url); // console.log('Current audio track group ID:', this.hls.audioTracks[this.hls.audioTrack].groupId);
          // console.log('New video quality level audio group id:', levelObject.attrs.AUDIO, level);

          this.clearTimer();
          this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].LEVEL_LOADING, {
            url: url,
            level: level,
            id: id,
            deliveryDirectives: hlsUrlParameters || null
          });
        }
      };

      _proto.removeLevel = function removeLevel(levelIndex, urlId) {
        var filterLevelAndGroupByIdIndex = function filterLevelAndGroupByIdIndex(url, id) {
          return id !== urlId;
        };

        var levels = this._levels.filter(function (level, index) {
          if (index !== levelIndex) {
            return true;
          }

          if (level.url.length > 1 && urlId !== undefined) {
            level.url = level.url.filter(filterLevelAndGroupByIdIndex);

            if (level.audioGroupIds) {
              level.audioGroupIds = level.audioGroupIds.filter(filterLevelAndGroupByIdIndex);
            }

            if (level.textGroupIds) {
              level.textGroupIds = level.textGroupIds.filter(filterLevelAndGroupByIdIndex);
            }

            level.urlId = 0;
            return true;
          }

          return false;
        }).map(function (level, index) {
          var details = level.details;

          if (details !== null && details !== void 0 && details.fragments) {
            details.fragments.forEach(function (fragment) {
              fragment.level = index;
            });
          }

          return level;
        });

        this._levels = levels;
        this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].LEVELS_UPDATED, {
          levels: levels
        });
      };

      _createClass(LevelController, [{
        key: "levels",
        get: function get() {
          if (this._levels.length === 0) {
            return null;
          }

          return this._levels;
        }
      }, {
        key: "level",
        get: function get() {
          return this.currentLevelIndex;
        },
        set: function set(newLevel) {
          var _levels$newLevel;

          var levels = this._levels;

          if (levels.length === 0) {
            return;
          }

          if (this.currentLevelIndex === newLevel && (_levels$newLevel = levels[newLevel]) !== null && _levels$newLevel !== void 0 && _levels$newLevel.details) {
            return;
          } // check if level idx is valid


          if (newLevel < 0 || newLevel >= levels.length) {
            // invalid level id given, trigger error
            var fatal = newLevel < 0;
            this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].ERROR, {
              type: _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorTypes"].OTHER_ERROR,
              details: _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].LEVEL_SWITCH_ERROR,
              level: newLevel,
              fatal: fatal,
              reason: 'invalid level idx'
            });

            if (fatal) {
              return;
            }

            newLevel = Math.min(newLevel, levels.length - 1);
          } // stopping live reloading timer if any


          this.clearTimer();
          var lastLevelIndex = this.currentLevelIndex;
          var lastLevel = levels[lastLevelIndex];
          var level = levels[newLevel];
          this.log("switching to level " + newLevel + " from " + lastLevelIndex);
          this.currentLevelIndex = newLevel;

          var levelSwitchingData = _extends({}, level, {
            level: newLevel,
            maxBitrate: level.maxBitrate,
            uri: level.uri,
            urlId: level.urlId
          }); // @ts-ignore


          delete levelSwitchingData._urlId;
          this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].LEVEL_SWITCHING, levelSwitchingData); // check if we need to load playlist for this level

          var levelDetails = level.details;

          if (!levelDetails || levelDetails.live) {
            // level not retrieved yet, or live playlist we need to (re)load it
            var hlsUrlParameters = this.switchParams(level.uri, lastLevel === null || lastLevel === void 0 ? void 0 : lastLevel.details);
            this.loadPlaylist(hlsUrlParameters);
          }
        }
      }, {
        key: "manualLevel",
        get: function get() {
          return this.manualLevelIndex;
        },
        set: function set(newLevel) {
          this.manualLevelIndex = newLevel;

          if (this._startLevel === undefined) {
            this._startLevel = newLevel;
          }

          if (newLevel !== -1) {
            this.level = newLevel;
          }
        }
      }, {
        key: "firstLevel",
        get: function get() {
          return this._firstLevel;
        },
        set: function set(newLevel) {
          this._firstLevel = newLevel;
        }
      }, {
        key: "startLevel",
        get: function get() {
          // hls.startLevel takes precedence over config.startLevel
          // if none of these values are defined, fallback on this._firstLevel (first quality level appearing in variant manifest)
          if (this._startLevel === undefined) {
            var configStartLevel = this.hls.config.startLevel;

            if (configStartLevel !== undefined) {
              return configStartLevel;
            } else {
              return this._firstLevel;
            }
          } else {
            return this._startLevel;
          }
        },
        set: function set(newLevel) {
          this._startLevel = newLevel;
        }
      }, {
        key: "nextLoadLevel",
        get: function get() {
          if (this.manualLevelIndex !== -1) {
            return this.manualLevelIndex;
          } else {
            return this.hls.nextAutoLevel;
          }
        },
        set: function set(nextLevel) {
          this.level = nextLevel;

          if (this.manualLevelIndex === -1) {
            this.hls.nextAutoLevel = nextLevel;
          }
        }
      }]);

      return LevelController;
    }(_base_playlist_controller__WEBPACK_IMPORTED_MODULE_5__["default"]);



    /***/ }),

    /***/ "./src/controller/level-helper.ts":
    /*!****************************************!*\
      !*** ./src/controller/level-helper.ts ***!
      \****************************************/
    /*! exports provided: addGroupId, assignTrackIdsByGroup, updatePTS, updateFragPTSDTS, mergeDetails, mapPartIntersection, mapFragmentIntersection, adjustSliding, addSliding, computeReloadInterval, getFragmentWithSN, getPartWith */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addGroupId", function() { return addGroupId; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "assignTrackIdsByGroup", function() { return assignTrackIdsByGroup; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updatePTS", function() { return updatePTS; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateFragPTSDTS", function() { return updateFragPTSDTS; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mergeDetails", function() { return mergeDetails; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapPartIntersection", function() { return mapPartIntersection; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapFragmentIntersection", function() { return mapFragmentIntersection; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "adjustSliding", function() { return adjustSliding; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addSliding", function() { return addSliding; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeReloadInterval", function() { return computeReloadInterval; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFragmentWithSN", function() { return getFragmentWithSN; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPartWith", function() { return getPartWith; });
    /* harmony import */ var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/polyfills/number */ "./src/polyfills/number.ts");
    /* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/logger */ "./src/utils/logger.ts");






    /**
     * @module LevelHelper
     * Providing methods dealing with playlist sliding and drift
     * */

    function addGroupId(level, type, id) {
      switch (type) {
        case 'audio':
          if (!level.audioGroupIds) {
            level.audioGroupIds = [];
          }

          level.audioGroupIds.push(id);
          break;

        case 'text':
          if (!level.textGroupIds) {
            level.textGroupIds = [];
          }

          level.textGroupIds.push(id);
          break;
      }
    }
    function assignTrackIdsByGroup(tracks) {
      var groups = {};
      tracks.forEach(function (track) {
        var groupId = track.groupId || '';
        track.id = groups[groupId] = groups[groupId] || 0;
        groups[groupId]++;
      });
    }
    function updatePTS(fragments, fromIdx, toIdx) {
      var fragFrom = fragments[fromIdx];
      var fragTo = fragments[toIdx];
      updateFromToPTS(fragFrom, fragTo);
    }

    function updateFromToPTS(fragFrom, fragTo) {
      var fragToPTS = fragTo.startPTS; // if we know startPTS[toIdx]

      if (Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(fragToPTS)) {
        // update fragment duration.
        // it helps to fix drifts between playlist reported duration and fragment real duration
        var duration = 0;
        var frag;

        if (fragTo.sn > fragFrom.sn) {
          duration = fragToPTS - fragFrom.start;
          frag = fragFrom;
        } else {
          duration = fragFrom.start - fragToPTS;
          frag = fragTo;
        } // TODO? Drift can go either way, or the playlist could be completely accurate
        // console.assert(duration > 0,
        //   `duration of ${duration} computed for frag ${frag.sn}, level ${frag.level}, there should be some duration drift between playlist and fragment!`);


        if (frag.duration !== duration) {
          frag.duration = duration;
        } // we dont know startPTS[toIdx]

      } else if (fragTo.sn > fragFrom.sn) {
        var contiguous = fragFrom.cc === fragTo.cc; // TODO: With part-loading end/durations we need to confirm the whole fragment is loaded before using (or setting) minEndPTS

        if (contiguous && fragFrom.minEndPTS) {
          fragTo.start = fragFrom.start + (fragFrom.minEndPTS - fragFrom.start);
        } else {
          fragTo.start = fragFrom.start + fragFrom.duration;
        }
      } else {
        fragTo.start = Math.max(fragFrom.start - fragTo.duration, 0);
      }
    }

    function updateFragPTSDTS(details, frag, startPTS, endPTS, startDTS, endDTS) {
      var parsedMediaDuration = endPTS - startPTS;

      if (parsedMediaDuration <= 0) {
        _utils_logger__WEBPACK_IMPORTED_MODULE_1__["logger"].warn('Fragment should have a positive duration', frag);
        endPTS = startPTS + frag.duration;
        endDTS = startDTS + frag.duration;
      }

      var maxStartPTS = startPTS;
      var minEndPTS = endPTS;
      var fragStartPts = frag.startPTS;
      var fragEndPts = frag.endPTS;

      if (Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(fragStartPts)) {
        // delta PTS between audio and video
        var deltaPTS = Math.abs(fragStartPts - startPTS);

        if (!Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(frag.deltaPTS)) {
          frag.deltaPTS = deltaPTS;
        } else {
          frag.deltaPTS = Math.max(deltaPTS, frag.deltaPTS);
        }

        maxStartPTS = Math.max(startPTS, fragStartPts);
        startPTS = Math.min(startPTS, fragStartPts);
        startDTS = Math.min(startDTS, frag.startDTS);
        minEndPTS = Math.min(endPTS, fragEndPts);
        endPTS = Math.max(endPTS, fragEndPts);
        endDTS = Math.max(endDTS, frag.endDTS);
      }

      frag.duration = endPTS - startPTS;
      var drift = startPTS - frag.start;
      frag.appendedPTS = endPTS;
      frag.start = frag.startPTS = startPTS;
      frag.maxStartPTS = maxStartPTS;
      frag.startDTS = startDTS;
      frag.endPTS = endPTS;
      frag.minEndPTS = minEndPTS;
      frag.endDTS = endDTS;
      var sn = frag.sn; // 'initSegment'
      // exit if sn out of range

      if (!details || sn < details.startSN || sn > details.endSN) {
        return 0;
      }

      var i;
      var fragIdx = sn - details.startSN;
      var fragments = details.fragments; // update frag reference in fragments array
      // rationale is that fragments array might not contain this frag object.
      // this will happen if playlist has been refreshed between frag loading and call to updateFragPTSDTS()
      // if we don't update frag, we won't be able to propagate PTS info on the playlist
      // resulting in invalid sliding computation

      fragments[fragIdx] = frag; // adjust fragment PTS/duration from seqnum-1 to frag 0

      for (i = fragIdx; i > 0; i--) {
        updateFromToPTS(fragments[i], fragments[i - 1]);
      } // adjust fragment PTS/duration from seqnum to last frag


      for (i = fragIdx; i < fragments.length - 1; i++) {
        updateFromToPTS(fragments[i], fragments[i + 1]);
      }

      if (details.fragmentHint) {
        updateFromToPTS(fragments[fragments.length - 1], details.fragmentHint);
      }

      details.PTSKnown = details.alignedSliding = true;
      return drift;
    }
    function mergeDetails(oldDetails, newDetails) {
      // Track the last initSegment processed. Initialize it to the last one on the timeline.
      var currentInitSegment = null;
      var oldFragments = oldDetails.fragments;

      for (var i = oldFragments.length - 1; i >= 0; i--) {
        var oldInit = oldFragments[i].initSegment;

        if (oldInit) {
          currentInitSegment = oldInit;
          break;
        }
      }

      if (oldDetails.fragmentHint) {
        // prevent PTS and duration from being adjusted on the next hint
        delete oldDetails.fragmentHint.endPTS;
      } // check if old/new playlists have fragments in common
      // loop through overlapping SN and update startPTS , cc, and duration if any found


      var ccOffset = 0;
      var PTSFrag;
      mapFragmentIntersection(oldDetails, newDetails, function (oldFrag, newFrag) {
        var _currentInitSegment;

        if (oldFrag.relurl) {
          // Do not compare CC if the old fragment has no url. This is a level.fragmentHint used by LL-HLS parts.
          // It maybe be off by 1 if it was created before any parts or discontinuity tags were appended to the end
          // of the playlist.
          ccOffset = oldFrag.cc - newFrag.cc;
        }

        if (Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(oldFrag.startPTS) && Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(oldFrag.endPTS)) {
          newFrag.start = newFrag.startPTS = oldFrag.startPTS;
          newFrag.startDTS = oldFrag.startDTS;
          newFrag.appendedPTS = oldFrag.appendedPTS;
          newFrag.maxStartPTS = oldFrag.maxStartPTS;
          newFrag.endPTS = oldFrag.endPTS;
          newFrag.endDTS = oldFrag.endDTS;
          newFrag.minEndPTS = oldFrag.minEndPTS;
          newFrag.duration = oldFrag.endPTS - oldFrag.startPTS;

          if (newFrag.duration) {
            PTSFrag = newFrag;
          } // PTS is known when any segment has startPTS and endPTS


          newDetails.PTSKnown = newDetails.alignedSliding = true;
        }

        newFrag.elementaryStreams = oldFrag.elementaryStreams;
        newFrag.loader = oldFrag.loader;
        newFrag.stats = oldFrag.stats;
        newFrag.urlId = oldFrag.urlId;

        if (oldFrag.initSegment) {
          newFrag.initSegment = oldFrag.initSegment;
          currentInitSegment = oldFrag.initSegment;
        } else if (!newFrag.initSegment || newFrag.initSegment.relurl == ((_currentInitSegment = currentInitSegment) === null || _currentInitSegment === void 0 ? void 0 : _currentInitSegment.relurl)) {
          newFrag.initSegment = currentInitSegment;
        }
      });

      if (newDetails.skippedSegments) {
        newDetails.deltaUpdateFailed = newDetails.fragments.some(function (frag) {
          return !frag;
        });

        if (newDetails.deltaUpdateFailed) {
          _utils_logger__WEBPACK_IMPORTED_MODULE_1__["logger"].warn('[level-helper] Previous playlist missing segments skipped in delta playlist');

          for (var _i = newDetails.skippedSegments; _i--;) {
            newDetails.fragments.shift();
          }

          newDetails.startSN = newDetails.fragments[0].sn;
          newDetails.startCC = newDetails.fragments[0].cc;
        }
      }

      var newFragments = newDetails.fragments;

      if (ccOffset) {
        _utils_logger__WEBPACK_IMPORTED_MODULE_1__["logger"].warn('discontinuity sliding from playlist, take drift into account');

        for (var _i2 = 0; _i2 < newFragments.length; _i2++) {
          newFragments[_i2].cc += ccOffset;
        }
      }

      if (newDetails.skippedSegments) {
        newDetails.startCC = newDetails.fragments[0].cc;
      } // Merge parts


      mapPartIntersection(oldDetails.partList, newDetails.partList, function (oldPart, newPart) {
        newPart.elementaryStreams = oldPart.elementaryStreams;
        newPart.stats = oldPart.stats;
      }); // if at least one fragment contains PTS info, recompute PTS information for all fragments

      if (PTSFrag) {
        updateFragPTSDTS(newDetails, PTSFrag, PTSFrag.startPTS, PTSFrag.endPTS, PTSFrag.startDTS, PTSFrag.endDTS);
      } else {
        // ensure that delta is within oldFragments range
        // also adjust sliding in case delta is 0 (we could have old=[50-60] and new=old=[50-61])
        // in that case we also need to adjust start offset of all fragments
        adjustSliding(oldDetails, newDetails);
      }

      if (newFragments.length) {
        newDetails.totalduration = newDetails.edge - newFragments[0].start;
      }

      newDetails.driftStartTime = oldDetails.driftStartTime;
      newDetails.driftStart = oldDetails.driftStart;
      var advancedDateTime = newDetails.advancedDateTime;

      if (newDetails.advanced && advancedDateTime) {
        var edge = newDetails.edge;

        if (!newDetails.driftStart) {
          newDetails.driftStartTime = advancedDateTime;
          newDetails.driftStart = edge;
        }

        newDetails.driftEndTime = advancedDateTime;
        newDetails.driftEnd = edge;
      } else {
        newDetails.driftEndTime = oldDetails.driftEndTime;
        newDetails.driftEnd = oldDetails.driftEnd;
        newDetails.advancedDateTime = oldDetails.advancedDateTime;
      }
    }
    function mapPartIntersection(oldParts, newParts, intersectionFn) {
      if (oldParts && newParts) {
        var delta = 0;

        for (var i = 0, len = oldParts.length; i <= len; i++) {
          var _oldPart = oldParts[i];
          var _newPart = newParts[i + delta];

          if (_oldPart && _newPart && _oldPart.index === _newPart.index && _oldPart.fragment.sn === _newPart.fragment.sn) {
            intersectionFn(_oldPart, _newPart);
          } else {
            delta--;
          }
        }
      }
    }
    function mapFragmentIntersection(oldDetails, newDetails, intersectionFn) {
      var skippedSegments = newDetails.skippedSegments;
      var start = Math.max(oldDetails.startSN, newDetails.startSN) - newDetails.startSN;
      var end = (oldDetails.fragmentHint ? 1 : 0) + (skippedSegments ? newDetails.endSN : Math.min(oldDetails.endSN, newDetails.endSN)) - newDetails.startSN;
      var delta = newDetails.startSN - oldDetails.startSN;
      var newFrags = newDetails.fragmentHint ? newDetails.fragments.concat(newDetails.fragmentHint) : newDetails.fragments;
      var oldFrags = oldDetails.fragmentHint ? oldDetails.fragments.concat(oldDetails.fragmentHint) : oldDetails.fragments;

      for (var i = start; i <= end; i++) {
        var _oldFrag = oldFrags[delta + i];
        var _newFrag = newFrags[i];

        if (skippedSegments && !_newFrag && i < skippedSegments) {
          // Fill in skipped segments in delta playlist
          _newFrag = newDetails.fragments[i] = _oldFrag;
        }

        if (_oldFrag && _newFrag) {
          intersectionFn(_oldFrag, _newFrag);
        }
      }
    }
    function adjustSliding(oldDetails, newDetails) {
      var delta = newDetails.startSN + newDetails.skippedSegments - oldDetails.startSN;
      var oldFragments = oldDetails.fragments;

      if (delta < 0 || delta >= oldFragments.length) {
        return;
      }

      addSliding(newDetails, oldFragments[delta].start);
    }
    function addSliding(details, start) {
      if (start) {
        var fragments = details.fragments;

        for (var i = details.skippedSegments; i < fragments.length; i++) {
          fragments[i].start += start;
        }

        if (details.fragmentHint) {
          details.fragmentHint.start += start;
        }
      }
    }
    function computeReloadInterval(newDetails, stats) {
      var reloadInterval = 1000 * newDetails.levelTargetDuration;
      var reloadIntervalAfterMiss = reloadInterval / 2;
      var timeSinceLastModified = newDetails.age;
      var useLastModified = timeSinceLastModified > 0 && timeSinceLastModified < reloadInterval * 3;
      var roundTrip = stats.loading.end - stats.loading.start;
      var estimatedTimeUntilUpdate;
      var availabilityDelay = newDetails.availabilityDelay; // let estimate = 'average';

      if (newDetails.updated === false) {
        if (useLastModified) {
          // estimate = 'miss round trip';
          // We should have had a hit so try again in the time it takes to get a response,
          // but no less than 1/3 second.
          var minRetry = 333 * newDetails.misses;
          estimatedTimeUntilUpdate = Math.max(Math.min(reloadIntervalAfterMiss, roundTrip * 2), minRetry);
          newDetails.availabilityDelay = (newDetails.availabilityDelay || 0) + estimatedTimeUntilUpdate;
        } else {
          // estimate = 'miss half average';
          // follow HLS Spec, If the client reloads a Playlist file and finds that it has not
          // changed then it MUST wait for a period of one-half the target
          // duration before retrying.
          estimatedTimeUntilUpdate = reloadIntervalAfterMiss;
        }
      } else if (useLastModified) {
        // estimate = 'next modified date';
        // Get the closest we've been to timeSinceLastModified on update
        availabilityDelay = Math.min(availabilityDelay || reloadInterval / 2, timeSinceLastModified);
        newDetails.availabilityDelay = availabilityDelay;
        estimatedTimeUntilUpdate = availabilityDelay + reloadInterval - timeSinceLastModified;
      } else {
        estimatedTimeUntilUpdate = reloadInterval - roundTrip;
      } // console.log(`[computeReloadInterval] live reload ${newDetails.updated ? 'REFRESHED' : 'MISSED'}`,
      //   '\n  method', estimate,
      //   '\n  estimated time until update =>', estimatedTimeUntilUpdate,
      //   '\n  average target duration', reloadInterval,
      //   '\n  time since modified', timeSinceLastModified,
      //   '\n  time round trip', roundTrip,
      //   '\n  availability delay', availabilityDelay);


      return Math.round(estimatedTimeUntilUpdate);
    }
    function getFragmentWithSN(level, sn, fragCurrent) {
      if (!level || !level.details) {
        return null;
      }

      var levelDetails = level.details;
      var fragment = levelDetails.fragments[sn - levelDetails.startSN];

      if (fragment) {
        return fragment;
      }

      fragment = levelDetails.fragmentHint;

      if (fragment && fragment.sn === sn) {
        return fragment;
      }

      if (sn < levelDetails.startSN && fragCurrent && fragCurrent.sn === sn) {
        return fragCurrent;
      }

      return null;
    }
    function getPartWith(level, sn, partIndex) {
      if (!level || !level.details) {
        return null;
      }

      var partList = level.details.partList;

      if (partList) {
        for (var i = partList.length; i--;) {
          var part = partList[i];

          if (part.index === partIndex && part.fragment.sn === sn) {
            return part;
          }
        }
      }

      return null;
    }

    /***/ }),

    /***/ "./src/controller/stream-controller.ts":
    /*!*********************************************!*\
      !*** ./src/controller/stream-controller.ts ***!
      \*********************************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return StreamController; });
    /* harmony import */ var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/polyfills/number */ "./src/polyfills/number.ts");
    /* harmony import */ var _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base-stream-controller */ "./src/controller/base-stream-controller.ts");
    /* harmony import */ var _is_supported__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../is-supported */ "./src/is-supported.ts");
    /* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../events */ "./src/events.ts");
    /* harmony import */ var _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/buffer-helper */ "./src/utils/buffer-helper.ts");
    /* harmony import */ var _fragment_tracker__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./fragment-tracker */ "./src/controller/fragment-tracker.ts");
    /* harmony import */ var _types_loader__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../types/loader */ "./src/types/loader.ts");
    /* harmony import */ var _loader_fragment__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../loader/fragment */ "./src/loader/fragment.ts");
    /* harmony import */ var _demux_transmuxer_interface__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../demux/transmuxer-interface */ "./src/demux/transmuxer-interface.ts");
    /* harmony import */ var _types_transmuxer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../types/transmuxer */ "./src/types/transmuxer.ts");
    /* harmony import */ var _gap_controller__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./gap-controller */ "./src/controller/gap-controller.ts");
    /* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../errors */ "./src/errors.ts");
    /* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../utils/logger */ "./src/utils/logger.ts");



    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }













    var TICK_INTERVAL = 100; // how often to tick in ms

    var StreamController = /*#__PURE__*/function (_BaseStreamController) {
      _inheritsLoose(StreamController, _BaseStreamController);

      function StreamController(hls, fragmentTracker) {
        var _this;

        _this = _BaseStreamController.call(this, hls, fragmentTracker, '[stream-controller]') || this;
        _this.audioCodecSwap = false;
        _this.gapController = null;
        _this.level = -1;
        _this._forceStartLoad = false;
        _this.altAudio = false;
        _this.audioOnly = false;
        _this.fragPlaying = null;
        _this.onvplaying = null;
        _this.onvseeked = null;
        _this.fragLastKbps = 0;
        _this.stalled = false;
        _this.couldBacktrack = false;
        _this.audioCodecSwitch = false;
        _this.videoBuffer = null;

        _this._registerListeners();

        return _this;
      }

      var _proto = StreamController.prototype;

      _proto._registerListeners = function _registerListeners() {
        var hls = this.hls;
        hls.on(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].MEDIA_ATTACHED, this.onMediaAttached, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].MEDIA_DETACHING, this.onMediaDetaching, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].MANIFEST_LOADING, this.onManifestLoading, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].MANIFEST_PARSED, this.onManifestParsed, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].LEVEL_LOADING, this.onLevelLoading, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].LEVEL_LOADED, this.onLevelLoaded, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].FRAG_LOAD_EMERGENCY_ABORTED, this.onFragLoadEmergencyAborted, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].ERROR, this.onError, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].BUFFER_CREATED, this.onBufferCreated, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].BUFFER_FLUSHED, this.onBufferFlushed, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].LEVELS_UPDATED, this.onLevelsUpdated, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].FRAG_BUFFERED, this.onFragBuffered, this);
      };

      _proto._unregisterListeners = function _unregisterListeners() {
        var hls = this.hls;
        hls.off(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].MEDIA_ATTACHED, this.onMediaAttached, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].MEDIA_DETACHING, this.onMediaDetaching, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].MANIFEST_LOADING, this.onManifestLoading, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].MANIFEST_PARSED, this.onManifestParsed, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].LEVEL_LOADED, this.onLevelLoaded, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].FRAG_LOAD_EMERGENCY_ABORTED, this.onFragLoadEmergencyAborted, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].ERROR, this.onError, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].BUFFER_CREATED, this.onBufferCreated, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].BUFFER_FLUSHED, this.onBufferFlushed, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].LEVELS_UPDATED, this.onLevelsUpdated, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].FRAG_BUFFERED, this.onFragBuffered, this);
      };

      _proto.onHandlerDestroying = function onHandlerDestroying() {
        this._unregisterListeners();

        this.onMediaDetaching();
      };

      _proto.startLoad = function startLoad(startPosition) {
        if (this.levels) {
          var lastCurrentTime = this.lastCurrentTime,
              hls = this.hls;
          this.stopLoad();
          this.setInterval(TICK_INTERVAL);
          this.level = -1;
          this.fragLoadError = 0;

          if (!this.startFragRequested) {
            // determine load level
            var startLevel = hls.startLevel;

            if (startLevel === -1) {
              if (hls.config.testBandwidth) {
                // -1 : guess start Level by doing a bitrate test by loading first fragment of lowest quality level
                startLevel = 0;
                this.bitrateTest = true;
              } else {
                startLevel = hls.nextAutoLevel;
              }
            } // set new level to playlist loader : this will trigger start level load
            // hls.nextLoadLevel remains until it is set to a new value or until a new frag is successfully loaded


            this.level = hls.nextLoadLevel = startLevel;
            this.loadedmetadata = false;
          } // if startPosition undefined but lastCurrentTime set, set startPosition to last currentTime


          if (lastCurrentTime > 0 && startPosition === -1) {
            this.log("Override startPosition with lastCurrentTime @" + lastCurrentTime.toFixed(3));
            startPosition = lastCurrentTime;
          }

          this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE;
          this.nextLoadPosition = this.startPosition = this.lastCurrentTime = startPosition;
          this.tick();
        } else {
          this._forceStartLoad = true;
          this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].STOPPED;
        }
      };

      _proto.stopLoad = function stopLoad() {
        this._forceStartLoad = false;

        _BaseStreamController.prototype.stopLoad.call(this);
      };

      _proto.doTick = function doTick() {
        switch (this.state) {
          case _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE:
            this.doTickIdle();
            break;

          case _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].WAITING_LEVEL:
            {
              var _levels$level;

              var levels = this.levels,
                  level = this.level;
              var details = levels === null || levels === void 0 ? void 0 : (_levels$level = levels[level]) === null || _levels$level === void 0 ? void 0 : _levels$level.details;

              if (details && (!details.live || this.levelLastLoaded === this.level)) {
                if (this.waitForCdnTuneIn(details)) {
                  break;
                }

                this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE;
                break;
              }

              break;
            }

          case _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].FRAG_LOADING_WAITING_RETRY:
            {
              var _this$media;

              var now = self.performance.now();
              var retryDate = this.retryDate; // if current time is gt than retryDate, or if media seeking let's switch to IDLE state to retry loading

              if (!retryDate || now >= retryDate || (_this$media = this.media) !== null && _this$media !== void 0 && _this$media.seeking) {
                this.log('retryDate reached, switch back to IDLE state');
                this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE;
              }
            }
            break;
        } // check buffer
        // check/update current fragment


        this.onTickEnd();
      };

      _proto.onTickEnd = function onTickEnd() {
        _BaseStreamController.prototype.onTickEnd.call(this);

        this.checkBuffer();
        this.checkFragmentChanged();
      };

      _proto.doTickIdle = function doTickIdle() {
        var _frag$decryptdata, _frag$decryptdata2;

        var hls = this.hls,
            levelLastLoaded = this.levelLastLoaded,
            levels = this.levels,
            media = this.media;
        var config = hls.config,
            level = hls.nextLoadLevel; // if start level not parsed yet OR
        // if video not attached AND start fragment already requested OR start frag prefetch not enabled
        // exit loop, as we either need more info (level not parsed) or we need media to be attached to load new fragment

        if (levelLastLoaded === null || !media && (this.startFragRequested || !config.startFragPrefetch)) {
          return;
        } // If the "main" level is audio-only but we are loading an alternate track in the same group, do not load anything


        if (this.altAudio && this.audioOnly) {
          return;
        }

        if (!levels || !levels[level]) {
          return;
        }

        var levelInfo = levels[level]; // if buffer length is less than maxBufLen try to load a new fragment
        // set next load level : this will trigger a playlist load if needed

        this.level = hls.nextLoadLevel = level;
        var levelDetails = levelInfo.details; // if level info not retrieved yet, switch state and wait for level retrieval
        // if live playlist, ensure that new playlist has been refreshed to avoid loading/try to load
        // a useless and outdated fragment (that might even introduce load error if it is already out of the live playlist)

        if (!levelDetails || this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].WAITING_LEVEL || levelDetails.live && this.levelLastLoaded !== level) {
          this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].WAITING_LEVEL;
          return;
        }

        var bufferInfo = this.getFwdBufferInfo(this.mediaBuffer ? this.mediaBuffer : media, _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].MAIN);

        if (bufferInfo === null) {
          return;
        }

        var bufferLen = bufferInfo.len; // compute max Buffer Length that we could get from this load level, based on level bitrate. don't buffer more than 60 MB and more than 30s

        var maxBufLen = this.getMaxBufferLength(levelInfo.maxBitrate); // Stay idle if we are still with buffer margins

        if (bufferLen >= maxBufLen) {
          return;
        }

        if (this._streamEnded(bufferInfo, levelDetails)) {
          var data = {};

          if (this.altAudio) {
            data.type = 'video';
          }

          this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].BUFFER_EOS, data);
          this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].ENDED;
          return;
        }

        var targetBufferTime = bufferInfo.end;
        var frag = this.getNextFragment(targetBufferTime, levelDetails); // Avoid backtracking after seeking or switching by loading an earlier segment in streams that could backtrack

        if (this.couldBacktrack && !this.fragPrevious && frag && frag.sn !== 'initSegment') {
          var fragIdx = frag.sn - levelDetails.startSN;

          if (fragIdx > 1) {
            frag = levelDetails.fragments[fragIdx - 1];
            this.fragmentTracker.removeFragment(frag);
          }
        } // Avoid loop loading by using nextLoadPosition set for backtracking


        if (frag && this.fragmentTracker.getState(frag) === _fragment_tracker__WEBPACK_IMPORTED_MODULE_5__["FragmentState"].OK && this.nextLoadPosition > targetBufferTime) {
          // Cleanup the fragment tracker before trying to find the next unbuffered fragment
          var type = this.audioOnly && !this.altAudio ? _loader_fragment__WEBPACK_IMPORTED_MODULE_7__["ElementaryStreamTypes"].AUDIO : _loader_fragment__WEBPACK_IMPORTED_MODULE_7__["ElementaryStreamTypes"].VIDEO;
          this.afterBufferFlushed(media, type, _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].MAIN);
          frag = this.getNextFragment(this.nextLoadPosition, levelDetails);
        }

        if (!frag) {
          return;
        }

        if (frag.initSegment && !frag.initSegment.data && !this.bitrateTest) {
          frag = frag.initSegment;
        } // We want to load the key if we're dealing with an identity key, because we will decrypt
        // this content using the key we fetch. Other keys will be handled by the DRM CDM via EME.


        if (((_frag$decryptdata = frag.decryptdata) === null || _frag$decryptdata === void 0 ? void 0 : _frag$decryptdata.keyFormat) === 'identity' && !((_frag$decryptdata2 = frag.decryptdata) !== null && _frag$decryptdata2 !== void 0 && _frag$decryptdata2.key)) {
          this.loadKey(frag, levelDetails);
        } else {
          this.loadFragment(frag, levelDetails, targetBufferTime);
        }
      };

      _proto.loadFragment = function loadFragment(frag, levelDetails, targetBufferTime) {
        var _this$media2;

        // Check if fragment is not loaded
        var fragState = this.fragmentTracker.getState(frag);
        this.fragCurrent = frag; // Use data from loaded backtracked fragment if available

        if (fragState === _fragment_tracker__WEBPACK_IMPORTED_MODULE_5__["FragmentState"].BACKTRACKED) {
          var data = this.fragmentTracker.getBacktrackData(frag);

          if (data) {
            this._handleFragmentLoadProgress(data);

            this._handleFragmentLoadComplete(data);

            return;
          } else {
            fragState = _fragment_tracker__WEBPACK_IMPORTED_MODULE_5__["FragmentState"].NOT_LOADED;
          }
        }

        if (fragState === _fragment_tracker__WEBPACK_IMPORTED_MODULE_5__["FragmentState"].NOT_LOADED || fragState === _fragment_tracker__WEBPACK_IMPORTED_MODULE_5__["FragmentState"].PARTIAL) {
          if (frag.sn === 'initSegment') {
            this._loadInitSegment(frag);
          } else if (this.bitrateTest) {
            frag.bitrateTest = true;
            this.log("Fragment " + frag.sn + " of level " + frag.level + " is being downloaded to test bitrate and will not be buffered");

            this._loadBitrateTestFrag(frag);
          } else {
            this.startFragRequested = true;

            _BaseStreamController.prototype.loadFragment.call(this, frag, levelDetails, targetBufferTime);
          }
        } else if (fragState === _fragment_tracker__WEBPACK_IMPORTED_MODULE_5__["FragmentState"].APPENDING) {
          // Lower the buffer size and try again
          if (this.reduceMaxBufferLength(frag.duration)) {
            this.fragmentTracker.removeFragment(frag);
          }
        } else if (((_this$media2 = this.media) === null || _this$media2 === void 0 ? void 0 : _this$media2.buffered.length) === 0) {
          // Stop gap for bad tracker / buffer flush behavior
          this.fragmentTracker.removeAllFragments();
        }
      };

      _proto.getAppendedFrag = function getAppendedFrag(position) {
        var fragOrPart = this.fragmentTracker.getAppendedFrag(position, _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].MAIN);

        if (fragOrPart && 'fragment' in fragOrPart) {
          return fragOrPart.fragment;
        }

        return fragOrPart;
      };

      _proto.getBufferedFrag = function getBufferedFrag(position) {
        return this.fragmentTracker.getBufferedFrag(position, _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].MAIN);
      };

      _proto.followingBufferedFrag = function followingBufferedFrag(frag) {
        if (frag) {
          // try to get range of next fragment (500ms after this range)
          return this.getBufferedFrag(frag.end + 0.5);
        }

        return null;
      }
      /*
        on immediate level switch :
         - pause playback if playing
         - cancel any pending load request
         - and trigger a buffer flush
      */
      ;

      _proto.immediateLevelSwitch = function immediateLevelSwitch() {
        this.abortCurrentFrag();
        this.flushMainBuffer(0, Number.POSITIVE_INFINITY);
      }
      /**
       * try to switch ASAP without breaking video playback:
       * in order to ensure smooth but quick level switching,
       * we need to find the next flushable buffer range
       * we should take into account new segment fetch time
       */
      ;

      _proto.nextLevelSwitch = function nextLevelSwitch() {
        var levels = this.levels,
            media = this.media; // ensure that media is defined and that metadata are available (to retrieve currentTime)

        if (media !== null && media !== void 0 && media.readyState) {
          var fetchdelay;
          var fragPlayingCurrent = this.getAppendedFrag(media.currentTime);

          if (fragPlayingCurrent && fragPlayingCurrent.start > 1) {
            // flush buffer preceding current fragment (flush until current fragment start offset)
            // minus 1s to avoid video freezing, that could happen if we flush keyframe of current video ...
            this.flushMainBuffer(0, fragPlayingCurrent.start - 1);
          }

          if (!media.paused && levels) {
            // add a safety delay of 1s
            var nextLevelId = this.hls.nextLoadLevel;
            var nextLevel = levels[nextLevelId];
            var fragLastKbps = this.fragLastKbps;

            if (fragLastKbps && this.fragCurrent) {
              fetchdelay = this.fragCurrent.duration * nextLevel.maxBitrate / (1000 * fragLastKbps) + 1;
            } else {
              fetchdelay = 0;
            }
          } else {
            fetchdelay = 0;
          } // this.log('fetchdelay:'+fetchdelay);
          // find buffer range that will be reached once new fragment will be fetched


          var bufferedFrag = this.getBufferedFrag(media.currentTime + fetchdelay);

          if (bufferedFrag) {
            // we can flush buffer range following this one without stalling playback
            var nextBufferedFrag = this.followingBufferedFrag(bufferedFrag);

            if (nextBufferedFrag) {
              // if we are here, we can also cancel any loading/demuxing in progress, as they are useless
              this.abortCurrentFrag(); // start flush position is in next buffered frag. Leave some padding for non-independent segments and smoother playback.

              var maxStart = nextBufferedFrag.maxStartPTS ? nextBufferedFrag.maxStartPTS : nextBufferedFrag.start;
              var fragDuration = nextBufferedFrag.duration;
              var startPts = Math.max(bufferedFrag.end, maxStart + Math.min(Math.max(fragDuration - this.config.maxFragLookUpTolerance, fragDuration * 0.5), fragDuration * 0.75));
              this.flushMainBuffer(startPts, Number.POSITIVE_INFINITY);
            }
          }
        }
      };

      _proto.abortCurrentFrag = function abortCurrentFrag() {
        var fragCurrent = this.fragCurrent;
        this.fragCurrent = null;

        if (fragCurrent !== null && fragCurrent !== void 0 && fragCurrent.loader) {
          fragCurrent.loader.abort();
        }

        if (this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].KEY_LOADING) {
          this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE;
        }

        this.nextLoadPosition = this.getLoadPosition();
      };

      _proto.flushMainBuffer = function flushMainBuffer(startOffset, endOffset) {
        _BaseStreamController.prototype.flushMainBuffer.call(this, startOffset, endOffset, this.altAudio ? 'video' : null);
      };

      _proto.onMediaAttached = function onMediaAttached(event, data) {
        _BaseStreamController.prototype.onMediaAttached.call(this, event, data);

        var media = data.media;
        this.onvplaying = this.onMediaPlaying.bind(this);
        this.onvseeked = this.onMediaSeeked.bind(this);
        media.addEventListener('playing', this.onvplaying);
        media.addEventListener('seeked', this.onvseeked);
        this.gapController = new _gap_controller__WEBPACK_IMPORTED_MODULE_10__["default"](this.config, media, this.fragmentTracker, this.hls);
      };

      _proto.onMediaDetaching = function onMediaDetaching() {
        var media = this.media;

        if (media) {
          media.removeEventListener('playing', this.onvplaying);
          media.removeEventListener('seeked', this.onvseeked);
          this.onvplaying = this.onvseeked = null;
          this.videoBuffer = null;
        }

        this.fragPlaying = null;

        if (this.gapController) {
          this.gapController.destroy();
          this.gapController = null;
        }

        _BaseStreamController.prototype.onMediaDetaching.call(this);
      };

      _proto.onMediaPlaying = function onMediaPlaying() {
        // tick to speed up FRAG_CHANGED triggering
        this.tick();
      };

      _proto.onMediaSeeked = function onMediaSeeked() {
        var media = this.media;
        var currentTime = media ? media.currentTime : null;

        if (Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(currentTime)) {
          this.log("Media seeked to " + currentTime.toFixed(3));
        } // tick to speed up FRAG_CHANGED triggering


        this.tick();
      };

      _proto.onManifestLoading = function onManifestLoading() {
        // reset buffer on manifest loading
        this.log('Trigger BUFFER_RESET');
        this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].BUFFER_RESET, undefined);
        this.fragmentTracker.removeAllFragments();
        this.couldBacktrack = this.stalled = false;
        this.startPosition = this.lastCurrentTime = 0;
        this.fragPlaying = null;
      };

      _proto.onManifestParsed = function onManifestParsed(event, data) {
        var aac = false;
        var heaac = false;
        var codec;
        data.levels.forEach(function (level) {
          // detect if we have different kind of audio codecs used amongst playlists
          codec = level.audioCodec;

          if (codec) {
            if (codec.indexOf('mp4a.40.2') !== -1) {
              aac = true;
            }

            if (codec.indexOf('mp4a.40.5') !== -1) {
              heaac = true;
            }
          }
        });
        this.audioCodecSwitch = aac && heaac && !Object(_is_supported__WEBPACK_IMPORTED_MODULE_2__["changeTypeSupported"])();

        if (this.audioCodecSwitch) {
          this.log('Both AAC/HE-AAC audio found in levels; declaring level codec as HE-AAC');
        }

        this.levels = data.levels;
        this.startFragRequested = false;
      };

      _proto.onLevelLoading = function onLevelLoading(event, data) {
        var levels = this.levels;

        if (!levels || this.state !== _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE) {
          return;
        }

        var level = levels[data.level];

        if (!level.details || level.details.live && this.levelLastLoaded !== data.level || this.waitForCdnTuneIn(level.details)) {
          this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].WAITING_LEVEL;
        }
      };

      _proto.onLevelLoaded = function onLevelLoaded(event, data) {
        var _curLevel$details;

        var levels = this.levels;
        var newLevelId = data.level;
        var newDetails = data.details;
        var duration = newDetails.totalduration;

        if (!levels) {
          this.warn("Levels were reset while loading level " + newLevelId);
          return;
        }

        this.log("Level " + newLevelId + " loaded [" + newDetails.startSN + "," + newDetails.endSN + "], cc [" + newDetails.startCC + ", " + newDetails.endCC + "] duration:" + duration);
        var fragCurrent = this.fragCurrent;

        if (fragCurrent && (this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].FRAG_LOADING || this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].FRAG_LOADING_WAITING_RETRY)) {
          if (fragCurrent.level !== data.level && fragCurrent.loader) {
            this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE;
            fragCurrent.loader.abort();
          }
        }

        var curLevel = levels[newLevelId];
        var sliding = 0;

        if (newDetails.live || (_curLevel$details = curLevel.details) !== null && _curLevel$details !== void 0 && _curLevel$details.live) {
          if (!newDetails.fragments[0]) {
            newDetails.deltaUpdateFailed = true;
          }

          if (newDetails.deltaUpdateFailed) {
            return;
          }

          sliding = this.alignPlaylists(newDetails, curLevel.details);
        } // override level info


        curLevel.details = newDetails;
        this.levelLastLoaded = newLevelId;
        this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].LEVEL_UPDATED, {
          details: newDetails,
          level: newLevelId
        }); // only switch back to IDLE state if we were waiting for level to start downloading a new fragment

        if (this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].WAITING_LEVEL) {
          if (this.waitForCdnTuneIn(newDetails)) {
            // Wait for Low-Latency CDN Tune-in
            return;
          }

          this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE;
        }

        if (!this.startFragRequested) {
          this.setStartPosition(newDetails, sliding);
        } else if (newDetails.live) {
          this.synchronizeToLiveEdge(newDetails);
        } // trigger handler right now


        this.tick();
      };

      _proto._handleFragmentLoadProgress = function _handleFragmentLoadProgress(data) {
        var _frag$initSegment;

        var frag = data.frag,
            part = data.part,
            payload = data.payload;
        var levels = this.levels;

        if (!levels) {
          this.warn("Levels were reset while fragment load was in progress. Fragment " + frag.sn + " of level " + frag.level + " will not be buffered");
          return;
        }

        var currentLevel = levels[frag.level];
        var details = currentLevel.details;

        if (!details) {
          this.warn("Dropping fragment " + frag.sn + " of level " + frag.level + " after level details were reset");
          return;
        }

        var videoCodec = currentLevel.videoCodec; // time Offset is accurate if level PTS is known, or if playlist is not sliding (not live)

        var accurateTimeOffset = details.PTSKnown || !details.live;
        var initSegmentData = (_frag$initSegment = frag.initSegment) === null || _frag$initSegment === void 0 ? void 0 : _frag$initSegment.data;

        var audioCodec = this._getAudioCodec(currentLevel); // transmux the MPEG-TS data to ISO-BMFF segments
        // this.log(`Transmuxing ${frag.sn} of [${details.startSN} ,${details.endSN}],level ${frag.level}, cc ${frag.cc}`);


        var transmuxer = this.transmuxer = this.transmuxer || new _demux_transmuxer_interface__WEBPACK_IMPORTED_MODULE_8__["default"](this.hls, _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].MAIN, this._handleTransmuxComplete.bind(this), this._handleTransmuxerFlush.bind(this));
        var partIndex = part ? part.index : -1;
        var partial = partIndex !== -1;
        var chunkMeta = new _types_transmuxer__WEBPACK_IMPORTED_MODULE_9__["ChunkMetadata"](frag.level, frag.sn, frag.stats.chunkCount, payload.byteLength, partIndex, partial);
        var initPTS = this.initPTS[frag.cc];
        transmuxer.push(payload, initSegmentData, audioCodec, videoCodec, frag, part, details.totalduration, accurateTimeOffset, chunkMeta, initPTS);
      };

      _proto.onAudioTrackSwitching = function onAudioTrackSwitching(event, data) {
        // if any URL found on new audio track, it is an alternate audio track
        var fromAltAudio = this.altAudio;
        var altAudio = !!data.url;
        var trackId = data.id; // if we switch on main audio, ensure that main fragment scheduling is synced with media.buffered
        // don't do anything if we switch to alt audio: audio stream controller is handling it.
        // we will just have to change buffer scheduling on audioTrackSwitched

        if (!altAudio) {
          if (this.mediaBuffer !== this.media) {
            this.log('Switching on main audio, use media.buffered to schedule main fragment loading');
            this.mediaBuffer = this.media;
            var fragCurrent = this.fragCurrent; // we need to refill audio buffer from main: cancel any frag loading to speed up audio switch

            if (fragCurrent !== null && fragCurrent !== void 0 && fragCurrent.loader) {
              this.log('Switching to main audio track, cancel main fragment load');
              fragCurrent.loader.abort();
            } // destroy transmuxer to force init segment generation (following audio switch)


            this.resetTransmuxer(); // switch to IDLE state to load new fragment

            this.resetLoadingState();
          } else if (this.audioOnly) {
            // Reset audio transmuxer so when switching back to main audio we're not still appending where we left off
            this.resetTransmuxer();
          }

          var hls = this.hls; // If switching from alt to main audio, flush all audio and trigger track switched

          if (fromAltAudio) {
            hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].BUFFER_FLUSHING, {
              startOffset: 0,
              endOffset: Number.POSITIVE_INFINITY,
              type: 'audio'
            });
          }

          hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].AUDIO_TRACK_SWITCHED, {
            id: trackId
          });
        }
      };

      _proto.onAudioTrackSwitched = function onAudioTrackSwitched(event, data) {
        var trackId = data.id;
        var altAudio = !!this.hls.audioTracks[trackId].url;

        if (altAudio) {
          var videoBuffer = this.videoBuffer; // if we switched on alternate audio, ensure that main fragment scheduling is synced with video sourcebuffer buffered

          if (videoBuffer && this.mediaBuffer !== videoBuffer) {
            this.log('Switching on alternate audio, use video.buffered to schedule main fragment loading');
            this.mediaBuffer = videoBuffer;
          }
        }

        this.altAudio = altAudio;
        this.tick();
      };

      _proto.onBufferCreated = function onBufferCreated(event, data) {
        var tracks = data.tracks;
        var mediaTrack;
        var name;
        var alternate = false;

        for (var type in tracks) {
          var track = tracks[type];

          if (track.id === 'main') {
            name = type;
            mediaTrack = track; // keep video source buffer reference

            if (type === 'video') {
              var videoTrack = tracks[type];

              if (videoTrack) {
                this.videoBuffer = videoTrack.buffer;
              }
            }
          } else {
            alternate = true;
          }
        }

        if (alternate && mediaTrack) {
          this.log("Alternate track found, use " + name + ".buffered to schedule main fragment loading");
          this.mediaBuffer = mediaTrack.buffer;
        } else {
          this.mediaBuffer = this.media;
        }
      };

      _proto.onFragBuffered = function onFragBuffered(event, data) {
        var frag = data.frag,
            part = data.part;

        if (frag && frag.type !== _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].MAIN) {
          return;
        }

        if (this.fragContextChanged(frag)) {
          // If a level switch was requested while a fragment was buffering, it will emit the FRAG_BUFFERED event upon completion
          // Avoid setting state back to IDLE, since that will interfere with a level switch
          this.warn("Fragment " + frag.sn + (part ? ' p: ' + part.index : '') + " of level " + frag.level + " finished buffering, but was aborted. state: " + this.state);

          if (this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].PARSED) {
            this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE;
          }

          return;
        }

        var stats = part ? part.stats : frag.stats;
        this.fragLastKbps = Math.round(8 * stats.total / (stats.buffering.end - stats.loading.first));

        if (frag.sn !== 'initSegment') {
          this.fragPrevious = frag;
        }

        this.fragBufferedComplete(frag, part);
      };

      _proto.onError = function onError(event, data) {
        switch (data.details) {
          case _errors__WEBPACK_IMPORTED_MODULE_11__["ErrorDetails"].FRAG_LOAD_ERROR:
          case _errors__WEBPACK_IMPORTED_MODULE_11__["ErrorDetails"].FRAG_LOAD_TIMEOUT:
          case _errors__WEBPACK_IMPORTED_MODULE_11__["ErrorDetails"].KEY_LOAD_ERROR:
          case _errors__WEBPACK_IMPORTED_MODULE_11__["ErrorDetails"].KEY_LOAD_TIMEOUT:
            this.onFragmentOrKeyLoadError(_types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].MAIN, data);
            break;

          case _errors__WEBPACK_IMPORTED_MODULE_11__["ErrorDetails"].LEVEL_LOAD_ERROR:
          case _errors__WEBPACK_IMPORTED_MODULE_11__["ErrorDetails"].LEVEL_LOAD_TIMEOUT:
            if (this.state !== _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].ERROR) {
              if (data.fatal) {
                // if fatal error, stop processing
                this.warn("" + data.details);
                this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].ERROR;
              } else {
                // in case of non fatal error while loading level, if level controller is not retrying to load level , switch back to IDLE
                if (!data.levelRetry && this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].WAITING_LEVEL) {
                  this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE;
                }
              }
            }

            break;

          case _errors__WEBPACK_IMPORTED_MODULE_11__["ErrorDetails"].BUFFER_FULL_ERROR:
            // if in appending state
            if (data.parent === 'main' && (this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].PARSING || this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].PARSED)) {
              var flushBuffer = true;
              var bufferedInfo = this.getFwdBufferInfo(this.media, _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].MAIN); // 0.5 : tolerance needed as some browsers stalls playback before reaching buffered end
              // reduce max buf len if current position is buffered

              if (bufferedInfo && bufferedInfo.len > 0.5) {
                flushBuffer = !this.reduceMaxBufferLength(bufferedInfo.len);
              }

              if (flushBuffer) {
                // current position is not buffered, but browser is still complaining about buffer full error
                // this happens on IE/Edge, refer to https://github.com/video-dev/hls.js/pull/708
                // in that case flush the whole buffer to recover
                this.warn('buffer full error also media.currentTime is not buffered, flush main'); // flush main buffer

                this.immediateLevelSwitch();
              }

              this.resetLoadingState();
            }

            break;
        }
      } // Checks the health of the buffer and attempts to resolve playback stalls.
      ;

      _proto.checkBuffer = function checkBuffer() {
        var media = this.media,
            gapController = this.gapController;

        if (!media || !gapController || !media.readyState) {
          // Exit early if we don't have media or if the media hasn't buffered anything yet (readyState 0)
          return;
        } // Check combined buffer


        var buffered = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_4__["BufferHelper"].getBuffered(media);

        if (!this.loadedmetadata && buffered.length) {
          this.loadedmetadata = true;
          this.seekToStartPos();
        } else {
          // Resolve gaps using the main buffer, whose ranges are the intersections of the A/V sourcebuffers
          gapController.poll(this.lastCurrentTime);
        }

        this.lastCurrentTime = media.currentTime;
      };

      _proto.onFragLoadEmergencyAborted = function onFragLoadEmergencyAborted() {
        this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE; // if loadedmetadata is not set, it means that we are emergency switch down on first frag
        // in that case, reset startFragRequested flag

        if (!this.loadedmetadata) {
          this.startFragRequested = false;
          this.nextLoadPosition = this.startPosition;
        }

        this.tickImmediate();
      };

      _proto.onBufferFlushed = function onBufferFlushed(event, _ref) {
        var type = _ref.type;

        if (type !== _loader_fragment__WEBPACK_IMPORTED_MODULE_7__["ElementaryStreamTypes"].AUDIO || this.audioOnly && !this.altAudio) {
          var media = (type === _loader_fragment__WEBPACK_IMPORTED_MODULE_7__["ElementaryStreamTypes"].VIDEO ? this.videoBuffer : this.mediaBuffer) || this.media;
          this.afterBufferFlushed(media, type, _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].MAIN);
        }
      };

      _proto.onLevelsUpdated = function onLevelsUpdated(event, data) {
        this.levels = data.levels;
      };

      _proto.swapAudioCodec = function swapAudioCodec() {
        this.audioCodecSwap = !this.audioCodecSwap;
      }
      /**
       * Seeks to the set startPosition if not equal to the mediaElement's current time.
       * @private
       */
      ;

      _proto.seekToStartPos = function seekToStartPos() {
        var media = this.media;
        var currentTime = media.currentTime;
        var startPosition = this.startPosition; // only adjust currentTime if different from startPosition or if startPosition not buffered
        // at that stage, there should be only one buffered range, as we reach that code after first fragment has been buffered

        if (startPosition >= 0 && currentTime < startPosition) {
          if (media.seeking) {
            _utils_logger__WEBPACK_IMPORTED_MODULE_12__["logger"].log("could not seek to " + startPosition + ", already seeking at " + currentTime);
            return;
          }

          var buffered = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_4__["BufferHelper"].getBuffered(media);
          var bufferStart = buffered.length ? buffered.start(0) : 0;
          var delta = bufferStart - startPosition;

          if (delta > 0 && delta < this.config.maxBufferHole) {
            _utils_logger__WEBPACK_IMPORTED_MODULE_12__["logger"].log("adjusting start position by " + delta + " to match buffer start");
            startPosition += delta;
            this.startPosition = startPosition;
          }

          this.log("seek to target start position " + startPosition + " from current time " + currentTime);
          media.currentTime = startPosition;
        }
      };

      _proto._getAudioCodec = function _getAudioCodec(currentLevel) {
        var audioCodec = this.config.defaultAudioCodec || currentLevel.audioCodec;

        if (this.audioCodecSwap && audioCodec) {
          this.log('Swapping audio codec');

          if (audioCodec.indexOf('mp4a.40.5') !== -1) {
            audioCodec = 'mp4a.40.2';
          } else {
            audioCodec = 'mp4a.40.5';
          }
        }

        return audioCodec;
      };

      _proto._loadBitrateTestFrag = function _loadBitrateTestFrag(frag) {
        var _this2 = this;

        this._doFragLoad(frag).then(function (data) {
          var hls = _this2.hls;

          if (!data || hls.nextLoadLevel || _this2.fragContextChanged(frag)) {
            return;
          }

          _this2.fragLoadError = 0;
          _this2.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].IDLE;
          _this2.startFragRequested = false;
          _this2.bitrateTest = false;
          var stats = frag.stats; // Bitrate tests fragments are neither parsed nor buffered

          stats.parsing.start = stats.parsing.end = stats.buffering.start = stats.buffering.end = self.performance.now();
          hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].FRAG_LOADED, data);
        });
      };

      _proto._handleTransmuxComplete = function _handleTransmuxComplete(transmuxResult) {
        var _id3$samples;

        var id = 'main';
        var hls = this.hls;
        var remuxResult = transmuxResult.remuxResult,
            chunkMeta = transmuxResult.chunkMeta;
        var context = this.getCurrentContext(chunkMeta);

        if (!context) {
          this.warn("The loading context changed while buffering fragment " + chunkMeta.sn + " of level " + chunkMeta.level + ". This chunk will not be buffered.");
          this.resetLiveStartWhenNotLoaded(chunkMeta.level);
          return;
        }

        var frag = context.frag,
            part = context.part,
            level = context.level;
        var video = remuxResult.video,
            text = remuxResult.text,
            id3 = remuxResult.id3,
            initSegment = remuxResult.initSegment; // The audio-stream-controller handles audio buffering if Hls.js is playing an alternate audio track

        var audio = this.altAudio ? undefined : remuxResult.audio; // Check if the current fragment has been aborted. We check this by first seeing if we're still playing the current level.
        // If we are, subsequently check if the currently loading fragment (fragCurrent) has changed.

        if (this.fragContextChanged(frag)) {
          return;
        }

        this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].PARSING;

        if (initSegment) {
          if (initSegment.tracks) {
            this._bufferInitSegment(level, initSegment.tracks, frag, chunkMeta);

            hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].FRAG_PARSING_INIT_SEGMENT, {
              frag: frag,
              id: id,
              tracks: initSegment.tracks
            });
          } // This would be nice if Number.isFinite acted as a typeguard, but it doesn't. See: https://github.com/Microsoft/TypeScript/issues/10038


          var initPTS = initSegment.initPTS;
          var timescale = initSegment.timescale;

          if (Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(initPTS)) {
            this.initPTS[frag.cc] = initPTS;
            hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].INIT_PTS_FOUND, {
              frag: frag,
              id: id,
              initPTS: initPTS,
              timescale: timescale
            });
          }
        } // Avoid buffering if backtracking this fragment


        if (video && remuxResult.independent !== false) {
          if (level.details) {
            var startPTS = video.startPTS,
                endPTS = video.endPTS,
                startDTS = video.startDTS,
                endDTS = video.endDTS;

            if (part) {
              part.elementaryStreams[video.type] = {
                startPTS: startPTS,
                endPTS: endPTS,
                startDTS: startDTS,
                endDTS: endDTS
              };
            } else {
              if (video.firstKeyFrame && video.independent) {
                this.couldBacktrack = true;
              }

              if (video.dropped && video.independent) {
                // Backtrack if dropped frames create a gap after currentTime
                var pos = this.getLoadPosition() + this.config.maxBufferHole;

                if (pos < startPTS) {
                  this.backtrack(frag);
                  return;
                } // Set video stream start to fragment start so that truncated samples do not distort the timeline, and mark it partial


                frag.setElementaryStreamInfo(video.type, frag.start, endPTS, frag.start, endDTS, true);
              }
            }

            frag.setElementaryStreamInfo(video.type, startPTS, endPTS, startDTS, endDTS);
            this.bufferFragmentData(video, frag, part, chunkMeta);
          }
        } else if (remuxResult.independent === false) {
          this.backtrack(frag);
          return;
        }

        if (audio) {
          var _startPTS = audio.startPTS,
              _endPTS = audio.endPTS,
              _startDTS = audio.startDTS,
              _endDTS = audio.endDTS;

          if (part) {
            part.elementaryStreams[_loader_fragment__WEBPACK_IMPORTED_MODULE_7__["ElementaryStreamTypes"].AUDIO] = {
              startPTS: _startPTS,
              endPTS: _endPTS,
              startDTS: _startDTS,
              endDTS: _endDTS
            };
          }

          frag.setElementaryStreamInfo(_loader_fragment__WEBPACK_IMPORTED_MODULE_7__["ElementaryStreamTypes"].AUDIO, _startPTS, _endPTS, _startDTS, _endDTS);
          this.bufferFragmentData(audio, frag, part, chunkMeta);
        }

        if (id3 !== null && id3 !== void 0 && (_id3$samples = id3.samples) !== null && _id3$samples !== void 0 && _id3$samples.length) {
          var emittedID3 = {
            frag: frag,
            id: id,
            samples: id3.samples
          };
          hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].FRAG_PARSING_METADATA, emittedID3);
        }

        if (text) {
          var emittedText = {
            frag: frag,
            id: id,
            samples: text.samples
          };
          hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].FRAG_PARSING_USERDATA, emittedText);
        }
      };

      _proto._bufferInitSegment = function _bufferInitSegment(currentLevel, tracks, frag, chunkMeta) {
        var _this3 = this;

        if (this.state !== _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].PARSING) {
          return;
        }

        this.audioOnly = !!tracks.audio && !tracks.video; // if audio track is expected to come from audio stream controller, discard any coming from main

        if (this.altAudio && !this.audioOnly) {
          delete tracks.audio;
        } // include levelCodec in audio and video tracks


        var audio = tracks.audio,
            video = tracks.video,
            audiovideo = tracks.audiovideo;

        if (audio) {
          var audioCodec = currentLevel.audioCodec;
          var ua = navigator.userAgent.toLowerCase();

          if (this.audioCodecSwitch) {
            if (audioCodec) {
              if (audioCodec.indexOf('mp4a.40.5') !== -1) {
                audioCodec = 'mp4a.40.2';
              } else {
                audioCodec = 'mp4a.40.5';
              }
            } // In the case that AAC and HE-AAC audio codecs are signalled in manifest,
            // force HE-AAC, as it seems that most browsers prefers it.
            // don't force HE-AAC if mono stream, or in Firefox


            if (audio.metadata.channelCount !== 1 && ua.indexOf('firefox') === -1) {
              audioCodec = 'mp4a.40.5';
            }
          } // HE-AAC is broken on Android, always signal audio codec as AAC even if variant manifest states otherwise


          if (ua.indexOf('android') !== -1 && audio.container !== 'audio/mpeg') {
            // Exclude mpeg audio
            audioCodec = 'mp4a.40.2';
            this.log("Android: force audio codec to " + audioCodec);
          }

          if (currentLevel.audioCodec && currentLevel.audioCodec !== audioCodec) {
            this.log("Swapping manifest audio codec \"" + currentLevel.audioCodec + "\" for \"" + audioCodec + "\"");
          }

          audio.levelCodec = audioCodec;
          audio.id = 'main';
          this.log("Init audio buffer, container:" + audio.container + ", codecs[selected/level/parsed]=[" + (audioCodec || '') + "/" + (currentLevel.audioCodec || '') + "/" + audio.codec + "]");
        }

        if (video) {
          video.levelCodec = currentLevel.videoCodec;
          video.id = 'main';
          this.log("Init video buffer, container:" + video.container + ", codecs[level/parsed]=[" + (currentLevel.videoCodec || '') + "/" + video.codec + "]");
        }

        if (audiovideo) {
          this.log("Init audiovideo buffer, container:" + audiovideo.container + ", codecs[level/parsed]=[" + (currentLevel.attrs.CODECS || '') + "/" + audiovideo.codec + "]");
        }

        this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].BUFFER_CODECS, tracks); // loop through tracks that are going to be provided to bufferController

        Object.keys(tracks).forEach(function (trackName) {
          var track = tracks[trackName];
          var initSegment = track.initSegment;

          if (initSegment !== null && initSegment !== void 0 && initSegment.byteLength) {
            _this3.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].BUFFER_APPENDING, {
              type: trackName,
              data: initSegment,
              frag: frag,
              part: null,
              chunkMeta: chunkMeta,
              parent: frag.type
            });
          }
        }); // trigger handler right now

        this.tick();
      };

      _proto.backtrack = function backtrack(frag) {
        this.couldBacktrack = true; // Causes findFragments to backtrack through fragments to find the keyframe

        this.resetTransmuxer();
        this.flushBufferGap(frag);
        var data = this.fragmentTracker.backtrack(frag);
        this.fragPrevious = null;
        this.nextLoadPosition = frag.start;

        if (data) {
          this.resetFragmentLoading(frag);
        } else {
          // Change state to BACKTRACKING so that fragmentEntity.backtrack data can be added after _doFragLoad
          this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["State"].BACKTRACKING;
        }
      };

      _proto.checkFragmentChanged = function checkFragmentChanged() {
        var video = this.media;
        var fragPlayingCurrent = null;

        if (video && video.readyState > 1 && video.seeking === false) {
          var currentTime = video.currentTime;
          /* if video element is in seeked state, currentTime can only increase.
            (assuming that playback rate is positive ...)
            As sometimes currentTime jumps back to zero after a
            media decode error, check this, to avoid seeking back to
            wrong position after a media decode error
          */

          if (_utils_buffer_helper__WEBPACK_IMPORTED_MODULE_4__["BufferHelper"].isBuffered(video, currentTime)) {
            fragPlayingCurrent = this.getAppendedFrag(currentTime);
          } else if (_utils_buffer_helper__WEBPACK_IMPORTED_MODULE_4__["BufferHelper"].isBuffered(video, currentTime + 0.1)) {
            /* ensure that FRAG_CHANGED event is triggered at startup,
              when first video frame is displayed and playback is paused.
              add a tolerance of 100ms, in case current position is not buffered,
              check if current pos+100ms is buffered and use that buffer range
              for FRAG_CHANGED event reporting */
            fragPlayingCurrent = this.getAppendedFrag(currentTime + 0.1);
          }

          if (fragPlayingCurrent) {
            var fragPlaying = this.fragPlaying;
            var fragCurrentLevel = fragPlayingCurrent.level;

            if (!fragPlaying || fragPlayingCurrent.sn !== fragPlaying.sn || fragPlaying.level !== fragCurrentLevel || fragPlayingCurrent.urlId !== fragPlaying.urlId) {
              this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].FRAG_CHANGED, {
                frag: fragPlayingCurrent
              });

              if (!fragPlaying || fragPlaying.level !== fragCurrentLevel) {
                this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].LEVEL_SWITCHED, {
                  level: fragCurrentLevel
                });
              }

              this.fragPlaying = fragPlayingCurrent;
            }
          }
        }
      };

      _createClass(StreamController, [{
        key: "nextLevel",
        get: function get() {
          var frag = this.nextBufferedFrag;

          if (frag) {
            return frag.level;
          } else {
            return -1;
          }
        }
      }, {
        key: "currentLevel",
        get: function get() {
          var media = this.media;

          if (media) {
            var fragPlayingCurrent = this.getAppendedFrag(media.currentTime);

            if (fragPlayingCurrent) {
              return fragPlayingCurrent.level;
            }
          }

          return -1;
        }
      }, {
        key: "nextBufferedFrag",
        get: function get() {
          var media = this.media;

          if (media) {
            // first get end range of current fragment
            var fragPlayingCurrent = this.getAppendedFrag(media.currentTime);
            return this.followingBufferedFrag(fragPlayingCurrent);
          } else {
            return null;
          }
        }
      }, {
        key: "forceStartLoad",
        get: function get() {
          return this._forceStartLoad;
        }
      }]);

      return StreamController;
    }(_base_stream_controller__WEBPACK_IMPORTED_MODULE_1__["default"]);



    /***/ }),

    /***/ "./src/controller/subtitle-stream-controller.ts":
    /*!******************************************************!*\
      !*** ./src/controller/subtitle-stream-controller.ts ***!
      \******************************************************/
    /*! exports provided: SubtitleStreamController */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubtitleStreamController", function() { return SubtitleStreamController; });
    /* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./src/events.ts");
    /* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/logger */ "./src/utils/logger.ts");
    /* harmony import */ var _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/buffer-helper */ "./src/utils/buffer-helper.ts");
    /* harmony import */ var _fragment_finders__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fragment-finders */ "./src/controller/fragment-finders.ts");
    /* harmony import */ var _utils_discontinuities__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/discontinuities */ "./src/utils/discontinuities.ts");
    /* harmony import */ var _level_helper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./level-helper */ "./src/controller/level-helper.ts");
    /* harmony import */ var _fragment_tracker__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./fragment-tracker */ "./src/controller/fragment-tracker.ts");
    /* harmony import */ var _base_stream_controller__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./base-stream-controller */ "./src/controller/base-stream-controller.ts");
    /* harmony import */ var _types_loader__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../types/loader */ "./src/types/loader.ts");
    /* harmony import */ var _types_level__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../types/level */ "./src/types/level.ts");
    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }











    var TICK_INTERVAL = 500; // how often to tick in ms

    var SubtitleStreamController = /*#__PURE__*/function (_BaseStreamController) {
      _inheritsLoose(SubtitleStreamController, _BaseStreamController);

      function SubtitleStreamController(hls, fragmentTracker) {
        var _this;

        _this = _BaseStreamController.call(this, hls, fragmentTracker, '[subtitle-stream-controller]') || this;
        _this.levels = [];
        _this.currentTrackId = -1;
        _this.tracksBuffered = [];
        _this.mainDetails = null;

        _this._registerListeners();

        return _this;
      }

      var _proto = SubtitleStreamController.prototype;

      _proto.onHandlerDestroying = function onHandlerDestroying() {
        this._unregisterListeners();

        this.mainDetails = null;
      };

      _proto._registerListeners = function _registerListeners() {
        var hls = this.hls;
        hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_ATTACHED, this.onMediaAttached, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_DETACHING, this.onMediaDetaching, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MANIFEST_LOADING, this.onManifestLoading, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].LEVEL_LOADED, this.onLevelLoaded, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, this.onError, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].SUBTITLE_TRACK_SWITCH, this.onSubtitleTrackSwitch, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].SUBTITLE_FRAG_PROCESSED, this.onSubtitleFragProcessed, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].BUFFER_FLUSHING, this.onBufferFlushing, this);
      };

      _proto._unregisterListeners = function _unregisterListeners() {
        var hls = this.hls;
        hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_ATTACHED, this.onMediaAttached, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_DETACHING, this.onMediaDetaching, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MANIFEST_LOADING, this.onManifestLoading, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].LEVEL_LOADED, this.onLevelLoaded, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, this.onError, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].SUBTITLE_TRACK_SWITCH, this.onSubtitleTrackSwitch, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].SUBTITLE_FRAG_PROCESSED, this.onSubtitleFragProcessed, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].BUFFER_FLUSHING, this.onBufferFlushing, this);
      };

      _proto.startLoad = function startLoad() {
        this.stopLoad();
        this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_7__["State"].IDLE;
        this.setInterval(TICK_INTERVAL);
        this.tick();
      };

      _proto.onManifestLoading = function onManifestLoading() {
        this.mainDetails = null;
        this.fragmentTracker.removeAllFragments();
      };

      _proto.onLevelLoaded = function onLevelLoaded(event, data) {
        this.mainDetails = data.details;
      };

      _proto.onSubtitleFragProcessed = function onSubtitleFragProcessed(event, data) {
        var frag = data.frag,
            success = data.success;
        this.fragPrevious = frag;
        this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_7__["State"].IDLE;

        if (!success) {
          return;
        }

        var buffered = this.tracksBuffered[this.currentTrackId];

        if (!buffered) {
          return;
        } // Create/update a buffered array matching the interface used by BufferHelper.bufferedInfo
        // so we can re-use the logic used to detect how much has been buffered


        var timeRange;
        var fragStart = frag.start;

        for (var i = 0; i < buffered.length; i++) {
          if (fragStart >= buffered[i].start && fragStart <= buffered[i].end) {
            timeRange = buffered[i];
            break;
          }
        }

        var fragEnd = frag.start + frag.duration;

        if (timeRange) {
          timeRange.end = fragEnd;
        } else {
          timeRange = {
            start: fragStart,
            end: fragEnd
          };
          buffered.push(timeRange);
        }

        this.fragmentTracker.fragBuffered(frag);
      };

      _proto.onBufferFlushing = function onBufferFlushing(event, data) {
        var startOffset = data.startOffset,
            endOffset = data.endOffset;

        if (startOffset === 0 && endOffset !== Number.POSITIVE_INFINITY) {
          var currentTrackId = this.currentTrackId,
              levels = this.levels;

          if (!levels.length || !levels[currentTrackId] || !levels[currentTrackId].details) {
            return;
          }

          var trackDetails = levels[currentTrackId].details;
          var targetDuration = trackDetails.targetduration;
          var endOffsetSubtitles = endOffset - targetDuration;

          if (endOffsetSubtitles <= 0) {
            return;
          }

          data.endOffsetSubtitles = Math.max(0, endOffsetSubtitles);
          this.tracksBuffered.forEach(function (buffered) {
            for (var i = 0; i < buffered.length;) {
              if (buffered[i].end <= endOffsetSubtitles) {
                buffered.shift();
                continue;
              } else if (buffered[i].start < endOffsetSubtitles) {
                buffered[i].start = endOffsetSubtitles;
              } else {
                break;
              }

              i++;
            }
          });
          this.fragmentTracker.removeFragmentsInRange(startOffset, endOffsetSubtitles, _types_loader__WEBPACK_IMPORTED_MODULE_8__["PlaylistLevelType"].SUBTITLE);
        }
      } // If something goes wrong, proceed to next frag, if we were processing one.
      ;

      _proto.onError = function onError(event, data) {
        var _this$fragCurrent;

        var frag = data.frag; // don't handle error not related to subtitle fragment

        if (!frag || frag.type !== _types_loader__WEBPACK_IMPORTED_MODULE_8__["PlaylistLevelType"].SUBTITLE) {
          return;
        }

        if ((_this$fragCurrent = this.fragCurrent) !== null && _this$fragCurrent !== void 0 && _this$fragCurrent.loader) {
          this.fragCurrent.loader.abort();
        }

        this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_7__["State"].IDLE;
      } // Got all new subtitle levels.
      ;

      _proto.onSubtitleTracksUpdated = function onSubtitleTracksUpdated(event, _ref) {
        var _this2 = this;

        var subtitleTracks = _ref.subtitleTracks;
        this.tracksBuffered = [];
        this.levels = subtitleTracks.map(function (mediaPlaylist) {
          return new _types_level__WEBPACK_IMPORTED_MODULE_9__["Level"](mediaPlaylist);
        });
        this.fragmentTracker.removeAllFragments();
        this.fragPrevious = null;
        this.levels.forEach(function (level) {
          _this2.tracksBuffered[level.id] = [];
        });
        this.mediaBuffer = null;
      };

      _proto.onSubtitleTrackSwitch = function onSubtitleTrackSwitch(event, data) {
        this.currentTrackId = data.id;

        if (!this.levels.length || this.currentTrackId === -1) {
          this.clearInterval();
          return;
        } // Check if track has the necessary details to load fragments


        var currentTrack = this.levels[this.currentTrackId];

        if (currentTrack !== null && currentTrack !== void 0 && currentTrack.details) {
          this.mediaBuffer = this.mediaBufferTimeRanges;
          this.setInterval(TICK_INTERVAL);
        } else {
          this.mediaBuffer = null;
        }
      } // Got a new set of subtitle fragments.
      ;

      _proto.onSubtitleTrackLoaded = function onSubtitleTrackLoaded(event, data) {
        var _track$details;

        var newDetails = data.details,
            trackId = data.id;
        var currentTrackId = this.currentTrackId,
            levels = this.levels;

        if (!levels.length) {
          return;
        }

        var track = levels[currentTrackId];

        if (trackId >= levels.length || trackId !== currentTrackId || !track) {
          return;
        }

        this.mediaBuffer = this.mediaBufferTimeRanges;

        if (newDetails.live || (_track$details = track.details) !== null && _track$details !== void 0 && _track$details.live) {
          var mainDetails = this.mainDetails;

          if (newDetails.deltaUpdateFailed || !mainDetails) {
            return;
          }

          var mainSlidingStartFragment = mainDetails.fragments[0];

          if (!track.details) {
            if (newDetails.hasProgramDateTime && mainDetails.hasProgramDateTime) {
              Object(_utils_discontinuities__WEBPACK_IMPORTED_MODULE_4__["alignPDT"])(newDetails, mainDetails);
            } else if (mainSlidingStartFragment) {
              // line up live playlist with main so that fragments in range are loaded
              Object(_level_helper__WEBPACK_IMPORTED_MODULE_5__["addSliding"])(newDetails, mainSlidingStartFragment.start);
            }
          } else {
            var sliding = this.alignPlaylists(newDetails, track.details);

            if (sliding === 0 && mainSlidingStartFragment) {
              // realign with main when there is no overlap with last refresh
              Object(_level_helper__WEBPACK_IMPORTED_MODULE_5__["addSliding"])(newDetails, mainSlidingStartFragment.start);
            }
          }
        }

        track.details = newDetails;
        this.levelLastLoaded = trackId; // trigger handler right now

        this.tick(); // If playlist is misaligned because of bad PDT or drift, delete details to resync with main on reload

        if (newDetails.live && !this.fragCurrent && this.media && this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_7__["State"].IDLE) {
          var foundFrag = Object(_fragment_finders__WEBPACK_IMPORTED_MODULE_3__["findFragmentByPTS"])(null, newDetails.fragments, this.media.currentTime, 0);

          if (!foundFrag) {
            this.warn('Subtitle playlist not aligned with playback');
            track.details = undefined;
          }
        }
      };

      _proto._handleFragmentLoadComplete = function _handleFragmentLoadComplete(fragLoadedData) {
        var frag = fragLoadedData.frag,
            payload = fragLoadedData.payload;
        var decryptData = frag.decryptdata;
        var hls = this.hls;

        if (this.fragContextChanged(frag)) {
          return;
        } // check to see if the payload needs to be decrypted


        if (payload && payload.byteLength > 0 && decryptData && decryptData.key && decryptData.iv && decryptData.method === 'AES-128') {
          var startTime = performance.now(); // decrypt the subtitles

          this.decrypter.webCryptoDecrypt(new Uint8Array(payload), decryptData.key.buffer, decryptData.iv.buffer).then(function (decryptedData) {
            var endTime = performance.now();
            hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].FRAG_DECRYPTED, {
              frag: frag,
              payload: decryptedData,
              stats: {
                tstart: startTime,
                tdecrypt: endTime
              }
            });
          });
        }
      };

      _proto.doTick = function doTick() {
        if (!this.media) {
          this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_7__["State"].IDLE;
          return;
        }

        if (this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_7__["State"].IDLE) {
          var _foundFrag;

          var currentTrackId = this.currentTrackId,
              levels = this.levels;

          if (!levels.length || !levels[currentTrackId] || !levels[currentTrackId].details) {
            return;
          } // Expand range of subs loaded by one target-duration in either direction to make up for misaligned playlists


          var trackDetails = levels[currentTrackId].details;
          var targetDuration = trackDetails.targetduration;
          var config = this.config,
              media = this.media;
          var bufferedInfo = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_2__["BufferHelper"].bufferedInfo(this.mediaBufferTimeRanges, media.currentTime - targetDuration, config.maxBufferHole);
          var targetBufferTime = bufferedInfo.end,
              bufferLen = bufferedInfo.len;
          var maxBufLen = this.getMaxBufferLength() + targetDuration;

          if (bufferLen > maxBufLen) {
            return;
          }

          console.assert(trackDetails, 'Subtitle track details are defined on idle subtitle stream controller tick');
          var fragments = trackDetails.fragments;
          var fragLen = fragments.length;
          var end = trackDetails.edge;
          var foundFrag;
          var fragPrevious = this.fragPrevious;

          if (targetBufferTime < end) {
            var maxFragLookUpTolerance = config.maxFragLookUpTolerance;

            if (fragPrevious && trackDetails.hasProgramDateTime) {
              foundFrag = Object(_fragment_finders__WEBPACK_IMPORTED_MODULE_3__["findFragmentByPDT"])(fragments, fragPrevious.endProgramDateTime, maxFragLookUpTolerance);
            }

            if (!foundFrag) {
              foundFrag = Object(_fragment_finders__WEBPACK_IMPORTED_MODULE_3__["findFragmentByPTS"])(fragPrevious, fragments, targetBufferTime, maxFragLookUpTolerance);

              if (!foundFrag && fragPrevious && fragPrevious.start < fragments[0].start) {
                foundFrag = fragments[0];
              }
            }
          } else {
            foundFrag = fragments[fragLen - 1];
          }

          if ((_foundFrag = foundFrag) !== null && _foundFrag !== void 0 && _foundFrag.encrypted) {
            _utils_logger__WEBPACK_IMPORTED_MODULE_1__["logger"].log("Loading key for " + foundFrag.sn);
            this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_7__["State"].KEY_LOADING;
            this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].KEY_LOADING, {
              frag: foundFrag
            });
          } else if (foundFrag && this.fragmentTracker.getState(foundFrag) === _fragment_tracker__WEBPACK_IMPORTED_MODULE_6__["FragmentState"].NOT_LOADED) {
            // only load if fragment is not loaded
            this.loadFragment(foundFrag, trackDetails, targetBufferTime);
          }
        }
      };

      _proto.loadFragment = function loadFragment(frag, levelDetails, targetBufferTime) {
        this.fragCurrent = frag;

        _BaseStreamController.prototype.loadFragment.call(this, frag, levelDetails, targetBufferTime);
      };

      _createClass(SubtitleStreamController, [{
        key: "mediaBufferTimeRanges",
        get: function get() {
          return this.tracksBuffered[this.currentTrackId] || [];
        }
      }]);

      return SubtitleStreamController;
    }(_base_stream_controller__WEBPACK_IMPORTED_MODULE_7__["default"]);

    /***/ }),

    /***/ "./src/controller/subtitle-track-controller.ts":
    /*!*****************************************************!*\
      !*** ./src/controller/subtitle-track-controller.ts ***!
      \*****************************************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./src/events.ts");
    /* harmony import */ var _utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/texttrack-utils */ "./src/utils/texttrack-utils.ts");
    /* harmony import */ var _base_playlist_controller__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base-playlist-controller */ "./src/controller/base-playlist-controller.ts");
    /* harmony import */ var _types_loader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../types/loader */ "./src/types/loader.ts");
    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }






    var SubtitleTrackController = /*#__PURE__*/function (_BasePlaylistControll) {
      _inheritsLoose(SubtitleTrackController, _BasePlaylistControll);

      // Enable/disable subtitle display rendering
      function SubtitleTrackController(hls) {
        var _this;

        _this = _BasePlaylistControll.call(this, hls, '[subtitle-track-controller]') || this;
        _this.media = null;
        _this.tracks = [];
        _this.groupId = null;
        _this.tracksInGroup = [];
        _this.trackId = -1;
        _this.selectDefaultTrack = true;
        _this.queuedDefaultTrack = -1;

        _this.trackChangeListener = function () {
          return _this.onTextTracksChanged();
        };

        _this.asyncPollTrackChange = function () {
          return _this.pollTrackChange(0);
        };

        _this.useTextTrackPolling = false;
        _this.subtitlePollingInterval = -1;
        _this.subtitleDisplay = true;

        _this.registerListeners();

        return _this;
      }

      var _proto = SubtitleTrackController.prototype;

      _proto.destroy = function destroy() {
        this.unregisterListeners();
        this.tracks.length = 0;
        this.tracksInGroup.length = 0;
        this.trackChangeListener = this.asyncPollTrackChange = null;

        _BasePlaylistControll.prototype.destroy.call(this);
      };

      _proto.registerListeners = function registerListeners() {
        var hls = this.hls;
        hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_ATTACHED, this.onMediaAttached, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_DETACHING, this.onMediaDetaching, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MANIFEST_LOADING, this.onManifestLoading, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MANIFEST_PARSED, this.onManifestParsed, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].LEVEL_LOADING, this.onLevelLoading, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].LEVEL_SWITCHING, this.onLevelSwitching, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, this.onError, this);
      };

      _proto.unregisterListeners = function unregisterListeners() {
        var hls = this.hls;
        hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_ATTACHED, this.onMediaAttached, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MEDIA_DETACHING, this.onMediaDetaching, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MANIFEST_LOADING, this.onManifestLoading, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].MANIFEST_PARSED, this.onManifestParsed, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].LEVEL_LOADING, this.onLevelLoading, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].LEVEL_SWITCHING, this.onLevelSwitching, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, this.onError, this);
      } // Listen for subtitle track change, then extract the current track ID.
      ;

      _proto.onMediaAttached = function onMediaAttached(event, data) {
        this.media = data.media;

        if (!this.media) {
          return;
        }

        if (this.queuedDefaultTrack > -1) {
          this.subtitleTrack = this.queuedDefaultTrack;
          this.queuedDefaultTrack = -1;
        }

        this.useTextTrackPolling = !(this.media.textTracks && 'onchange' in this.media.textTracks);

        if (this.useTextTrackPolling) {
          this.pollTrackChange(500);
        } else {
          this.media.textTracks.addEventListener('change', this.asyncPollTrackChange);
        }
      };

      _proto.pollTrackChange = function pollTrackChange(timeout) {
        self.clearInterval(this.subtitlePollingInterval);
        this.subtitlePollingInterval = self.setInterval(this.trackChangeListener, timeout);
      };

      _proto.onMediaDetaching = function onMediaDetaching() {
        if (!this.media) {
          return;
        }

        self.clearInterval(this.subtitlePollingInterval);

        if (!this.useTextTrackPolling) {
          this.media.textTracks.removeEventListener('change', this.asyncPollTrackChange);
        }

        if (this.trackId > -1) {
          this.queuedDefaultTrack = this.trackId;
        }

        var textTracks = filterSubtitleTracks(this.media.textTracks); // Clear loaded cues on media detachment from tracks

        textTracks.forEach(function (track) {
          Object(_utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_1__["clearCurrentCues"])(track);
        }); // Disable all subtitle tracks before detachment so when reattached only tracks in that content are enabled.

        this.subtitleTrack = -1;
        this.media = null;
      };

      _proto.onManifestLoading = function onManifestLoading() {
        this.tracks = [];
        this.groupId = null;
        this.tracksInGroup = [];
        this.trackId = -1;
        this.selectDefaultTrack = true;
      } // Fired whenever a new manifest is loaded.
      ;

      _proto.onManifestParsed = function onManifestParsed(event, data) {
        this.tracks = data.subtitleTracks;
      };

      _proto.onSubtitleTrackLoaded = function onSubtitleTrackLoaded(event, data) {
        var id = data.id,
            details = data.details;
        var trackId = this.trackId;
        var currentTrack = this.tracksInGroup[trackId];

        if (!currentTrack) {
          this.warn("Invalid subtitle track id " + id);
          return;
        }

        var curDetails = currentTrack.details;
        currentTrack.details = data.details;
        this.log("subtitle track " + id + " loaded [" + details.startSN + "-" + details.endSN + "]");

        if (id === this.trackId) {
          this.retryCount = 0;
          this.playlistLoaded(id, data, curDetails);
        }
      };

      _proto.onLevelLoading = function onLevelLoading(event, data) {
        this.switchLevel(data.level);
      };

      _proto.onLevelSwitching = function onLevelSwitching(event, data) {
        this.switchLevel(data.level);
      };

      _proto.switchLevel = function switchLevel(levelIndex) {
        var levelInfo = this.hls.levels[levelIndex];

        if (!(levelInfo !== null && levelInfo !== void 0 && levelInfo.textGroupIds)) {
          return;
        }

        var textGroupId = levelInfo.textGroupIds[levelInfo.urlId];

        if (this.groupId !== textGroupId) {
          var lastTrack = this.tracksInGroup ? this.tracksInGroup[this.trackId] : undefined;
          var subtitleTracks = this.tracks.filter(function (track) {
            return !textGroupId || track.groupId === textGroupId;
          });
          this.tracksInGroup = subtitleTracks;
          var initialTrackId = this.findTrackId(lastTrack === null || lastTrack === void 0 ? void 0 : lastTrack.name) || this.findTrackId();
          this.groupId = textGroupId;
          var subtitleTracksUpdated = {
            subtitleTracks: subtitleTracks
          };
          this.log("Updating subtitle tracks, " + subtitleTracks.length + " track(s) found in \"" + textGroupId + "\" group-id");
          this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].SUBTITLE_TRACKS_UPDATED, subtitleTracksUpdated);

          if (initialTrackId !== -1) {
            this.setSubtitleTrack(initialTrackId, lastTrack);
          }
        }
      };

      _proto.findTrackId = function findTrackId(name) {
        var textTracks = this.tracksInGroup;

        for (var i = 0; i < textTracks.length; i++) {
          var track = textTracks[i];

          if (!this.selectDefaultTrack || track.default) {
            if (!name || name === track.name) {
              return track.id;
            }
          }
        }

        return -1;
      };

      _proto.onError = function onError(event, data) {
        _BasePlaylistControll.prototype.onError.call(this, event, data);

        if (data.fatal || !data.context) {
          return;
        }

        if (data.context.type === _types_loader__WEBPACK_IMPORTED_MODULE_3__["PlaylistContextType"].SUBTITLE_TRACK && data.context.id === this.trackId && data.context.groupId === this.groupId) {
          this.retryLoadingOrFail(data);
        }
      }
      /** get alternate subtitle tracks list from playlist **/
      ;

      _proto.loadPlaylist = function loadPlaylist(hlsUrlParameters) {
        var currentTrack = this.tracksInGroup[this.trackId];

        if (this.shouldLoadTrack(currentTrack)) {
          var id = currentTrack.id;
          var groupId = currentTrack.groupId;
          var url = currentTrack.url;

          if (hlsUrlParameters) {
            try {
              url = hlsUrlParameters.addDirectives(url);
            } catch (error) {
              this.warn("Could not construct new URL with HLS Delivery Directives: " + error);
            }
          }

          this.log("Loading subtitle playlist for id " + id);
          this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].SUBTITLE_TRACK_LOADING, {
            url: url,
            id: id,
            groupId: groupId,
            deliveryDirectives: hlsUrlParameters || null
          });
        }
      }
      /**
       * Disables the old subtitleTrack and sets current mode on the next subtitleTrack.
       * This operates on the DOM textTracks.
       * A value of -1 will disable all subtitle tracks.
       */
      ;

      _proto.toggleTrackModes = function toggleTrackModes(newId) {
        var _this2 = this;

        var media = this.media,
            subtitleDisplay = this.subtitleDisplay,
            trackId = this.trackId;

        if (!media) {
          return;
        }

        var textTracks = filterSubtitleTracks(media.textTracks);
        var groupTracks = textTracks.filter(function (track) {
          return track.groupId === _this2.groupId;
        });

        if (newId === -1) {
          [].slice.call(textTracks).forEach(function (track) {
            track.mode = 'disabled';
          });
        } else {
          var oldTrack = groupTracks[trackId];

          if (oldTrack) {
            oldTrack.mode = 'disabled';
          }
        }

        var nextTrack = groupTracks[newId];

        if (nextTrack) {
          nextTrack.mode = subtitleDisplay ? 'showing' : 'hidden';
        }
      }
      /**
       * This method is responsible for validating the subtitle index and periodically reloading if live.
       * Dispatches the SUBTITLE_TRACK_SWITCH event, which instructs the subtitle-stream-controller to load the selected track.
       */
      ;

      _proto.setSubtitleTrack = function setSubtitleTrack(newId, lastTrack) {
        var _tracks$newId;

        var tracks = this.tracksInGroup; // setting this.subtitleTrack will trigger internal logic
        // if media has not been attached yet, it will fail
        // we keep a reference to the default track id
        // and we'll set subtitleTrack when onMediaAttached is triggered

        if (!this.media) {
          this.queuedDefaultTrack = newId;
          return;
        }

        if (this.trackId !== newId) {
          this.toggleTrackModes(newId);
        } // exit if track id as already set or invalid


        if (this.trackId === newId && (newId === -1 || (_tracks$newId = tracks[newId]) !== null && _tracks$newId !== void 0 && _tracks$newId.details) || newId < -1 || newId >= tracks.length) {
          return;
        } // stopping live reloading timer if any


        this.clearTimer();
        var track = tracks[newId];
        this.log("Switching to subtitle track " + newId);
        this.trackId = newId;

        if (track) {
          var id = track.id,
              _track$groupId = track.groupId,
              groupId = _track$groupId === void 0 ? '' : _track$groupId,
              name = track.name,
              type = track.type,
              url = track.url;
          this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].SUBTITLE_TRACK_SWITCH, {
            id: id,
            groupId: groupId,
            name: name,
            type: type,
            url: url
          });
          var hlsUrlParameters = this.switchParams(track.url, lastTrack === null || lastTrack === void 0 ? void 0 : lastTrack.details);
          this.loadPlaylist(hlsUrlParameters);
        } else {
          // switch to -1
          this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].SUBTITLE_TRACK_SWITCH, {
            id: newId
          });
        }
      };

      _proto.onTextTracksChanged = function onTextTracksChanged() {
        if (!this.useTextTrackPolling) {
          self.clearInterval(this.subtitlePollingInterval);
        } // Media is undefined when switching streams via loadSource()


        if (!this.media || !this.hls.config.renderTextTracksNatively) {
          return;
        }

        var trackId = -1;
        var tracks = filterSubtitleTracks(this.media.textTracks);

        for (var id = 0; id < tracks.length; id++) {
          if (tracks[id].mode === 'hidden') {
            // Do not break in case there is a following track with showing.
            trackId = id;
          } else if (tracks[id].mode === 'showing') {
            trackId = id;
            break;
          }
        } // Setting current subtitleTrack will invoke code.


        if (this.subtitleTrack !== trackId) {
          this.subtitleTrack = trackId;
        }
      };

      _createClass(SubtitleTrackController, [{
        key: "subtitleTracks",
        get: function get() {
          return this.tracksInGroup;
        }
        /** get/set index of the selected subtitle track (based on index in subtitle track lists) **/

      }, {
        key: "subtitleTrack",
        get: function get() {
          return this.trackId;
        },
        set: function set(newId) {
          this.selectDefaultTrack = false;
          var lastTrack = this.tracksInGroup ? this.tracksInGroup[this.trackId] : undefined;
          this.setSubtitleTrack(newId, lastTrack);
        }
      }]);

      return SubtitleTrackController;
    }(_base_playlist_controller__WEBPACK_IMPORTED_MODULE_2__["default"]);

    function filterSubtitleTracks(textTrackList) {
      var tracks = [];

      for (var i = 0; i < textTrackList.length; i++) {
        var track = textTrackList[i]; // Edge adds a track without a label; we don't want to use it

        if (track.kind === 'subtitles' && track.label) {
          tracks.push(textTrackList[i]);
        }
      }

      return tracks;
    }

    /* harmony default export */ __webpack_exports__["default"] = (SubtitleTrackController);

    /***/ }),

    /***/ "./src/controller/timeline-controller.ts":
    /*!***********************************************!*\
      !*** ./src/controller/timeline-controller.ts ***!
      \***********************************************/
    /*! exports provided: TimelineController */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimelineController", function() { return TimelineController; });
    /* harmony import */ var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/polyfills/number */ "./src/polyfills/number.ts");
    /* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./src/events.ts");
    /* harmony import */ var _utils_cea_608_parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/cea-608-parser */ "./src/utils/cea-608-parser.ts");
    /* harmony import */ var _utils_output_filter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/output-filter */ "./src/utils/output-filter.ts");
    /* harmony import */ var _utils_webvtt_parser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/webvtt-parser */ "./src/utils/webvtt-parser.ts");
    /* harmony import */ var _utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/texttrack-utils */ "./src/utils/texttrack-utils.ts");
    /* harmony import */ var _utils_imsc1_ttml_parser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/imsc1-ttml-parser */ "./src/utils/imsc1-ttml-parser.ts");
    /* harmony import */ var _types_loader__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../types/loader */ "./src/types/loader.ts");
    /* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/logger */ "./src/utils/logger.ts");










    var TimelineController = /*#__PURE__*/function () {
      function TimelineController(hls) {
        this.hls = void 0;
        this.media = null;
        this.config = void 0;
        this.enabled = true;
        this.Cues = void 0;
        this.textTracks = [];
        this.tracks = [];
        this.initPTS = [];
        this.timescale = [];
        this.unparsedVttFrags = [];
        this.captionsTracks = {};
        this.nonNativeCaptionsTracks = {};
        this.cea608Parser1 = void 0;
        this.cea608Parser2 = void 0;
        this.lastSn = -1;
        this.prevCC = -1;
        this.vttCCs = newVTTCCs();
        this.captionsProperties = void 0;
        this.hls = hls;
        this.config = hls.config;
        this.Cues = hls.config.cueHandler;
        this.captionsProperties = {
          textTrack1: {
            label: this.config.captionsTextTrack1Label,
            languageCode: this.config.captionsTextTrack1LanguageCode
          },
          textTrack2: {
            label: this.config.captionsTextTrack2Label,
            languageCode: this.config.captionsTextTrack2LanguageCode
          },
          textTrack3: {
            label: this.config.captionsTextTrack3Label,
            languageCode: this.config.captionsTextTrack3LanguageCode
          },
          textTrack4: {
            label: this.config.captionsTextTrack4Label,
            languageCode: this.config.captionsTextTrack4LanguageCode
          }
        };

        if (this.config.enableCEA708Captions) {
          var channel1 = new _utils_output_filter__WEBPACK_IMPORTED_MODULE_3__["default"](this, 'textTrack1');
          var channel2 = new _utils_output_filter__WEBPACK_IMPORTED_MODULE_3__["default"](this, 'textTrack2');
          var channel3 = new _utils_output_filter__WEBPACK_IMPORTED_MODULE_3__["default"](this, 'textTrack3');
          var channel4 = new _utils_output_filter__WEBPACK_IMPORTED_MODULE_3__["default"](this, 'textTrack4');
          this.cea608Parser1 = new _utils_cea_608_parser__WEBPACK_IMPORTED_MODULE_2__["default"](1, channel1, channel2);
          this.cea608Parser2 = new _utils_cea_608_parser__WEBPACK_IMPORTED_MODULE_2__["default"](3, channel3, channel4);
        }

        hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MEDIA_ATTACHING, this.onMediaAttaching, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MEDIA_DETACHING, this.onMediaDetaching, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MANIFEST_LOADING, this.onManifestLoading, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MANIFEST_LOADED, this.onManifestLoaded, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_LOADING, this.onFragLoading, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_LOADED, this.onFragLoaded, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_PARSING_USERDATA, this.onFragParsingUserdata, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_DECRYPTED, this.onFragDecrypted, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].INIT_PTS_FOUND, this.onInitPtsFound, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].SUBTITLE_TRACKS_CLEARED, this.onSubtitleTracksCleared, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].BUFFER_FLUSHING, this.onBufferFlushing, this);
      }

      var _proto = TimelineController.prototype;

      _proto.destroy = function destroy() {
        var hls = this.hls;
        hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MEDIA_ATTACHING, this.onMediaAttaching, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MEDIA_DETACHING, this.onMediaDetaching, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MANIFEST_LOADING, this.onManifestLoading, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MANIFEST_LOADED, this.onManifestLoaded, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_LOADING, this.onFragLoading, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_LOADED, this.onFragLoaded, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_PARSING_USERDATA, this.onFragParsingUserdata, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_DECRYPTED, this.onFragDecrypted, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].INIT_PTS_FOUND, this.onInitPtsFound, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].SUBTITLE_TRACKS_CLEARED, this.onSubtitleTracksCleared, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].BUFFER_FLUSHING, this.onBufferFlushing, this); // @ts-ignore

        this.hls = this.config = this.cea608Parser1 = this.cea608Parser2 = null;
      };

      _proto.addCues = function addCues(trackName, startTime, endTime, screen, cueRanges) {
        // skip cues which overlap more than 50% with previously parsed time ranges
        var merged = false;

        for (var i = cueRanges.length; i--;) {
          var cueRange = cueRanges[i];
          var overlap = intersection(cueRange[0], cueRange[1], startTime, endTime);

          if (overlap >= 0) {
            cueRange[0] = Math.min(cueRange[0], startTime);
            cueRange[1] = Math.max(cueRange[1], endTime);
            merged = true;

            if (overlap / (endTime - startTime) > 0.5) {
              return;
            }
          }
        }

        if (!merged) {
          cueRanges.push([startTime, endTime]);
        }

        if (this.config.renderTextTracksNatively) {
          var track = this.captionsTracks[trackName];
          this.Cues.newCue(track, startTime, endTime, screen);
        } else {
          var cues = this.Cues.newCue(null, startTime, endTime, screen);
          this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].CUES_PARSED, {
            type: 'captions',
            cues: cues,
            track: trackName
          });
        }
      } // Triggered when an initial PTS is found; used for synchronisation of WebVTT.
      ;

      _proto.onInitPtsFound = function onInitPtsFound(event, _ref) {
        var _this = this;

        var frag = _ref.frag,
            id = _ref.id,
            initPTS = _ref.initPTS,
            timescale = _ref.timescale;
        var unparsedVttFrags = this.unparsedVttFrags;

        if (id === 'main') {
          this.initPTS[frag.cc] = initPTS;
          this.timescale[frag.cc] = timescale;
        } // Due to asynchronous processing, initial PTS may arrive later than the first VTT fragments are loaded.
        // Parse any unparsed fragments upon receiving the initial PTS.


        if (unparsedVttFrags.length) {
          this.unparsedVttFrags = [];
          unparsedVttFrags.forEach(function (frag) {
            _this.onFragLoaded(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_LOADED, frag);
          });
        }
      };

      _proto.getExistingTrack = function getExistingTrack(trackName) {
        var media = this.media;

        if (media) {
          for (var i = 0; i < media.textTracks.length; i++) {
            var textTrack = media.textTracks[i];

            if (textTrack[trackName]) {
              return textTrack;
            }
          }
        }

        return null;
      };

      _proto.createCaptionsTrack = function createCaptionsTrack(trackName) {
        if (this.config.renderTextTracksNatively) {
          this.createNativeTrack(trackName);
        } else {
          this.createNonNativeTrack(trackName);
        }
      };

      _proto.createNativeTrack = function createNativeTrack(trackName) {
        if (this.captionsTracks[trackName]) {
          return;
        }

        var captionsProperties = this.captionsProperties,
            captionsTracks = this.captionsTracks,
            media = this.media;
        var _captionsProperties$t = captionsProperties[trackName],
            label = _captionsProperties$t.label,
            languageCode = _captionsProperties$t.languageCode; // Enable reuse of existing text track.

        var existingTrack = this.getExistingTrack(trackName);

        if (!existingTrack) {
          var textTrack = this.createTextTrack('captions', label, languageCode);

          if (textTrack) {
            // Set a special property on the track so we know it's managed by Hls.js
            textTrack[trackName] = true;
            captionsTracks[trackName] = textTrack;
          }
        } else {
          captionsTracks[trackName] = existingTrack;
          Object(_utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_5__["clearCurrentCues"])(captionsTracks[trackName]);
          Object(_utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_5__["sendAddTrackEvent"])(captionsTracks[trackName], media);
        }
      };

      _proto.createNonNativeTrack = function createNonNativeTrack(trackName) {
        if (this.nonNativeCaptionsTracks[trackName]) {
          return;
        } // Create a list of a single track for the provider to consume


        var trackProperties = this.captionsProperties[trackName];

        if (!trackProperties) {
          return;
        }

        var label = trackProperties.label;
        var track = {
          _id: trackName,
          label: label,
          kind: 'captions',
          default: trackProperties.media ? !!trackProperties.media.default : false,
          closedCaptions: trackProperties.media
        };
        this.nonNativeCaptionsTracks[trackName] = track;
        this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].NON_NATIVE_TEXT_TRACKS_FOUND, {
          tracks: [track]
        });
      };

      _proto.createTextTrack = function createTextTrack(kind, label, lang) {
        var media = this.media;

        if (!media) {
          return;
        }

        return media.addTextTrack(kind, label, lang);
      };

      _proto.onMediaAttaching = function onMediaAttaching(event, data) {
        this.media = data.media;

        this._cleanTracks();
      };

      _proto.onMediaDetaching = function onMediaDetaching() {
        var captionsTracks = this.captionsTracks;
        Object.keys(captionsTracks).forEach(function (trackName) {
          Object(_utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_5__["clearCurrentCues"])(captionsTracks[trackName]);
          delete captionsTracks[trackName];
        });
        this.nonNativeCaptionsTracks = {};
      };

      _proto.onManifestLoading = function onManifestLoading() {
        this.lastSn = -1; // Detect discontinuity in fragment parsing

        this.prevCC = -1;
        this.vttCCs = newVTTCCs(); // Detect discontinuity in subtitle manifests

        this._cleanTracks();

        this.tracks = [];
        this.captionsTracks = {};
        this.nonNativeCaptionsTracks = {};
        this.textTracks = [];
        this.unparsedVttFrags = this.unparsedVttFrags || [];
        this.initPTS = [];
        this.timescale = [];

        if (this.cea608Parser1 && this.cea608Parser2) {
          this.cea608Parser1.reset();
          this.cea608Parser2.reset();
        }
      };

      _proto._cleanTracks = function _cleanTracks() {
        // clear outdated subtitles
        var media = this.media;

        if (!media) {
          return;
        }

        var textTracks = media.textTracks;

        if (textTracks) {
          for (var i = 0; i < textTracks.length; i++) {
            Object(_utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_5__["clearCurrentCues"])(textTracks[i]);
          }
        }
      };

      _proto.onSubtitleTracksUpdated = function onSubtitleTracksUpdated(event, data) {
        var _this2 = this;

        this.textTracks = [];
        var tracks = data.subtitleTracks || [];
        var hasIMSC1 = tracks.some(function (track) {
          return track.textCodec === _utils_imsc1_ttml_parser__WEBPACK_IMPORTED_MODULE_6__["IMSC1_CODEC"];
        });

        if (this.config.enableWebVTT || hasIMSC1 && this.config.enableIMSC1) {
          var sameTracks = this.tracks && tracks && this.tracks.length === tracks.length;
          this.tracks = tracks || [];

          if (this.config.renderTextTracksNatively) {
            var inUseTracks = this.media ? this.media.textTracks : [];
            this.tracks.forEach(function (track, index) {
              var textTrack;

              if (index < inUseTracks.length) {
                var inUseTrack = null;

                for (var i = 0; i < inUseTracks.length; i++) {
                  if (canReuseVttTextTrack(inUseTracks[i], track)) {
                    inUseTrack = inUseTracks[i];
                    break;
                  }
                } // Reuse tracks with the same label, but do not reuse 608/708 tracks


                if (inUseTrack) {
                  textTrack = inUseTrack;
                }
              }

              if (textTrack) {
                Object(_utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_5__["clearCurrentCues"])(textTrack);
              } else {
                textTrack = _this2.createTextTrack('subtitles', track.name, track.lang);

                if (textTrack) {
                  textTrack.mode = 'disabled';
                }
              }

              if (textTrack) {
                textTrack.groupId = track.groupId;

                _this2.textTracks.push(textTrack);
              }
            });
          } else if (!sameTracks && this.tracks && this.tracks.length) {
            // Create a list of tracks for the provider to consume
            var tracksList = this.tracks.map(function (track) {
              return {
                label: track.name,
                kind: track.type.toLowerCase(),
                default: track.default,
                subtitleTrack: track
              };
            });
            this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].NON_NATIVE_TEXT_TRACKS_FOUND, {
              tracks: tracksList
            });
          }
        }
      };

      _proto.onManifestLoaded = function onManifestLoaded(event, data) {
        var _this3 = this;

        if (this.config.enableCEA708Captions && data.captions) {
          data.captions.forEach(function (captionsTrack) {
            var instreamIdMatch = /(?:CC|SERVICE)([1-4])/.exec(captionsTrack.instreamId);

            if (!instreamIdMatch) {
              return;
            }

            var trackName = "textTrack" + instreamIdMatch[1];
            var trackProperties = _this3.captionsProperties[trackName];

            if (!trackProperties) {
              return;
            }

            trackProperties.label = captionsTrack.name;

            if (captionsTrack.lang) {
              // optional attribute
              trackProperties.languageCode = captionsTrack.lang;
            }

            trackProperties.media = captionsTrack;
          });
        }
      };

      _proto.onFragLoading = function onFragLoading(event, data) {
        var cea608Parser1 = this.cea608Parser1,
            cea608Parser2 = this.cea608Parser2,
            lastSn = this.lastSn;

        if (!this.enabled || !(cea608Parser1 && cea608Parser2)) {
          return;
        } // if this frag isn't contiguous, clear the parser so cues with bad start/end times aren't added to the textTrack


        if (data.frag.type === _types_loader__WEBPACK_IMPORTED_MODULE_7__["PlaylistLevelType"].MAIN) {
          var sn = data.frag.sn;

          if (sn !== lastSn + 1) {
            cea608Parser1.reset();
            cea608Parser2.reset();
          }

          this.lastSn = sn;
        }
      };

      _proto.onFragLoaded = function onFragLoaded(event, data) {
        var frag = data.frag,
            payload = data.payload;
        var initPTS = this.initPTS,
            unparsedVttFrags = this.unparsedVttFrags;

        if (frag.type === _types_loader__WEBPACK_IMPORTED_MODULE_7__["PlaylistLevelType"].SUBTITLE) {
          // If fragment is subtitle type, parse as WebVTT.
          if (payload.byteLength) {
            // We need an initial synchronisation PTS. Store fragments as long as none has arrived.
            if (!Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(initPTS[frag.cc])) {
              unparsedVttFrags.push(data);

              if (initPTS.length) {
                // finish unsuccessfully, otherwise the subtitle-stream-controller could be blocked from loading new frags.
                this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].SUBTITLE_FRAG_PROCESSED, {
                  success: false,
                  frag: frag,
                  error: new Error('Missing initial subtitle PTS')
                });
              }

              return;
            }

            var decryptData = frag.decryptdata; // If the subtitles are not encrypted, parse VTTs now. Otherwise, we need to wait.

            if (decryptData == null || decryptData.key == null || decryptData.method !== 'AES-128') {
              var trackPlaylistMedia = this.tracks[frag.level];
              var vttCCs = this.vttCCs;

              if (!vttCCs[frag.cc]) {
                vttCCs[frag.cc] = {
                  start: frag.start,
                  prevCC: this.prevCC,
                  new: true
                };
                this.prevCC = frag.cc;
              }

              if (trackPlaylistMedia && trackPlaylistMedia.textCodec === _utils_imsc1_ttml_parser__WEBPACK_IMPORTED_MODULE_6__["IMSC1_CODEC"]) {
                this._parseIMSC1(frag, payload);
              } else {
                this._parseVTTs(frag, payload, vttCCs);
              }
            }
          } else {
            // In case there is no payload, finish unsuccessfully.
            this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].SUBTITLE_FRAG_PROCESSED, {
              success: false,
              frag: frag,
              error: new Error('Empty subtitle payload')
            });
          }
        }
      };

      _proto._parseIMSC1 = function _parseIMSC1(frag, payload) {
        var _this4 = this;

        var hls = this.hls;
        Object(_utils_imsc1_ttml_parser__WEBPACK_IMPORTED_MODULE_6__["parseIMSC1"])(payload, this.initPTS[frag.cc], this.timescale[frag.cc], function (cues) {
          _this4._appendCues(cues, frag.level);

          hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].SUBTITLE_FRAG_PROCESSED, {
            success: true,
            frag: frag
          });
        }, function (error) {
          _utils_logger__WEBPACK_IMPORTED_MODULE_8__["logger"].log("Failed to parse IMSC1: " + error);
          hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].SUBTITLE_FRAG_PROCESSED, {
            success: false,
            frag: frag,
            error: error
          });
        });
      };

      _proto._parseVTTs = function _parseVTTs(frag, payload, vttCCs) {
        var _this5 = this;

        var hls = this.hls; // Parse the WebVTT file contents.

        Object(_utils_webvtt_parser__WEBPACK_IMPORTED_MODULE_4__["parseWebVTT"])(payload, this.initPTS[frag.cc], this.timescale[frag.cc], vttCCs, frag.cc, frag.start, function (cues) {
          _this5._appendCues(cues, frag.level);

          hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].SUBTITLE_FRAG_PROCESSED, {
            success: true,
            frag: frag
          });
        }, function (error) {
          _this5._fallbackToIMSC1(frag, payload); // Something went wrong while parsing. Trigger event with success false.


          _utils_logger__WEBPACK_IMPORTED_MODULE_8__["logger"].log("Failed to parse VTT cue: " + error);
          hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].SUBTITLE_FRAG_PROCESSED, {
            success: false,
            frag: frag,
            error: error
          });
        });
      };

      _proto._fallbackToIMSC1 = function _fallbackToIMSC1(frag, payload) {
        var _this6 = this;

        // If textCodec is unknown, try parsing as IMSC1. Set textCodec based on the result
        var trackPlaylistMedia = this.tracks[frag.level];

        if (!trackPlaylistMedia.textCodec) {
          Object(_utils_imsc1_ttml_parser__WEBPACK_IMPORTED_MODULE_6__["parseIMSC1"])(payload, this.initPTS[frag.cc], this.timescale[frag.cc], function () {
            trackPlaylistMedia.textCodec = _utils_imsc1_ttml_parser__WEBPACK_IMPORTED_MODULE_6__["IMSC1_CODEC"];

            _this6._parseIMSC1(frag, payload);
          }, function () {
            trackPlaylistMedia.textCodec = 'wvtt';
          });
        }
      };

      _proto._appendCues = function _appendCues(cues, fragLevel) {
        var hls = this.hls;

        if (this.config.renderTextTracksNatively) {
          var textTrack = this.textTracks[fragLevel]; // WebVTTParser.parse is an async method and if the currently selected text track mode is set to "disabled"
          // before parsing is done then don't try to access currentTrack.cues.getCueById as cues will be null
          // and trying to access getCueById method of cues will throw an exception
          // Because we check if the mode is disabled, we can force check `cues` below. They can't be null.

          if (textTrack.mode === 'disabled') {
            return;
          }

          cues.forEach(function (cue) {
            return Object(_utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_5__["addCueToTrack"])(textTrack, cue);
          });
        } else {
          var currentTrack = this.tracks[fragLevel];
          var track = currentTrack.default ? 'default' : 'subtitles' + fragLevel;
          hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].CUES_PARSED, {
            type: 'subtitles',
            cues: cues,
            track: track
          });
        }
      };

      _proto.onFragDecrypted = function onFragDecrypted(event, data) {
        var frag = data.frag;

        if (frag.type === _types_loader__WEBPACK_IMPORTED_MODULE_7__["PlaylistLevelType"].SUBTITLE) {
          if (!Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(this.initPTS[frag.cc])) {
            this.unparsedVttFrags.push(data);
            return;
          }

          this.onFragLoaded(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_LOADED, data);
        }
      };

      _proto.onSubtitleTracksCleared = function onSubtitleTracksCleared() {
        this.tracks = [];
        this.captionsTracks = {};
      };

      _proto.onFragParsingUserdata = function onFragParsingUserdata(event, data) {
        var cea608Parser1 = this.cea608Parser1,
            cea608Parser2 = this.cea608Parser2;

        if (!this.enabled || !(cea608Parser1 && cea608Parser2)) {
          return;
        } // If the event contains captions (found in the bytes property), push all bytes into the parser immediately
        // It will create the proper timestamps based on the PTS value


        for (var i = 0; i < data.samples.length; i++) {
          var ccBytes = data.samples[i].bytes;

          if (ccBytes) {
            var ccdatas = this.extractCea608Data(ccBytes);
            cea608Parser1.addData(data.samples[i].pts, ccdatas[0]);
            cea608Parser2.addData(data.samples[i].pts, ccdatas[1]);
          }
        }
      };

      _proto.onBufferFlushing = function onBufferFlushing(event, _ref2) {
        var startOffset = _ref2.startOffset,
            endOffset = _ref2.endOffset,
            endOffsetSubtitles = _ref2.endOffsetSubtitles,
            type = _ref2.type;
        var media = this.media;

        if (!media || media.currentTime < endOffset) {
          return;
        } // Clear 608 caption cues from the captions TextTracks when the video back buffer is flushed
        // Forward cues are never removed because we can loose streamed 608 content from recent fragments


        if (!type || type === 'video') {
          var captionsTracks = this.captionsTracks;
          Object.keys(captionsTracks).forEach(function (trackName) {
            return Object(_utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_5__["removeCuesInRange"])(captionsTracks[trackName], startOffset, endOffset);
          });
        }

        if (this.config.renderTextTracksNatively) {
          // Clear VTT/IMSC1 subtitle cues from the subtitle TextTracks when the back buffer is flushed
          if (startOffset === 0 && endOffsetSubtitles !== undefined) {
            var textTracks = this.textTracks;
            Object.keys(textTracks).forEach(function (trackName) {
              return Object(_utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_5__["removeCuesInRange"])(textTracks[trackName], startOffset, endOffsetSubtitles);
            });
          }
        }
      };

      _proto.extractCea608Data = function extractCea608Data(byteArray) {
        var count = byteArray[0] & 31;
        var position = 2;
        var actualCCBytes = [[], []];

        for (var j = 0; j < count; j++) {
          var tmpByte = byteArray[position++];
          var ccbyte1 = 0x7f & byteArray[position++];
          var ccbyte2 = 0x7f & byteArray[position++];
          var ccValid = (4 & tmpByte) !== 0;
          var ccType = 3 & tmpByte;

          if (ccbyte1 === 0 && ccbyte2 === 0) {
            continue;
          }

          if (ccValid) {
            if (ccType === 0 || ccType === 1) {
              actualCCBytes[ccType].push(ccbyte1);
              actualCCBytes[ccType].push(ccbyte2);
            }
          }
        }

        return actualCCBytes;
      };

      return TimelineController;
    }();

    function canReuseVttTextTrack(inUseTrack, manifestTrack) {
      return inUseTrack && inUseTrack.label === manifestTrack.name && !(inUseTrack.textTrack1 || inUseTrack.textTrack2);
    }

    function intersection(x1, x2, y1, y2) {
      return Math.min(x2, y2) - Math.max(x1, y1);
    }

    function newVTTCCs() {
      return {
        ccOffset: 0,
        presentationOffset: 0,
        0: {
          start: 0,
          prevCC: -1,
          new: false
        }
      };
    }

    /***/ }),

    /***/ "./src/crypt/aes-crypto.ts":
    /*!*********************************!*\
      !*** ./src/crypt/aes-crypto.ts ***!
      \*********************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return AESCrypto; });
    var AESCrypto = /*#__PURE__*/function () {
      function AESCrypto(subtle, iv) {
        this.subtle = void 0;
        this.aesIV = void 0;
        this.subtle = subtle;
        this.aesIV = iv;
      }

      var _proto = AESCrypto.prototype;

      _proto.decrypt = function decrypt(data, key) {
        return this.subtle.decrypt({
          name: 'AES-CBC',
          iv: this.aesIV
        }, key, data);
      };

      return AESCrypto;
    }();



    /***/ }),

    /***/ "./src/crypt/aes-decryptor.ts":
    /*!************************************!*\
      !*** ./src/crypt/aes-decryptor.ts ***!
      \************************************/
    /*! exports provided: removePadding, default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removePadding", function() { return removePadding; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return AESDecryptor; });
    /* harmony import */ var _utils_typed_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/typed-array */ "./src/utils/typed-array.ts");
     // PKCS7

    function removePadding(array) {
      var outputBytes = array.byteLength;
      var paddingBytes = outputBytes && new DataView(array.buffer).getUint8(outputBytes - 1);

      if (paddingBytes) {
        return Object(_utils_typed_array__WEBPACK_IMPORTED_MODULE_0__["sliceUint8"])(array, 0, outputBytes - paddingBytes);
      }

      return array;
    }

    var AESDecryptor = /*#__PURE__*/function () {
      function AESDecryptor() {
        this.rcon = [0x0, 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];
        this.subMix = [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)];
        this.invSubMix = [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)];
        this.sBox = new Uint32Array(256);
        this.invSBox = new Uint32Array(256);
        this.key = new Uint32Array(0);
        this.ksRows = 0;
        this.keySize = 0;
        this.keySchedule = void 0;
        this.invKeySchedule = void 0;
        this.initTable();
      } // Using view.getUint32() also swaps the byte order.


      var _proto = AESDecryptor.prototype;

      _proto.uint8ArrayToUint32Array_ = function uint8ArrayToUint32Array_(arrayBuffer) {
        var view = new DataView(arrayBuffer);
        var newArray = new Uint32Array(4);

        for (var i = 0; i < 4; i++) {
          newArray[i] = view.getUint32(i * 4);
        }

        return newArray;
      };

      _proto.initTable = function initTable() {
        var sBox = this.sBox;
        var invSBox = this.invSBox;
        var subMix = this.subMix;
        var subMix0 = subMix[0];
        var subMix1 = subMix[1];
        var subMix2 = subMix[2];
        var subMix3 = subMix[3];
        var invSubMix = this.invSubMix;
        var invSubMix0 = invSubMix[0];
        var invSubMix1 = invSubMix[1];
        var invSubMix2 = invSubMix[2];
        var invSubMix3 = invSubMix[3];
        var d = new Uint32Array(256);
        var x = 0;
        var xi = 0;
        var i = 0;

        for (i = 0; i < 256; i++) {
          if (i < 128) {
            d[i] = i << 1;
          } else {
            d[i] = i << 1 ^ 0x11b;
          }
        }

        for (i = 0; i < 256; i++) {
          var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
          sx = sx >>> 8 ^ sx & 0xff ^ 0x63;
          sBox[x] = sx;
          invSBox[sx] = x; // Compute multiplication

          var x2 = d[x];
          var x4 = d[x2];
          var x8 = d[x4]; // Compute sub/invSub bytes, mix columns tables

          var t = d[sx] * 0x101 ^ sx * 0x1010100;
          subMix0[x] = t << 24 | t >>> 8;
          subMix1[x] = t << 16 | t >>> 16;
          subMix2[x] = t << 8 | t >>> 24;
          subMix3[x] = t; // Compute inv sub bytes, inv mix columns tables

          t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
          invSubMix0[sx] = t << 24 | t >>> 8;
          invSubMix1[sx] = t << 16 | t >>> 16;
          invSubMix2[sx] = t << 8 | t >>> 24;
          invSubMix3[sx] = t; // Compute next counter

          if (!x) {
            x = xi = 1;
          } else {
            x = x2 ^ d[d[d[x8 ^ x2]]];
            xi ^= d[d[xi]];
          }
        }
      };

      _proto.expandKey = function expandKey(keyBuffer) {
        // convert keyBuffer to Uint32Array
        var key = this.uint8ArrayToUint32Array_(keyBuffer);
        var sameKey = true;
        var offset = 0;

        while (offset < key.length && sameKey) {
          sameKey = key[offset] === this.key[offset];
          offset++;
        }

        if (sameKey) {
          return;
        }

        this.key = key;
        var keySize = this.keySize = key.length;

        if (keySize !== 4 && keySize !== 6 && keySize !== 8) {
          throw new Error('Invalid aes key size=' + keySize);
        }

        var ksRows = this.ksRows = (keySize + 6 + 1) * 4;
        var ksRow;
        var invKsRow;
        var keySchedule = this.keySchedule = new Uint32Array(ksRows);
        var invKeySchedule = this.invKeySchedule = new Uint32Array(ksRows);
        var sbox = this.sBox;
        var rcon = this.rcon;
        var invSubMix = this.invSubMix;
        var invSubMix0 = invSubMix[0];
        var invSubMix1 = invSubMix[1];
        var invSubMix2 = invSubMix[2];
        var invSubMix3 = invSubMix[3];
        var prev;
        var t;

        for (ksRow = 0; ksRow < ksRows; ksRow++) {
          if (ksRow < keySize) {
            prev = keySchedule[ksRow] = key[ksRow];
            continue;
          }

          t = prev;

          if (ksRow % keySize === 0) {
            // Rot word
            t = t << 8 | t >>> 24; // Sub word

            t = sbox[t >>> 24] << 24 | sbox[t >>> 16 & 0xff] << 16 | sbox[t >>> 8 & 0xff] << 8 | sbox[t & 0xff]; // Mix Rcon

            t ^= rcon[ksRow / keySize | 0] << 24;
          } else if (keySize > 6 && ksRow % keySize === 4) {
            // Sub word
            t = sbox[t >>> 24] << 24 | sbox[t >>> 16 & 0xff] << 16 | sbox[t >>> 8 & 0xff] << 8 | sbox[t & 0xff];
          }

          keySchedule[ksRow] = prev = (keySchedule[ksRow - keySize] ^ t) >>> 0;
        }

        for (invKsRow = 0; invKsRow < ksRows; invKsRow++) {
          ksRow = ksRows - invKsRow;

          if (invKsRow & 3) {
            t = keySchedule[ksRow];
          } else {
            t = keySchedule[ksRow - 4];
          }

          if (invKsRow < 4 || ksRow <= 4) {
            invKeySchedule[invKsRow] = t;
          } else {
            invKeySchedule[invKsRow] = invSubMix0[sbox[t >>> 24]] ^ invSubMix1[sbox[t >>> 16 & 0xff]] ^ invSubMix2[sbox[t >>> 8 & 0xff]] ^ invSubMix3[sbox[t & 0xff]];
          }

          invKeySchedule[invKsRow] = invKeySchedule[invKsRow] >>> 0;
        }
      } // Adding this as a method greatly improves performance.
      ;

      _proto.networkToHostOrderSwap = function networkToHostOrderSwap(word) {
        return word << 24 | (word & 0xff00) << 8 | (word & 0xff0000) >> 8 | word >>> 24;
      };

      _proto.decrypt = function decrypt(inputArrayBuffer, offset, aesIV) {
        var nRounds = this.keySize + 6;
        var invKeySchedule = this.invKeySchedule;
        var invSBOX = this.invSBox;
        var invSubMix = this.invSubMix;
        var invSubMix0 = invSubMix[0];
        var invSubMix1 = invSubMix[1];
        var invSubMix2 = invSubMix[2];
        var invSubMix3 = invSubMix[3];
        var initVector = this.uint8ArrayToUint32Array_(aesIV);
        var initVector0 = initVector[0];
        var initVector1 = initVector[1];
        var initVector2 = initVector[2];
        var initVector3 = initVector[3];
        var inputInt32 = new Int32Array(inputArrayBuffer);
        var outputInt32 = new Int32Array(inputInt32.length);
        var t0, t1, t2, t3;
        var s0, s1, s2, s3;
        var inputWords0, inputWords1, inputWords2, inputWords3;
        var ksRow, i;
        var swapWord = this.networkToHostOrderSwap;

        while (offset < inputInt32.length) {
          inputWords0 = swapWord(inputInt32[offset]);
          inputWords1 = swapWord(inputInt32[offset + 1]);
          inputWords2 = swapWord(inputInt32[offset + 2]);
          inputWords3 = swapWord(inputInt32[offset + 3]);
          s0 = inputWords0 ^ invKeySchedule[0];
          s1 = inputWords3 ^ invKeySchedule[1];
          s2 = inputWords2 ^ invKeySchedule[2];
          s3 = inputWords1 ^ invKeySchedule[3];
          ksRow = 4; // Iterate through the rounds of decryption

          for (i = 1; i < nRounds; i++) {
            t0 = invSubMix0[s0 >>> 24] ^ invSubMix1[s1 >> 16 & 0xff] ^ invSubMix2[s2 >> 8 & 0xff] ^ invSubMix3[s3 & 0xff] ^ invKeySchedule[ksRow];
            t1 = invSubMix0[s1 >>> 24] ^ invSubMix1[s2 >> 16 & 0xff] ^ invSubMix2[s3 >> 8 & 0xff] ^ invSubMix3[s0 & 0xff] ^ invKeySchedule[ksRow + 1];
            t2 = invSubMix0[s2 >>> 24] ^ invSubMix1[s3 >> 16 & 0xff] ^ invSubMix2[s0 >> 8 & 0xff] ^ invSubMix3[s1 & 0xff] ^ invKeySchedule[ksRow + 2];
            t3 = invSubMix0[s3 >>> 24] ^ invSubMix1[s0 >> 16 & 0xff] ^ invSubMix2[s1 >> 8 & 0xff] ^ invSubMix3[s2 & 0xff] ^ invKeySchedule[ksRow + 3]; // Update state

            s0 = t0;
            s1 = t1;
            s2 = t2;
            s3 = t3;
            ksRow = ksRow + 4;
          } // Shift rows, sub bytes, add round key


          t0 = invSBOX[s0 >>> 24] << 24 ^ invSBOX[s1 >> 16 & 0xff] << 16 ^ invSBOX[s2 >> 8 & 0xff] << 8 ^ invSBOX[s3 & 0xff] ^ invKeySchedule[ksRow];
          t1 = invSBOX[s1 >>> 24] << 24 ^ invSBOX[s2 >> 16 & 0xff] << 16 ^ invSBOX[s3 >> 8 & 0xff] << 8 ^ invSBOX[s0 & 0xff] ^ invKeySchedule[ksRow + 1];
          t2 = invSBOX[s2 >>> 24] << 24 ^ invSBOX[s3 >> 16 & 0xff] << 16 ^ invSBOX[s0 >> 8 & 0xff] << 8 ^ invSBOX[s1 & 0xff] ^ invKeySchedule[ksRow + 2];
          t3 = invSBOX[s3 >>> 24] << 24 ^ invSBOX[s0 >> 16 & 0xff] << 16 ^ invSBOX[s1 >> 8 & 0xff] << 8 ^ invSBOX[s2 & 0xff] ^ invKeySchedule[ksRow + 3]; // Write

          outputInt32[offset] = swapWord(t0 ^ initVector0);
          outputInt32[offset + 1] = swapWord(t3 ^ initVector1);
          outputInt32[offset + 2] = swapWord(t2 ^ initVector2);
          outputInt32[offset + 3] = swapWord(t1 ^ initVector3); // reset initVector to last 4 unsigned int

          initVector0 = inputWords0;
          initVector1 = inputWords1;
          initVector2 = inputWords2;
          initVector3 = inputWords3;
          offset = offset + 4;
        }

        return outputInt32.buffer;
      };

      return AESDecryptor;
    }();



    /***/ }),

    /***/ "./src/crypt/decrypter.ts":
    /*!********************************!*\
      !*** ./src/crypt/decrypter.ts ***!
      \********************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Decrypter; });
    /* harmony import */ var _aes_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./aes-crypto */ "./src/crypt/aes-crypto.ts");
    /* harmony import */ var _fast_aes_key__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fast-aes-key */ "./src/crypt/fast-aes-key.ts");
    /* harmony import */ var _aes_decryptor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./aes-decryptor */ "./src/crypt/aes-decryptor.ts");
    /* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/logger */ "./src/utils/logger.ts");
    /* harmony import */ var _utils_mp4_tools__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/mp4-tools */ "./src/utils/mp4-tools.ts");
    /* harmony import */ var _utils_typed_array__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/typed-array */ "./src/utils/typed-array.ts");






    var CHUNK_SIZE = 16; // 16 bytes, 128 bits

    var Decrypter = /*#__PURE__*/function () {
      function Decrypter(observer, config, _temp) {
        var _ref = _temp === void 0 ? {} : _temp,
            _ref$removePKCS7Paddi = _ref.removePKCS7Padding,
            removePKCS7Padding = _ref$removePKCS7Paddi === void 0 ? true : _ref$removePKCS7Paddi;

        this.logEnabled = true;
        this.observer = void 0;
        this.config = void 0;
        this.removePKCS7Padding = void 0;
        this.subtle = null;
        this.softwareDecrypter = null;
        this.key = null;
        this.fastAesKey = null;
        this.remainderData = null;
        this.currentIV = null;
        this.currentResult = null;
        this.observer = observer;
        this.config = config;
        this.removePKCS7Padding = removePKCS7Padding; // built in decryptor expects PKCS7 padding

        if (removePKCS7Padding) {
          try {
            var browserCrypto = self.crypto;

            if (browserCrypto) {
              this.subtle = browserCrypto.subtle || browserCrypto.webkitSubtle;
            }
          } catch (e) {
            /* no-op */
          }
        }

        if (this.subtle === null) {
          this.config.enableSoftwareAES = true;
        }
      }

      var _proto = Decrypter.prototype;

      _proto.destroy = function destroy() {
        // @ts-ignore
        this.observer = null;
      };

      _proto.isSync = function isSync() {
        return this.config.enableSoftwareAES;
      };

      _proto.flush = function flush() {
        var currentResult = this.currentResult;

        if (!currentResult) {
          this.reset();
          return;
        }

        var data = new Uint8Array(currentResult);
        this.reset();

        if (this.removePKCS7Padding) {
          return Object(_aes_decryptor__WEBPACK_IMPORTED_MODULE_2__["removePadding"])(data);
        }

        return data;
      };

      _proto.reset = function reset() {
        this.currentResult = null;
        this.currentIV = null;
        this.remainderData = null;

        if (this.softwareDecrypter) {
          this.softwareDecrypter = null;
        }
      };

      _proto.decrypt = function decrypt(data, key, iv, callback) {
        if (this.config.enableSoftwareAES) {
          this.softwareDecrypt(new Uint8Array(data), key, iv);
          var decryptResult = this.flush();

          if (decryptResult) {
            callback(decryptResult.buffer);
          }
        } else {
          this.webCryptoDecrypt(new Uint8Array(data), key, iv).then(callback);
        }
      };

      _proto.softwareDecrypt = function softwareDecrypt(data, key, iv) {
        var currentIV = this.currentIV,
            currentResult = this.currentResult,
            remainderData = this.remainderData;
        this.logOnce('JS AES decrypt'); // The output is staggered during progressive parsing - the current result is cached, and emitted on the next call
        // This is done in order to strip PKCS7 padding, which is found at the end of each segment. We only know we've reached
        // the end on flush(), but by that time we have already received all bytes for the segment.
        // Progressive decryption does not work with WebCrypto

        if (remainderData) {
          data = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_4__["appendUint8Array"])(remainderData, data);
          this.remainderData = null;
        } // Byte length must be a multiple of 16 (AES-128 = 128 bit blocks = 16 bytes)


        var currentChunk = this.getValidChunk(data);

        if (!currentChunk.length) {
          return null;
        }

        if (currentIV) {
          iv = currentIV;
        }

        var softwareDecrypter = this.softwareDecrypter;

        if (!softwareDecrypter) {
          softwareDecrypter = this.softwareDecrypter = new _aes_decryptor__WEBPACK_IMPORTED_MODULE_2__["default"]();
        }

        softwareDecrypter.expandKey(key);
        var result = currentResult;
        this.currentResult = softwareDecrypter.decrypt(currentChunk.buffer, 0, iv);
        this.currentIV = Object(_utils_typed_array__WEBPACK_IMPORTED_MODULE_5__["sliceUint8"])(currentChunk, -16).buffer;

        if (!result) {
          return null;
        }

        return result;
      };

      _proto.webCryptoDecrypt = function webCryptoDecrypt(data, key, iv) {
        var _this = this;

        var subtle = this.subtle;

        if (this.key !== key || !this.fastAesKey) {
          this.key = key;
          this.fastAesKey = new _fast_aes_key__WEBPACK_IMPORTED_MODULE_1__["default"](subtle, key);
        }

        return this.fastAesKey.expandKey().then(function (aesKey) {
          // decrypt using web crypto
          if (!subtle) {
            return Promise.reject(new Error('web crypto not initialized'));
          }

          var crypto = new _aes_crypto__WEBPACK_IMPORTED_MODULE_0__["default"](subtle, iv);
          return crypto.decrypt(data.buffer, aesKey);
        }).catch(function (err) {
          return _this.onWebCryptoError(err, data, key, iv);
        });
      };

      _proto.onWebCryptoError = function onWebCryptoError(err, data, key, iv) {
        _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].warn('[decrypter.ts]: WebCrypto Error, disable WebCrypto API:', err);
        this.config.enableSoftwareAES = true;
        this.logEnabled = true;
        return this.softwareDecrypt(data, key, iv);
      };

      _proto.getValidChunk = function getValidChunk(data) {
        var currentChunk = data;
        var splitPoint = data.length - data.length % CHUNK_SIZE;

        if (splitPoint !== data.length) {
          currentChunk = Object(_utils_typed_array__WEBPACK_IMPORTED_MODULE_5__["sliceUint8"])(data, 0, splitPoint);
          this.remainderData = Object(_utils_typed_array__WEBPACK_IMPORTED_MODULE_5__["sliceUint8"])(data, splitPoint);
        }

        return currentChunk;
      };

      _proto.logOnce = function logOnce(msg) {
        if (!this.logEnabled) {
          return;
        }

        _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].log("[decrypter.ts]: " + msg);
        this.logEnabled = false;
      };

      return Decrypter;
    }();



    /***/ }),

    /***/ "./src/crypt/fast-aes-key.ts":
    /*!***********************************!*\
      !*** ./src/crypt/fast-aes-key.ts ***!
      \***********************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return FastAESKey; });
    var FastAESKey = /*#__PURE__*/function () {
      function FastAESKey(subtle, key) {
        this.subtle = void 0;
        this.key = void 0;
        this.subtle = subtle;
        this.key = key;
      }

      var _proto = FastAESKey.prototype;

      _proto.expandKey = function expandKey() {
        return this.subtle.importKey('raw', this.key, {
          name: 'AES-CBC'
        }, false, ['encrypt', 'decrypt']);
      };

      return FastAESKey;
    }();



    /***/ }),

    /***/ "./src/demux/aacdemuxer.ts":
    /*!*********************************!*\
      !*** ./src/demux/aacdemuxer.ts ***!
      \*********************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony import */ var _base_audio_demuxer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base-audio-demuxer */ "./src/demux/base-audio-demuxer.ts");
    /* harmony import */ var _adts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./adts */ "./src/demux/adts.ts");
    /* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/logger */ "./src/utils/logger.ts");
    /* harmony import */ var _demux_id3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../demux/id3 */ "./src/demux/id3.ts");
    function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    /**
     * AAC demuxer
     */





    var AACDemuxer = /*#__PURE__*/function (_BaseAudioDemuxer) {
      _inheritsLoose(AACDemuxer, _BaseAudioDemuxer);

      function AACDemuxer(observer, config) {
        var _this;

        _this = _BaseAudioDemuxer.call(this) || this;
        _this.observer = void 0;
        _this.config = void 0;
        _this.observer = observer;
        _this.config = config;
        return _this;
      }

      var _proto = AACDemuxer.prototype;

      _proto.resetInitSegment = function resetInitSegment(audioCodec, videoCodec, duration) {
        _BaseAudioDemuxer.prototype.resetInitSegment.call(this, audioCodec, videoCodec, duration);

        this._audioTrack = {
          container: 'audio/adts',
          type: 'audio',
          id: 0,
          pid: -1,
          sequenceNumber: 0,
          isAAC: true,
          samples: [],
          manifestCodec: audioCodec,
          duration: duration,
          inputTimeScale: 90000,
          dropped: 0
        };
      } // Source for probe info - https://wiki.multimedia.cx/index.php?title=ADTS
      ;

      AACDemuxer.probe = function probe(data) {
        if (!data) {
          return false;
        } // Check for the ADTS sync word
        // Look for ADTS header | 1111 1111 | 1111 X00X | where X can be either 0 or 1
        // Layer bits (position 14 and 15) in header should be always 0 for ADTS
        // More info https://wiki.multimedia.cx/index.php?title=ADTS


        var id3Data = _demux_id3__WEBPACK_IMPORTED_MODULE_3__["getID3Data"](data, 0) || [];
        var offset = id3Data.length;

        for (var length = data.length; offset < length; offset++) {
          if (_adts__WEBPACK_IMPORTED_MODULE_1__["probe"](data, offset)) {
            _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log('ADTS sync word found !');
            return true;
          }
        }

        return false;
      };

      _proto.canParse = function canParse(data, offset) {
        return _adts__WEBPACK_IMPORTED_MODULE_1__["canParse"](data, offset);
      };

      _proto.appendFrame = function appendFrame(track, data, offset) {
        _adts__WEBPACK_IMPORTED_MODULE_1__["initTrackConfig"](track, this.observer, data, offset, track.manifestCodec);
        var frame = _adts__WEBPACK_IMPORTED_MODULE_1__["appendFrame"](track, data, offset, this.initPTS, this.frameIndex);

        if (frame && frame.missing === 0) {
          return frame;
        }
      };

      return AACDemuxer;
    }(_base_audio_demuxer__WEBPACK_IMPORTED_MODULE_0__["default"]);

    AACDemuxer.minProbeByteLength = 9;
    /* harmony default export */ __webpack_exports__["default"] = (AACDemuxer);

    /***/ }),

    /***/ "./src/demux/adts.ts":
    /*!***************************!*\
      !*** ./src/demux/adts.ts ***!
      \***************************/
    /*! exports provided: getAudioConfig, isHeaderPattern, getHeaderLength, getFullFrameLength, canGetFrameLength, isHeader, canParse, probe, initTrackConfig, getFrameDuration, parseFrameHeader, appendFrame */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getAudioConfig", function() { return getAudioConfig; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isHeaderPattern", function() { return isHeaderPattern; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getHeaderLength", function() { return getHeaderLength; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFullFrameLength", function() { return getFullFrameLength; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "canGetFrameLength", function() { return canGetFrameLength; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isHeader", function() { return isHeader; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "canParse", function() { return canParse; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "probe", function() { return probe; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initTrackConfig", function() { return initTrackConfig; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFrameDuration", function() { return getFrameDuration; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseFrameHeader", function() { return parseFrameHeader; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "appendFrame", function() { return appendFrame; });
    /* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/logger */ "./src/utils/logger.ts");
    /* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors */ "./src/errors.ts");
    /* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../events */ "./src/events.ts");
    /**
     * ADTS parser helper
     * @link https://wiki.multimedia.cx/index.php?title=ADTS
     */



    function getAudioConfig(observer, data, offset, audioCodec) {
      var adtsObjectType;
      var adtsExtensionSamplingIndex;
      var adtsChanelConfig;
      var config;
      var userAgent = navigator.userAgent.toLowerCase();
      var manifestCodec = audioCodec;
      var adtsSampleingRates = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350]; // byte 2

      adtsObjectType = ((data[offset + 2] & 0xc0) >>> 6) + 1;
      var adtsSamplingIndex = (data[offset + 2] & 0x3c) >>> 2;

      if (adtsSamplingIndex > adtsSampleingRates.length - 1) {
        observer.trigger(_events__WEBPACK_IMPORTED_MODULE_2__["Events"].ERROR, {
          type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].MEDIA_ERROR,
          details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].FRAG_PARSING_ERROR,
          fatal: true,
          reason: "invalid ADTS sampling index:" + adtsSamplingIndex
        });
        return;
      }

      adtsChanelConfig = (data[offset + 2] & 0x01) << 2; // byte 3

      adtsChanelConfig |= (data[offset + 3] & 0xc0) >>> 6;
      _utils_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].log("manifest codec:" + audioCodec + ", ADTS type:" + adtsObjectType + ", samplingIndex:" + adtsSamplingIndex); // firefox: freq less than 24kHz = AAC SBR (HE-AAC)

      if (/firefox/i.test(userAgent)) {
        if (adtsSamplingIndex >= 6) {
          adtsObjectType = 5;
          config = new Array(4); // HE-AAC uses SBR (Spectral Band Replication) , high frequencies are constructed from low frequencies
          // there is a factor 2 between frame sample rate and output sample rate
          // multiply frequency by 2 (see table below, equivalent to substract 3)

          adtsExtensionSamplingIndex = adtsSamplingIndex - 3;
        } else {
          adtsObjectType = 2;
          config = new Array(2);
          adtsExtensionSamplingIndex = adtsSamplingIndex;
        } // Android : always use AAC

      } else if (userAgent.indexOf('android') !== -1) {
        adtsObjectType = 2;
        config = new Array(2);
        adtsExtensionSamplingIndex = adtsSamplingIndex;
      } else {
        /*  for other browsers (Chrome/Vivaldi/Opera ...)
            always force audio type to be HE-AAC SBR, as some browsers do not support audio codec switch properly (like Chrome ...)
        */
        adtsObjectType = 5;
        config = new Array(4); // if (manifest codec is HE-AAC or HE-AACv2) OR (manifest codec not specified AND frequency less than 24kHz)

        if (audioCodec && (audioCodec.indexOf('mp4a.40.29') !== -1 || audioCodec.indexOf('mp4a.40.5') !== -1) || !audioCodec && adtsSamplingIndex >= 6) {
          // HE-AAC uses SBR (Spectral Band Replication) , high frequencies are constructed from low frequencies
          // there is a factor 2 between frame sample rate and output sample rate
          // multiply frequency by 2 (see table below, equivalent to substract 3)
          adtsExtensionSamplingIndex = adtsSamplingIndex - 3;
        } else {
          // if (manifest codec is AAC) AND (frequency less than 24kHz AND nb channel is 1) OR (manifest codec not specified and mono audio)
          // Chrome fails to play back with low frequency AAC LC mono when initialized with HE-AAC.  This is not a problem with stereo.
          if (audioCodec && audioCodec.indexOf('mp4a.40.2') !== -1 && (adtsSamplingIndex >= 6 && adtsChanelConfig === 1 || /vivaldi/i.test(userAgent)) || !audioCodec && adtsChanelConfig === 1) {
            adtsObjectType = 2;
            config = new Array(2);
          }

          adtsExtensionSamplingIndex = adtsSamplingIndex;
        }
      }
      /* refer to http://wiki.multimedia.cx/index.php?title=MPEG-4_Audio#Audio_Specific_Config
          ISO 14496-3 (AAC).pdf - Table 1.13 — Syntax of AudioSpecificConfig()
        Audio Profile / Audio Object Type
        0: Null
        1: AAC Main
        2: AAC LC (Low Complexity)
        3: AAC SSR (Scalable Sample Rate)
        4: AAC LTP (Long Term Prediction)
        5: SBR (Spectral Band Replication)
        6: AAC Scalable
       sampling freq
        0: 96000 Hz
        1: 88200 Hz
        2: 64000 Hz
        3: 48000 Hz
        4: 44100 Hz
        5: 32000 Hz
        6: 24000 Hz
        7: 22050 Hz
        8: 16000 Hz
        9: 12000 Hz
        10: 11025 Hz
        11: 8000 Hz
        12: 7350 Hz
        13: Reserved
        14: Reserved
        15: frequency is written explictly
        Channel Configurations
        These are the channel configurations:
        0: Defined in AOT Specifc Config
        1: 1 channel: front-center
        2: 2 channels: front-left, front-right
      */
      // audioObjectType = profile => profile, the MPEG-4 Audio Object Type minus 1


      config[0] = adtsObjectType << 3; // samplingFrequencyIndex

      config[0] |= (adtsSamplingIndex & 0x0e) >> 1;
      config[1] |= (adtsSamplingIndex & 0x01) << 7; // channelConfiguration

      config[1] |= adtsChanelConfig << 3;

      if (adtsObjectType === 5) {
        // adtsExtensionSampleingIndex
        config[1] |= (adtsExtensionSamplingIndex & 0x0e) >> 1;
        config[2] = (adtsExtensionSamplingIndex & 0x01) << 7; // adtsObjectType (force to 2, chrome is checking that object type is less than 5 ???
        //    https://chromium.googlesource.com/chromium/src.git/+/master/media/formats/mp4/aac.cc

        config[2] |= 2 << 2;
        config[3] = 0;
      }

      return {
        config: config,
        samplerate: adtsSampleingRates[adtsSamplingIndex],
        channelCount: adtsChanelConfig,
        codec: 'mp4a.40.' + adtsObjectType,
        manifestCodec: manifestCodec
      };
    }
    function isHeaderPattern(data, offset) {
      return data[offset] === 0xff && (data[offset + 1] & 0xf6) === 0xf0;
    }
    function getHeaderLength(data, offset) {
      return data[offset + 1] & 0x01 ? 7 : 9;
    }
    function getFullFrameLength(data, offset) {
      return (data[offset + 3] & 0x03) << 11 | data[offset + 4] << 3 | (data[offset + 5] & 0xe0) >>> 5;
    }
    function canGetFrameLength(data, offset) {
      return offset + 5 < data.length;
    }
    function isHeader(data, offset) {
      // Look for ADTS header | 1111 1111 | 1111 X00X | where X can be either 0 or 1
      // Layer bits (position 14 and 15) in header should be always 0 for ADTS
      // More info https://wiki.multimedia.cx/index.php?title=ADTS
      return offset + 1 < data.length && isHeaderPattern(data, offset);
    }
    function canParse(data, offset) {
      return canGetFrameLength(data, offset) && isHeaderPattern(data, offset) && getFullFrameLength(data, offset) <= data.length - offset;
    }
    function probe(data, offset) {
      // same as isHeader but we also check that ADTS frame follows last ADTS frame
      // or end of data is reached
      if (isHeader(data, offset)) {
        // ADTS header Length
        var headerLength = getHeaderLength(data, offset);

        if (offset + headerLength >= data.length) {
          return false;
        } // ADTS frame Length


        var frameLength = getFullFrameLength(data, offset);

        if (frameLength <= headerLength) {
          return false;
        }

        var newOffset = offset + frameLength;
        return newOffset === data.length || isHeader(data, newOffset);
      }

      return false;
    }
    function initTrackConfig(track, observer, data, offset, audioCodec) {
      if (!track.samplerate) {
        var config = getAudioConfig(observer, data, offset, audioCodec);

        if (!config) {
          return;
        }

        track.config = config.config;
        track.samplerate = config.samplerate;
        track.channelCount = config.channelCount;
        track.codec = config.codec;
        track.manifestCodec = config.manifestCodec;
        _utils_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].log("parsed codec:" + track.codec + ", rate:" + config.samplerate + ", channels:" + config.channelCount);
      }
    }
    function getFrameDuration(samplerate) {
      return 1024 * 90000 / samplerate;
    }
    function parseFrameHeader(data, offset, pts, frameIndex, frameDuration) {
      // The protection skip bit tells us if we have 2 bytes of CRC data at the end of the ADTS header
      var headerLength = getHeaderLength(data, offset); // retrieve frame size

      var frameLength = getFullFrameLength(data, offset);
      frameLength -= headerLength;

      if (frameLength > 0) {
        var stamp = pts + frameIndex * frameDuration; // logger.log(`AAC frame, offset/length/total/pts:${offset+headerLength}/${frameLength}/${data.byteLength}/${(stamp/90).toFixed(0)}`);

        return {
          headerLength: headerLength,
          frameLength: frameLength,
          stamp: stamp
        };
      }
    }
    function appendFrame(track, data, offset, pts, frameIndex) {
      var frameDuration = getFrameDuration(track.samplerate);
      var header = parseFrameHeader(data, offset, pts, frameIndex, frameDuration);

      if (header) {
        var frameLength = header.frameLength,
            headerLength = header.headerLength,
            stamp = header.stamp;
        var length = headerLength + frameLength;
        var missing = Math.max(0, offset + length - data.length); // logger.log(`AAC frame ${frameIndex}, pts:${stamp} length@offset/total: ${frameLength}@${offset+headerLength}/${data.byteLength} missing: ${missing}`);

        var unit;

        if (missing) {
          unit = new Uint8Array(length - headerLength);
          unit.set(data.subarray(offset + headerLength, data.length), 0);
        } else {
          unit = data.subarray(offset + headerLength, offset + length);
        }

        var sample = {
          unit: unit,
          pts: stamp
        };

        if (!missing) {
          track.samples.push(sample);
        }

        return {
          sample: sample,
          length: length,
          missing: missing
        };
      }
    }

    /***/ }),

    /***/ "./src/demux/base-audio-demuxer.ts":
    /*!*****************************************!*\
      !*** ./src/demux/base-audio-demuxer.ts ***!
      \*****************************************/
    /*! exports provided: initPTSFn, default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initPTSFn", function() { return initPTSFn; });
    /* harmony import */ var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/polyfills/number */ "./src/polyfills/number.ts");
    /* harmony import */ var _demux_id3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../demux/id3 */ "./src/demux/id3.ts");
    /* harmony import */ var _dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dummy-demuxed-track */ "./src/demux/dummy-demuxed-track.ts");
    /* harmony import */ var _utils_mp4_tools__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/mp4-tools */ "./src/utils/mp4-tools.ts");
    /* harmony import */ var _utils_typed_array__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/typed-array */ "./src/utils/typed-array.ts");






    var BaseAudioDemuxer = /*#__PURE__*/function () {
      function BaseAudioDemuxer() {
        this._audioTrack = void 0;
        this._id3Track = void 0;
        this.frameIndex = 0;
        this.cachedData = null;
        this.initPTS = null;
      }

      var _proto = BaseAudioDemuxer.prototype;

      _proto.resetInitSegment = function resetInitSegment(audioCodec, videoCodec, duration) {
        this._id3Track = {
          type: 'id3',
          id: 0,
          pid: -1,
          inputTimeScale: 90000,
          sequenceNumber: 0,
          samples: [],
          dropped: 0
        };
      };

      _proto.resetTimeStamp = function resetTimeStamp() {};

      _proto.resetContiguity = function resetContiguity() {};

      _proto.canParse = function canParse(data, offset) {
        return false;
      };

      _proto.appendFrame = function appendFrame(track, data, offset) {} // feed incoming data to the front of the parsing pipeline
      ;

      _proto.demux = function demux(data, timeOffset) {
        if (this.cachedData) {
          data = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_3__["appendUint8Array"])(this.cachedData, data);
          this.cachedData = null;
        }

        var id3Data = _demux_id3__WEBPACK_IMPORTED_MODULE_1__["getID3Data"](data, 0);
        var offset = id3Data ? id3Data.length : 0;
        var lastDataIndex;
        var pts;
        var track = this._audioTrack;
        var id3Track = this._id3Track;
        var timestamp = id3Data ? _demux_id3__WEBPACK_IMPORTED_MODULE_1__["getTimeStamp"](id3Data) : undefined;
        var length = data.length;

        if (this.frameIndex === 0 || this.initPTS === null) {
          this.initPTS = initPTSFn(timestamp, timeOffset);
        } // more expressive than alternative: id3Data?.length


        if (id3Data && id3Data.length > 0) {
          id3Track.samples.push({
            pts: this.initPTS,
            dts: this.initPTS,
            data: id3Data
          });
        }

        pts = this.initPTS;

        while (offset < length) {
          if (this.canParse(data, offset)) {
            var frame = this.appendFrame(track, data, offset);

            if (frame) {
              this.frameIndex++;
              pts = frame.sample.pts;
              offset += frame.length;
              lastDataIndex = offset;
            } else {
              offset = length;
            }
          } else if (_demux_id3__WEBPACK_IMPORTED_MODULE_1__["canParse"](data, offset)) {
            // after a ID3.canParse, a call to ID3.getID3Data *should* always returns some data
            id3Data = _demux_id3__WEBPACK_IMPORTED_MODULE_1__["getID3Data"](data, offset);
            id3Track.samples.push({
              pts: pts,
              dts: pts,
              data: id3Data
            });
            offset += id3Data.length;
            lastDataIndex = offset;
          } else {
            offset++;
          }

          if (offset === length && lastDataIndex !== length) {
            var partialData = Object(_utils_typed_array__WEBPACK_IMPORTED_MODULE_4__["sliceUint8"])(data, lastDataIndex);

            if (this.cachedData) {
              this.cachedData = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_3__["appendUint8Array"])(this.cachedData, partialData);
            } else {
              this.cachedData = partialData;
            }
          }
        }

        return {
          audioTrack: track,
          avcTrack: Object(_dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_2__["dummyTrack"])(),
          id3Track: id3Track,
          textTrack: Object(_dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_2__["dummyTrack"])()
        };
      };

      _proto.demuxSampleAes = function demuxSampleAes(data, keyData, timeOffset) {
        return Promise.reject(new Error("[" + this + "] This demuxer does not support Sample-AES decryption"));
      };

      _proto.flush = function flush(timeOffset) {
        // Parse cache in case of remaining frames.
        var cachedData = this.cachedData;

        if (cachedData) {
          this.cachedData = null;
          this.demux(cachedData, 0);
        }

        this.frameIndex = 0;
        return {
          audioTrack: this._audioTrack,
          avcTrack: Object(_dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_2__["dummyTrack"])(),
          id3Track: this._id3Track,
          textTrack: Object(_dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_2__["dummyTrack"])()
        };
      };

      _proto.destroy = function destroy() {};

      return BaseAudioDemuxer;
    }();
    /**
     * Initialize PTS
     * <p>
     *    use timestamp unless it is undefined, NaN or Infinity
     * </p>
     */


    var initPTSFn = function initPTSFn(timestamp, timeOffset) {
      return Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(timestamp) ? timestamp * 90 : timeOffset * 90000;
    };
    /* harmony default export */ __webpack_exports__["default"] = (BaseAudioDemuxer);

    /***/ }),

    /***/ "./src/demux/chunk-cache.ts":
    /*!**********************************!*\
      !*** ./src/demux/chunk-cache.ts ***!
      \**********************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return ChunkCache; });
    var ChunkCache = /*#__PURE__*/function () {
      function ChunkCache() {
        this.chunks = [];
        this.dataLength = 0;
      }

      var _proto = ChunkCache.prototype;

      _proto.push = function push(chunk) {
        this.chunks.push(chunk);
        this.dataLength += chunk.length;
      };

      _proto.flush = function flush() {
        var chunks = this.chunks,
            dataLength = this.dataLength;
        var result;

        if (!chunks.length) {
          return new Uint8Array(0);
        } else if (chunks.length === 1) {
          result = chunks[0];
        } else {
          result = concatUint8Arrays(chunks, dataLength);
        }

        this.reset();
        return result;
      };

      _proto.reset = function reset() {
        this.chunks.length = 0;
        this.dataLength = 0;
      };

      return ChunkCache;
    }();



    function concatUint8Arrays(chunks, dataLength) {
      var result = new Uint8Array(dataLength);
      var offset = 0;

      for (var i = 0; i < chunks.length; i++) {
        var chunk = chunks[i];
        result.set(chunk, offset);
        offset += chunk.length;
      }

      return result;
    }

    /***/ }),

    /***/ "./src/demux/dummy-demuxed-track.ts":
    /*!******************************************!*\
      !*** ./src/demux/dummy-demuxed-track.ts ***!
      \******************************************/
    /*! exports provided: dummyTrack */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dummyTrack", function() { return dummyTrack; });
    function dummyTrack() {
      return {
        type: '',
        id: -1,
        pid: -1,
        inputTimeScale: 90000,
        sequenceNumber: -1,
        samples: [],
        dropped: 0
      };
    }

    /***/ }),

    /***/ "./src/demux/exp-golomb.ts":
    /*!*********************************!*\
      !*** ./src/demux/exp-golomb.ts ***!
      \*********************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/logger */ "./src/utils/logger.ts");
    /**
     * Parser for exponential Golomb codes, a variable-bitwidth number encoding scheme used by h264.
     */


    var ExpGolomb = /*#__PURE__*/function () {
      function ExpGolomb(data) {
        this.data = void 0;
        this.bytesAvailable = void 0;
        this.word = void 0;
        this.bitsAvailable = void 0;
        this.data = data; // the number of bytes left to examine in this.data

        this.bytesAvailable = data.byteLength; // the current word being examined

        this.word = 0; // :uint
        // the number of bits left to examine in the current word

        this.bitsAvailable = 0; // :uint
      } // ():void


      var _proto = ExpGolomb.prototype;

      _proto.loadWord = function loadWord() {
        var data = this.data;
        var bytesAvailable = this.bytesAvailable;
        var position = data.byteLength - bytesAvailable;
        var workingBytes = new Uint8Array(4);
        var availableBytes = Math.min(4, bytesAvailable);

        if (availableBytes === 0) {
          throw new Error('no bytes available');
        }

        workingBytes.set(data.subarray(position, position + availableBytes));
        this.word = new DataView(workingBytes.buffer).getUint32(0); // track the amount of this.data that has been processed

        this.bitsAvailable = availableBytes * 8;
        this.bytesAvailable -= availableBytes;
      } // (count:int):void
      ;

      _proto.skipBits = function skipBits(count) {
        var skipBytes; // :int

        if (this.bitsAvailable > count) {
          this.word <<= count;
          this.bitsAvailable -= count;
        } else {
          count -= this.bitsAvailable;
          skipBytes = count >> 3;
          count -= skipBytes >> 3;
          this.bytesAvailable -= skipBytes;
          this.loadWord();
          this.word <<= count;
          this.bitsAvailable -= count;
        }
      } // (size:int):uint
      ;

      _proto.readBits = function readBits(size) {
        var bits = Math.min(this.bitsAvailable, size); // :uint

        var valu = this.word >>> 32 - bits; // :uint

        if (size > 32) {
          _utils_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].error('Cannot read more than 32 bits at a time');
        }

        this.bitsAvailable -= bits;

        if (this.bitsAvailable > 0) {
          this.word <<= bits;
        } else if (this.bytesAvailable > 0) {
          this.loadWord();
        }

        bits = size - bits;

        if (bits > 0 && this.bitsAvailable) {
          return valu << bits | this.readBits(bits);
        } else {
          return valu;
        }
      } // ():uint
      ;

      _proto.skipLZ = function skipLZ() {
        var leadingZeroCount; // :uint

        for (leadingZeroCount = 0; leadingZeroCount < this.bitsAvailable; ++leadingZeroCount) {
          if ((this.word & 0x80000000 >>> leadingZeroCount) !== 0) {
            // the first bit of working word is 1
            this.word <<= leadingZeroCount;
            this.bitsAvailable -= leadingZeroCount;
            return leadingZeroCount;
          }
        } // we exhausted word and still have not found a 1


        this.loadWord();
        return leadingZeroCount + this.skipLZ();
      } // ():void
      ;

      _proto.skipUEG = function skipUEG() {
        this.skipBits(1 + this.skipLZ());
      } // ():void
      ;

      _proto.skipEG = function skipEG() {
        this.skipBits(1 + this.skipLZ());
      } // ():uint
      ;

      _proto.readUEG = function readUEG() {
        var clz = this.skipLZ(); // :uint

        return this.readBits(clz + 1) - 1;
      } // ():int
      ;

      _proto.readEG = function readEG() {
        var valu = this.readUEG(); // :int

        if (0x01 & valu) {
          // the number is odd if the low order bit is set
          return 1 + valu >>> 1; // add 1 to make it even, and divide by 2
        } else {
          return -1 * (valu >>> 1); // divide by two then make it negative
        }
      } // Some convenience functions
      // :Boolean
      ;

      _proto.readBoolean = function readBoolean() {
        return this.readBits(1) === 1;
      } // ():int
      ;

      _proto.readUByte = function readUByte() {
        return this.readBits(8);
      } // ():int
      ;

      _proto.readUShort = function readUShort() {
        return this.readBits(16);
      } // ():int
      ;

      _proto.readUInt = function readUInt() {
        return this.readBits(32);
      }
      /**
       * Advance the ExpGolomb decoder past a scaling list. The scaling
       * list is optionally transmitted as part of a sequence parameter
       * set and is not relevant to transmuxing.
       * @param count the number of entries in this scaling list
       * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1
       */
      ;

      _proto.skipScalingList = function skipScalingList(count) {
        var lastScale = 8;
        var nextScale = 8;
        var deltaScale;

        for (var j = 0; j < count; j++) {
          if (nextScale !== 0) {
            deltaScale = this.readEG();
            nextScale = (lastScale + deltaScale + 256) % 256;
          }

          lastScale = nextScale === 0 ? lastScale : nextScale;
        }
      }
      /**
       * Read a sequence parameter set and return some interesting video
       * properties. A sequence parameter set is the H264 metadata that
       * describes the properties of upcoming video frames.
       * @param data {Uint8Array} the bytes of a sequence parameter set
       * @return {object} an object with configuration parsed from the
       * sequence parameter set, including the dimensions of the
       * associated video frames.
       */
      ;

      _proto.readSPS = function readSPS() {
        var frameCropLeftOffset = 0;
        var frameCropRightOffset = 0;
        var frameCropTopOffset = 0;
        var frameCropBottomOffset = 0;
        var numRefFramesInPicOrderCntCycle;
        var scalingListCount;
        var i;
        var readUByte = this.readUByte.bind(this);
        var readBits = this.readBits.bind(this);
        var readUEG = this.readUEG.bind(this);
        var readBoolean = this.readBoolean.bind(this);
        var skipBits = this.skipBits.bind(this);
        var skipEG = this.skipEG.bind(this);
        var skipUEG = this.skipUEG.bind(this);
        var skipScalingList = this.skipScalingList.bind(this);
        readUByte();
        var profileIdc = readUByte(); // profile_idc

        readBits(5); // profileCompat constraint_set[0-4]_flag, u(5)

        skipBits(3); // reserved_zero_3bits u(3),

        readUByte(); // level_idc u(8)

        skipUEG(); // seq_parameter_set_id
        // some profiles have more optional data we don't need

        if (profileIdc === 100 || profileIdc === 110 || profileIdc === 122 || profileIdc === 244 || profileIdc === 44 || profileIdc === 83 || profileIdc === 86 || profileIdc === 118 || profileIdc === 128) {
          var chromaFormatIdc = readUEG();

          if (chromaFormatIdc === 3) {
            skipBits(1);
          } // separate_colour_plane_flag


          skipUEG(); // bit_depth_luma_minus8

          skipUEG(); // bit_depth_chroma_minus8

          skipBits(1); // qpprime_y_zero_transform_bypass_flag

          if (readBoolean()) {
            // seq_scaling_matrix_present_flag
            scalingListCount = chromaFormatIdc !== 3 ? 8 : 12;

            for (i = 0; i < scalingListCount; i++) {
              if (readBoolean()) {
                // seq_scaling_list_present_flag[ i ]
                if (i < 6) {
                  skipScalingList(16);
                } else {
                  skipScalingList(64);
                }
              }
            }
          }
        }

        skipUEG(); // log2_max_frame_num_minus4

        var picOrderCntType = readUEG();

        if (picOrderCntType === 0) {
          readUEG(); // log2_max_pic_order_cnt_lsb_minus4
        } else if (picOrderCntType === 1) {
          skipBits(1); // delta_pic_order_always_zero_flag

          skipEG(); // offset_for_non_ref_pic

          skipEG(); // offset_for_top_to_bottom_field

          numRefFramesInPicOrderCntCycle = readUEG();

          for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {
            skipEG();
          } // offset_for_ref_frame[ i ]

        }

        skipUEG(); // max_num_ref_frames

        skipBits(1); // gaps_in_frame_num_value_allowed_flag

        var picWidthInMbsMinus1 = readUEG();
        var picHeightInMapUnitsMinus1 = readUEG();
        var frameMbsOnlyFlag = readBits(1);

        if (frameMbsOnlyFlag === 0) {
          skipBits(1);
        } // mb_adaptive_frame_field_flag


        skipBits(1); // direct_8x8_inference_flag

        if (readBoolean()) {
          // frame_cropping_flag
          frameCropLeftOffset = readUEG();
          frameCropRightOffset = readUEG();
          frameCropTopOffset = readUEG();
          frameCropBottomOffset = readUEG();
        }

        var pixelRatio = [1, 1];

        if (readBoolean()) {
          // vui_parameters_present_flag
          if (readBoolean()) {
            // aspect_ratio_info_present_flag
            var aspectRatioIdc = readUByte();

            switch (aspectRatioIdc) {
              case 1:
                pixelRatio = [1, 1];
                break;

              case 2:
                pixelRatio = [12, 11];
                break;

              case 3:
                pixelRatio = [10, 11];
                break;

              case 4:
                pixelRatio = [16, 11];
                break;

              case 5:
                pixelRatio = [40, 33];
                break;

              case 6:
                pixelRatio = [24, 11];
                break;

              case 7:
                pixelRatio = [20, 11];
                break;

              case 8:
                pixelRatio = [32, 11];
                break;

              case 9:
                pixelRatio = [80, 33];
                break;

              case 10:
                pixelRatio = [18, 11];
                break;

              case 11:
                pixelRatio = [15, 11];
                break;

              case 12:
                pixelRatio = [64, 33];
                break;

              case 13:
                pixelRatio = [160, 99];
                break;

              case 14:
                pixelRatio = [4, 3];
                break;

              case 15:
                pixelRatio = [3, 2];
                break;

              case 16:
                pixelRatio = [2, 1];
                break;

              case 255:
                {
                  pixelRatio = [readUByte() << 8 | readUByte(), readUByte() << 8 | readUByte()];
                  break;
                }
            }
          }
        }

        return {
          width: Math.ceil((picWidthInMbsMinus1 + 1) * 16 - frameCropLeftOffset * 2 - frameCropRightOffset * 2),
          height: (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16 - (frameMbsOnlyFlag ? 2 : 4) * (frameCropTopOffset + frameCropBottomOffset),
          pixelRatio: pixelRatio
        };
      };

      _proto.readSliceType = function readSliceType() {
        // skip NALu type
        this.readUByte(); // discard first_mb_in_slice

        this.readUEG(); // return slice_type

        return this.readUEG();
      };

      return ExpGolomb;
    }();

    /* harmony default export */ __webpack_exports__["default"] = (ExpGolomb);

    /***/ }),

    /***/ "./src/demux/id3.ts":
    /*!**************************!*\
      !*** ./src/demux/id3.ts ***!
      \**************************/
    /*! exports provided: isHeader, isFooter, getID3Data, canParse, getTimeStamp, isTimeStampFrame, getID3Frames, decodeFrame, utf8ArrayToStr, testables */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isHeader", function() { return isHeader; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isFooter", function() { return isFooter; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getID3Data", function() { return getID3Data; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "canParse", function() { return canParse; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTimeStamp", function() { return getTimeStamp; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isTimeStampFrame", function() { return isTimeStampFrame; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getID3Frames", function() { return getID3Frames; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeFrame", function() { return decodeFrame; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "utf8ArrayToStr", function() { return utf8ArrayToStr; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "testables", function() { return testables; });
    // breaking up those two types in order to clarify what is happening in the decoding path.

    /**
     * Returns true if an ID3 header can be found at offset in data
     * @param {Uint8Array} data - The data to search in
     * @param {number} offset - The offset at which to start searching
     * @return {boolean} - True if an ID3 header is found
     */
    var isHeader = function isHeader(data, offset) {
      /*
       * http://id3.org/id3v2.3.0
       * [0]     = 'I'
       * [1]     = 'D'
       * [2]     = '3'
       * [3,4]   = {Version}
       * [5]     = {Flags}
       * [6-9]   = {ID3 Size}
       *
       * An ID3v2 tag can be detected with the following pattern:
       *  $49 44 33 yy yy xx zz zz zz zz
       * Where yy is less than $FF, xx is the 'flags' byte and zz is less than $80
       */
      if (offset + 10 <= data.length) {
        // look for 'ID3' identifier
        if (data[offset] === 0x49 && data[offset + 1] === 0x44 && data[offset + 2] === 0x33) {
          // check version is within range
          if (data[offset + 3] < 0xff && data[offset + 4] < 0xff) {
            // check size is within range
            if (data[offset + 6] < 0x80 && data[offset + 7] < 0x80 && data[offset + 8] < 0x80 && data[offset + 9] < 0x80) {
              return true;
            }
          }
        }
      }

      return false;
    };
    /**
     * Returns true if an ID3 footer can be found at offset in data
     * @param {Uint8Array} data - The data to search in
     * @param {number} offset - The offset at which to start searching
     * @return {boolean} - True if an ID3 footer is found
     */

    var isFooter = function isFooter(data, offset) {
      /*
       * The footer is a copy of the header, but with a different identifier
       */
      if (offset + 10 <= data.length) {
        // look for '3DI' identifier
        if (data[offset] === 0x33 && data[offset + 1] === 0x44 && data[offset + 2] === 0x49) {
          // check version is within range
          if (data[offset + 3] < 0xff && data[offset + 4] < 0xff) {
            // check size is within range
            if (data[offset + 6] < 0x80 && data[offset + 7] < 0x80 && data[offset + 8] < 0x80 && data[offset + 9] < 0x80) {
              return true;
            }
          }
        }
      }

      return false;
    };
    /**
     * Returns any adjacent ID3 tags found in data starting at offset, as one block of data
     * @param {Uint8Array} data - The data to search in
     * @param {number} offset - The offset at which to start searching
     * @return {Uint8Array | undefined} - The block of data containing any ID3 tags found
     * or *undefined* if no header is found at the starting offset
     */

    var getID3Data = function getID3Data(data, offset) {
      var front = offset;
      var length = 0;

      while (isHeader(data, offset)) {
        // ID3 header is 10 bytes
        length += 10;
        var size = readSize(data, offset + 6);
        length += size;

        if (isFooter(data, offset + 10)) {
          // ID3 footer is 10 bytes
          length += 10;
        }

        offset += length;
      }

      if (length > 0) {
        return data.subarray(front, front + length);
      }

      return undefined;
    };

    var readSize = function readSize(data, offset) {
      var size = 0;
      size = (data[offset] & 0x7f) << 21;
      size |= (data[offset + 1] & 0x7f) << 14;
      size |= (data[offset + 2] & 0x7f) << 7;
      size |= data[offset + 3] & 0x7f;
      return size;
    };

    var canParse = function canParse(data, offset) {
      return isHeader(data, offset) && readSize(data, offset + 6) + 10 <= data.length - offset;
    };
    /**
     * Searches for the Elementary Stream timestamp found in the ID3 data chunk
     * @param {Uint8Array} data - Block of data containing one or more ID3 tags
     * @return {number | undefined} - The timestamp
     */

    var getTimeStamp = function getTimeStamp(data) {
      var frames = getID3Frames(data);

      for (var i = 0; i < frames.length; i++) {
        var frame = frames[i];

        if (isTimeStampFrame(frame)) {
          return readTimeStamp(frame);
        }
      }

      return undefined;
    };
    /**
     * Returns true if the ID3 frame is an Elementary Stream timestamp frame
     * @param {ID3 frame} frame
     */

    var isTimeStampFrame = function isTimeStampFrame(frame) {
      return frame && frame.key === 'PRIV' && frame.info === 'com.apple.streaming.transportStreamTimestamp';
    };

    var getFrameData = function getFrameData(data) {
      /*
      Frame ID       $xx xx xx xx (four characters)
      Size           $xx xx xx xx
      Flags          $xx xx
      */
      var type = String.fromCharCode(data[0], data[1], data[2], data[3]);
      var size = readSize(data, 4); // skip frame id, size, and flags

      var offset = 10;
      return {
        type: type,
        size: size,
        data: data.subarray(offset, offset + size)
      };
    };
    /**
     * Returns an array of ID3 frames found in all the ID3 tags in the id3Data
     * @param {Uint8Array} id3Data - The ID3 data containing one or more ID3 tags
     * @return {ID3.Frame[]} - Array of ID3 frame objects
     */


    var getID3Frames = function getID3Frames(id3Data) {
      var offset = 0;
      var frames = [];

      while (isHeader(id3Data, offset)) {
        var size = readSize(id3Data, offset + 6); // skip past ID3 header

        offset += 10;
        var end = offset + size; // loop through frames in the ID3 tag

        while (offset + 8 < end) {
          var frameData = getFrameData(id3Data.subarray(offset));
          var frame = decodeFrame(frameData);

          if (frame) {
            frames.push(frame);
          } // skip frame header and frame data


          offset += frameData.size + 10;
        }

        if (isFooter(id3Data, offset)) {
          offset += 10;
        }
      }

      return frames;
    };
    var decodeFrame = function decodeFrame(frame) {
      if (frame.type === 'PRIV') {
        return decodePrivFrame(frame);
      } else if (frame.type[0] === 'W') {
        return decodeURLFrame(frame);
      }

      return decodeTextFrame(frame);
    };

    var decodePrivFrame = function decodePrivFrame(frame) {
      /*
      Format: <text string>\0<binary data>
      */
      if (frame.size < 2) {
        return undefined;
      }

      var owner = utf8ArrayToStr(frame.data, true);
      var privateData = new Uint8Array(frame.data.subarray(owner.length + 1));
      return {
        key: frame.type,
        info: owner,
        data: privateData.buffer
      };
    };

    var decodeTextFrame = function decodeTextFrame(frame) {
      if (frame.size < 2) {
        return undefined;
      }

      if (frame.type === 'TXXX') {
        /*
        Format:
        [0]   = {Text Encoding}
        [1-?] = {Description}\0{Value}
        */
        var index = 1;
        var description = utf8ArrayToStr(frame.data.subarray(index), true);
        index += description.length + 1;
        var value = utf8ArrayToStr(frame.data.subarray(index));
        return {
          key: frame.type,
          info: description,
          data: value
        };
      }
      /*
      Format:
      [0]   = {Text Encoding}
      [1-?] = {Value}
      */


      var text = utf8ArrayToStr(frame.data.subarray(1));
      return {
        key: frame.type,
        data: text
      };
    };

    var decodeURLFrame = function decodeURLFrame(frame) {
      if (frame.type === 'WXXX') {
        /*
        Format:
        [0]   = {Text Encoding}
        [1-?] = {Description}\0{URL}
        */
        if (frame.size < 2) {
          return undefined;
        }

        var index = 1;
        var description = utf8ArrayToStr(frame.data.subarray(index), true);
        index += description.length + 1;
        var value = utf8ArrayToStr(frame.data.subarray(index));
        return {
          key: frame.type,
          info: description,
          data: value
        };
      }
      /*
      Format:
      [0-?] = {URL}
      */


      var url = utf8ArrayToStr(frame.data);
      return {
        key: frame.type,
        data: url
      };
    };

    var readTimeStamp = function readTimeStamp(timeStampFrame) {
      if (timeStampFrame.data.byteLength === 8) {
        var data = new Uint8Array(timeStampFrame.data); // timestamp is 33 bit expressed as a big-endian eight-octet number,
        // with the upper 31 bits set to zero.

        var pts33Bit = data[3] & 0x1;
        var timestamp = (data[4] << 23) + (data[5] << 15) + (data[6] << 7) + data[7];
        timestamp /= 45;

        if (pts33Bit) {
          timestamp += 47721858.84;
        } // 2^32 / 90


        return Math.round(timestamp);
      }

      return undefined;
    }; // http://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript/22373197
    // http://www.onicos.com/staff/iz/amuse/javascript/expert/utf.txt

    /* utf.js - UTF-8 <=> UTF-16 convertion
     *
     * Copyright (C) 1999 Masanao Izumo <iz@onicos.co.jp>
     * Version: 1.0
     * LastModified: Dec 25 1999
     * This library is free.  You can redistribute it and/or modify it.
     */


    var utf8ArrayToStr = function utf8ArrayToStr(array, exitOnNull) {
      if (exitOnNull === void 0) {
        exitOnNull = false;
      }

      var decoder = getTextDecoder();

      if (decoder) {
        var decoded = decoder.decode(array);

        if (exitOnNull) {
          // grab up to the first null
          var idx = decoded.indexOf('\0');
          return idx !== -1 ? decoded.substring(0, idx) : decoded;
        } // remove any null characters


        return decoded.replace(/\0/g, '');
      }

      var len = array.length;
      var c;
      var char2;
      var char3;
      var out = '';
      var i = 0;

      while (i < len) {
        c = array[i++];

        if (c === 0x00 && exitOnNull) {
          return out;
        } else if (c === 0x00 || c === 0x03) {
          // If the character is 3 (END_OF_TEXT) or 0 (NULL) then skip it
          continue;
        }

        switch (c >> 4) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
            // 0xxxxxxx
            out += String.fromCharCode(c);
            break;

          case 12:
          case 13:
            // 110x xxxx   10xx xxxx
            char2 = array[i++];
            out += String.fromCharCode((c & 0x1f) << 6 | char2 & 0x3f);
            break;

          case 14:
            // 1110 xxxx  10xx xxxx  10xx xxxx
            char2 = array[i++];
            char3 = array[i++];
            out += String.fromCharCode((c & 0x0f) << 12 | (char2 & 0x3f) << 6 | (char3 & 0x3f) << 0);
            break;
        }
      }

      return out;
    };
    var testables = {
      decodeTextFrame: decodeTextFrame
    };
    var decoder;

    function getTextDecoder() {
      if (!decoder && typeof self.TextDecoder !== 'undefined') {
        decoder = new self.TextDecoder('utf-8');
      }

      return decoder;
    }

    /***/ }),

    /***/ "./src/demux/mp3demuxer.ts":
    /*!*********************************!*\
      !*** ./src/demux/mp3demuxer.ts ***!
      \*********************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony import */ var _base_audio_demuxer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base-audio-demuxer */ "./src/demux/base-audio-demuxer.ts");
    /* harmony import */ var _demux_id3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../demux/id3 */ "./src/demux/id3.ts");
    /* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/logger */ "./src/utils/logger.ts");
    /* harmony import */ var _mpegaudio__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mpegaudio */ "./src/demux/mpegaudio.ts");
    function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    /**
     * MP3 demuxer
     */





    var MP3Demuxer = /*#__PURE__*/function (_BaseAudioDemuxer) {
      _inheritsLoose(MP3Demuxer, _BaseAudioDemuxer);

      function MP3Demuxer() {
        return _BaseAudioDemuxer.apply(this, arguments) || this;
      }

      var _proto = MP3Demuxer.prototype;

      _proto.resetInitSegment = function resetInitSegment(audioCodec, videoCodec, duration) {
        _BaseAudioDemuxer.prototype.resetInitSegment.call(this, audioCodec, videoCodec, duration);

        this._audioTrack = {
          container: 'audio/mpeg',
          type: 'audio',
          id: 0,
          pid: -1,
          sequenceNumber: 0,
          isAAC: false,
          samples: [],
          manifestCodec: audioCodec,
          duration: duration,
          inputTimeScale: 90000,
          dropped: 0
        };
      };

      MP3Demuxer.probe = function probe(data) {
        if (!data) {
          return false;
        } // check if data contains ID3 timestamp and MPEG sync word
        // Look for MPEG header | 1111 1111 | 111X XYZX | where X can be either 0 or 1 and Y or Z should be 1
        // Layer bits (position 14 and 15) in header should be always different from 0 (Layer I or Layer II or Layer III)
        // More info http://www.mp3-tech.org/programmer/frame_header.html


        var id3Data = _demux_id3__WEBPACK_IMPORTED_MODULE_1__["getID3Data"](data, 0) || [];
        var offset = id3Data.length;

        for (var length = data.length; offset < length; offset++) {
          if (_mpegaudio__WEBPACK_IMPORTED_MODULE_3__["probe"](data, offset)) {
            _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].log('MPEG Audio sync word found !');
            return true;
          }
        }

        return false;
      };

      _proto.canParse = function canParse(data, offset) {
        return _mpegaudio__WEBPACK_IMPORTED_MODULE_3__["canParse"](data, offset);
      };

      _proto.appendFrame = function appendFrame(track, data, offset) {
        if (this.initPTS === null) {
          return;
        }

        return _mpegaudio__WEBPACK_IMPORTED_MODULE_3__["appendFrame"](track, data, offset, this.initPTS, this.frameIndex);
      };

      return MP3Demuxer;
    }(_base_audio_demuxer__WEBPACK_IMPORTED_MODULE_0__["default"]);

    MP3Demuxer.minProbeByteLength = 4;
    /* harmony default export */ __webpack_exports__["default"] = (MP3Demuxer);

    /***/ }),

    /***/ "./src/demux/mp4demuxer.ts":
    /*!*********************************!*\
      !*** ./src/demux/mp4demuxer.ts ***!
      \*********************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony import */ var _utils_mp4_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/mp4-tools */ "./src/utils/mp4-tools.ts");
    /* harmony import */ var _dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dummy-demuxed-track */ "./src/demux/dummy-demuxed-track.ts");
    /**
     * MP4 demuxer
     */



    var MP4Demuxer = /*#__PURE__*/function () {
      function MP4Demuxer(observer, config) {
        this.remainderData = null;
        this.config = void 0;
        this.config = config;
      }

      var _proto = MP4Demuxer.prototype;

      _proto.resetTimeStamp = function resetTimeStamp() {};

      _proto.resetInitSegment = function resetInitSegment() {};

      _proto.resetContiguity = function resetContiguity() {};

      MP4Demuxer.probe = function probe(data) {
        // ensure we find a moof box in the first 16 kB
        return Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_0__["findBox"])({
          data: data,
          start: 0,
          end: Math.min(data.length, 16384)
        }, ['moof']).length > 0;
      };

      _proto.demux = function demux(data) {
        // Load all data into the avc track. The CMAF remuxer will look for the data in the samples object; the rest of the fields do not matter
        var avcSamples = data;
        var avcTrack = Object(_dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_1__["dummyTrack"])();

        if (this.config.progressive) {
          // Split the bytestream into two ranges: one encompassing all data up until the start of the last moof, and everything else.
          // This is done to guarantee that we're sending valid data to MSE - when demuxing progressively, we have no guarantee
          // that the fetch loader gives us flush moof+mdat pairs. If we push jagged data to MSE, it will throw an exception.
          if (this.remainderData) {
            avcSamples = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_0__["appendUint8Array"])(this.remainderData, data);
          }

          var segmentedData = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_0__["segmentValidRange"])(avcSamples);
          this.remainderData = segmentedData.remainder;
          avcTrack.samples = segmentedData.valid || new Uint8Array();
        } else {
          avcTrack.samples = avcSamples;
        }

        return {
          audioTrack: Object(_dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_1__["dummyTrack"])(),
          avcTrack: avcTrack,
          id3Track: Object(_dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_1__["dummyTrack"])(),
          textTrack: Object(_dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_1__["dummyTrack"])()
        };
      };

      _proto.flush = function flush() {
        var avcTrack = Object(_dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_1__["dummyTrack"])();
        avcTrack.samples = this.remainderData || new Uint8Array();
        this.remainderData = null;
        return {
          audioTrack: Object(_dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_1__["dummyTrack"])(),
          avcTrack: avcTrack,
          id3Track: Object(_dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_1__["dummyTrack"])(),
          textTrack: Object(_dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_1__["dummyTrack"])()
        };
      };

      _proto.demuxSampleAes = function demuxSampleAes(data, keyData, timeOffset) {
        return Promise.reject(new Error('The MP4 demuxer does not support SAMPLE-AES decryption'));
      };

      _proto.destroy = function destroy() {};

      return MP4Demuxer;
    }();

    MP4Demuxer.minProbeByteLength = 1024;
    /* harmony default export */ __webpack_exports__["default"] = (MP4Demuxer);

    /***/ }),

    /***/ "./src/demux/mpegaudio.ts":
    /*!********************************!*\
      !*** ./src/demux/mpegaudio.ts ***!
      \********************************/
    /*! exports provided: appendFrame, parseHeader, isHeaderPattern, isHeader, canParse, probe */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "appendFrame", function() { return appendFrame; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseHeader", function() { return parseHeader; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isHeaderPattern", function() { return isHeaderPattern; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isHeader", function() { return isHeader; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "canParse", function() { return canParse; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "probe", function() { return probe; });
    /**
     *  MPEG parser helper
     */
    var chromeVersion = null;
    var BitratesMap = [32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 32, 48, 56, 64, 80, 96, 112, 128, 144, 160, 176, 192, 224, 256, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160];
    var SamplingRateMap = [44100, 48000, 32000, 22050, 24000, 16000, 11025, 12000, 8000];
    var SamplesCoefficients = [// MPEG 2.5
    [0, // Reserved
    72, // Layer3
    144, // Layer2
    12 // Layer1
    ], // Reserved
    [0, // Reserved
    0, // Layer3
    0, // Layer2
    0 // Layer1
    ], // MPEG 2
    [0, // Reserved
    72, // Layer3
    144, // Layer2
    12 // Layer1
    ], // MPEG 1
    [0, // Reserved
    144, // Layer3
    144, // Layer2
    12 // Layer1
    ]];
    var BytesInSlot = [0, // Reserved
    1, // Layer3
    1, // Layer2
    4 // Layer1
    ];
    function appendFrame(track, data, offset, pts, frameIndex) {
      // Using http://www.datavoyage.com/mpgscript/mpeghdr.htm as a reference
      if (offset + 24 > data.length) {
        return;
      }

      var header = parseHeader(data, offset);

      if (header && offset + header.frameLength <= data.length) {
        var frameDuration = header.samplesPerFrame * 90000 / header.sampleRate;
        var stamp = pts + frameIndex * frameDuration;
        var sample = {
          unit: data.subarray(offset, offset + header.frameLength),
          pts: stamp,
          dts: stamp
        };
        track.config = [];
        track.channelCount = header.channelCount;
        track.samplerate = header.sampleRate;
        track.samples.push(sample);
        return {
          sample: sample,
          length: header.frameLength,
          missing: 0
        };
      }
    }
    function parseHeader(data, offset) {
      var mpegVersion = data[offset + 1] >> 3 & 3;
      var mpegLayer = data[offset + 1] >> 1 & 3;
      var bitRateIndex = data[offset + 2] >> 4 & 15;
      var sampleRateIndex = data[offset + 2] >> 2 & 3;

      if (mpegVersion !== 1 && bitRateIndex !== 0 && bitRateIndex !== 15 && sampleRateIndex !== 3) {
        var paddingBit = data[offset + 2] >> 1 & 1;
        var channelMode = data[offset + 3] >> 6;
        var columnInBitrates = mpegVersion === 3 ? 3 - mpegLayer : mpegLayer === 3 ? 3 : 4;
        var bitRate = BitratesMap[columnInBitrates * 14 + bitRateIndex - 1] * 1000;
        var columnInSampleRates = mpegVersion === 3 ? 0 : mpegVersion === 2 ? 1 : 2;
        var sampleRate = SamplingRateMap[columnInSampleRates * 3 + sampleRateIndex];
        var channelCount = channelMode === 3 ? 1 : 2; // If bits of channel mode are `11` then it is a single channel (Mono)

        var sampleCoefficient = SamplesCoefficients[mpegVersion][mpegLayer];
        var bytesInSlot = BytesInSlot[mpegLayer];
        var samplesPerFrame = sampleCoefficient * 8 * bytesInSlot;
        var frameLength = Math.floor(sampleCoefficient * bitRate / sampleRate + paddingBit) * bytesInSlot;

        if (chromeVersion === null) {
          var userAgent = navigator.userAgent || '';
          var result = userAgent.match(/Chrome\/(\d+)/i);
          chromeVersion = result ? parseInt(result[1]) : 0;
        }

        var needChromeFix = !!chromeVersion && chromeVersion <= 87;

        if (needChromeFix && mpegLayer === 2 && bitRate >= 224000 && channelMode === 0) {
          // Work around bug in Chromium by setting channelMode to dual-channel (01) instead of stereo (00)
          data[offset + 3] = data[offset + 3] | 0x80;
        }

        return {
          sampleRate: sampleRate,
          channelCount: channelCount,
          frameLength: frameLength,
          samplesPerFrame: samplesPerFrame
        };
      }
    }
    function isHeaderPattern(data, offset) {
      return data[offset] === 0xff && (data[offset + 1] & 0xe0) === 0xe0 && (data[offset + 1] & 0x06) !== 0x00;
    }
    function isHeader(data, offset) {
      // Look for MPEG header | 1111 1111 | 111X XYZX | where X can be either 0 or 1 and Y or Z should be 1
      // Layer bits (position 14 and 15) in header should be always different from 0 (Layer I or Layer II or Layer III)
      // More info http://www.mp3-tech.org/programmer/frame_header.html
      return offset + 1 < data.length && isHeaderPattern(data, offset);
    }
    function canParse(data, offset) {
      var headerSize = 4;
      return isHeaderPattern(data, offset) && headerSize <= data.length - offset;
    }
    function probe(data, offset) {
      // same as isHeader but we also check that MPEG frame follows last MPEG frame
      // or end of data is reached
      if (offset + 1 < data.length && isHeaderPattern(data, offset)) {
        // MPEG header Length
        var headerLength = 4; // MPEG frame Length

        var header = parseHeader(data, offset);
        var frameLength = headerLength;

        if (header !== null && header !== void 0 && header.frameLength) {
          frameLength = header.frameLength;
        }

        var newOffset = offset + frameLength;
        return newOffset === data.length || isHeader(data, newOffset);
      }

      return false;
    }

    /***/ }),

    /***/ "./src/demux/sample-aes.ts":
    /*!*********************************!*\
      !*** ./src/demux/sample-aes.ts ***!
      \*********************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony import */ var _crypt_decrypter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../crypt/decrypter */ "./src/crypt/decrypter.ts");
    /* harmony import */ var _tsdemuxer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tsdemuxer */ "./src/demux/tsdemuxer.ts");
    /**
     * SAMPLE-AES decrypter
     */



    var SampleAesDecrypter = /*#__PURE__*/function () {
      function SampleAesDecrypter(observer, config, keyData) {
        this.keyData = void 0;
        this.decrypter = void 0;
        this.keyData = keyData;
        this.decrypter = new _crypt_decrypter__WEBPACK_IMPORTED_MODULE_0__["default"](observer, config, {
          removePKCS7Padding: false
        });
      }

      var _proto = SampleAesDecrypter.prototype;

      _proto.decryptBuffer = function decryptBuffer(encryptedData, callback) {
        this.decrypter.decrypt(encryptedData, this.keyData.key.buffer, this.keyData.iv.buffer, callback);
      } // AAC - encrypt all full 16 bytes blocks starting from offset 16
      ;

      _proto.decryptAacSample = function decryptAacSample(samples, sampleIndex, callback, sync) {
        var curUnit = samples[sampleIndex].unit;
        var encryptedData = curUnit.subarray(16, curUnit.length - curUnit.length % 16);
        var encryptedBuffer = encryptedData.buffer.slice(encryptedData.byteOffset, encryptedData.byteOffset + encryptedData.length);
        var localthis = this;
        this.decryptBuffer(encryptedBuffer, function (decryptedBuffer) {
          var decryptedData = new Uint8Array(decryptedBuffer);
          curUnit.set(decryptedData, 16);

          if (!sync) {
            localthis.decryptAacSamples(samples, sampleIndex + 1, callback);
          }
        });
      };

      _proto.decryptAacSamples = function decryptAacSamples(samples, sampleIndex, callback) {
        for (;; sampleIndex++) {
          if (sampleIndex >= samples.length) {
            callback();
            return;
          }

          if (samples[sampleIndex].unit.length < 32) {
            continue;
          }

          var sync = this.decrypter.isSync();
          this.decryptAacSample(samples, sampleIndex, callback, sync);

          if (!sync) {
            return;
          }
        }
      } // AVC - encrypt one 16 bytes block out of ten, starting from offset 32
      ;

      _proto.getAvcEncryptedData = function getAvcEncryptedData(decodedData) {
        var encryptedDataLen = Math.floor((decodedData.length - 48) / 160) * 16 + 16;
        var encryptedData = new Int8Array(encryptedDataLen);
        var outputPos = 0;

        for (var inputPos = 32; inputPos <= decodedData.length - 16; inputPos += 160, outputPos += 16) {
          encryptedData.set(decodedData.subarray(inputPos, inputPos + 16), outputPos);
        }

        return encryptedData;
      };

      _proto.getAvcDecryptedUnit = function getAvcDecryptedUnit(decodedData, decryptedData) {
        var uint8DecryptedData = new Uint8Array(decryptedData);
        var inputPos = 0;

        for (var outputPos = 32; outputPos <= decodedData.length - 16; outputPos += 160, inputPos += 16) {
          decodedData.set(uint8DecryptedData.subarray(inputPos, inputPos + 16), outputPos);
        }

        return decodedData;
      };

      _proto.decryptAvcSample = function decryptAvcSample(samples, sampleIndex, unitIndex, callback, curUnit, sync) {
        var decodedData = Object(_tsdemuxer__WEBPACK_IMPORTED_MODULE_1__["discardEPB"])(curUnit.data);
        var encryptedData = this.getAvcEncryptedData(decodedData);
        var localthis = this;
        this.decryptBuffer(encryptedData.buffer, function (decryptedBuffer) {
          curUnit.data = localthis.getAvcDecryptedUnit(decodedData, decryptedBuffer);

          if (!sync) {
            localthis.decryptAvcSamples(samples, sampleIndex, unitIndex + 1, callback);
          }
        });
      };

      _proto.decryptAvcSamples = function decryptAvcSamples(samples, sampleIndex, unitIndex, callback) {
        if (samples instanceof Uint8Array) {
          throw new Error('Cannot decrypt samples of type Uint8Array');
        }

        for (;; sampleIndex++, unitIndex = 0) {
          if (sampleIndex >= samples.length) {
            callback();
            return;
          }

          var curUnits = samples[sampleIndex].units;

          for (;; unitIndex++) {
            if (unitIndex >= curUnits.length) {
              break;
            }

            var curUnit = curUnits[unitIndex];

            if (curUnit.data.length <= 48 || curUnit.type !== 1 && curUnit.type !== 5) {
              continue;
            }

            var sync = this.decrypter.isSync();
            this.decryptAvcSample(samples, sampleIndex, unitIndex, callback, curUnit, sync);

            if (!sync) {
              return;
            }
          }
        }
      };

      return SampleAesDecrypter;
    }();

    /* harmony default export */ __webpack_exports__["default"] = (SampleAesDecrypter);

    /***/ }),

    /***/ "./src/demux/transmuxer-interface.ts":
    /*!*******************************************!*\
      !*** ./src/demux/transmuxer-interface.ts ***!
      \*******************************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return TransmuxerInterface; });
    /* harmony import */ var webworkify_webpack__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webworkify-webpack */ "./node_modules/webworkify-webpack/index.js");
    /* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./src/events.ts");
    /* harmony import */ var _demux_transmuxer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../demux/transmuxer */ "./src/demux/transmuxer.ts");
    /* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/logger */ "./src/utils/logger.ts");
    /* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../errors */ "./src/errors.ts");
    /* harmony import */ var _utils_mediasource_helper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/mediasource-helper */ "./src/utils/mediasource-helper.ts");
    /* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! eventemitter3 */ "./node_modules/eventemitter3/index.js");







    var MediaSource = Object(_utils_mediasource_helper__WEBPACK_IMPORTED_MODULE_5__["getMediaSource"])() || {
      isTypeSupported: function isTypeSupported() {
        return false;
      }
    };

    var TransmuxerInterface = /*#__PURE__*/function () {
      function TransmuxerInterface(hls, id, onTransmuxComplete, onFlush) {
        var _this = this;

        this.hls = void 0;
        this.id = void 0;
        this.observer = void 0;
        this.frag = null;
        this.part = null;
        this.worker = void 0;
        this.onwmsg = void 0;
        this.transmuxer = null;
        this.onTransmuxComplete = void 0;
        this.onFlush = void 0;
        this.hls = hls;
        this.id = id;
        this.onTransmuxComplete = onTransmuxComplete;
        this.onFlush = onFlush;
        var config = hls.config;

        var forwardMessage = function forwardMessage(ev, data) {
          data = data || {};
          data.frag = _this.frag;
          data.id = _this.id;
          hls.trigger(ev, data);
        }; // forward events to main thread


        this.observer = new eventemitter3__WEBPACK_IMPORTED_MODULE_6__["EventEmitter"]();
        this.observer.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_DECRYPTED, forwardMessage);
        this.observer.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].ERROR, forwardMessage);
        var typeSupported = {
          mp4: MediaSource.isTypeSupported('video/mp4'),
          mpeg: MediaSource.isTypeSupported('audio/mpeg'),
          mp3: MediaSource.isTypeSupported('audio/mp4; codecs="mp3"')
        }; // navigator.vendor is not always available in Web Worker
        // refer to https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/navigator

        var vendor = navigator.vendor;

        if (config.enableWorker && typeof Worker !== 'undefined') {
          _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].log('demuxing in webworker');
          var worker;

          try {
            worker = this.worker = webworkify_webpack__WEBPACK_IMPORTED_MODULE_0__(/*require.resolve*/(/*! ../demux/transmuxer-worker.ts */ "./src/demux/transmuxer-worker.ts"));
            this.onwmsg = this.onWorkerMessage.bind(this);
            worker.addEventListener('message', this.onwmsg);

            worker.onerror = function (event) {
              hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].ERROR, {
                type: _errors__WEBPACK_IMPORTED_MODULE_4__["ErrorTypes"].OTHER_ERROR,
                details: _errors__WEBPACK_IMPORTED_MODULE_4__["ErrorDetails"].INTERNAL_EXCEPTION,
                fatal: true,
                event: 'demuxerWorker',
                error: new Error(event.message + "  (" + event.filename + ":" + event.lineno + ")")
              });
            };

            worker.postMessage({
              cmd: 'init',
              typeSupported: typeSupported,
              vendor: vendor,
              id: id,
              config: JSON.stringify(config)
            });
          } catch (err) {
            _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].warn('Error in worker:', err);
            _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].error('Error while initializing DemuxerWorker, fallback to inline');

            if (worker) {
              // revoke the Object URL that was used to create transmuxer worker, so as not to leak it
              self.URL.revokeObjectURL(worker.objectURL);
            }

            this.transmuxer = new _demux_transmuxer__WEBPACK_IMPORTED_MODULE_2__["default"](this.observer, typeSupported, config, vendor, id);
            this.worker = null;
          }
        } else {
          this.transmuxer = new _demux_transmuxer__WEBPACK_IMPORTED_MODULE_2__["default"](this.observer, typeSupported, config, vendor, id);
        }
      }

      var _proto = TransmuxerInterface.prototype;

      _proto.destroy = function destroy() {
        var w = this.worker;

        if (w) {
          w.removeEventListener('message', this.onwmsg);
          w.terminate();
          this.worker = null;
        } else {
          var transmuxer = this.transmuxer;

          if (transmuxer) {
            transmuxer.destroy();
            this.transmuxer = null;
          }
        }

        var observer = this.observer;

        if (observer) {
          observer.removeAllListeners();
        } // @ts-ignore


        this.observer = null;
      };

      _proto.push = function push(data, initSegmentData, audioCodec, videoCodec, frag, part, duration, accurateTimeOffset, chunkMeta, defaultInitPTS) {
        var _this2 = this;

        chunkMeta.transmuxing.start = self.performance.now();
        var transmuxer = this.transmuxer,
            worker = this.worker;
        var timeOffset = part ? part.start : frag.start;
        var decryptdata = frag.decryptdata;
        var lastFrag = this.frag;
        var discontinuity = !(lastFrag && frag.cc === lastFrag.cc);
        var trackSwitch = !(lastFrag && chunkMeta.level === lastFrag.level);
        var snDiff = lastFrag ? chunkMeta.sn - lastFrag.sn : -1;
        var partDiff = this.part ? chunkMeta.part - this.part.index : 1;
        var contiguous = !trackSwitch && (snDiff === 1 || snDiff === 0 && partDiff === 1);
        var now = self.performance.now();

        if (trackSwitch || snDiff || frag.stats.parsing.start === 0) {
          frag.stats.parsing.start = now;
        }

        if (part && (partDiff || !contiguous)) {
          part.stats.parsing.start = now;
        }

        var state = new _demux_transmuxer__WEBPACK_IMPORTED_MODULE_2__["TransmuxState"](discontinuity, contiguous, accurateTimeOffset, trackSwitch, timeOffset);

        if (!contiguous || discontinuity) {
          _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].log("[transmuxer-interface, " + frag.type + "]: Starting new transmux session for sn: " + chunkMeta.sn + " p: " + chunkMeta.part + " level: " + chunkMeta.level + " id: " + chunkMeta.id + "\n        discontinuity: " + discontinuity + "\n        trackSwitch: " + trackSwitch + "\n        contiguous: " + contiguous + "\n        accurateTimeOffset: " + accurateTimeOffset + "\n        timeOffset: " + timeOffset);
          var config = new _demux_transmuxer__WEBPACK_IMPORTED_MODULE_2__["TransmuxConfig"](audioCodec, videoCodec, initSegmentData, duration, defaultInitPTS);
          this.configureTransmuxer(config);
        }

        this.frag = frag;
        this.part = part; // Frags with sn of 'initSegment' are not transmuxed

        if (worker) {
          // post fragment payload as transferable objects for ArrayBuffer (no copy)
          worker.postMessage({
            cmd: 'demux',
            data: data,
            decryptdata: decryptdata,
            chunkMeta: chunkMeta,
            state: state
          }, data instanceof ArrayBuffer ? [data] : []);
        } else if (transmuxer) {
          var _transmuxResult = transmuxer.push(data, decryptdata, chunkMeta, state);

          if (Object(_demux_transmuxer__WEBPACK_IMPORTED_MODULE_2__["isPromise"])(_transmuxResult)) {
            _transmuxResult.then(function (data) {
              _this2.handleTransmuxComplete(data);
            });
          } else {
            this.handleTransmuxComplete(_transmuxResult);
          }
        }
      };

      _proto.flush = function flush(chunkMeta) {
        var _this3 = this;

        chunkMeta.transmuxing.start = self.performance.now();
        var transmuxer = this.transmuxer,
            worker = this.worker;

        if (worker) {
          worker.postMessage({
            cmd: 'flush',
            chunkMeta: chunkMeta
          });
        } else if (transmuxer) {
          var _transmuxResult2 = transmuxer.flush(chunkMeta);

          if (Object(_demux_transmuxer__WEBPACK_IMPORTED_MODULE_2__["isPromise"])(_transmuxResult2)) {
            _transmuxResult2.then(function (data) {
              _this3.handleFlushResult(data, chunkMeta);
            });
          } else {
            this.handleFlushResult(_transmuxResult2, chunkMeta);
          }
        }
      };

      _proto.handleFlushResult = function handleFlushResult(results, chunkMeta) {
        var _this4 = this;

        results.forEach(function (result) {
          _this4.handleTransmuxComplete(result);
        });
        this.onFlush(chunkMeta);
      };

      _proto.onWorkerMessage = function onWorkerMessage(ev) {
        var data = ev.data;
        var hls = this.hls;

        switch (data.event) {
          case 'init':
            {
              // revoke the Object URL that was used to create transmuxer worker, so as not to leak it
              self.URL.revokeObjectURL(this.worker.objectURL);
              break;
            }

          case 'transmuxComplete':
            {
              this.handleTransmuxComplete(data.data);
              break;
            }

          case 'flush':
            {
              this.onFlush(data.data);
              break;
            }

          /* falls through */

          default:
            {
              data.data = data.data || {};
              data.data.frag = this.frag;
              data.data.id = this.id;
              hls.trigger(data.event, data.data);
              break;
            }
        }
      };

      _proto.configureTransmuxer = function configureTransmuxer(config) {
        var worker = this.worker,
            transmuxer = this.transmuxer;

        if (worker) {
          worker.postMessage({
            cmd: 'configure',
            config: config
          });
        } else if (transmuxer) {
          transmuxer.configure(config);
        }
      };

      _proto.handleTransmuxComplete = function handleTransmuxComplete(result) {
        result.chunkMeta.transmuxing.end = self.performance.now();
        this.onTransmuxComplete(result);
      };

      return TransmuxerInterface;
    }();



    /***/ }),

    /***/ "./src/demux/transmuxer-worker.ts":
    /*!****************************************!*\
      !*** ./src/demux/transmuxer-worker.ts ***!
      \****************************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return TransmuxerWorker; });
    /* harmony import */ var _demux_transmuxer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../demux/transmuxer */ "./src/demux/transmuxer.ts");
    /* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./src/events.ts");
    /* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/logger */ "./src/utils/logger.ts");
    /* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! eventemitter3 */ "./node_modules/eventemitter3/index.js");




    function TransmuxerWorker(self) {
      var observer = new eventemitter3__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();

      var forwardMessage = function forwardMessage(ev, data) {
        self.postMessage({
          event: ev,
          data: data
        });
      }; // forward events to main thread


      observer.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].FRAG_DECRYPTED, forwardMessage);
      observer.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].ERROR, forwardMessage);
      self.addEventListener('message', function (ev) {
        var data = ev.data;

        switch (data.cmd) {
          case 'init':
            {
              var config = JSON.parse(data.config);
              self.transmuxer = new _demux_transmuxer__WEBPACK_IMPORTED_MODULE_0__["default"](observer, data.typeSupported, config, data.vendor, data.id);
              Object(_utils_logger__WEBPACK_IMPORTED_MODULE_2__["enableLogs"])(config.debug);
              forwardMessage('init', null);
              break;
            }

          case 'configure':
            {
              self.transmuxer.configure(data.config);
              break;
            }

          case 'demux':
            {
              var transmuxResult = self.transmuxer.push(data.data, data.decryptdata, data.chunkMeta, data.state);

              if (Object(_demux_transmuxer__WEBPACK_IMPORTED_MODULE_0__["isPromise"])(transmuxResult)) {
                transmuxResult.then(function (data) {
                  emitTransmuxComplete(self, data);
                });
              } else {
                emitTransmuxComplete(self, transmuxResult);
              }

              break;
            }

          case 'flush':
            {
              var id = data.chunkMeta;

              var _transmuxResult = self.transmuxer.flush(id);

              if (Object(_demux_transmuxer__WEBPACK_IMPORTED_MODULE_0__["isPromise"])(_transmuxResult)) {
                _transmuxResult.then(function (results) {
                  handleFlushResult(self, results, id);
                });
              } else {
                handleFlushResult(self, _transmuxResult, id);
              }

              break;
            }
        }
      });
    }

    function emitTransmuxComplete(self, transmuxResult) {
      if (isEmptyResult(transmuxResult.remuxResult)) {
        return;
      }

      var transferable = [];
      var _transmuxResult$remux = transmuxResult.remuxResult,
          audio = _transmuxResult$remux.audio,
          video = _transmuxResult$remux.video;

      if (audio) {
        addToTransferable(transferable, audio);
      }

      if (video) {
        addToTransferable(transferable, video);
      }

      self.postMessage({
        event: 'transmuxComplete',
        data: transmuxResult
      }, transferable);
    } // Converts data to a transferable object https://developers.google.com/web/updates/2011/12/Transferable-Objects-Lightning-Fast)
    // in order to minimize message passing overhead


    function addToTransferable(transferable, track) {
      if (track.data1) {
        transferable.push(track.data1.buffer);
      }

      if (track.data2) {
        transferable.push(track.data2.buffer);
      }
    }

    function handleFlushResult(self, results, chunkMeta) {
      results.forEach(function (result) {
        emitTransmuxComplete(self, result);
      });
      self.postMessage({
        event: 'flush',
        data: chunkMeta
      });
    }

    function isEmptyResult(remuxResult) {
      return !remuxResult.audio && !remuxResult.video && !remuxResult.text && !remuxResult.id3 && !remuxResult.initSegment;
    }

    /***/ }),

    /***/ "./src/demux/transmuxer.ts":
    /*!*********************************!*\
      !*** ./src/demux/transmuxer.ts ***!
      \*********************************/
    /*! exports provided: default, isPromise, TransmuxConfig, TransmuxState */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Transmuxer; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPromise", function() { return isPromise; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TransmuxConfig", function() { return TransmuxConfig; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TransmuxState", function() { return TransmuxState; });
    /* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./src/events.ts");
    /* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors */ "./src/errors.ts");
    /* harmony import */ var _crypt_decrypter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../crypt/decrypter */ "./src/crypt/decrypter.ts");
    /* harmony import */ var _demux_aacdemuxer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../demux/aacdemuxer */ "./src/demux/aacdemuxer.ts");
    /* harmony import */ var _demux_mp4demuxer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../demux/mp4demuxer */ "./src/demux/mp4demuxer.ts");
    /* harmony import */ var _demux_tsdemuxer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../demux/tsdemuxer */ "./src/demux/tsdemuxer.ts");
    /* harmony import */ var _demux_mp3demuxer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../demux/mp3demuxer */ "./src/demux/mp3demuxer.ts");
    /* harmony import */ var _remux_mp4_remuxer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../remux/mp4-remuxer */ "./src/remux/mp4-remuxer.ts");
    /* harmony import */ var _remux_passthrough_remuxer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../remux/passthrough-remuxer */ "./src/remux/passthrough-remuxer.ts");
    /* harmony import */ var _chunk_cache__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./chunk-cache */ "./src/demux/chunk-cache.ts");
    /* harmony import */ var _utils_mp4_tools__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/mp4-tools */ "./src/utils/mp4-tools.ts");
    /* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../utils/logger */ "./src/utils/logger.ts");












    var now; // performance.now() not available on WebWorker, at least on Safari Desktop

    try {
      now = self.performance.now.bind(self.performance);
    } catch (err) {
      _utils_logger__WEBPACK_IMPORTED_MODULE_11__["logger"].debug('Unable to use Performance API on this environment');
      now = self.Date.now;
    }

    var muxConfig = [{
      demux: _demux_tsdemuxer__WEBPACK_IMPORTED_MODULE_5__["default"],
      remux: _remux_mp4_remuxer__WEBPACK_IMPORTED_MODULE_7__["default"]
    }, {
      demux: _demux_mp4demuxer__WEBPACK_IMPORTED_MODULE_4__["default"],
      remux: _remux_passthrough_remuxer__WEBPACK_IMPORTED_MODULE_8__["default"]
    }, {
      demux: _demux_aacdemuxer__WEBPACK_IMPORTED_MODULE_3__["default"],
      remux: _remux_mp4_remuxer__WEBPACK_IMPORTED_MODULE_7__["default"]
    }, {
      demux: _demux_mp3demuxer__WEBPACK_IMPORTED_MODULE_6__["default"],
      remux: _remux_mp4_remuxer__WEBPACK_IMPORTED_MODULE_7__["default"]
    }];
    var minProbeByteLength = 1024;
    muxConfig.forEach(function (_ref) {
      var demux = _ref.demux;
      minProbeByteLength = Math.max(minProbeByteLength, demux.minProbeByteLength);
    });

    var Transmuxer = /*#__PURE__*/function () {
      function Transmuxer(observer, typeSupported, config, vendor, id) {
        this.observer = void 0;
        this.typeSupported = void 0;
        this.config = void 0;
        this.vendor = void 0;
        this.id = void 0;
        this.demuxer = void 0;
        this.remuxer = void 0;
        this.decrypter = void 0;
        this.probe = void 0;
        this.decryptionPromise = null;
        this.transmuxConfig = void 0;
        this.currentTransmuxState = void 0;
        this.cache = new _chunk_cache__WEBPACK_IMPORTED_MODULE_9__["default"]();
        this.observer = observer;
        this.typeSupported = typeSupported;
        this.config = config;
        this.vendor = vendor;
        this.id = id;
      }

      var _proto = Transmuxer.prototype;

      _proto.configure = function configure(transmuxConfig) {
        this.transmuxConfig = transmuxConfig;

        if (this.decrypter) {
          this.decrypter.reset();
        }
      };

      _proto.push = function push(data, decryptdata, chunkMeta, state) {
        var _this = this;

        var stats = chunkMeta.transmuxing;
        stats.executeStart = now();
        var uintData = new Uint8Array(data);
        var cache = this.cache,
            config = this.config,
            currentTransmuxState = this.currentTransmuxState,
            transmuxConfig = this.transmuxConfig;

        if (state) {
          this.currentTransmuxState = state;
        }

        var keyData = getEncryptionType(uintData, decryptdata);

        if (keyData && keyData.method === 'AES-128') {
          var decrypter = this.getDecrypter(); // Software decryption is synchronous; webCrypto is not

          if (config.enableSoftwareAES) {
            // Software decryption is progressive. Progressive decryption may not return a result on each call. Any cached
            // data is handled in the flush() call
            var decryptedData = decrypter.softwareDecrypt(uintData, keyData.key.buffer, keyData.iv.buffer);

            if (!decryptedData) {
              stats.executeEnd = now();
              return emptyResult(chunkMeta);
            }

            uintData = new Uint8Array(decryptedData);
          } else {
            this.decryptionPromise = decrypter.webCryptoDecrypt(uintData, keyData.key.buffer, keyData.iv.buffer).then(function (decryptedData) {
              // Calling push here is important; if flush() is called while this is still resolving, this ensures that
              // the decrypted data has been transmuxed
              var result = _this.push(decryptedData, null, chunkMeta);

              _this.decryptionPromise = null;
              return result;
            });
            return this.decryptionPromise;
          }
        }

        var _ref2 = state || currentTransmuxState,
            contiguous = _ref2.contiguous,
            discontinuity = _ref2.discontinuity,
            trackSwitch = _ref2.trackSwitch,
            accurateTimeOffset = _ref2.accurateTimeOffset,
            timeOffset = _ref2.timeOffset;

        var audioCodec = transmuxConfig.audioCodec,
            videoCodec = transmuxConfig.videoCodec,
            defaultInitPts = transmuxConfig.defaultInitPts,
            duration = transmuxConfig.duration,
            initSegmentData = transmuxConfig.initSegmentData; // Reset muxers before probing to ensure that their state is clean, even if flushing occurs before a successful probe

        if (discontinuity || trackSwitch) {
          this.resetInitSegment(initSegmentData, audioCodec, videoCodec, duration);
        }

        if (discontinuity) {
          this.resetInitialTimestamp(defaultInitPts);
        }

        if (!contiguous) {
          this.resetContiguity();
        }

        if (this.needsProbing(uintData, discontinuity, trackSwitch)) {
          if (cache.dataLength) {
            var cachedData = cache.flush();
            uintData = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_10__["appendUint8Array"])(cachedData, uintData);
          }

          this.configureTransmuxer(uintData, transmuxConfig);
        }

        var result = this.transmux(uintData, keyData, timeOffset, accurateTimeOffset, chunkMeta);
        var currentState = this.currentTransmuxState;
        currentState.contiguous = true;
        currentState.discontinuity = false;
        currentState.trackSwitch = false;
        stats.executeEnd = now();
        return result;
      } // Due to data caching, flush calls can produce more than one TransmuxerResult (hence the Array type)
      ;

      _proto.flush = function flush(chunkMeta) {
        var _this2 = this;

        var stats = chunkMeta.transmuxing;
        stats.executeStart = now();
        var decrypter = this.decrypter,
            cache = this.cache,
            currentTransmuxState = this.currentTransmuxState,
            decryptionPromise = this.decryptionPromise;

        if (decryptionPromise) {
          // Upon resolution, the decryption promise calls push() and returns its TransmuxerResult up the stack. Therefore
          // only flushing is required for async decryption
          return decryptionPromise.then(function () {
            return _this2.flush(chunkMeta);
          });
        }

        var transmuxResults = [];
        var timeOffset = currentTransmuxState.timeOffset;

        if (decrypter) {
          // The decrypter may have data cached, which needs to be demuxed. In this case we'll have two TransmuxResults
          // This happens in the case that we receive only 1 push call for a segment (either for non-progressive downloads,
          // or for progressive downloads with small segments)
          var decryptedData = decrypter.flush();

          if (decryptedData) {
            // Push always returns a TransmuxerResult if decryptdata is null
            transmuxResults.push(this.push(decryptedData, null, chunkMeta));
          }
        }

        var bytesSeen = cache.dataLength;
        cache.reset();
        var demuxer = this.demuxer,
            remuxer = this.remuxer;

        if (!demuxer || !remuxer) {
          // If probing failed, and each demuxer saw enough bytes to be able to probe, then Hls.js has been given content its not able to handle
          if (bytesSeen >= minProbeByteLength) {
            this.observer.emit(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, _events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, {
              type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].MEDIA_ERROR,
              details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].FRAG_PARSING_ERROR,
              fatal: true,
              reason: 'no demux matching with content found'
            });
          }

          stats.executeEnd = now();
          return [emptyResult(chunkMeta)];
        }

        var demuxResultOrPromise = demuxer.flush(timeOffset);

        if (isPromise(demuxResultOrPromise)) {
          // Decrypt final SAMPLE-AES samples
          return demuxResultOrPromise.then(function (demuxResult) {
            _this2.flushRemux(transmuxResults, demuxResult, chunkMeta);

            return transmuxResults;
          });
        }

        this.flushRemux(transmuxResults, demuxResultOrPromise, chunkMeta);
        return transmuxResults;
      };

      _proto.flushRemux = function flushRemux(transmuxResults, demuxResult, chunkMeta) {
        var audioTrack = demuxResult.audioTrack,
            avcTrack = demuxResult.avcTrack,
            id3Track = demuxResult.id3Track,
            textTrack = demuxResult.textTrack;
        var _this$currentTransmux = this.currentTransmuxState,
            accurateTimeOffset = _this$currentTransmux.accurateTimeOffset,
            timeOffset = _this$currentTransmux.timeOffset;
        _utils_logger__WEBPACK_IMPORTED_MODULE_11__["logger"].log("[transmuxer.ts]: Flushed fragment " + chunkMeta.sn + (chunkMeta.part > -1 ? ' p: ' + chunkMeta.part : '') + " of level " + chunkMeta.level);
        var remuxResult = this.remuxer.remux(audioTrack, avcTrack, id3Track, textTrack, timeOffset, accurateTimeOffset, true, this.id);
        transmuxResults.push({
          remuxResult: remuxResult,
          chunkMeta: chunkMeta
        });
        chunkMeta.transmuxing.executeEnd = now();
      };

      _proto.resetInitialTimestamp = function resetInitialTimestamp(defaultInitPts) {
        var demuxer = this.demuxer,
            remuxer = this.remuxer;

        if (!demuxer || !remuxer) {
          return;
        }

        demuxer.resetTimeStamp(defaultInitPts);
        remuxer.resetTimeStamp(defaultInitPts);
      };

      _proto.resetContiguity = function resetContiguity() {
        var demuxer = this.demuxer,
            remuxer = this.remuxer;

        if (!demuxer || !remuxer) {
          return;
        }

        demuxer.resetContiguity();
        remuxer.resetNextTimestamp();
      };

      _proto.resetInitSegment = function resetInitSegment(initSegmentData, audioCodec, videoCodec, duration) {
        var demuxer = this.demuxer,
            remuxer = this.remuxer;

        if (!demuxer || !remuxer) {
          return;
        }

        demuxer.resetInitSegment(audioCodec, videoCodec, duration);
        remuxer.resetInitSegment(initSegmentData, audioCodec, videoCodec);
      };

      _proto.destroy = function destroy() {
        if (this.demuxer) {
          this.demuxer.destroy();
          this.demuxer = undefined;
        }

        if (this.remuxer) {
          this.remuxer.destroy();
          this.remuxer = undefined;
        }
      };

      _proto.transmux = function transmux(data, keyData, timeOffset, accurateTimeOffset, chunkMeta) {
        var result;

        if (keyData && keyData.method === 'SAMPLE-AES') {
          result = this.transmuxSampleAes(data, keyData, timeOffset, accurateTimeOffset, chunkMeta);
        } else {
          result = this.transmuxUnencrypted(data, timeOffset, accurateTimeOffset, chunkMeta);
        }

        return result;
      };

      _proto.transmuxUnencrypted = function transmuxUnencrypted(data, timeOffset, accurateTimeOffset, chunkMeta) {
        var _demux = this.demuxer.demux(data, timeOffset, false, !this.config.progressive),
            audioTrack = _demux.audioTrack,
            avcTrack = _demux.avcTrack,
            id3Track = _demux.id3Track,
            textTrack = _demux.textTrack;

        var remuxResult = this.remuxer.remux(audioTrack, avcTrack, id3Track, textTrack, timeOffset, accurateTimeOffset, false, this.id);
        return {
          remuxResult: remuxResult,
          chunkMeta: chunkMeta
        };
      };

      _proto.transmuxSampleAes = function transmuxSampleAes(data, decryptData, timeOffset, accurateTimeOffset, chunkMeta) {
        var _this3 = this;

        return this.demuxer.demuxSampleAes(data, decryptData, timeOffset).then(function (demuxResult) {
          var remuxResult = _this3.remuxer.remux(demuxResult.audioTrack, demuxResult.avcTrack, demuxResult.id3Track, demuxResult.textTrack, timeOffset, accurateTimeOffset, false, _this3.id);

          return {
            remuxResult: remuxResult,
            chunkMeta: chunkMeta
          };
        });
      };

      _proto.configureTransmuxer = function configureTransmuxer(data, transmuxConfig) {
        var config = this.config,
            observer = this.observer,
            typeSupported = this.typeSupported,
            vendor = this.vendor;
        var audioCodec = transmuxConfig.audioCodec,
            defaultInitPts = transmuxConfig.defaultInitPts,
            duration = transmuxConfig.duration,
            initSegmentData = transmuxConfig.initSegmentData,
            videoCodec = transmuxConfig.videoCodec; // probe for content type

        var mux;

        for (var i = 0, len = muxConfig.length; i < len; i++) {
          if (muxConfig[i].demux.probe(data)) {
            mux = muxConfig[i];
            break;
          }
        }

        if (!mux) {
          // If probing previous configs fail, use mp4 passthrough
          _utils_logger__WEBPACK_IMPORTED_MODULE_11__["logger"].warn('Failed to find demuxer by probing frag, treating as mp4 passthrough');
          mux = {
            demux: _demux_mp4demuxer__WEBPACK_IMPORTED_MODULE_4__["default"],
            remux: _remux_passthrough_remuxer__WEBPACK_IMPORTED_MODULE_8__["default"]
          };
        } // so let's check that current remuxer and demuxer are still valid


        var demuxer = this.demuxer;
        var remuxer = this.remuxer;
        var Remuxer = mux.remux;
        var Demuxer = mux.demux;

        if (!remuxer || !(remuxer instanceof Remuxer)) {
          this.remuxer = new Remuxer(observer, config, typeSupported, vendor);
        }

        if (!demuxer || !(demuxer instanceof Demuxer)) {
          this.demuxer = new Demuxer(observer, config, typeSupported);
          this.probe = Demuxer.probe;
        } // Ensure that muxers are always initialized with an initSegment


        this.resetInitSegment(initSegmentData, audioCodec, videoCodec, duration);
        this.resetInitialTimestamp(defaultInitPts);
      };

      _proto.needsProbing = function needsProbing(data, discontinuity, trackSwitch) {
        // in case of continuity change, or track switch
        // we might switch from content type (AAC container to TS container, or TS to fmp4 for example)
        return !this.demuxer || !this.remuxer || discontinuity || trackSwitch;
      };

      _proto.getDecrypter = function getDecrypter() {
        var decrypter = this.decrypter;

        if (!decrypter) {
          decrypter = this.decrypter = new _crypt_decrypter__WEBPACK_IMPORTED_MODULE_2__["default"](this.observer, this.config);
        }

        return decrypter;
      };

      return Transmuxer;
    }();



    function getEncryptionType(data, decryptData) {
      var encryptionType = null;

      if (data.byteLength > 0 && decryptData != null && decryptData.key != null && decryptData.iv !== null && decryptData.method != null) {
        encryptionType = decryptData;
      }

      return encryptionType;
    }

    var emptyResult = function emptyResult(chunkMeta) {
      return {
        remuxResult: {},
        chunkMeta: chunkMeta
      };
    };

    function isPromise(p) {
      return 'then' in p && p.then instanceof Function;
    }
    var TransmuxConfig = function TransmuxConfig(audioCodec, videoCodec, initSegmentData, duration, defaultInitPts) {
      this.audioCodec = void 0;
      this.videoCodec = void 0;
      this.initSegmentData = void 0;
      this.duration = void 0;
      this.defaultInitPts = void 0;
      this.audioCodec = audioCodec;
      this.videoCodec = videoCodec;
      this.initSegmentData = initSegmentData;
      this.duration = duration;
      this.defaultInitPts = defaultInitPts;
    };
    var TransmuxState = function TransmuxState(discontinuity, contiguous, accurateTimeOffset, trackSwitch, timeOffset) {
      this.discontinuity = void 0;
      this.contiguous = void 0;
      this.accurateTimeOffset = void 0;
      this.trackSwitch = void 0;
      this.timeOffset = void 0;
      this.discontinuity = discontinuity;
      this.contiguous = contiguous;
      this.accurateTimeOffset = accurateTimeOffset;
      this.trackSwitch = trackSwitch;
      this.timeOffset = timeOffset;
    };

    /***/ }),

    /***/ "./src/demux/tsdemuxer.ts":
    /*!********************************!*\
      !*** ./src/demux/tsdemuxer.ts ***!
      \********************************/
    /*! exports provided: discardEPB, default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "discardEPB", function() { return discardEPB; });
    /* harmony import */ var _adts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./adts */ "./src/demux/adts.ts");
    /* harmony import */ var _mpegaudio__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mpegaudio */ "./src/demux/mpegaudio.ts");
    /* harmony import */ var _exp_golomb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./exp-golomb */ "./src/demux/exp-golomb.ts");
    /* harmony import */ var _id3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./id3 */ "./src/demux/id3.ts");
    /* harmony import */ var _sample_aes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sample-aes */ "./src/demux/sample-aes.ts");
    /* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../events */ "./src/events.ts");
    /* harmony import */ var _utils_mp4_tools__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/mp4-tools */ "./src/utils/mp4-tools.ts");
    /* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/logger */ "./src/utils/logger.ts");
    /* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../errors */ "./src/errors.ts");
    /**
     * highly optimized TS demuxer:
     * parse PAT, PMT
     * extract PES packet from audio and video PIDs
     * extract AVC/H264 NAL units and AAC/ADTS samples from PES packet
     * trigger the remuxer upon parsing completion
     * it also tries to workaround as best as it can audio codec switch (HE-AAC to AAC and vice versa), without having to restart the MediaSource.
     * it also controls the remuxing process :
     * upon discontinuity or level switch detection, it will also notifies the remuxer so that it can reset its state.
     */









    // We are using fixed track IDs for driving the MP4 remuxer
    // instead of following the TS PIDs.
    // There is no reason not to do this and some browsers/SourceBuffer-demuxers
    // may not like if there are TrackID "switches"
    // See https://github.com/video-dev/hls.js/issues/1331
    // Here we are mapping our internal track types to constant MP4 track IDs
    // With MSE currently one can only have one track of each, and we are muxing
    // whatever video/audio rendition in them.
    var RemuxerTrackIdConfig = {
      video: 1,
      audio: 2,
      id3: 3,
      text: 4
    };

    var TSDemuxer = /*#__PURE__*/function () {
      function TSDemuxer(observer, config, typeSupported) {
        this.observer = void 0;
        this.config = void 0;
        this.typeSupported = void 0;
        this.sampleAes = null;
        this.pmtParsed = false;
        this.audioCodec = void 0;
        this.videoCodec = void 0;
        this._duration = 0;
        this.aacLastPTS = null;
        this._initPTS = null;
        this._initDTS = null;
        this._pmtId = -1;
        this._avcTrack = void 0;
        this._audioTrack = void 0;
        this._id3Track = void 0;
        this._txtTrack = void 0;
        this.aacOverFlow = null;
        this.avcSample = null;
        this.remainderData = null;
        this.observer = observer;
        this.config = config;
        this.typeSupported = typeSupported;
      }

      TSDemuxer.probe = function probe(data) {
        var syncOffset = TSDemuxer.syncOffset(data);

        if (syncOffset < 0) {
          return false;
        } else {
          if (syncOffset) {
            _utils_logger__WEBPACK_IMPORTED_MODULE_7__["logger"].warn("MPEG2-TS detected but first sync word found @ offset " + syncOffset + ", junk ahead ?");
          }

          return true;
        }
      };

      TSDemuxer.syncOffset = function syncOffset(data) {
        // scan 1000 first bytes
        var scanwindow = Math.min(1000, data.length - 3 * 188);
        var i = 0;

        while (i < scanwindow) {
          // a TS fragment should contain at least 3 TS packets, a PAT, a PMT, and one PID, each starting with 0x47
          if (data[i] === 0x47 && data[i + 188] === 0x47 && data[i + 2 * 188] === 0x47) {
            return i;
          } else {
            i++;
          }
        }

        return -1;
      }
      /**
       * Creates a track model internal to demuxer used to drive remuxing input
       *
       * @param type 'audio' | 'video' | 'id3' | 'text'
       * @param duration
       * @return TSDemuxer's internal track model
       */
      ;

      TSDemuxer.createTrack = function createTrack(type, duration) {
        return {
          container: type === 'video' || type === 'audio' ? 'video/mp2t' : undefined,
          type: type,
          id: RemuxerTrackIdConfig[type],
          pid: -1,
          inputTimeScale: 90000,
          sequenceNumber: 0,
          samples: [],
          dropped: 0,
          duration: type === 'audio' ? duration : undefined
        };
      }
      /**
       * Initializes a new init segment on the demuxer/remuxer interface. Needed for discontinuities/track-switches (or at stream start)
       * Resets all internal track instances of the demuxer.
       */
      ;

      var _proto = TSDemuxer.prototype;

      _proto.resetInitSegment = function resetInitSegment(audioCodec, videoCodec, duration) {
        this.pmtParsed = false;
        this._pmtId = -1;
        this._avcTrack = TSDemuxer.createTrack('video', duration);
        this._audioTrack = TSDemuxer.createTrack('audio', duration);
        this._id3Track = TSDemuxer.createTrack('id3', duration);
        this._txtTrack = TSDemuxer.createTrack('text', duration);
        this._audioTrack.isAAC = true; // flush any partial content

        this.aacOverFlow = null;
        this.aacLastPTS = null;
        this.avcSample = null;
        this.audioCodec = audioCodec;
        this.videoCodec = videoCodec;
        this._duration = duration;
      };

      _proto.resetTimeStamp = function resetTimeStamp() {};

      _proto.resetContiguity = function resetContiguity() {
        var _audioTrack = this._audioTrack,
            _avcTrack = this._avcTrack,
            _id3Track = this._id3Track;

        if (_audioTrack) {
          _audioTrack.pesData = null;
        }

        if (_avcTrack) {
          _avcTrack.pesData = null;
        }

        if (_id3Track) {
          _id3Track.pesData = null;
        }

        this.aacOverFlow = null;
        this.aacLastPTS = null;
      };

      _proto.demux = function demux(data, timeOffset, isSampleAes, flush) {
        if (isSampleAes === void 0) {
          isSampleAes = false;
        }

        if (flush === void 0) {
          flush = false;
        }

        if (!isSampleAes) {
          this.sampleAes = null;
        }

        var pes;
        var avcTrack = this._avcTrack;
        var audioTrack = this._audioTrack;
        var id3Track = this._id3Track;
        var avcId = avcTrack.pid;
        var avcData = avcTrack.pesData;
        var audioId = audioTrack.pid;
        var id3Id = id3Track.pid;
        var audioData = audioTrack.pesData;
        var id3Data = id3Track.pesData;
        var unknownPIDs = false;
        var pmtParsed = this.pmtParsed;
        var pmtId = this._pmtId;
        var len = data.length;

        if (this.remainderData) {
          data = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_6__["appendUint8Array"])(this.remainderData, data);
          len = data.length;
          this.remainderData = null;
        }

        if (len < 188 && !flush) {
          this.remainderData = data;
          return {
            audioTrack: audioTrack,
            avcTrack: avcTrack,
            id3Track: id3Track,
            textTrack: this._txtTrack
          };
        }

        var syncOffset = Math.max(0, TSDemuxer.syncOffset(data));
        len -= (len + syncOffset) % 188;

        if (len < data.byteLength && !flush) {
          this.remainderData = new Uint8Array(data.buffer, len, data.buffer.byteLength - len);
        } // loop through TS packets


        for (var start = syncOffset; start < len; start += 188) {
          if (data[start] === 0x47) {
            var stt = !!(data[start + 1] & 0x40); // pid is a 13-bit field starting at the last bit of TS[1]

            var pid = ((data[start + 1] & 0x1f) << 8) + data[start + 2];
            var atf = (data[start + 3] & 0x30) >> 4; // if an adaption field is present, its length is specified by the fifth byte of the TS packet header.

            var offset = void 0;

            if (atf > 1) {
              offset = start + 5 + data[start + 4]; // continue if there is only adaptation field

              if (offset === start + 188) {
                continue;
              }
            } else {
              offset = start + 4;
            }

            switch (pid) {
              case avcId:
                if (stt) {
                  if (avcData && (pes = parsePES(avcData))) {
                    this.parseAVCPES(pes, false);
                  }

                  avcData = {
                    data: [],
                    size: 0
                  };
                }

                if (avcData) {
                  avcData.data.push(data.subarray(offset, start + 188));
                  avcData.size += start + 188 - offset;
                }

                break;

              case audioId:
                if (stt) {
                  if (audioData && (pes = parsePES(audioData))) {
                    if (audioTrack.isAAC) {
                      this.parseAACPES(pes);
                    } else {
                      this.parseMPEGPES(pes);
                    }
                  }

                  audioData = {
                    data: [],
                    size: 0
                  };
                }

                if (audioData) {
                  audioData.data.push(data.subarray(offset, start + 188));
                  audioData.size += start + 188 - offset;
                }

                break;

              case id3Id:
                if (stt) {
                  if (id3Data && (pes = parsePES(id3Data))) {
                    this.parseID3PES(pes);
                  }

                  id3Data = {
                    data: [],
                    size: 0
                  };
                }

                if (id3Data) {
                  id3Data.data.push(data.subarray(offset, start + 188));
                  id3Data.size += start + 188 - offset;
                }

                break;

              case 0:
                if (stt) {
                  offset += data[offset] + 1;
                }

                pmtId = this._pmtId = parsePAT(data, offset);
                break;

              case pmtId:
                {
                  if (stt) {
                    offset += data[offset] + 1;
                  }

                  var parsedPIDs = parsePMT(data, offset, this.typeSupported.mpeg === true || this.typeSupported.mp3 === true, isSampleAes); // only update track id if track PID found while parsing PMT
                  // this is to avoid resetting the PID to -1 in case
                  // track PID transiently disappears from the stream
                  // this could happen in case of transient missing audio samples for example
                  // NOTE this is only the PID of the track as found in TS,
                  // but we are not using this for MP4 track IDs.

                  avcId = parsedPIDs.avc;

                  if (avcId > 0) {
                    avcTrack.pid = avcId;
                  }

                  audioId = parsedPIDs.audio;

                  if (audioId > 0) {
                    audioTrack.pid = audioId;
                    audioTrack.isAAC = parsedPIDs.isAAC;
                  }

                  id3Id = parsedPIDs.id3;

                  if (id3Id > 0) {
                    id3Track.pid = id3Id;
                  }

                  if (unknownPIDs && !pmtParsed) {
                    _utils_logger__WEBPACK_IMPORTED_MODULE_7__["logger"].log('reparse from beginning');
                    unknownPIDs = false; // we set it to -188, the += 188 in the for loop will reset start to 0

                    start = syncOffset - 188;
                  }

                  pmtParsed = this.pmtParsed = true;
                  break;
                }

              case 17:
              case 0x1fff:
                break;

              default:
                unknownPIDs = true;
                break;
            }
          } else {
            this.observer.emit(_events__WEBPACK_IMPORTED_MODULE_5__["Events"].ERROR, _events__WEBPACK_IMPORTED_MODULE_5__["Events"].ERROR, {
              type: _errors__WEBPACK_IMPORTED_MODULE_8__["ErrorTypes"].MEDIA_ERROR,
              details: _errors__WEBPACK_IMPORTED_MODULE_8__["ErrorDetails"].FRAG_PARSING_ERROR,
              fatal: false,
              reason: 'TS packet did not start with 0x47'
            });
          }
        }

        avcTrack.pesData = avcData;
        audioTrack.pesData = audioData;
        id3Track.pesData = id3Data;
        var demuxResult = {
          audioTrack: audioTrack,
          avcTrack: avcTrack,
          id3Track: id3Track,
          textTrack: this._txtTrack
        };

        if (flush) {
          this.extractRemainingSamples(demuxResult);
        }

        return demuxResult;
      };

      _proto.flush = function flush() {
        var remainderData = this.remainderData;
        this.remainderData = null;
        var result;

        if (remainderData) {
          result = this.demux(remainderData, -1, false, true);
        } else {
          result = {
            audioTrack: this._audioTrack,
            avcTrack: this._avcTrack,
            textTrack: this._txtTrack,
            id3Track: this._id3Track
          };
        }

        this.extractRemainingSamples(result);

        if (this.sampleAes) {
          return this.decrypt(result, this.sampleAes);
        }

        return result;
      };

      _proto.extractRemainingSamples = function extractRemainingSamples(demuxResult) {
        var audioTrack = demuxResult.audioTrack,
            avcTrack = demuxResult.avcTrack,
            id3Track = demuxResult.id3Track;
        var avcData = avcTrack.pesData;
        var audioData = audioTrack.pesData;
        var id3Data = id3Track.pesData; // try to parse last PES packets

        var pes;

        if (avcData && (pes = parsePES(avcData))) {
          this.parseAVCPES(pes, true);
          avcTrack.pesData = null;
        } else {
          // either avcData null or PES truncated, keep it for next frag parsing
          avcTrack.pesData = avcData;
        }

        if (audioData && (pes = parsePES(audioData))) {
          if (audioTrack.isAAC) {
            this.parseAACPES(pes);
          } else {
            this.parseMPEGPES(pes);
          }

          audioTrack.pesData = null;
        } else {
          if (audioData !== null && audioData !== void 0 && audioData.size) {
            _utils_logger__WEBPACK_IMPORTED_MODULE_7__["logger"].log('last AAC PES packet truncated,might overlap between fragments');
          } // either audioData null or PES truncated, keep it for next frag parsing


          audioTrack.pesData = audioData;
        }

        if (id3Data && (pes = parsePES(id3Data))) {
          this.parseID3PES(pes);
          id3Track.pesData = null;
        } else {
          // either id3Data null or PES truncated, keep it for next frag parsing
          id3Track.pesData = id3Data;
        }
      };

      _proto.demuxSampleAes = function demuxSampleAes(data, keyData, timeOffset) {
        var demuxResult = this.demux(data, timeOffset, true, !this.config.progressive);
        var sampleAes = this.sampleAes = new _sample_aes__WEBPACK_IMPORTED_MODULE_4__["default"](this.observer, this.config, keyData);
        return this.decrypt(demuxResult, sampleAes);
      };

      _proto.decrypt = function decrypt(demuxResult, sampleAes) {
        return new Promise(function (resolve) {
          var audioTrack = demuxResult.audioTrack,
              avcTrack = demuxResult.avcTrack;

          if (audioTrack.samples && audioTrack.isAAC) {
            sampleAes.decryptAacSamples(audioTrack.samples, 0, function () {
              if (avcTrack.samples) {
                sampleAes.decryptAvcSamples(avcTrack.samples, 0, 0, function () {
                  resolve(demuxResult);
                });
              } else {
                resolve(demuxResult);
              }
            });
          } else if (avcTrack.samples) {
            sampleAes.decryptAvcSamples(avcTrack.samples, 0, 0, function () {
              resolve(demuxResult);
            });
          }
        });
      };

      _proto.destroy = function destroy() {
        this._initPTS = this._initDTS = null;
        this._duration = 0;
      };

      _proto.parseAVCPES = function parseAVCPES(pes, last) {
        var _this = this;

        var track = this._avcTrack;
        var units = this.parseAVCNALu(pes.data);
        var avcSample = this.avcSample;
        var push;
        var spsfound = false; // free pes.data to save up some memory

        pes.data = null; // if new NAL units found and last sample still there, let's push ...
        // this helps parsing streams with missing AUD (only do this if AUD never found)

        if (avcSample && units.length && !track.audFound) {
          pushAccessUnit(avcSample, track);
          avcSample = this.avcSample = createAVCSample(false, pes.pts, pes.dts, '');
        }

        units.forEach(function (unit) {
          switch (unit.type) {
            // NDR
            case 1:
              {
                push = true;

                if (!avcSample) {
                  avcSample = _this.avcSample = createAVCSample(true, pes.pts, pes.dts, '');
                }

                avcSample.frame = true;
                var data = unit.data; // only check slice type to detect KF in case SPS found in same packet (any keyframe is preceded by SPS ...)

                if (spsfound && data.length > 4) {
                  // retrieve slice type by parsing beginning of NAL unit (follow H264 spec, slice_header definition) to detect keyframe embedded in NDR
                  var sliceType = new _exp_golomb__WEBPACK_IMPORTED_MODULE_2__["default"](data).readSliceType(); // 2 : I slice, 4 : SI slice, 7 : I slice, 9: SI slice
                  // SI slice : A slice that is coded using intra prediction only and using quantisation of the prediction samples.
                  // An SI slice can be coded such that its decoded samples can be constructed identically to an SP slice.
                  // I slice: A slice that is not an SI slice that is decoded using intra prediction only.
                  // if (sliceType === 2 || sliceType === 7) {

                  if (sliceType === 2 || sliceType === 4 || sliceType === 7 || sliceType === 9) {
                    avcSample.key = true;
                  }
                }

                break; // IDR
              }

            case 5:
              push = true; // handle PES not starting with AUD

              if (!avcSample) {
                avcSample = _this.avcSample = createAVCSample(true, pes.pts, pes.dts, '');
              }

              avcSample.key = true;
              avcSample.frame = true;
              break;
            // SEI

            case 6:
              {
                push = true;

                var expGolombDecoder = new _exp_golomb__WEBPACK_IMPORTED_MODULE_2__["default"](discardEPB(unit.data)); // skip frameType

                expGolombDecoder.readUByte();
                var payloadType = 0;
                var payloadSize = 0;
                var endOfCaptions = false;
                var b = 0;

                while (!endOfCaptions && expGolombDecoder.bytesAvailable > 1) {
                  payloadType = 0;

                  do {
                    b = expGolombDecoder.readUByte();
                    payloadType += b;
                  } while (b === 0xff); // Parse payload size.


                  payloadSize = 0;

                  do {
                    b = expGolombDecoder.readUByte();
                    payloadSize += b;
                  } while (b === 0xff); // TODO: there can be more than one payload in an SEI packet...
                  // TODO: need to read type and size in a while loop to get them all


                  if (payloadType === 4 && expGolombDecoder.bytesAvailable !== 0) {
                    endOfCaptions = true;
                    var countryCode = expGolombDecoder.readUByte();

                    if (countryCode === 181) {
                      var providerCode = expGolombDecoder.readUShort();

                      if (providerCode === 49) {
                        var userStructure = expGolombDecoder.readUInt();

                        if (userStructure === 0x47413934) {
                          var userDataType = expGolombDecoder.readUByte(); // Raw CEA-608 bytes wrapped in CEA-708 packet

                          if (userDataType === 3) {
                            var firstByte = expGolombDecoder.readUByte();
                            var secondByte = expGolombDecoder.readUByte();
                            var totalCCs = 31 & firstByte;
                            var byteArray = [firstByte, secondByte];

                            for (var i = 0; i < totalCCs; i++) {
                              // 3 bytes per CC
                              byteArray.push(expGolombDecoder.readUByte());
                              byteArray.push(expGolombDecoder.readUByte());
                              byteArray.push(expGolombDecoder.readUByte());
                            }

                            insertSampleInOrder(_this._txtTrack.samples, {
                              type: 3,
                              pts: pes.pts,
                              bytes: byteArray
                            });
                          }
                        }
                      }
                    }
                  } else if (payloadType === 5 && expGolombDecoder.bytesAvailable !== 0) {
                    endOfCaptions = true;

                    if (payloadSize > 16) {
                      var uuidStrArray = [];

                      for (var _i = 0; _i < 16; _i++) {
                        uuidStrArray.push(expGolombDecoder.readUByte().toString(16));

                        if (_i === 3 || _i === 5 || _i === 7 || _i === 9) {
                          uuidStrArray.push('-');
                        }
                      }

                      var length = payloadSize - 16;
                      var userDataPayloadBytes = new Uint8Array(length);

                      for (var _i2 = 0; _i2 < length; _i2++) {
                        userDataPayloadBytes[_i2] = expGolombDecoder.readUByte();
                      }

                      insertSampleInOrder(_this._txtTrack.samples, {
                        pts: pes.pts,
                        payloadType: payloadType,
                        uuid: uuidStrArray.join(''),
                        userData: Object(_id3__WEBPACK_IMPORTED_MODULE_3__["utf8ArrayToStr"])(userDataPayloadBytes),
                        userDataBytes: userDataPayloadBytes
                      });
                    }
                  } else if (payloadSize < expGolombDecoder.bytesAvailable) {
                    for (var _i3 = 0; _i3 < payloadSize; _i3++) {
                      expGolombDecoder.readUByte();
                    }
                  }
                }

                break; // SPS
              }

            case 7:
              push = true;
              spsfound = true;

              if (!track.sps) {
                var _expGolombDecoder = new _exp_golomb__WEBPACK_IMPORTED_MODULE_2__["default"](unit.data);

                var config = _expGolombDecoder.readSPS();

                track.width = config.width;
                track.height = config.height;
                track.pixelRatio = config.pixelRatio; // TODO: `track.sps` is defined as a `number[]`, but we're setting it to a `Uint8Array[]`.

                track.sps = [unit.data];
                track.duration = _this._duration;
                var codecarray = unit.data.subarray(1, 4);
                var codecstring = 'avc1.';

                for (var _i4 = 0; _i4 < 3; _i4++) {
                  var h = codecarray[_i4].toString(16);

                  if (h.length < 2) {
                    h = '0' + h;
                  }

                  codecstring += h;
                }

                track.codec = codecstring;
              }

              break;
            // PPS

            case 8:
              push = true;

              if (!track.pps) {
                // TODO: `track.pss` is defined as a `number[]`, but we're setting it to a `Uint8Array[]`.
                track.pps = [unit.data];
              }

              break;
            // AUD

            case 9:
              push = false;
              track.audFound = true;

              if (avcSample) {
                pushAccessUnit(avcSample, track);
              }

              avcSample = _this.avcSample = createAVCSample(false, pes.pts, pes.dts, '');
              break;
            // Filler Data

            case 12:
              push = false;
              break;

            default:
              push = false;

              if (avcSample) {
                avcSample.debug += 'unknown NAL ' + unit.type + ' ';
              }

              break;
          }

          if (avcSample && push) {
            var _units = avcSample.units;

            _units.push(unit);
          }
        }); // if last PES packet, push samples

        if (last && avcSample) {
          pushAccessUnit(avcSample, track);
          this.avcSample = null;
        }
      };

      _proto.getLastNalUnit = function getLastNalUnit() {
        var _avcSample;

        var avcSample = this.avcSample;
        var lastUnit; // try to fallback to previous sample if current one is empty

        if (!avcSample || avcSample.units.length === 0) {
          var samples = this._avcTrack.samples;
          avcSample = samples[samples.length - 1];
        }

        if ((_avcSample = avcSample) !== null && _avcSample !== void 0 && _avcSample.units) {
          var units = avcSample.units;
          lastUnit = units[units.length - 1];
        }

        return lastUnit;
      };

      _proto.parseAVCNALu = function parseAVCNALu(array) {
        var len = array.byteLength;
        var track = this._avcTrack;
        var state = track.naluState || 0;
        var lastState = state;
        var units = [];
        var i = 0;
        var value;
        var overflow;
        var unitType;
        var lastUnitStart = -1;
        var lastUnitType = 0; // logger.log('PES:' + Hex.hexDump(array));

        if (state === -1) {
          // special use case where we found 3 or 4-byte start codes exactly at the end of previous PES packet
          lastUnitStart = 0; // NALu type is value read from offset 0

          lastUnitType = array[0] & 0x1f;
          state = 0;
          i = 1;
        }

        while (i < len) {
          value = array[i++]; // optimization. state 0 and 1 are the predominant case. let's handle them outside of the switch/case

          if (!state) {
            state = value ? 0 : 1;
            continue;
          }

          if (state === 1) {
            state = value ? 0 : 2;
            continue;
          } // here we have state either equal to 2 or 3


          if (!value) {
            state = 3;
          } else if (value === 1) {
            if (lastUnitStart >= 0) {
              var unit = {
                data: array.subarray(lastUnitStart, i - state - 1),
                type: lastUnitType
              }; // logger.log('pushing NALU, type/size:' + unit.type + '/' + unit.data.byteLength);

              units.push(unit);
            } else {
              // lastUnitStart is undefined => this is the first start code found in this PES packet
              // first check if start code delimiter is overlapping between 2 PES packets,
              // ie it started in last packet (lastState not zero)
              // and ended at the beginning of this PES packet (i <= 4 - lastState)
              var lastUnit = this.getLastNalUnit();

              if (lastUnit) {
                if (lastState && i <= 4 - lastState) {
                  // start delimiter overlapping between PES packets
                  // strip start delimiter bytes from the end of last NAL unit
                  // check if lastUnit had a state different from zero
                  if (lastUnit.state) {
                    // strip last bytes
                    lastUnit.data = lastUnit.data.subarray(0, lastUnit.data.byteLength - lastState);
                  }
                } // If NAL units are not starting right at the beginning of the PES packet, push preceding data into previous NAL unit.


                overflow = i - state - 1;

                if (overflow > 0) {
                  // logger.log('first NALU found with overflow:' + overflow);
                  var tmp = new Uint8Array(lastUnit.data.byteLength + overflow);
                  tmp.set(lastUnit.data, 0);
                  tmp.set(array.subarray(0, overflow), lastUnit.data.byteLength);
                  lastUnit.data = tmp;
                }
              }
            } // check if we can read unit type


            if (i < len) {
              unitType = array[i] & 0x1f; // logger.log('find NALU @ offset:' + i + ',type:' + unitType);

              lastUnitStart = i;
              lastUnitType = unitType;
              state = 0;
            } else {
              // not enough byte to read unit type. let's read it on next PES parsing
              state = -1;
            }
          } else {
            state = 0;
          }
        }

        if (lastUnitStart >= 0 && state >= 0) {
          var _unit = {
            data: array.subarray(lastUnitStart, len),
            type: lastUnitType,
            state: state
          };
          units.push(_unit); // logger.log('pushing NALU, type/size/state:' + unit.type + '/' + unit.data.byteLength + '/' + state);
        } // no NALu found


        if (units.length === 0) {
          // append pes.data to previous NAL unit
          var _lastUnit = this.getLastNalUnit();

          if (_lastUnit) {
            var _tmp = new Uint8Array(_lastUnit.data.byteLength + array.byteLength);

            _tmp.set(_lastUnit.data, 0);

            _tmp.set(array, _lastUnit.data.byteLength);

            _lastUnit.data = _tmp;
          }
        }

        track.naluState = state;
        return units;
      };

      _proto.parseAACPES = function parseAACPES(pes) {
        var startOffset = 0;
        var track = this._audioTrack;
        var aacOverFlow = this.aacOverFlow;
        var data = pes.data;

        if (aacOverFlow) {
          this.aacOverFlow = null;
          var sampleLength = aacOverFlow.sample.unit.byteLength;
          var frameMissingBytes = Math.min(aacOverFlow.missing, sampleLength);
          var frameOverflowBytes = sampleLength - frameMissingBytes;
          aacOverFlow.sample.unit.set(data.subarray(0, frameMissingBytes), frameOverflowBytes);
          track.samples.push(aacOverFlow.sample); // logger.log(`AAC: append overflowing ${frameOverflowBytes} bytes to beginning of new PES`);

          startOffset = aacOverFlow.missing;
        } // look for ADTS header (0xFFFx)


        var offset;
        var len;

        for (offset = startOffset, len = data.length; offset < len - 1; offset++) {
          if (_adts__WEBPACK_IMPORTED_MODULE_0__["isHeader"](data, offset)) {
            break;
          }
        } // if ADTS header does not start straight from the beginning of the PES payload, raise an error


        if (offset !== startOffset) {
          var reason;
          var fatal;

          if (offset < len - 1) {
            reason = "AAC PES did not start with ADTS header,offset:" + offset;
            fatal = false;
          } else {
            reason = 'no ADTS header found in AAC PES';
            fatal = true;
          }

          _utils_logger__WEBPACK_IMPORTED_MODULE_7__["logger"].warn("parsing error:" + reason);
          this.observer.emit(_events__WEBPACK_IMPORTED_MODULE_5__["Events"].ERROR, _events__WEBPACK_IMPORTED_MODULE_5__["Events"].ERROR, {
            type: _errors__WEBPACK_IMPORTED_MODULE_8__["ErrorTypes"].MEDIA_ERROR,
            details: _errors__WEBPACK_IMPORTED_MODULE_8__["ErrorDetails"].FRAG_PARSING_ERROR,
            fatal: fatal,
            reason: reason
          });

          if (fatal) {
            return;
          }
        }

        _adts__WEBPACK_IMPORTED_MODULE_0__["initTrackConfig"](track, this.observer, data, offset, this.audioCodec);
        var pts;

        if (pes.pts !== undefined) {
          pts = pes.pts;
        } else if (aacOverFlow) {
          // if last AAC frame is overflowing, we should ensure timestamps are contiguous:
          // first sample PTS should be equal to last sample PTS + frameDuration
          var frameDuration = _adts__WEBPACK_IMPORTED_MODULE_0__["getFrameDuration"](track.samplerate);
          pts = aacOverFlow.sample.pts + frameDuration;
        } else {
          _utils_logger__WEBPACK_IMPORTED_MODULE_7__["logger"].warn('[tsdemuxer]: AAC PES unknown PTS');
          return;
        } // scan for aac samples


        var frameIndex = 0;

        while (offset < len) {
          if (_adts__WEBPACK_IMPORTED_MODULE_0__["isHeader"](data, offset)) {
            if (offset + 5 < len) {
              var frame = _adts__WEBPACK_IMPORTED_MODULE_0__["appendFrame"](track, data, offset, pts, frameIndex);

              if (frame) {
                if (frame.missing) {
                  this.aacOverFlow = frame;
                } else {
                  offset += frame.length;
                  frameIndex++;
                  continue;
                }
              }
            } // We are at an ADTS header, but do not have enough data for a frame
            // Remaining data will be added to aacOverFlow


            break;
          } else {
            // nothing found, keep looking
            offset++;
          }
        }
      };

      _proto.parseMPEGPES = function parseMPEGPES(pes) {
        var data = pes.data;
        var length = data.length;
        var frameIndex = 0;
        var offset = 0;
        var pts = pes.pts;

        if (pts === undefined) {
          _utils_logger__WEBPACK_IMPORTED_MODULE_7__["logger"].warn('[tsdemuxer]: MPEG PES unknown PTS');
          return;
        }

        while (offset < length) {
          if (_mpegaudio__WEBPACK_IMPORTED_MODULE_1__["isHeader"](data, offset)) {
            var frame = _mpegaudio__WEBPACK_IMPORTED_MODULE_1__["appendFrame"](this._audioTrack, data, offset, pts, frameIndex);

            if (frame) {
              offset += frame.length;
              frameIndex++;
            } else {
              // logger.log('Unable to parse Mpeg audio frame');
              break;
            }
          } else {
            // nothing found, keep looking
            offset++;
          }
        }
      };

      _proto.parseID3PES = function parseID3PES(pes) {
        if (pes.pts === undefined) {
          _utils_logger__WEBPACK_IMPORTED_MODULE_7__["logger"].warn('[tsdemuxer]: ID3 PES unknown PTS');
          return;
        }

        this._id3Track.samples.push(pes);
      };

      return TSDemuxer;
    }();

    TSDemuxer.minProbeByteLength = 188;

    function createAVCSample(key, pts, dts, debug) {
      return {
        key: key,
        frame: false,
        pts: pts,
        dts: dts,
        units: [],
        debug: debug,
        length: 0
      };
    }

    function parsePAT(data, offset) {
      // skip the PSI header and parse the first PMT entry
      return (data[offset + 10] & 0x1f) << 8 | data[offset + 11]; // logger.log('PMT PID:'  + this._pmtId);
    }

    function parsePMT(data, offset, mpegSupported, isSampleAes) {
      var result = {
        audio: -1,
        avc: -1,
        id3: -1,
        isAAC: true
      };
      var sectionLength = (data[offset + 1] & 0x0f) << 8 | data[offset + 2];
      var tableEnd = offset + 3 + sectionLength - 4; // to determine where the table is, we have to figure out how
      // long the program info descriptors are

      var programInfoLength = (data[offset + 10] & 0x0f) << 8 | data[offset + 11]; // advance the offset to the first entry in the mapping table

      offset += 12 + programInfoLength;

      while (offset < tableEnd) {
        var pid = (data[offset + 1] & 0x1f) << 8 | data[offset + 2];

        switch (data[offset]) {
          case 0xcf:
            // SAMPLE-AES AAC
            if (!isSampleAes) {
              _utils_logger__WEBPACK_IMPORTED_MODULE_7__["logger"].log('ADTS AAC with AES-128-CBC frame encryption found in unencrypted stream');
              break;
            }

          /* falls through */

          case 0x0f:
            // ISO/IEC 13818-7 ADTS AAC (MPEG-2 lower bit-rate audio)
            // logger.log('AAC PID:'  + pid);
            if (result.audio === -1) {
              result.audio = pid;
            }

            break;
          // Packetized metadata (ID3)

          case 0x15:
            // logger.log('ID3 PID:'  + pid);
            if (result.id3 === -1) {
              result.id3 = pid;
            }

            break;

          case 0xdb:
            // SAMPLE-AES AVC
            if (!isSampleAes) {
              _utils_logger__WEBPACK_IMPORTED_MODULE_7__["logger"].log('H.264 with AES-128-CBC slice encryption found in unencrypted stream');
              break;
            }

          /* falls through */

          case 0x1b:
            // ITU-T Rec. H.264 and ISO/IEC 14496-10 (lower bit-rate video)
            // logger.log('AVC PID:'  + pid);
            if (result.avc === -1) {
              result.avc = pid;
            }

            break;
          // ISO/IEC 11172-3 (MPEG-1 audio)
          // or ISO/IEC 13818-3 (MPEG-2 halved sample rate audio)

          case 0x03:
          case 0x04:
            // logger.log('MPEG PID:'  + pid);
            if (!mpegSupported) {
              _utils_logger__WEBPACK_IMPORTED_MODULE_7__["logger"].log('MPEG audio found, not supported in this browser');
            } else if (result.audio === -1) {
              result.audio = pid;
              result.isAAC = false;
            }

            break;

          case 0x24:
            _utils_logger__WEBPACK_IMPORTED_MODULE_7__["logger"].warn('Unsupported HEVC stream type found');
            break;
        } // move to the next table entry
        // skip past the elementary stream descriptors, if present


        offset += ((data[offset + 3] & 0x0f) << 8 | data[offset + 4]) + 5;
      }

      return result;
    }

    function parsePES(stream) {
      var i = 0;
      var frag;
      var pesLen;
      var pesHdrLen;
      var pesPts;
      var pesDts;
      var data = stream.data; // safety check

      if (!stream || stream.size === 0) {
        return null;
      } // we might need up to 19 bytes to read PES header
      // if first chunk of data is less than 19 bytes, let's merge it with following ones until we get 19 bytes
      // usually only one merge is needed (and this is rare ...)


      while (data[0].length < 19 && data.length > 1) {
        var newData = new Uint8Array(data[0].length + data[1].length);
        newData.set(data[0]);
        newData.set(data[1], data[0].length);
        data[0] = newData;
        data.splice(1, 1);
      } // retrieve PTS/DTS from first fragment


      frag = data[0];
      var pesPrefix = (frag[0] << 16) + (frag[1] << 8) + frag[2];

      if (pesPrefix === 1) {
        pesLen = (frag[4] << 8) + frag[5]; // if PES parsed length is not zero and greater than total received length, stop parsing. PES might be truncated
        // minus 6 : PES header size

        if (pesLen && pesLen > stream.size - 6) {
          return null;
        }

        var pesFlags = frag[7];

        if (pesFlags & 0xc0) {
          /* PES header described here : http://dvd.sourceforge.net/dvdinfo/pes-hdr.html
              as PTS / DTS is 33 bit we cannot use bitwise operator in JS,
              as Bitwise operators treat their operands as a sequence of 32 bits */
          pesPts = (frag[9] & 0x0e) * 536870912 + // 1 << 29
          (frag[10] & 0xff) * 4194304 + // 1 << 22
          (frag[11] & 0xfe) * 16384 + // 1 << 14
          (frag[12] & 0xff) * 128 + // 1 << 7
          (frag[13] & 0xfe) / 2;

          if (pesFlags & 0x40) {
            pesDts = (frag[14] & 0x0e) * 536870912 + // 1 << 29
            (frag[15] & 0xff) * 4194304 + // 1 << 22
            (frag[16] & 0xfe) * 16384 + // 1 << 14
            (frag[17] & 0xff) * 128 + // 1 << 7
            (frag[18] & 0xfe) / 2;

            if (pesPts - pesDts > 60 * 90000) {
              _utils_logger__WEBPACK_IMPORTED_MODULE_7__["logger"].warn(Math.round((pesPts - pesDts) / 90000) + "s delta between PTS and DTS, align them");
              pesPts = pesDts;
            }
          } else {
            pesDts = pesPts;
          }
        }

        pesHdrLen = frag[8]; // 9 bytes : 6 bytes for PES header + 3 bytes for PES extension

        var payloadStartOffset = pesHdrLen + 9;

        if (stream.size <= payloadStartOffset) {
          return null;
        }

        stream.size -= payloadStartOffset; // reassemble PES packet

        var pesData = new Uint8Array(stream.size);

        for (var j = 0, dataLen = data.length; j < dataLen; j++) {
          frag = data[j];
          var len = frag.byteLength;

          if (payloadStartOffset) {
            if (payloadStartOffset > len) {
              // trim full frag if PES header bigger than frag
              payloadStartOffset -= len;
              continue;
            } else {
              // trim partial frag if PES header smaller than frag
              frag = frag.subarray(payloadStartOffset);
              len -= payloadStartOffset;
              payloadStartOffset = 0;
            }
          }

          pesData.set(frag, i);
          i += len;
        }

        if (pesLen) {
          // payload size : remove PES header + PES extension
          pesLen -= pesHdrLen + 3;
        }

        return {
          data: pesData,
          pts: pesPts,
          dts: pesDts,
          len: pesLen
        };
      }

      return null;
    }

    function pushAccessUnit(avcSample, avcTrack) {
      if (avcSample.units.length && avcSample.frame) {
        // if sample does not have PTS/DTS, patch with last sample PTS/DTS
        if (avcSample.pts === undefined) {
          var samples = avcTrack.samples;
          var nbSamples = samples.length;

          if (nbSamples) {
            var lastSample = samples[nbSamples - 1];
            avcSample.pts = lastSample.pts;
            avcSample.dts = lastSample.dts;
          } else {
            // dropping samples, no timestamp found
            avcTrack.dropped++;
            return;
          }
        }

        avcTrack.samples.push(avcSample);
      }

      if (avcSample.debug.length) {
        _utils_logger__WEBPACK_IMPORTED_MODULE_7__["logger"].log(avcSample.pts + '/' + avcSample.dts + ':' + avcSample.debug);
      }
    }

    function insertSampleInOrder(arr, data) {
      var len = arr.length;

      if (len > 0) {
        if (data.pts >= arr[len - 1].pts) {
          arr.push(data);
        } else {
          for (var pos = len - 1; pos >= 0; pos--) {
            if (data.pts < arr[pos].pts) {
              arr.splice(pos, 0, data);
              break;
            }
          }
        }
      } else {
        arr.push(data);
      }
    }
    /**
     * remove Emulation Prevention bytes from a RBSP
     */


    function discardEPB(data) {
      var length = data.byteLength;
      var EPBPositions = [];
      var i = 1; // Find all `Emulation Prevention Bytes`

      while (i < length - 2) {
        if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {
          EPBPositions.push(i + 2);
          i += 2;
        } else {
          i++;
        }
      } // If no Emulation Prevention Bytes were found just return the original
      // array


      if (EPBPositions.length === 0) {
        return data;
      } // Create a new array to hold the NAL unit data


      var newLength = length - EPBPositions.length;
      var newData = new Uint8Array(newLength);
      var sourceIndex = 0;

      for (i = 0; i < newLength; sourceIndex++, i++) {
        if (sourceIndex === EPBPositions[0]) {
          // Skip this byte
          sourceIndex++; // Remove this position index

          EPBPositions.shift();
        }

        newData[i] = data[sourceIndex];
      }

      return newData;
    }
    /* harmony default export */ __webpack_exports__["default"] = (TSDemuxer);

    /***/ }),

    /***/ "./src/errors.ts":
    /*!***********************!*\
      !*** ./src/errors.ts ***!
      \***********************/
    /*! exports provided: ErrorTypes, ErrorDetails */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrorTypes", function() { return ErrorTypes; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrorDetails", function() { return ErrorDetails; });
    var ErrorTypes;
    /**
     * @enum {ErrorDetails}
     * @typedef {string} ErrorDetail
     */

    (function (ErrorTypes) {
      ErrorTypes["NETWORK_ERROR"] = "networkError";
      ErrorTypes["MEDIA_ERROR"] = "mediaError";
      ErrorTypes["KEY_SYSTEM_ERROR"] = "keySystemError";
      ErrorTypes["MUX_ERROR"] = "muxError";
      ErrorTypes["OTHER_ERROR"] = "otherError";
    })(ErrorTypes || (ErrorTypes = {}));

    var ErrorDetails;

    (function (ErrorDetails) {
      ErrorDetails["KEY_SYSTEM_NO_KEYS"] = "keySystemNoKeys";
      ErrorDetails["KEY_SYSTEM_NO_ACCESS"] = "keySystemNoAccess";
      ErrorDetails["KEY_SYSTEM_NO_SESSION"] = "keySystemNoSession";
      ErrorDetails["KEY_SYSTEM_LICENSE_REQUEST_FAILED"] = "keySystemLicenseRequestFailed";
      ErrorDetails["KEY_SYSTEM_NO_INIT_DATA"] = "keySystemNoInitData";
      ErrorDetails["MANIFEST_LOAD_ERROR"] = "manifestLoadError";
      ErrorDetails["MANIFEST_LOAD_TIMEOUT"] = "manifestLoadTimeOut";
      ErrorDetails["MANIFEST_PARSING_ERROR"] = "manifestParsingError";
      ErrorDetails["MANIFEST_INCOMPATIBLE_CODECS_ERROR"] = "manifestIncompatibleCodecsError";
      ErrorDetails["LEVEL_EMPTY_ERROR"] = "levelEmptyError";
      ErrorDetails["LEVEL_LOAD_ERROR"] = "levelLoadError";
      ErrorDetails["LEVEL_LOAD_TIMEOUT"] = "levelLoadTimeOut";
      ErrorDetails["LEVEL_SWITCH_ERROR"] = "levelSwitchError";
      ErrorDetails["AUDIO_TRACK_LOAD_ERROR"] = "audioTrackLoadError";
      ErrorDetails["AUDIO_TRACK_LOAD_TIMEOUT"] = "audioTrackLoadTimeOut";
      ErrorDetails["SUBTITLE_LOAD_ERROR"] = "subtitleTrackLoadError";
      ErrorDetails["SUBTITLE_TRACK_LOAD_TIMEOUT"] = "subtitleTrackLoadTimeOut";
      ErrorDetails["FRAG_LOAD_ERROR"] = "fragLoadError";
      ErrorDetails["FRAG_LOAD_TIMEOUT"] = "fragLoadTimeOut";
      ErrorDetails["FRAG_DECRYPT_ERROR"] = "fragDecryptError";
      ErrorDetails["FRAG_PARSING_ERROR"] = "fragParsingError";
      ErrorDetails["REMUX_ALLOC_ERROR"] = "remuxAllocError";
      ErrorDetails["KEY_LOAD_ERROR"] = "keyLoadError";
      ErrorDetails["KEY_LOAD_TIMEOUT"] = "keyLoadTimeOut";
      ErrorDetails["BUFFER_ADD_CODEC_ERROR"] = "bufferAddCodecError";
      ErrorDetails["BUFFER_INCOMPATIBLE_CODECS_ERROR"] = "bufferIncompatibleCodecsError";
      ErrorDetails["BUFFER_APPEND_ERROR"] = "bufferAppendError";
      ErrorDetails["BUFFER_APPENDING_ERROR"] = "bufferAppendingError";
      ErrorDetails["BUFFER_STALLED_ERROR"] = "bufferStalledError";
      ErrorDetails["BUFFER_FULL_ERROR"] = "bufferFullError";
      ErrorDetails["BUFFER_SEEK_OVER_HOLE"] = "bufferSeekOverHole";
      ErrorDetails["BUFFER_NUDGE_ON_STALL"] = "bufferNudgeOnStall";
      ErrorDetails["INTERNAL_EXCEPTION"] = "internalException";
      ErrorDetails["INTERNAL_ABORTED"] = "aborted";
      ErrorDetails["UNKNOWN"] = "unknown";
    })(ErrorDetails || (ErrorDetails = {}));

    /***/ }),

    /***/ "./src/events.ts":
    /*!***********************!*\
      !*** ./src/events.ts ***!
      \***********************/
    /*! exports provided: Events */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Events", function() { return Events; });
    /**
     * @readonly
     * @enum {string}
     */
    var Events;

    (function (Events) {
      Events["MEDIA_ATTACHING"] = "hlsMediaAttaching";
      Events["MEDIA_ATTACHED"] = "hlsMediaAttached";
      Events["MEDIA_DETACHING"] = "hlsMediaDetaching";
      Events["MEDIA_DETACHED"] = "hlsMediaDetached";
      Events["BUFFER_RESET"] = "hlsBufferReset";
      Events["BUFFER_CODECS"] = "hlsBufferCodecs";
      Events["BUFFER_CREATED"] = "hlsBufferCreated";
      Events["BUFFER_APPENDING"] = "hlsBufferAppending";
      Events["BUFFER_APPENDED"] = "hlsBufferAppended";
      Events["BUFFER_EOS"] = "hlsBufferEos";
      Events["BUFFER_FLUSHING"] = "hlsBufferFlushing";
      Events["BUFFER_FLUSHED"] = "hlsBufferFlushed";
      Events["MANIFEST_LOADING"] = "hlsManifestLoading";
      Events["MANIFEST_LOADED"] = "hlsManifestLoaded";
      Events["MANIFEST_PARSED"] = "hlsManifestParsed";
      Events["LEVEL_SWITCHING"] = "hlsLevelSwitching";
      Events["LEVEL_SWITCHED"] = "hlsLevelSwitched";
      Events["LEVEL_LOADING"] = "hlsLevelLoading";
      Events["LEVEL_LOADED"] = "hlsLevelLoaded";
      Events["LEVEL_UPDATED"] = "hlsLevelUpdated";
      Events["LEVEL_PTS_UPDATED"] = "hlsLevelPtsUpdated";
      Events["LEVELS_UPDATED"] = "hlsLevelsUpdated";
      Events["AUDIO_TRACKS_UPDATED"] = "hlsAudioTracksUpdated";
      Events["AUDIO_TRACK_SWITCHING"] = "hlsAudioTrackSwitching";
      Events["AUDIO_TRACK_SWITCHED"] = "hlsAudioTrackSwitched";
      Events["AUDIO_TRACK_LOADING"] = "hlsAudioTrackLoading";
      Events["AUDIO_TRACK_LOADED"] = "hlsAudioTrackLoaded";
      Events["SUBTITLE_TRACKS_UPDATED"] = "hlsSubtitleTracksUpdated";
      Events["SUBTITLE_TRACKS_CLEARED"] = "hlsSubtitleTracksCleared";
      Events["SUBTITLE_TRACK_SWITCH"] = "hlsSubtitleTrackSwitch";
      Events["SUBTITLE_TRACK_LOADING"] = "hlsSubtitleTrackLoading";
      Events["SUBTITLE_TRACK_LOADED"] = "hlsSubtitleTrackLoaded";
      Events["SUBTITLE_FRAG_PROCESSED"] = "hlsSubtitleFragProcessed";
      Events["CUES_PARSED"] = "hlsCuesParsed";
      Events["NON_NATIVE_TEXT_TRACKS_FOUND"] = "hlsNonNativeTextTracksFound";
      Events["INIT_PTS_FOUND"] = "hlsInitPtsFound";
      Events["FRAG_LOADING"] = "hlsFragLoading";
      Events["FRAG_LOAD_EMERGENCY_ABORTED"] = "hlsFragLoadEmergencyAborted";
      Events["FRAG_LOADED"] = "hlsFragLoaded";
      Events["FRAG_DECRYPTED"] = "hlsFragDecrypted";
      Events["FRAG_PARSING_INIT_SEGMENT"] = "hlsFragParsingInitSegment";
      Events["FRAG_PARSING_USERDATA"] = "hlsFragParsingUserdata";
      Events["FRAG_PARSING_METADATA"] = "hlsFragParsingMetadata";
      Events["FRAG_PARSED"] = "hlsFragParsed";
      Events["FRAG_BUFFERED"] = "hlsFragBuffered";
      Events["FRAG_CHANGED"] = "hlsFragChanged";
      Events["FPS_DROP"] = "hlsFpsDrop";
      Events["FPS_DROP_LEVEL_CAPPING"] = "hlsFpsDropLevelCapping";
      Events["ERROR"] = "hlsError";
      Events["DESTROYING"] = "hlsDestroying";
      Events["KEY_LOADING"] = "hlsKeyLoading";
      Events["KEY_LOADED"] = "hlsKeyLoaded";
      Events["LIVE_BACK_BUFFER_REACHED"] = "hlsLiveBackBufferReached";
      Events["BACK_BUFFER_REACHED"] = "hlsBackBufferReached";
    })(Events || (Events = {}));

    /***/ }),

    /***/ "./src/hls.ts":
    /*!********************!*\
      !*** ./src/hls.ts ***!
      \********************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Hls; });
    /* harmony import */ var url_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! url-toolkit */ "./node_modules/url-toolkit/src/url-toolkit.js");
    /* harmony import */ var _loader_playlist_loader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loader/playlist-loader */ "./src/loader/playlist-loader.ts");
    /* harmony import */ var _loader_key_loader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./loader/key-loader */ "./src/loader/key-loader.ts");
    /* harmony import */ var _controller_id3_track_controller__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./controller/id3-track-controller */ "./src/controller/id3-track-controller.ts");
    /* harmony import */ var _controller_latency_controller__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./controller/latency-controller */ "./src/controller/latency-controller.ts");
    /* harmony import */ var _controller_level_controller__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./controller/level-controller */ "./src/controller/level-controller.ts");
    /* harmony import */ var _controller_fragment_tracker__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./controller/fragment-tracker */ "./src/controller/fragment-tracker.ts");
    /* harmony import */ var _controller_stream_controller__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./controller/stream-controller */ "./src/controller/stream-controller.ts");
    /* harmony import */ var _is_supported__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./is-supported */ "./src/is-supported.ts");
    /* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/logger */ "./src/utils/logger.ts");
    /* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./config */ "./src/config.ts");
    /* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! eventemitter3 */ "./node_modules/eventemitter3/index.js");
    /* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./events */ "./src/events.ts");
    /* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./errors */ "./src/errors.ts");
    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }
















    /**
     * @module Hls
     * @class
     * @constructor
     */
    var Hls = /*#__PURE__*/function () {
      Hls.isSupported = function isSupported() {
        return Object(_is_supported__WEBPACK_IMPORTED_MODULE_8__["isSupported"])();
      };

      /**
       * Creates an instance of an HLS client that can attach to exactly one `HTMLMediaElement`.
       *
       * @constructs Hls
       * @param {HlsConfig} config
       */
      function Hls(userConfig) {
        if (userConfig === void 0) {
          userConfig = {};
        }

        this.config = void 0;
        this.userConfig = void 0;
        this.coreComponents = void 0;
        this.networkControllers = void 0;
        this._emitter = new eventemitter3__WEBPACK_IMPORTED_MODULE_11__["EventEmitter"]();
        this._autoLevelCapping = void 0;
        this.abrController = void 0;
        this.bufferController = void 0;
        this.capLevelController = void 0;
        this.latencyController = void 0;
        this.levelController = void 0;
        this.streamController = void 0;
        this.audioTrackController = void 0;
        this.subtitleTrackController = void 0;
        this.emeController = void 0;
        this._media = null;
        this.url = null;
        var config = this.config = Object(_config__WEBPACK_IMPORTED_MODULE_10__["mergeConfig"])(Hls.DefaultConfig, userConfig);
        this.userConfig = userConfig;
        Object(_utils_logger__WEBPACK_IMPORTED_MODULE_9__["enableLogs"])(config.debug);
        this._autoLevelCapping = -1;

        if (config.progressive) {
          Object(_config__WEBPACK_IMPORTED_MODULE_10__["enableStreamingMode"])(config);
        } // core controllers and network loaders


        var ConfigAbrController = config.abrController,
            ConfigBufferController = config.bufferController,
            ConfigCapLevelController = config.capLevelController,
            ConfigFpsController = config.fpsController;
        var abrController = this.abrController = new ConfigAbrController(this);
        var bufferController = this.bufferController = new ConfigBufferController(this);
        var capLevelController = this.capLevelController = new ConfigCapLevelController(this);
        var fpsController = new ConfigFpsController(this);
        var playListLoader = new _loader_playlist_loader__WEBPACK_IMPORTED_MODULE_1__["default"](this);
        var keyLoader = new _loader_key_loader__WEBPACK_IMPORTED_MODULE_2__["default"](this);
        var id3TrackController = new _controller_id3_track_controller__WEBPACK_IMPORTED_MODULE_3__["default"](this); // network controllers

        var levelController = this.levelController = new _controller_level_controller__WEBPACK_IMPORTED_MODULE_5__["default"](this); // FragmentTracker must be defined before StreamController because the order of event handling is important

        var fragmentTracker = new _controller_fragment_tracker__WEBPACK_IMPORTED_MODULE_6__["FragmentTracker"](this);
        var streamController = this.streamController = new _controller_stream_controller__WEBPACK_IMPORTED_MODULE_7__["default"](this, fragmentTracker); // Cap level controller uses streamController to flush the buffer

        capLevelController.setStreamController(streamController); // fpsController uses streamController to switch when frames are being dropped

        fpsController.setStreamController(streamController);
        var networkControllers = [levelController, streamController];
        this.networkControllers = networkControllers;
        var coreComponents = [playListLoader, keyLoader, abrController, bufferController, capLevelController, fpsController, id3TrackController, fragmentTracker];
        this.audioTrackController = this.createController(config.audioTrackController, null, networkControllers);
        this.createController(config.audioStreamController, fragmentTracker, networkControllers); // subtitleTrackController must be defined before  because the order of event handling is important

        this.subtitleTrackController = this.createController(config.subtitleTrackController, null, networkControllers);
        this.createController(config.subtitleStreamController, fragmentTracker, networkControllers);
        this.createController(config.timelineController, null, coreComponents);
        this.emeController = this.createController(config.emeController, null, coreComponents);
        this.latencyController = this.createController(_controller_latency_controller__WEBPACK_IMPORTED_MODULE_4__["default"], null, coreComponents);
        this.coreComponents = coreComponents;
      }

      var _proto = Hls.prototype;

      _proto.createController = function createController(ControllerClass, fragmentTracker, components) {
        if (ControllerClass) {
          var controllerInstance = fragmentTracker ? new ControllerClass(this, fragmentTracker) : new ControllerClass(this);

          if (components) {
            components.push(controllerInstance);
          }

          return controllerInstance;
        }

        return null;
      } // Delegate the EventEmitter through the public API of Hls.js
      ;

      _proto.on = function on(event, listener, context) {
        if (context === void 0) {
          context = this;
        }

        this._emitter.on(event, listener, context);
      };

      _proto.once = function once(event, listener, context) {
        if (context === void 0) {
          context = this;
        }

        this._emitter.once(event, listener, context);
      };

      _proto.removeAllListeners = function removeAllListeners(event) {
        this._emitter.removeAllListeners(event);
      };

      _proto.off = function off(event, listener, context, once) {
        if (context === void 0) {
          context = this;
        }

        this._emitter.off(event, listener, context, once);
      };

      _proto.listeners = function listeners(event) {
        return this._emitter.listeners(event);
      };

      _proto.emit = function emit(event, name, eventObject) {
        return this._emitter.emit(event, name, eventObject);
      };

      _proto.trigger = function trigger(event, eventObject) {
        if (this.config.debug) {
          return this.emit(event, event, eventObject);
        } else {
          try {
            return this.emit(event, event, eventObject);
          } catch (e) {
            _utils_logger__WEBPACK_IMPORTED_MODULE_9__["logger"].error('An internal error happened while handling event ' + event + '. Error message: "' + e.message + '". Here is a stacktrace:', e);
            this.trigger(_events__WEBPACK_IMPORTED_MODULE_12__["Events"].ERROR, {
              type: _errors__WEBPACK_IMPORTED_MODULE_13__["ErrorTypes"].OTHER_ERROR,
              details: _errors__WEBPACK_IMPORTED_MODULE_13__["ErrorDetails"].INTERNAL_EXCEPTION,
              fatal: false,
              event: event,
              error: e
            });
          }
        }

        return false;
      };

      _proto.listenerCount = function listenerCount(event) {
        return this._emitter.listenerCount(event);
      }
      /**
       * Dispose of the instance
       */
      ;

      _proto.destroy = function destroy() {
        _utils_logger__WEBPACK_IMPORTED_MODULE_9__["logger"].log('destroy');
        this.trigger(_events__WEBPACK_IMPORTED_MODULE_12__["Events"].DESTROYING, undefined);
        this.detachMedia();
        this.removeAllListeners();
        this._autoLevelCapping = -1;
        this.url = null;
        this.networkControllers.forEach(function (component) {
          return component.destroy();
        });
        this.networkControllers.length = 0;
        this.coreComponents.forEach(function (component) {
          return component.destroy();
        });
        this.coreComponents.length = 0;
      }
      /**
       * Attaches Hls.js to a media element
       * @param {HTMLMediaElement} media
       */
      ;

      _proto.attachMedia = function attachMedia(media) {
        _utils_logger__WEBPACK_IMPORTED_MODULE_9__["logger"].log('attachMedia');
        this._media = media;
        this.trigger(_events__WEBPACK_IMPORTED_MODULE_12__["Events"].MEDIA_ATTACHING, {
          media: media
        });
      }
      /**
       * Detach Hls.js from the media
       */
      ;

      _proto.detachMedia = function detachMedia() {
        _utils_logger__WEBPACK_IMPORTED_MODULE_9__["logger"].log('detachMedia');
        this.trigger(_events__WEBPACK_IMPORTED_MODULE_12__["Events"].MEDIA_DETACHING, undefined);
        this._media = null;
      }
      /**
       * Set the source URL. Can be relative or absolute.
       * @param {string} url
       */
      ;

      _proto.loadSource = function loadSource(url) {
        this.stopLoad();
        var media = this.media;
        var loadedSource = this.url;
        var loadingSource = this.url = url_toolkit__WEBPACK_IMPORTED_MODULE_0__["buildAbsoluteURL"](self.location.href, url, {
          alwaysNormalize: true
        });
        _utils_logger__WEBPACK_IMPORTED_MODULE_9__["logger"].log("loadSource:" + loadingSource);

        if (media && loadedSource && loadedSource !== loadingSource && this.bufferController.hasSourceTypes()) {
          this.detachMedia();
          this.attachMedia(media);
        } // when attaching to a source URL, trigger a playlist load


        this.trigger(_events__WEBPACK_IMPORTED_MODULE_12__["Events"].MANIFEST_LOADING, {
          url: url
        });
      }
      /**
       * Start loading data from the stream source.
       * Depending on default config, client starts loading automatically when a source is set.
       *
       * @param {number} startPosition Set the start position to stream from
       * @default -1 None (from earliest point)
       */
      ;

      _proto.startLoad = function startLoad(startPosition) {
        if (startPosition === void 0) {
          startPosition = -1;
        }

        _utils_logger__WEBPACK_IMPORTED_MODULE_9__["logger"].log("startLoad(" + startPosition + ")");
        this.networkControllers.forEach(function (controller) {
          controller.startLoad(startPosition);
        });
      }
      /**
       * Stop loading of any stream data.
       */
      ;

      _proto.stopLoad = function stopLoad() {
        _utils_logger__WEBPACK_IMPORTED_MODULE_9__["logger"].log('stopLoad');
        this.networkControllers.forEach(function (controller) {
          controller.stopLoad();
        });
      }
      /**
       * Swap through possible audio codecs in the stream (for example to switch from stereo to 5.1)
       */
      ;

      _proto.swapAudioCodec = function swapAudioCodec() {
        _utils_logger__WEBPACK_IMPORTED_MODULE_9__["logger"].log('swapAudioCodec');
        this.streamController.swapAudioCodec();
      }
      /**
       * When the media-element fails, this allows to detach and then re-attach it
       * as one call (convenience method).
       *
       * Automatic recovery of media-errors by this process is configurable.
       */
      ;

      _proto.recoverMediaError = function recoverMediaError() {
        _utils_logger__WEBPACK_IMPORTED_MODULE_9__["logger"].log('recoverMediaError');
        var media = this._media;
        this.detachMedia();

        if (media) {
          this.attachMedia(media);
        }
      };

      _proto.removeLevel = function removeLevel(levelIndex, urlId) {
        if (urlId === void 0) {
          urlId = 0;
        }

        this.levelController.removeLevel(levelIndex, urlId);
      }
      /**
       * @type {Level[]}
       */
      ;

      _createClass(Hls, [{
        key: "levels",
        get: function get() {
          var levels = this.levelController.levels;
          return levels ? levels : [];
        }
        /**
         * Index of quality level currently played
         * @type {number}
         */

      }, {
        key: "currentLevel",
        get: function get() {
          return this.streamController.currentLevel;
        }
        /**
         * Set quality level index immediately .
         * This will flush the current buffer to replace the quality asap.
         * That means playback will interrupt at least shortly to re-buffer and re-sync eventually.
         * @type {number} -1 for automatic level selection
         */
        ,
        set: function set(newLevel) {
          _utils_logger__WEBPACK_IMPORTED_MODULE_9__["logger"].log("set currentLevel:" + newLevel);
          this.loadLevel = newLevel;
          this.abrController.clearTimer();
          this.streamController.immediateLevelSwitch();
        }
        /**
         * Index of next quality level loaded as scheduled by stream controller.
         * @type {number}
         */

      }, {
        key: "nextLevel",
        get: function get() {
          return this.streamController.nextLevel;
        }
        /**
         * Set quality level index for next loaded data.
         * This will switch the video quality asap, without interrupting playback.
         * May abort current loading of data, and flush parts of buffer (outside currently played fragment region).
         * @type {number} -1 for automatic level selection
         */
        ,
        set: function set(newLevel) {
          _utils_logger__WEBPACK_IMPORTED_MODULE_9__["logger"].log("set nextLevel:" + newLevel);
          this.levelController.manualLevel = newLevel;
          this.streamController.nextLevelSwitch();
        }
        /**
         * Return the quality level of the currently or last (of none is loaded currently) segment
         * @type {number}
         */

      }, {
        key: "loadLevel",
        get: function get() {
          return this.levelController.level;
        }
        /**
         * Set quality level index for next loaded data in a conservative way.
         * This will switch the quality without flushing, but interrupt current loading.
         * Thus the moment when the quality switch will appear in effect will only be after the already existing buffer.
         * @type {number} newLevel -1 for automatic level selection
         */
        ,
        set: function set(newLevel) {
          _utils_logger__WEBPACK_IMPORTED_MODULE_9__["logger"].log("set loadLevel:" + newLevel);
          this.levelController.manualLevel = newLevel;
        }
        /**
         * get next quality level loaded
         * @type {number}
         */

      }, {
        key: "nextLoadLevel",
        get: function get() {
          return this.levelController.nextLoadLevel;
        }
        /**
         * Set quality level of next loaded segment in a fully "non-destructive" way.
         * Same as `loadLevel` but will wait for next switch (until current loading is done).
         * @type {number} level
         */
        ,
        set: function set(level) {
          this.levelController.nextLoadLevel = level;
        }
        /**
         * Return "first level": like a default level, if not set,
         * falls back to index of first level referenced in manifest
         * @type {number}
         */

      }, {
        key: "firstLevel",
        get: function get() {
          return Math.max(this.levelController.firstLevel, this.minAutoLevel);
        }
        /**
         * Sets "first-level", see getter.
         * @type {number}
         */
        ,
        set: function set(newLevel) {
          _utils_logger__WEBPACK_IMPORTED_MODULE_9__["logger"].log("set firstLevel:" + newLevel);
          this.levelController.firstLevel = newLevel;
        }
        /**
         * Return start level (level of first fragment that will be played back)
         * if not overrided by user, first level appearing in manifest will be used as start level
         * if -1 : automatic start level selection, playback will start from level matching download bandwidth
         * (determined from download of first segment)
         * @type {number}
         */

      }, {
        key: "startLevel",
        get: function get() {
          return this.levelController.startLevel;
        }
        /**
         * set  start level (level of first fragment that will be played back)
         * if not overrided by user, first level appearing in manifest will be used as start level
         * if -1 : automatic start level selection, playback will start from level matching download bandwidth
         * (determined from download of first segment)
         * @type {number} newLevel
         */
        ,
        set: function set(newLevel) {
          _utils_logger__WEBPACK_IMPORTED_MODULE_9__["logger"].log("set startLevel:" + newLevel); // if not in automatic start level detection, ensure startLevel is greater than minAutoLevel

          if (newLevel !== -1) {
            newLevel = Math.max(newLevel, this.minAutoLevel);
          }

          this.levelController.startLevel = newLevel;
        }
        /**
         * Get the current setting for capLevelToPlayerSize
         *
         * @type {boolean}
         */

      }, {
        key: "capLevelToPlayerSize",
        get: function get() {
          return this.config.capLevelToPlayerSize;
        }
        /**
         * set  dynamically set capLevelToPlayerSize against (`CapLevelController`)
         *
         * @type {boolean}
         */
        ,
        set: function set(shouldStartCapping) {
          var newCapLevelToPlayerSize = !!shouldStartCapping;

          if (newCapLevelToPlayerSize !== this.config.capLevelToPlayerSize) {
            if (newCapLevelToPlayerSize) {
              this.capLevelController.startCapping(); // If capping occurs, nextLevelSwitch will happen based on size.
            } else {
              this.capLevelController.stopCapping();
              this.autoLevelCapping = -1;
              this.streamController.nextLevelSwitch(); // Now we're uncapped, get the next level asap.
            }

            this.config.capLevelToPlayerSize = newCapLevelToPlayerSize;
          }
        }
        /**
         * Capping/max level value that should be used by automatic level selection algorithm (`ABRController`)
         * @type {number}
         */

      }, {
        key: "autoLevelCapping",
        get: function get() {
          return this._autoLevelCapping;
        }
        /**
         * get bandwidth estimate
         * @type {number}
         */
        ,
        set:
        /**
         * Capping/max level value that should be used by automatic level selection algorithm (`ABRController`)
         * @type {number}
         */
        function set(newLevel) {
          if (this._autoLevelCapping !== newLevel) {
            _utils_logger__WEBPACK_IMPORTED_MODULE_9__["logger"].log("set autoLevelCapping:" + newLevel);
            this._autoLevelCapping = newLevel;
          }
        }
        /**
         * True when automatic level selection enabled
         * @type {boolean}
         */

      }, {
        key: "bandwidthEstimate",
        get: function get() {
          var bwEstimator = this.abrController.bwEstimator;

          if (!bwEstimator) {
            return NaN;
          }

          return bwEstimator.getEstimate();
        }
      }, {
        key: "autoLevelEnabled",
        get: function get() {
          return this.levelController.manualLevel === -1;
        }
        /**
         * Level set manually (if any)
         * @type {number}
         */

      }, {
        key: "manualLevel",
        get: function get() {
          return this.levelController.manualLevel;
        }
        /**
         * min level selectable in auto mode according to config.minAutoBitrate
         * @type {number}
         */

      }, {
        key: "minAutoLevel",
        get: function get() {
          var levels = this.levels,
              minAutoBitrate = this.config.minAutoBitrate;
          if (!levels) return 0;
          var len = levels.length;

          for (var i = 0; i < len; i++) {
            if (levels[i].maxBitrate > minAutoBitrate) {
              return i;
            }
          }

          return 0;
        }
        /**
         * max level selectable in auto mode according to autoLevelCapping
         * @type {number}
         */

      }, {
        key: "maxAutoLevel",
        get: function get() {
          var levels = this.levels,
              autoLevelCapping = this.autoLevelCapping;
          var maxAutoLevel;

          if (autoLevelCapping === -1 && levels && levels.length) {
            maxAutoLevel = levels.length - 1;
          } else {
            maxAutoLevel = autoLevelCapping;
          }

          return maxAutoLevel;
        }
        /**
         * next automatically selected quality level
         * @type {number}
         */

      }, {
        key: "nextAutoLevel",
        get: function get() {
          // ensure next auto level is between  min and max auto level
          return Math.min(Math.max(this.abrController.nextAutoLevel, this.minAutoLevel), this.maxAutoLevel);
        }
        /**
         * this setter is used to force next auto level.
         * this is useful to force a switch down in auto mode:
         * in case of load error on level N, hls.js can set nextAutoLevel to N-1 for example)
         * forced value is valid for one fragment. upon succesful frag loading at forced level,
         * this value will be resetted to -1 by ABR controller.
         * @type {number}
         */
        ,
        set: function set(nextLevel) {
          this.abrController.nextAutoLevel = Math.max(this.minAutoLevel, nextLevel);
        }
        /**
         * @type {AudioTrack[]}
         */

      }, {
        key: "audioTracks",
        get: function get() {
          var audioTrackController = this.audioTrackController;
          return audioTrackController ? audioTrackController.audioTracks : [];
        }
        /**
         * index of the selected audio track (index in audio track lists)
         * @type {number}
         */

      }, {
        key: "audioTrack",
        get: function get() {
          var audioTrackController = this.audioTrackController;
          return audioTrackController ? audioTrackController.audioTrack : -1;
        }
        /**
         * selects an audio track, based on its index in audio track lists
         * @type {number}
         */
        ,
        set: function set(audioTrackId) {
          var audioTrackController = this.audioTrackController;

          if (audioTrackController) {
            audioTrackController.audioTrack = audioTrackId;
          }
        }
        /**
         * get alternate subtitle tracks list from playlist
         * @type {MediaPlaylist[]}
         */

      }, {
        key: "subtitleTracks",
        get: function get() {
          var subtitleTrackController = this.subtitleTrackController;
          return subtitleTrackController ? subtitleTrackController.subtitleTracks : [];
        }
        /**
         * index of the selected subtitle track (index in subtitle track lists)
         * @type {number}
         */

      }, {
        key: "subtitleTrack",
        get: function get() {
          var subtitleTrackController = this.subtitleTrackController;
          return subtitleTrackController ? subtitleTrackController.subtitleTrack : -1;
        },
        set:
        /**
         * select an subtitle track, based on its index in subtitle track lists
         * @type {number}
         */
        function set(subtitleTrackId) {
          var subtitleTrackController = this.subtitleTrackController;

          if (subtitleTrackController) {
            subtitleTrackController.subtitleTrack = subtitleTrackId;
          }
        }
        /**
         * @type {boolean}
         */

      }, {
        key: "media",
        get: function get() {
          return this._media;
        }
      }, {
        key: "subtitleDisplay",
        get: function get() {
          var subtitleTrackController = this.subtitleTrackController;
          return subtitleTrackController ? subtitleTrackController.subtitleDisplay : false;
        }
        /**
         * Enable/disable subtitle display rendering
         * @type {boolean}
         */
        ,
        set: function set(value) {
          var subtitleTrackController = this.subtitleTrackController;

          if (subtitleTrackController) {
            subtitleTrackController.subtitleDisplay = value;
          }
        }
        /**
         * get mode for Low-Latency HLS loading
         * @type {boolean}
         */

      }, {
        key: "lowLatencyMode",
        get: function get() {
          return this.config.lowLatencyMode;
        }
        /**
         * Enable/disable Low-Latency HLS part playlist and segment loading, and start live streams at playlist PART-HOLD-BACK rather than HOLD-BACK.
         * @type {boolean}
         */
        ,
        set: function set(mode) {
          this.config.lowLatencyMode = mode;
        }
        /**
         * position (in seconds) of live sync point (ie edge of live position minus safety delay defined by ```hls.config.liveSyncDuration```)
         * @type {number}
         */

      }, {
        key: "liveSyncPosition",
        get: function get() {
          return this.latencyController.liveSyncPosition;
        }
        /**
         * estimated position (in seconds) of live edge (ie edge of live playlist plus time sync playlist advanced)
         * returns 0 before first playlist is loaded
         * @type {number}
         */

      }, {
        key: "latency",
        get: function get() {
          return this.latencyController.latency;
        }
        /**
         * maximum distance from the edge before the player seeks forward to ```hls.liveSyncPosition```
         * configured using ```liveMaxLatencyDurationCount``` (multiple of target duration) or ```liveMaxLatencyDuration```
         * returns 0 before first playlist is loaded
         * @type {number}
         */

      }, {
        key: "maxLatency",
        get: function get() {
          return this.latencyController.maxLatency;
        }
        /**
         * target distance from the edge as calculated by the latency controller
         * @type {number}
         */

      }, {
        key: "targetLatency",
        get: function get() {
          return this.latencyController.targetLatency;
        }
        /**
         * the rate at which the edge of the current live playlist is advancing or 1 if there is none
         * @type {number}
         */

      }, {
        key: "drift",
        get: function get() {
          return this.latencyController.drift;
        }
        /**
         * set to true when startLoad is called before MANIFEST_PARSED event
         * @type {boolean}
         */

      }, {
        key: "forceStartLoad",
        get: function get() {
          return this.streamController.forceStartLoad;
        }
      }], [{
        key: "version",
        get: function get() {
          return "1.0.7";
        }
      }, {
        key: "Events",
        get: function get() {
          return _events__WEBPACK_IMPORTED_MODULE_12__["Events"];
        }
      }, {
        key: "ErrorTypes",
        get: function get() {
          return _errors__WEBPACK_IMPORTED_MODULE_13__["ErrorTypes"];
        }
      }, {
        key: "ErrorDetails",
        get: function get() {
          return _errors__WEBPACK_IMPORTED_MODULE_13__["ErrorDetails"];
        }
      }, {
        key: "DefaultConfig",
        get: function get() {
          if (!Hls.defaultConfig) {
            return _config__WEBPACK_IMPORTED_MODULE_10__["hlsDefaultConfig"];
          }

          return Hls.defaultConfig;
        }
        /**
         * @type {HlsConfig}
         */
        ,
        set: function set(defaultConfig) {
          Hls.defaultConfig = defaultConfig;
        }
      }]);

      return Hls;
    }();

    Hls.defaultConfig = void 0;


    /***/ }),

    /***/ "./src/is-supported.ts":
    /*!*****************************!*\
      !*** ./src/is-supported.ts ***!
      \*****************************/
    /*! exports provided: isSupported, changeTypeSupported */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isSupported", function() { return isSupported; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "changeTypeSupported", function() { return changeTypeSupported; });
    /* harmony import */ var _utils_mediasource_helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/mediasource-helper */ "./src/utils/mediasource-helper.ts");


    function getSourceBuffer() {
      return self.SourceBuffer || self.WebKitSourceBuffer;
    }

    function isSupported() {
      var mediaSource = Object(_utils_mediasource_helper__WEBPACK_IMPORTED_MODULE_0__["getMediaSource"])();

      if (!mediaSource) {
        return false;
      }

      var sourceBuffer = getSourceBuffer();
      var isTypeSupported = mediaSource && typeof mediaSource.isTypeSupported === 'function' && mediaSource.isTypeSupported('video/mp4; codecs="avc1.42E01E,mp4a.40.2"'); // if SourceBuffer is exposed ensure its API is valid
      // safari and old version of Chrome doe not expose SourceBuffer globally so checking SourceBuffer.prototype is impossible

      var sourceBufferValidAPI = !sourceBuffer || sourceBuffer.prototype && typeof sourceBuffer.prototype.appendBuffer === 'function' && typeof sourceBuffer.prototype.remove === 'function';
      return !!isTypeSupported && !!sourceBufferValidAPI;
    }
    function changeTypeSupported() {
      var _sourceBuffer$prototy;

      var sourceBuffer = getSourceBuffer();
      return typeof (sourceBuffer === null || sourceBuffer === void 0 ? void 0 : (_sourceBuffer$prototy = sourceBuffer.prototype) === null || _sourceBuffer$prototy === void 0 ? void 0 : _sourceBuffer$prototy.changeType) === 'function';
    }

    /***/ }),

    /***/ "./src/loader/fragment-loader.ts":
    /*!***************************************!*\
      !*** ./src/loader/fragment-loader.ts ***!
      \***************************************/
    /*! exports provided: default, LoadError */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return FragmentLoader; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoadError", function() { return LoadError; });
    /* harmony import */ var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/polyfills/number */ "./src/polyfills/number.ts");
    /* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors */ "./src/errors.ts");



    function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

    function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

    function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

    function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


    var MIN_CHUNK_SIZE = Math.pow(2, 17); // 128kb

    var FragmentLoader = /*#__PURE__*/function () {
      function FragmentLoader(config) {
        this.config = void 0;
        this.loader = null;
        this.partLoadTimeout = -1;
        this.config = config;
      }

      var _proto = FragmentLoader.prototype;

      _proto.destroy = function destroy() {
        if (this.loader) {
          this.loader.destroy();
          this.loader = null;
        }
      };

      _proto.abort = function abort() {
        if (this.loader) {
          // Abort the loader for current fragment. Only one may load at any given time
          this.loader.abort();
        }
      };

      _proto.load = function load(frag, _onProgress) {
        var _this = this;

        var url = frag.url;

        if (!url) {
          return Promise.reject(new LoadError({
            type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].NETWORK_ERROR,
            details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].FRAG_LOAD_ERROR,
            fatal: false,
            frag: frag,
            networkDetails: null
          }, "Fragment does not have a " + (url ? 'part list' : 'url')));
        }

        this.abort();
        var config = this.config;
        var FragmentILoader = config.fLoader;
        var DefaultILoader = config.loader;
        return new Promise(function (resolve, reject) {
          if (_this.loader) {
            _this.loader.destroy();
          }

          var loader = _this.loader = frag.loader = FragmentILoader ? new FragmentILoader(config) : new DefaultILoader(config);
          var loaderContext = createLoaderContext(frag);
          var loaderConfig = {
            timeout: config.fragLoadingTimeOut,
            maxRetry: 0,
            retryDelay: 0,
            maxRetryDelay: config.fragLoadingMaxRetryTimeout,
            highWaterMark: MIN_CHUNK_SIZE
          }; // Assign frag stats to the loader's stats reference

          frag.stats = loader.stats;
          loader.load(loaderContext, loaderConfig, {
            onSuccess: function onSuccess(response, stats, context, networkDetails) {
              _this.resetLoader(frag, loader);

              resolve({
                frag: frag,
                part: null,
                payload: response.data,
                networkDetails: networkDetails
              });
            },
            onError: function onError(response, context, networkDetails) {
              _this.resetLoader(frag, loader);

              reject(new LoadError({
                type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].NETWORK_ERROR,
                details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].FRAG_LOAD_ERROR,
                fatal: false,
                frag: frag,
                response: response,
                networkDetails: networkDetails
              }));
            },
            onAbort: function onAbort(stats, context, networkDetails) {
              _this.resetLoader(frag, loader);

              reject(new LoadError({
                type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].NETWORK_ERROR,
                details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].INTERNAL_ABORTED,
                fatal: false,
                frag: frag,
                networkDetails: networkDetails
              }));
            },
            onTimeout: function onTimeout(response, context, networkDetails) {
              _this.resetLoader(frag, loader);

              reject(new LoadError({
                type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].NETWORK_ERROR,
                details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].FRAG_LOAD_TIMEOUT,
                fatal: false,
                frag: frag,
                networkDetails: networkDetails
              }));
            },
            onProgress: function onProgress(stats, context, data, networkDetails) {
              if (_onProgress) {
                _onProgress({
                  frag: frag,
                  part: null,
                  payload: data,
                  networkDetails: networkDetails
                });
              }
            }
          });
        });
      };

      _proto.loadPart = function loadPart(frag, part, onProgress) {
        var _this2 = this;

        this.abort();
        var config = this.config;
        var FragmentILoader = config.fLoader;
        var DefaultILoader = config.loader;
        return new Promise(function (resolve, reject) {
          if (_this2.loader) {
            _this2.loader.destroy();
          }

          var loader = _this2.loader = frag.loader = FragmentILoader ? new FragmentILoader(config) : new DefaultILoader(config);
          var loaderContext = createLoaderContext(frag, part);
          var loaderConfig = {
            timeout: config.fragLoadingTimeOut,
            maxRetry: 0,
            retryDelay: 0,
            maxRetryDelay: config.fragLoadingMaxRetryTimeout,
            highWaterMark: MIN_CHUNK_SIZE
          }; // Assign part stats to the loader's stats reference

          part.stats = loader.stats;
          loader.load(loaderContext, loaderConfig, {
            onSuccess: function onSuccess(response, stats, context, networkDetails) {
              _this2.resetLoader(frag, loader);

              _this2.updateStatsFromPart(frag, part);

              var partLoadedData = {
                frag: frag,
                part: part,
                payload: response.data,
                networkDetails: networkDetails
              };
              onProgress(partLoadedData);
              resolve(partLoadedData);
            },
            onError: function onError(response, context, networkDetails) {
              _this2.resetLoader(frag, loader);

              reject(new LoadError({
                type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].NETWORK_ERROR,
                details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].FRAG_LOAD_ERROR,
                fatal: false,
                frag: frag,
                part: part,
                response: response,
                networkDetails: networkDetails
              }));
            },
            onAbort: function onAbort(stats, context, networkDetails) {
              frag.stats.aborted = part.stats.aborted;

              _this2.resetLoader(frag, loader);

              reject(new LoadError({
                type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].NETWORK_ERROR,
                details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].INTERNAL_ABORTED,
                fatal: false,
                frag: frag,
                part: part,
                networkDetails: networkDetails
              }));
            },
            onTimeout: function onTimeout(response, context, networkDetails) {
              _this2.resetLoader(frag, loader);

              reject(new LoadError({
                type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].NETWORK_ERROR,
                details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].FRAG_LOAD_TIMEOUT,
                fatal: false,
                frag: frag,
                part: part,
                networkDetails: networkDetails
              }));
            }
          });
        });
      };

      _proto.updateStatsFromPart = function updateStatsFromPart(frag, part) {
        var fragStats = frag.stats;
        var partStats = part.stats;
        var partTotal = partStats.total;
        fragStats.loaded += partStats.loaded;

        if (partTotal) {
          var estTotalParts = Math.round(frag.duration / part.duration);
          var estLoadedParts = Math.min(Math.round(fragStats.loaded / partTotal), estTotalParts);
          var estRemainingParts = estTotalParts - estLoadedParts;
          var estRemainingBytes = estRemainingParts * Math.round(fragStats.loaded / estLoadedParts);
          fragStats.total = fragStats.loaded + estRemainingBytes;
        } else {
          fragStats.total = Math.max(fragStats.loaded, fragStats.total);
        }

        var fragLoading = fragStats.loading;
        var partLoading = partStats.loading;

        if (fragLoading.start) {
          // add to fragment loader latency
          fragLoading.first += partLoading.first - partLoading.start;
        } else {
          fragLoading.start = partLoading.start;
          fragLoading.first = partLoading.first;
        }

        fragLoading.end = partLoading.end;
      };

      _proto.resetLoader = function resetLoader(frag, loader) {
        frag.loader = null;

        if (this.loader === loader) {
          self.clearTimeout(this.partLoadTimeout);
          this.loader = null;
        }

        loader.destroy();
      };

      return FragmentLoader;
    }();



    function createLoaderContext(frag, part) {
      if (part === void 0) {
        part = null;
      }

      var segment = part || frag;
      var loaderContext = {
        frag: frag,
        part: part,
        responseType: 'arraybuffer',
        url: segment.url,
        rangeStart: 0,
        rangeEnd: 0
      };
      var start = segment.byteRangeStartOffset;
      var end = segment.byteRangeEndOffset;

      if (Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(start) && Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(end)) {
        loaderContext.rangeStart = start;
        loaderContext.rangeEnd = end;
      }

      return loaderContext;
    }

    var LoadError = /*#__PURE__*/function (_Error) {
      _inheritsLoose(LoadError, _Error);

      function LoadError(data) {
        var _this3;

        for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          params[_key - 1] = arguments[_key];
        }

        _this3 = _Error.call.apply(_Error, [this].concat(params)) || this;
        _this3.data = void 0;
        _this3.data = data;
        return _this3;
      }

      return LoadError;
    }( /*#__PURE__*/_wrapNativeSuper(Error));

    /***/ }),

    /***/ "./src/loader/fragment.ts":
    /*!********************************!*\
      !*** ./src/loader/fragment.ts ***!
      \********************************/
    /*! exports provided: ElementaryStreamTypes, BaseSegment, Fragment, Part */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ElementaryStreamTypes", function() { return ElementaryStreamTypes; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseSegment", function() { return BaseSegment; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Fragment", function() { return Fragment; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Part", function() { return Part; });
    /* harmony import */ var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/polyfills/number */ "./src/polyfills/number.ts");
    /* harmony import */ var url_toolkit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! url-toolkit */ "./node_modules/url-toolkit/src/url-toolkit.js");
    /* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/logger */ "./src/utils/logger.ts");
    /* harmony import */ var _level_key__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./level-key */ "./src/loader/level-key.ts");
    /* harmony import */ var _load_stats__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./load-stats */ "./src/loader/load-stats.ts");



    function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }





    var ElementaryStreamTypes;

    (function (ElementaryStreamTypes) {
      ElementaryStreamTypes["AUDIO"] = "audio";
      ElementaryStreamTypes["VIDEO"] = "video";
      ElementaryStreamTypes["AUDIOVIDEO"] = "audiovideo";
    })(ElementaryStreamTypes || (ElementaryStreamTypes = {}));

    var BaseSegment = /*#__PURE__*/function () {
      // baseurl is the URL to the playlist
      // relurl is the portion of the URL that comes from inside the playlist.
      // Holds the types of data this fragment supports
      function BaseSegment(baseurl) {
        var _this$elementaryStrea;

        this._byteRange = null;
        this._url = null;
        this.baseurl = void 0;
        this.relurl = void 0;
        this.elementaryStreams = (_this$elementaryStrea = {}, _this$elementaryStrea[ElementaryStreamTypes.AUDIO] = null, _this$elementaryStrea[ElementaryStreamTypes.VIDEO] = null, _this$elementaryStrea[ElementaryStreamTypes.AUDIOVIDEO] = null, _this$elementaryStrea);
        this.baseurl = baseurl;
      } // setByteRange converts a EXT-X-BYTERANGE attribute into a two element array


      var _proto = BaseSegment.prototype;

      _proto.setByteRange = function setByteRange(value, previous) {
        var params = value.split('@', 2);
        var byteRange = [];

        if (params.length === 1) {
          byteRange[0] = previous ? previous.byteRangeEndOffset : 0;
        } else {
          byteRange[0] = parseInt(params[1]);
        }

        byteRange[1] = parseInt(params[0]) + byteRange[0];
        this._byteRange = byteRange;
      };

      _createClass(BaseSegment, [{
        key: "byteRange",
        get: function get() {
          if (!this._byteRange) {
            return [];
          }

          return this._byteRange;
        }
      }, {
        key: "byteRangeStartOffset",
        get: function get() {
          return this.byteRange[0];
        }
      }, {
        key: "byteRangeEndOffset",
        get: function get() {
          return this.byteRange[1];
        }
      }, {
        key: "url",
        get: function get() {
          if (!this._url && this.baseurl && this.relurl) {
            this._url = Object(url_toolkit__WEBPACK_IMPORTED_MODULE_1__["buildAbsoluteURL"])(this.baseurl, this.relurl, {
              alwaysNormalize: true
            });
          }

          return this._url || '';
        },
        set: function set(value) {
          this._url = value;
        }
      }]);

      return BaseSegment;
    }();
    var Fragment = /*#__PURE__*/function (_BaseSegment) {
      _inheritsLoose(Fragment, _BaseSegment);

      // EXTINF has to be present for a m38 to be considered valid
      // sn notates the sequence number for a segment, and if set to a string can be 'initSegment'
      // levelkey is the EXT-X-KEY that applies to this segment for decryption
      // core difference from the private field _decryptdata is the lack of the initialized IV
      // _decryptdata will set the IV for this segment based on the segment number in the fragment
      // A string representing the fragment type
      // A reference to the loader. Set while the fragment is loading, and removed afterwards. Used to abort fragment loading
      // The level/track index to which the fragment belongs
      // The continuity counter of the fragment
      // The starting Presentation Time Stamp (PTS) of the fragment. Set after transmux complete.
      // The ending Presentation Time Stamp (PTS) of the fragment. Set after transmux complete.
      // The latest Presentation Time Stamp (PTS) appended to the buffer.
      // The starting Decode Time Stamp (DTS) of the fragment. Set after transmux complete.
      // The ending Decode Time Stamp (DTS) of the fragment. Set after transmux complete.
      // The start time of the fragment, as listed in the manifest. Updated after transmux complete.
      // Set by `updateFragPTSDTS` in level-helper
      // The maximum starting Presentation Time Stamp (audio/video PTS) of the fragment. Set after transmux complete.
      // The minimum ending Presentation Time Stamp (audio/video PTS) of the fragment. Set after transmux complete.
      // Load/parse timing information
      // A flag indicating whether the segment was downloaded in order to test bitrate, and was not buffered
      // #EXTINF  segment title
      // The Media Initialization Section for this segment
      function Fragment(type, baseurl) {
        var _this;

        _this = _BaseSegment.call(this, baseurl) || this;
        _this._decryptdata = null;
        _this.rawProgramDateTime = null;
        _this.programDateTime = null;
        _this.tagList = [];
        _this.duration = 0;
        _this.sn = 0;
        _this.levelkey = void 0;
        _this.type = void 0;
        _this.loader = null;
        _this.level = -1;
        _this.cc = 0;
        _this.startPTS = void 0;
        _this.endPTS = void 0;
        _this.appendedPTS = void 0;
        _this.startDTS = void 0;
        _this.endDTS = void 0;
        _this.start = 0;
        _this.deltaPTS = void 0;
        _this.maxStartPTS = void 0;
        _this.minEndPTS = void 0;
        _this.stats = new _load_stats__WEBPACK_IMPORTED_MODULE_4__["LoadStats"]();
        _this.urlId = 0;
        _this.data = void 0;
        _this.bitrateTest = false;
        _this.title = null;
        _this.initSegment = null;
        _this.type = type;
        return _this;
      }

      var _proto2 = Fragment.prototype;

      /**
       * Utility method for parseLevelPlaylist to create an initialization vector for a given segment
       * @param {number} segmentNumber - segment number to generate IV with
       * @returns {Uint8Array}
       */
      _proto2.createInitializationVector = function createInitializationVector(segmentNumber) {
        var uint8View = new Uint8Array(16);

        for (var i = 12; i < 16; i++) {
          uint8View[i] = segmentNumber >> 8 * (15 - i) & 0xff;
        }

        return uint8View;
      }
      /**
       * Utility method for parseLevelPlaylist to get a fragment's decryption data from the currently parsed encryption key data
       * @param levelkey - a playlist's encryption info
       * @param segmentNumber - the fragment's segment number
       * @returns {LevelKey} - an object to be applied as a fragment's decryptdata
       */
      ;

      _proto2.setDecryptDataFromLevelKey = function setDecryptDataFromLevelKey(levelkey, segmentNumber) {
        var decryptdata = levelkey;

        if ((levelkey === null || levelkey === void 0 ? void 0 : levelkey.method) === 'AES-128' && levelkey.uri && !levelkey.iv) {
          decryptdata = _level_key__WEBPACK_IMPORTED_MODULE_3__["LevelKey"].fromURI(levelkey.uri);
          decryptdata.method = levelkey.method;
          decryptdata.iv = this.createInitializationVector(segmentNumber);
          decryptdata.keyFormat = 'identity';
        }

        return decryptdata;
      };

      _proto2.setElementaryStreamInfo = function setElementaryStreamInfo(type, startPTS, endPTS, startDTS, endDTS, partial) {
        if (partial === void 0) {
          partial = false;
        }

        var elementaryStreams = this.elementaryStreams;
        var info = elementaryStreams[type];

        if (!info) {
          elementaryStreams[type] = {
            startPTS: startPTS,
            endPTS: endPTS,
            startDTS: startDTS,
            endDTS: endDTS,
            partial: partial
          };
          return;
        }

        info.startPTS = Math.min(info.startPTS, startPTS);
        info.endPTS = Math.max(info.endPTS, endPTS);
        info.startDTS = Math.min(info.startDTS, startDTS);
        info.endDTS = Math.max(info.endDTS, endDTS);
      };

      _proto2.clearElementaryStreamInfo = function clearElementaryStreamInfo() {
        var elementaryStreams = this.elementaryStreams;
        elementaryStreams[ElementaryStreamTypes.AUDIO] = null;
        elementaryStreams[ElementaryStreamTypes.VIDEO] = null;
        elementaryStreams[ElementaryStreamTypes.AUDIOVIDEO] = null;
      };

      _createClass(Fragment, [{
        key: "decryptdata",
        get: function get() {
          if (!this.levelkey && !this._decryptdata) {
            return null;
          }

          if (!this._decryptdata && this.levelkey) {
            var sn = this.sn;

            if (typeof sn !== 'number') {
              // We are fetching decryption data for a initialization segment
              // If the segment was encrypted with AES-128
              // It must have an IV defined. We cannot substitute the Segment Number in.
              if (this.levelkey && this.levelkey.method === 'AES-128' && !this.levelkey.iv) {
                _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].warn("missing IV for initialization segment with method=\"" + this.levelkey.method + "\" - compliance issue");
              }
              /*
              Be converted to a Number.
              'initSegment' will become NaN.
              NaN, which when converted through ToInt32() -> +0.
              ---
              Explicitly set sn to resulting value from implicit conversions 'initSegment' values for IV generation.
              */


              sn = 0;
            }

            this._decryptdata = this.setDecryptDataFromLevelKey(this.levelkey, sn);
          }

          return this._decryptdata;
        }
      }, {
        key: "end",
        get: function get() {
          return this.start + this.duration;
        }
      }, {
        key: "endProgramDateTime",
        get: function get() {
          if (this.programDateTime === null) {
            return null;
          }

          if (!Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(this.programDateTime)) {
            return null;
          }

          var duration = !Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(this.duration) ? 0 : this.duration;
          return this.programDateTime + duration * 1000;
        }
      }, {
        key: "encrypted",
        get: function get() {
          var _this$decryptdata;

          // At the m3u8-parser level we need to add support for manifest signalled keyformats
          // when we want the fragment to start reporting that it is encrypted.
          // Currently, keyFormat will only be set for identity keys
          if ((_this$decryptdata = this.decryptdata) !== null && _this$decryptdata !== void 0 && _this$decryptdata.keyFormat && this.decryptdata.uri) {
            return true;
          }

          return false;
        }
      }]);

      return Fragment;
    }(BaseSegment);
    var Part = /*#__PURE__*/function (_BaseSegment2) {
      _inheritsLoose(Part, _BaseSegment2);

      function Part(partAttrs, frag, baseurl, index, previous) {
        var _this2;

        _this2 = _BaseSegment2.call(this, baseurl) || this;
        _this2.fragOffset = 0;
        _this2.duration = 0;
        _this2.gap = false;
        _this2.independent = false;
        _this2.relurl = void 0;
        _this2.fragment = void 0;
        _this2.index = void 0;
        _this2.stats = new _load_stats__WEBPACK_IMPORTED_MODULE_4__["LoadStats"]();
        _this2.duration = partAttrs.decimalFloatingPoint('DURATION');
        _this2.gap = partAttrs.bool('GAP');
        _this2.independent = partAttrs.bool('INDEPENDENT');
        _this2.relurl = partAttrs.enumeratedString('URI');
        _this2.fragment = frag;
        _this2.index = index;
        var byteRange = partAttrs.enumeratedString('BYTERANGE');

        if (byteRange) {
          _this2.setByteRange(byteRange, previous);
        }

        if (previous) {
          _this2.fragOffset = previous.fragOffset + previous.duration;
        }

        return _this2;
      }

      _createClass(Part, [{
        key: "start",
        get: function get() {
          return this.fragment.start + this.fragOffset;
        }
      }, {
        key: "end",
        get: function get() {
          return this.start + this.duration;
        }
      }, {
        key: "loaded",
        get: function get() {
          var elementaryStreams = this.elementaryStreams;
          return !!(elementaryStreams.audio || elementaryStreams.video || elementaryStreams.audiovideo);
        }
      }]);

      return Part;
    }(BaseSegment);

    /***/ }),

    /***/ "./src/loader/key-loader.ts":
    /*!**********************************!*\
      !*** ./src/loader/key-loader.ts ***!
      \**********************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return KeyLoader; });
    /* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./src/events.ts");
    /* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors */ "./src/errors.ts");
    /* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/logger */ "./src/utils/logger.ts");
    /*
     * Decrypt key Loader
     */




    var KeyLoader = /*#__PURE__*/function () {
      function KeyLoader(hls) {
        this.hls = void 0;
        this.loaders = {};
        this.decryptkey = null;
        this.decrypturl = null;
        this.hls = hls;

        this._registerListeners();
      }

      var _proto = KeyLoader.prototype;

      _proto._registerListeners = function _registerListeners() {
        this.hls.on(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].KEY_LOADING, this.onKeyLoading, this);
      };

      _proto._unregisterListeners = function _unregisterListeners() {
        this.hls.off(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].KEY_LOADING, this.onKeyLoading);
      };

      _proto.destroy = function destroy() {
        this._unregisterListeners();

        for (var loaderName in this.loaders) {
          var loader = this.loaders[loaderName];

          if (loader) {
            loader.destroy();
          }
        }

        this.loaders = {};
      };

      _proto.onKeyLoading = function onKeyLoading(event, data) {
        var frag = data.frag;
        var type = frag.type;
        var loader = this.loaders[type];

        if (!frag.decryptdata) {
          _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].warn('Missing decryption data on fragment in onKeyLoading');
          return;
        } // Load the key if the uri is different from previous one, or if the decrypt key has not yet been retrieved


        var uri = frag.decryptdata.uri;

        if (uri !== this.decrypturl || this.decryptkey === null) {
          var config = this.hls.config;

          if (loader) {
            _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].warn("abort previous key loader for type:" + type);
            loader.abort();
          }

          if (!uri) {
            _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].warn('key uri is falsy');
            return;
          }

          var Loader = config.loader;
          var fragLoader = frag.loader = this.loaders[type] = new Loader(config);
          this.decrypturl = uri;
          this.decryptkey = null;
          var loaderContext = {
            url: uri,
            frag: frag,
            responseType: 'arraybuffer'
          }; // maxRetry is 0 so that instead of retrying the same key on the same variant multiple times,
          // key-loader will trigger an error and rely on stream-controller to handle retry logic.
          // this will also align retry logic with fragment-loader

          var loaderConfig = {
            timeout: config.fragLoadingTimeOut,
            maxRetry: 0,
            retryDelay: config.fragLoadingRetryDelay,
            maxRetryDelay: config.fragLoadingMaxRetryTimeout,
            highWaterMark: 0
          };
          var loaderCallbacks = {
            onSuccess: this.loadsuccess.bind(this),
            onError: this.loaderror.bind(this),
            onTimeout: this.loadtimeout.bind(this)
          };
          fragLoader.load(loaderContext, loaderConfig, loaderCallbacks);
        } else if (this.decryptkey) {
          // Return the key if it's already been loaded
          frag.decryptdata.key = this.decryptkey;
          this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].KEY_LOADED, {
            frag: frag
          });
        }
      };

      _proto.loadsuccess = function loadsuccess(response, stats, context) {
        var frag = context.frag;

        if (!frag.decryptdata) {
          _utils_logger__WEBPACK_IMPORTED_MODULE_2__["logger"].error('after key load, decryptdata unset');
          return;
        }

        this.decryptkey = frag.decryptdata.key = new Uint8Array(response.data); // detach fragment loader on load success

        frag.loader = null;
        delete this.loaders[frag.type];
        this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].KEY_LOADED, {
          frag: frag
        });
      };

      _proto.loaderror = function loaderror(response, context) {
        var frag = context.frag;
        var loader = frag.loader;

        if (loader) {
          loader.abort();
        }

        delete this.loaders[frag.type];
        this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, {
          type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].NETWORK_ERROR,
          details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].KEY_LOAD_ERROR,
          fatal: false,
          frag: frag,
          response: response
        });
      };

      _proto.loadtimeout = function loadtimeout(stats, context) {
        var frag = context.frag;
        var loader = frag.loader;

        if (loader) {
          loader.abort();
        }

        delete this.loaders[frag.type];
        this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__["Events"].ERROR, {
          type: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorTypes"].NETWORK_ERROR,
          details: _errors__WEBPACK_IMPORTED_MODULE_1__["ErrorDetails"].KEY_LOAD_TIMEOUT,
          fatal: false,
          frag: frag
        });
      };

      return KeyLoader;
    }();



    /***/ }),

    /***/ "./src/loader/level-details.ts":
    /*!*************************************!*\
      !*** ./src/loader/level-details.ts ***!
      \*************************************/
    /*! exports provided: LevelDetails */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LevelDetails", function() { return LevelDetails; });
    /* harmony import */ var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/polyfills/number */ "./src/polyfills/number.ts");


    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    var DEFAULT_TARGET_DURATION = 10;
    var LevelDetails = /*#__PURE__*/function () {
      // Manifest reload synchronization
      function LevelDetails(baseUrl) {
        this.PTSKnown = false;
        this.alignedSliding = false;
        this.averagetargetduration = void 0;
        this.endCC = 0;
        this.endSN = 0;
        this.fragments = void 0;
        this.fragmentHint = void 0;
        this.partList = null;
        this.live = true;
        this.ageHeader = 0;
        this.advancedDateTime = void 0;
        this.updated = true;
        this.advanced = true;
        this.availabilityDelay = void 0;
        this.misses = 0;
        this.needSidxRanges = false;
        this.startCC = 0;
        this.startSN = 0;
        this.startTimeOffset = null;
        this.targetduration = 0;
        this.totalduration = 0;
        this.type = null;
        this.url = void 0;
        this.m3u8 = '';
        this.version = null;
        this.canBlockReload = false;
        this.canSkipUntil = 0;
        this.canSkipDateRanges = false;
        this.skippedSegments = 0;
        this.recentlyRemovedDateranges = void 0;
        this.partHoldBack = 0;
        this.holdBack = 0;
        this.partTarget = 0;
        this.preloadHint = void 0;
        this.renditionReports = void 0;
        this.tuneInGoal = 0;
        this.deltaUpdateFailed = void 0;
        this.driftStartTime = 0;
        this.driftEndTime = 0;
        this.driftStart = 0;
        this.driftEnd = 0;
        this.fragments = [];
        this.url = baseUrl;
      }

      var _proto = LevelDetails.prototype;

      _proto.reloaded = function reloaded(previous) {
        if (!previous) {
          this.advanced = true;
          this.updated = true;
          return;
        }

        var partSnDiff = this.lastPartSn - previous.lastPartSn;
        var partIndexDiff = this.lastPartIndex - previous.lastPartIndex;
        this.updated = this.endSN !== previous.endSN || !!partIndexDiff || !!partSnDiff;
        this.advanced = this.endSN > previous.endSN || partSnDiff > 0 || partSnDiff === 0 && partIndexDiff > 0;

        if (this.updated || this.advanced) {
          this.misses = Math.floor(previous.misses * 0.6);
        } else {
          this.misses = previous.misses + 1;
        }

        this.availabilityDelay = previous.availabilityDelay;
      };

      _createClass(LevelDetails, [{
        key: "hasProgramDateTime",
        get: function get() {
          if (this.fragments.length) {
            return Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(this.fragments[this.fragments.length - 1].programDateTime);
          }

          return false;
        }
      }, {
        key: "levelTargetDuration",
        get: function get() {
          return this.averagetargetduration || this.targetduration || DEFAULT_TARGET_DURATION;
        }
      }, {
        key: "drift",
        get: function get() {
          var runTime = this.driftEndTime - this.driftStartTime;

          if (runTime > 0) {
            var runDuration = this.driftEnd - this.driftStart;
            return runDuration * 1000 / runTime;
          }

          return 1;
        }
      }, {
        key: "edge",
        get: function get() {
          return this.partEnd || this.fragmentEnd;
        }
      }, {
        key: "partEnd",
        get: function get() {
          var _this$partList;

          if ((_this$partList = this.partList) !== null && _this$partList !== void 0 && _this$partList.length) {
            return this.partList[this.partList.length - 1].end;
          }

          return this.fragmentEnd;
        }
      }, {
        key: "fragmentEnd",
        get: function get() {
          var _this$fragments;

          if ((_this$fragments = this.fragments) !== null && _this$fragments !== void 0 && _this$fragments.length) {
            return this.fragments[this.fragments.length - 1].end;
          }

          return 0;
        }
      }, {
        key: "age",
        get: function get() {
          if (this.advancedDateTime) {
            return Math.max(Date.now() - this.advancedDateTime, 0) / 1000;
          }

          return 0;
        }
      }, {
        key: "lastPartIndex",
        get: function get() {
          var _this$partList2;

          if ((_this$partList2 = this.partList) !== null && _this$partList2 !== void 0 && _this$partList2.length) {
            return this.partList[this.partList.length - 1].index;
          }

          return -1;
        }
      }, {
        key: "lastPartSn",
        get: function get() {
          var _this$partList3;

          if ((_this$partList3 = this.partList) !== null && _this$partList3 !== void 0 && _this$partList3.length) {
            return this.partList[this.partList.length - 1].fragment.sn;
          }

          return this.endSN;
        }
      }]);

      return LevelDetails;
    }();

    /***/ }),

    /***/ "./src/loader/level-key.ts":
    /*!*********************************!*\
      !*** ./src/loader/level-key.ts ***!
      \*********************************/
    /*! exports provided: LevelKey */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LevelKey", function() { return LevelKey; });
    /* harmony import */ var url_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! url-toolkit */ "./node_modules/url-toolkit/src/url-toolkit.js");
    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }


    var LevelKey = /*#__PURE__*/function () {
      LevelKey.fromURL = function fromURL(baseUrl, relativeUrl) {
        return new LevelKey(baseUrl, relativeUrl);
      };

      LevelKey.fromURI = function fromURI(uri) {
        return new LevelKey(uri);
      };

      function LevelKey(absoluteOrBaseURI, relativeURL) {
        this._uri = null;
        this.method = null;
        this.keyFormat = null;
        this.keyFormatVersions = null;
        this.keyID = null;
        this.key = null;
        this.iv = null;

        if (relativeURL) {
          this._uri = Object(url_toolkit__WEBPACK_IMPORTED_MODULE_0__["buildAbsoluteURL"])(absoluteOrBaseURI, relativeURL, {
            alwaysNormalize: true
          });
        } else {
          this._uri = absoluteOrBaseURI;
        }
      }

      _createClass(LevelKey, [{
        key: "uri",
        get: function get() {
          return this._uri;
        }
      }]);

      return LevelKey;
    }();

    /***/ }),

    /***/ "./src/loader/load-stats.ts":
    /*!**********************************!*\
      !*** ./src/loader/load-stats.ts ***!
      \**********************************/
    /*! exports provided: LoadStats */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoadStats", function() { return LoadStats; });
    var LoadStats = function LoadStats() {
      this.aborted = false;
      this.loaded = 0;
      this.retry = 0;
      this.total = 0;
      this.chunkCount = 0;
      this.bwEstimate = 0;
      this.loading = {
        start: 0,
        first: 0,
        end: 0
      };
      this.parsing = {
        start: 0,
        end: 0
      };
      this.buffering = {
        start: 0,
        first: 0,
        end: 0
      };
    };

    /***/ }),

    /***/ "./src/loader/m3u8-parser.ts":
    /*!***********************************!*\
      !*** ./src/loader/m3u8-parser.ts ***!
      \***********************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return M3U8Parser; });
    /* harmony import */ var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/polyfills/number */ "./src/polyfills/number.ts");
    /* harmony import */ var url_toolkit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! url-toolkit */ "./node_modules/url-toolkit/src/url-toolkit.js");
    /* harmony import */ var _fragment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fragment */ "./src/loader/fragment.ts");
    /* harmony import */ var _level_details__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./level-details */ "./src/loader/level-details.ts");
    /* harmony import */ var _level_key__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./level-key */ "./src/loader/level-key.ts");
    /* harmony import */ var _utils_attr_list__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/attr-list */ "./src/utils/attr-list.ts");
    /* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/logger */ "./src/utils/logger.ts");
    /* harmony import */ var _utils_codecs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/codecs */ "./src/utils/codecs.ts");











    // https://regex101.com is your friend
    var MASTER_PLAYLIST_REGEX = /#EXT-X-STREAM-INF:([^\r\n]*)(?:[\r\n](?:#[^\r\n]*)?)*([^\r\n]+)|#EXT-X-SESSION-DATA:([^\r\n]*)[\r\n]+/g;
    var MASTER_PLAYLIST_MEDIA_REGEX = /#EXT-X-MEDIA:(.*)/g;
    var LEVEL_PLAYLIST_REGEX_FAST = new RegExp([/#EXTINF:\s*(\d*(?:\.\d+)?)(?:,(.*)\s+)?/.source, // duration (#EXTINF:<duration>,<title>), group 1 => duration, group 2 => title
    /(?!#) *(\S[\S ]*)/.source, // segment URI, group 3 => the URI (note newline is not eaten)
    /#EXT-X-BYTERANGE:*(.+)/.source, // next segment's byterange, group 4 => range spec (x@y)
    /#EXT-X-PROGRAM-DATE-TIME:(.+)/.source, // next segment's program date/time group 5 => the datetime spec
    /#.*/.source // All other non-segment oriented tags will match with all groups empty
    ].join('|'), 'g');
    var LEVEL_PLAYLIST_REGEX_SLOW = new RegExp([/#(EXTM3U)/.source, /#EXT-X-(PLAYLIST-TYPE):(.+)/.source, /#EXT-X-(MEDIA-SEQUENCE): *(\d+)/.source, /#EXT-X-(SKIP):(.+)/.source, /#EXT-X-(TARGETDURATION): *(\d+)/.source, /#EXT-X-(KEY):(.+)/.source, /#EXT-X-(START):(.+)/.source, /#EXT-X-(ENDLIST)/.source, /#EXT-X-(DISCONTINUITY-SEQ)UENCE: *(\d+)/.source, /#EXT-X-(DIS)CONTINUITY/.source, /#EXT-X-(VERSION):(\d+)/.source, /#EXT-X-(MAP):(.+)/.source, /#EXT-X-(SERVER-CONTROL):(.+)/.source, /#EXT-X-(PART-INF):(.+)/.source, /#EXT-X-(GAP)/.source, /#EXT-X-(BITRATE):\s*(\d+)/.source, /#EXT-X-(PART):(.+)/.source, /#EXT-X-(PRELOAD-HINT):(.+)/.source, /#EXT-X-(RENDITION-REPORT):(.+)/.source, /(#)([^:]*):(.*)/.source, /(#)(.*)(?:.*)\r?\n?/.source].join('|'));
    var MP4_REGEX_SUFFIX = /\.(mp4|m4s|m4v|m4a)$/i;

    function isMP4Url(url) {
      var _URLToolkit$parseURL$, _URLToolkit$parseURL;

      return MP4_REGEX_SUFFIX.test((_URLToolkit$parseURL$ = (_URLToolkit$parseURL = url_toolkit__WEBPACK_IMPORTED_MODULE_1__["parseURL"](url)) === null || _URLToolkit$parseURL === void 0 ? void 0 : _URLToolkit$parseURL.path) != null ? _URLToolkit$parseURL$ : '');
    }

    var M3U8Parser = /*#__PURE__*/function () {
      function M3U8Parser() {}

      M3U8Parser.findGroup = function findGroup(groups, mediaGroupId) {
        for (var i = 0; i < groups.length; i++) {
          var group = groups[i];

          if (group.id === mediaGroupId) {
            return group;
          }
        }
      };

      M3U8Parser.convertAVC1ToAVCOTI = function convertAVC1ToAVCOTI(codec) {
        // Convert avc1 codec string from RFC-4281 to RFC-6381 for MediaSource.isTypeSupported
        var avcdata = codec.split('.');

        if (avcdata.length > 2) {
          var result = avcdata.shift() + '.';
          result += parseInt(avcdata.shift()).toString(16);
          result += ('000' + parseInt(avcdata.shift()).toString(16)).substr(-4);
          return result;
        }

        return codec;
      };

      M3U8Parser.resolve = function resolve(url, baseUrl) {
        return url_toolkit__WEBPACK_IMPORTED_MODULE_1__["buildAbsoluteURL"](baseUrl, url, {
          alwaysNormalize: true
        });
      };

      M3U8Parser.parseMasterPlaylist = function parseMasterPlaylist(string, baseurl) {
        var levels = [];
        var sessionData = {};
        var hasSessionData = false;
        MASTER_PLAYLIST_REGEX.lastIndex = 0;
        var result;

        while ((result = MASTER_PLAYLIST_REGEX.exec(string)) != null) {
          if (result[1]) {
            // '#EXT-X-STREAM-INF' is found, parse level tag  in group 1
            var attrs = new _utils_attr_list__WEBPACK_IMPORTED_MODULE_5__["AttrList"](result[1]);
            var level = {
              attrs: attrs,
              bitrate: attrs.decimalInteger('AVERAGE-BANDWIDTH') || attrs.decimalInteger('BANDWIDTH'),
              name: attrs.NAME,
              url: M3U8Parser.resolve(result[2], baseurl)
            };
            var resolution = attrs.decimalResolution('RESOLUTION');

            if (resolution) {
              level.width = resolution.width;
              level.height = resolution.height;
            }

            setCodecs((attrs.CODECS || '').split(/[ ,]+/).filter(function (c) {
              return c;
            }), level);

            if (level.videoCodec && level.videoCodec.indexOf('avc1') !== -1) {
              level.videoCodec = M3U8Parser.convertAVC1ToAVCOTI(level.videoCodec);
            }

            levels.push(level);
          } else if (result[3]) {
            // '#EXT-X-SESSION-DATA' is found, parse session data in group 3
            var sessionAttrs = new _utils_attr_list__WEBPACK_IMPORTED_MODULE_5__["AttrList"](result[3]);

            if (sessionAttrs['DATA-ID']) {
              hasSessionData = true;
              sessionData[sessionAttrs['DATA-ID']] = sessionAttrs;
            }
          }
        }

        return {
          levels: levels,
          sessionData: hasSessionData ? sessionData : null
        };
      };

      M3U8Parser.parseMasterPlaylistMedia = function parseMasterPlaylistMedia(string, baseurl, type, groups) {
        if (groups === void 0) {
          groups = [];
        }

        var result;
        var medias = [];
        var id = 0;
        MASTER_PLAYLIST_MEDIA_REGEX.lastIndex = 0;

        while ((result = MASTER_PLAYLIST_MEDIA_REGEX.exec(string)) !== null) {
          var attrs = new _utils_attr_list__WEBPACK_IMPORTED_MODULE_5__["AttrList"](result[1]);

          if (attrs.TYPE === type) {
            var media = {
              attrs: attrs,
              bitrate: 0,
              id: id++,
              groupId: attrs['GROUP-ID'],
              instreamId: attrs['INSTREAM-ID'],
              name: attrs.NAME || attrs.LANGUAGE || '',
              type: type,
              default: attrs.bool('DEFAULT'),
              autoselect: attrs.bool('AUTOSELECT'),
              forced: attrs.bool('FORCED'),
              lang: attrs.LANGUAGE,
              url: attrs.URI ? M3U8Parser.resolve(attrs.URI, baseurl) : ''
            };

            if (groups.length) {
              // If there are audio or text groups signalled in the manifest, let's look for a matching codec string for this track
              // If we don't find the track signalled, lets use the first audio groups codec we have
              // Acting as a best guess
              var groupCodec = M3U8Parser.findGroup(groups, media.groupId) || groups[0];
              assignCodec(media, groupCodec, 'audioCodec');
              assignCodec(media, groupCodec, 'textCodec');
            }

            medias.push(media);
          }
        }

        return medias;
      };

      M3U8Parser.parseLevelPlaylist = function parseLevelPlaylist(string, baseurl, id, type, levelUrlId) {
        var level = new _level_details__WEBPACK_IMPORTED_MODULE_3__["LevelDetails"](baseurl);
        var fragments = level.fragments; // The most recent init segment seen (applies to all subsequent segments)

        var currentInitSegment = null;
        var currentSN = 0;
        var currentPart = 0;
        var totalduration = 0;
        var discontinuityCounter = 0;
        var prevFrag = null;
        var frag = new _fragment__WEBPACK_IMPORTED_MODULE_2__["Fragment"](type, baseurl);
        var result;
        var i;
        var levelkey;
        var firstPdtIndex = -1;
        var createNextFrag = false;
        LEVEL_PLAYLIST_REGEX_FAST.lastIndex = 0;
        level.m3u8 = string;

        while ((result = LEVEL_PLAYLIST_REGEX_FAST.exec(string)) !== null) {
          if (createNextFrag) {
            createNextFrag = false;
            frag = new _fragment__WEBPACK_IMPORTED_MODULE_2__["Fragment"](type, baseurl); // setup the next fragment for part loading

            frag.start = totalduration;
            frag.sn = currentSN;
            frag.cc = discontinuityCounter;
            frag.level = id;

            if (currentInitSegment) {
              frag.initSegment = currentInitSegment;
              frag.rawProgramDateTime = currentInitSegment.rawProgramDateTime;
            }
          }

          var duration = result[1];

          if (duration) {
            // INF
            frag.duration = parseFloat(duration); // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939

            var title = (' ' + result[2]).slice(1);
            frag.title = title || null;
            frag.tagList.push(title ? ['INF', duration, title] : ['INF', duration]);
          } else if (result[3]) {
            // url
            if (Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(frag.duration)) {
              frag.start = totalduration;

              if (levelkey) {
                frag.levelkey = levelkey;
              }

              frag.sn = currentSN;
              frag.level = id;
              frag.cc = discontinuityCounter;
              frag.urlId = levelUrlId;
              fragments.push(frag); // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939

              frag.relurl = (' ' + result[3]).slice(1);
              assignProgramDateTime(frag, prevFrag);
              prevFrag = frag;
              totalduration += frag.duration;
              currentSN++;
              currentPart = 0;
              createNextFrag = true;
            }
          } else if (result[4]) {
            // X-BYTERANGE
            var data = (' ' + result[4]).slice(1);

            if (prevFrag) {
              frag.setByteRange(data, prevFrag);
            } else {
              frag.setByteRange(data);
            }
          } else if (result[5]) {
            // PROGRAM-DATE-TIME
            // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939
            frag.rawProgramDateTime = (' ' + result[5]).slice(1);
            frag.tagList.push(['PROGRAM-DATE-TIME', frag.rawProgramDateTime]);

            if (firstPdtIndex === -1) {
              firstPdtIndex = fragments.length;
            }
          } else {
            result = result[0].match(LEVEL_PLAYLIST_REGEX_SLOW);

            if (!result) {
              _utils_logger__WEBPACK_IMPORTED_MODULE_6__["logger"].warn('No matches on slow regex match for level playlist!');
              continue;
            }

            for (i = 1; i < result.length; i++) {
              if (typeof result[i] !== 'undefined') {
                break;
              }
            } // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939


            var tag = (' ' + result[i]).slice(1);
            var value1 = (' ' + result[i + 1]).slice(1);
            var value2 = result[i + 2] ? (' ' + result[i + 2]).slice(1) : '';

            switch (tag) {
              case 'PLAYLIST-TYPE':
                level.type = value1.toUpperCase();
                break;

              case 'MEDIA-SEQUENCE':
                currentSN = level.startSN = parseInt(value1);
                break;

              case 'SKIP':
                {
                  var skipAttrs = new _utils_attr_list__WEBPACK_IMPORTED_MODULE_5__["AttrList"](value1);
                  var skippedSegments = skipAttrs.decimalInteger('SKIPPED-SEGMENTS');

                  if (Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(skippedSegments)) {
                    level.skippedSegments = skippedSegments; // This will result in fragments[] containing undefined values, which we will fill in with `mergeDetails`

                    for (var _i = skippedSegments; _i--;) {
                      fragments.unshift(null);
                    }

                    currentSN += skippedSegments;
                  }

                  var recentlyRemovedDateranges = skipAttrs.enumeratedString('RECENTLY-REMOVED-DATERANGES');

                  if (recentlyRemovedDateranges) {
                    level.recentlyRemovedDateranges = recentlyRemovedDateranges.split('\t');
                  }

                  break;
                }

              case 'TARGETDURATION':
                level.targetduration = parseFloat(value1);
                break;

              case 'VERSION':
                level.version = parseInt(value1);
                break;

              case 'EXTM3U':
                break;

              case 'ENDLIST':
                level.live = false;
                break;

              case '#':
                if (value1 || value2) {
                  frag.tagList.push(value2 ? [value1, value2] : [value1]);
                }

                break;

              case 'DIS':
                discontinuityCounter++;

              /* falls through */

              case 'GAP':
                frag.tagList.push([tag]);
                break;

              case 'BITRATE':
                frag.tagList.push([tag, value1]);
                break;

              case 'DISCONTINUITY-SEQ':
                discontinuityCounter = parseInt(value1);
                break;

              case 'KEY':
                {
                  var _keyAttrs$enumeratedS;

                  // https://tools.ietf.org/html/rfc8216#section-4.3.2.4
                  var keyAttrs = new _utils_attr_list__WEBPACK_IMPORTED_MODULE_5__["AttrList"](value1);
                  var decryptmethod = keyAttrs.enumeratedString('METHOD');
                  var decrypturi = keyAttrs.URI;
                  var decryptiv = keyAttrs.hexadecimalInteger('IV');
                  var decryptkeyformatversions = keyAttrs.enumeratedString('KEYFORMATVERSIONS');
                  var decryptkeyid = keyAttrs.enumeratedString('KEYID'); // From RFC: This attribute is OPTIONAL; its absence indicates an implicit value of "identity".

                  var decryptkeyformat = (_keyAttrs$enumeratedS = keyAttrs.enumeratedString('KEYFORMAT')) != null ? _keyAttrs$enumeratedS : 'identity';
                  var unsupportedKnownKeyformatsInManifest = ['com.apple.streamingkeydelivery', 'com.microsoft.playready', 'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed', // widevine (v2)
                  'com.widevine' // earlier widevine (v1)
                  ];

                  if (unsupportedKnownKeyformatsInManifest.indexOf(decryptkeyformat) > -1) {
                    _utils_logger__WEBPACK_IMPORTED_MODULE_6__["logger"].warn("Keyformat " + decryptkeyformat + " is not supported from the manifest");
                    continue;
                  } else if (decryptkeyformat !== 'identity') {
                    // We are supposed to skip keys we don't understand.
                    // As we currently only officially support identity keys
                    // from the manifest we shouldn't save any other key.
                    continue;
                  } // TODO: multiple keys can be defined on a fragment, and we need to support this
                  // for clients that support both playready and widevine


                  if (decryptmethod) {
                    // TODO: need to determine if the level key is actually a relative URL
                    // if it isn't, then we should instead construct the LevelKey using fromURI.
                    levelkey = _level_key__WEBPACK_IMPORTED_MODULE_4__["LevelKey"].fromURL(baseurl, decrypturi);

                    if (decrypturi && ['AES-128', 'SAMPLE-AES', 'SAMPLE-AES-CENC'].indexOf(decryptmethod) >= 0) {
                      levelkey.method = decryptmethod;
                      levelkey.keyFormat = decryptkeyformat;

                      if (decryptkeyid) {
                        levelkey.keyID = decryptkeyid;
                      }

                      if (decryptkeyformatversions) {
                        levelkey.keyFormatVersions = decryptkeyformatversions;
                      } // Initialization Vector (IV)


                      levelkey.iv = decryptiv;
                    }
                  }

                  break;
                }

              case 'START':
                {
                  var startAttrs = new _utils_attr_list__WEBPACK_IMPORTED_MODULE_5__["AttrList"](value1);
                  var startTimeOffset = startAttrs.decimalFloatingPoint('TIME-OFFSET'); // TIME-OFFSET can be 0

                  if (Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(startTimeOffset)) {
                    level.startTimeOffset = startTimeOffset;
                  }

                  break;
                }

              case 'MAP':
                {
                  var mapAttrs = new _utils_attr_list__WEBPACK_IMPORTED_MODULE_5__["AttrList"](value1);
                  frag.relurl = mapAttrs.URI;

                  if (mapAttrs.BYTERANGE) {
                    frag.setByteRange(mapAttrs.BYTERANGE);
                  }

                  frag.level = id;
                  frag.sn = 'initSegment';

                  if (levelkey) {
                    frag.levelkey = levelkey;
                  }

                  frag.initSegment = null;
                  currentInitSegment = frag;
                  createNextFrag = true;
                  break;
                }

              case 'SERVER-CONTROL':
                {
                  var serverControlAttrs = new _utils_attr_list__WEBPACK_IMPORTED_MODULE_5__["AttrList"](value1);
                  level.canBlockReload = serverControlAttrs.bool('CAN-BLOCK-RELOAD');
                  level.canSkipUntil = serverControlAttrs.optionalFloat('CAN-SKIP-UNTIL', 0);
                  level.canSkipDateRanges = level.canSkipUntil > 0 && serverControlAttrs.bool('CAN-SKIP-DATERANGES');
                  level.partHoldBack = serverControlAttrs.optionalFloat('PART-HOLD-BACK', 0);
                  level.holdBack = serverControlAttrs.optionalFloat('HOLD-BACK', 0);
                  break;
                }

              case 'PART-INF':
                {
                  var partInfAttrs = new _utils_attr_list__WEBPACK_IMPORTED_MODULE_5__["AttrList"](value1);
                  level.partTarget = partInfAttrs.decimalFloatingPoint('PART-TARGET');
                  break;
                }

              case 'PART':
                {
                  var partList = level.partList;

                  if (!partList) {
                    partList = level.partList = [];
                  }

                  var previousFragmentPart = currentPart > 0 ? partList[partList.length - 1] : undefined;
                  var index = currentPart++;
                  var part = new _fragment__WEBPACK_IMPORTED_MODULE_2__["Part"](new _utils_attr_list__WEBPACK_IMPORTED_MODULE_5__["AttrList"](value1), frag, baseurl, index, previousFragmentPart);
                  partList.push(part);
                  frag.duration += part.duration;
                  break;
                }

              case 'PRELOAD-HINT':
                {
                  var preloadHintAttrs = new _utils_attr_list__WEBPACK_IMPORTED_MODULE_5__["AttrList"](value1);
                  level.preloadHint = preloadHintAttrs;
                  break;
                }

              case 'RENDITION-REPORT':
                {
                  var renditionReportAttrs = new _utils_attr_list__WEBPACK_IMPORTED_MODULE_5__["AttrList"](value1);
                  level.renditionReports = level.renditionReports || [];
                  level.renditionReports.push(renditionReportAttrs);
                  break;
                }

              default:
                _utils_logger__WEBPACK_IMPORTED_MODULE_6__["logger"].warn("line parsed but not handled: " + result);
                break;
            }
          }
        }

        if (prevFrag && !prevFrag.relurl) {
          fragments.pop();
          totalduration -= prevFrag.duration;

          if (level.partList) {
            level.fragmentHint = prevFrag;
          }
        } else if (level.partList) {
          assignProgramDateTime(frag, prevFrag);
          frag.cc = discontinuityCounter;
          level.fragmentHint = frag;
        }

        var fragmentLength = fragments.length;
        var firstFragment = fragments[0];
        var lastFragment = fragments[fragmentLength - 1];
        totalduration += level.skippedSegments * level.targetduration;

        if (totalduration > 0 && fragmentLength && lastFragment) {
          level.averagetargetduration = totalduration / fragmentLength;
          var lastSn = lastFragment.sn;
          level.endSN = lastSn !== 'initSegment' ? lastSn : 0;

          if (firstFragment) {
            level.startCC = firstFragment.cc;

            if (!firstFragment.initSegment) {
              // this is a bit lurky but HLS really has no other way to tell us
              // if the fragments are TS or MP4, except if we download them :/
              // but this is to be able to handle SIDX.
              if (level.fragments.every(function (frag) {
                return frag.relurl && isMP4Url(frag.relurl);
              })) {
                _utils_logger__WEBPACK_IMPORTED_MODULE_6__["logger"].warn('MP4 fragments found but no init segment (probably no MAP, incomplete M3U8), trying to fetch SIDX');
                frag = new _fragment__WEBPACK_IMPORTED_MODULE_2__["Fragment"](type, baseurl);
                frag.relurl = lastFragment.relurl;
                frag.level = id;
                frag.sn = 'initSegment';
                firstFragment.initSegment = frag;
                level.needSidxRanges = true;
              }
            }
          }
        } else {
          level.endSN = 0;
          level.startCC = 0;
        }

        if (level.fragmentHint) {
          totalduration += level.fragmentHint.duration;
        }

        level.totalduration = totalduration;
        level.endCC = discontinuityCounter;
        /**
         * Backfill any missing PDT values
         * "If the first EXT-X-PROGRAM-DATE-TIME tag in a Playlist appears after
         * one or more Media Segment URIs, the client SHOULD extrapolate
         * backward from that tag (using EXTINF durations and/or media
         * timestamps) to associate dates with those segments."
         * We have already extrapolated forward, but all fragments up to the first instance of PDT do not have their PDTs
         * computed.
         */

        if (firstPdtIndex > 0) {
          backfillProgramDateTimes(fragments, firstPdtIndex);
        }

        return level;
      };

      return M3U8Parser;
    }();



    function setCodecs(codecs, level) {
      ['video', 'audio', 'text'].forEach(function (type) {
        var filtered = codecs.filter(function (codec) {
          return Object(_utils_codecs__WEBPACK_IMPORTED_MODULE_7__["isCodecType"])(codec, type);
        });

        if (filtered.length) {
          var preferred = filtered.filter(function (codec) {
            return codec.lastIndexOf('avc1', 0) === 0 || codec.lastIndexOf('mp4a', 0) === 0;
          });
          level[type + "Codec"] = preferred.length > 0 ? preferred[0] : filtered[0]; // remove from list

          codecs = codecs.filter(function (codec) {
            return filtered.indexOf(codec) === -1;
          });
        }
      });
      level.unknownCodecs = codecs;
    }

    function assignCodec(media, groupItem, codecProperty) {
      var codecValue = groupItem[codecProperty];

      if (codecValue) {
        media[codecProperty] = codecValue;
      }
    }

    function backfillProgramDateTimes(fragments, firstPdtIndex) {
      var fragPrev = fragments[firstPdtIndex];

      for (var i = firstPdtIndex; i--;) {
        var frag = fragments[i]; // Exit on delta-playlist skipped segments

        if (!frag) {
          return;
        }

        frag.programDateTime = fragPrev.programDateTime - frag.duration * 1000;
        fragPrev = frag;
      }
    }

    function assignProgramDateTime(frag, prevFrag) {
      if (frag.rawProgramDateTime) {
        frag.programDateTime = Date.parse(frag.rawProgramDateTime);
      } else if (prevFrag !== null && prevFrag !== void 0 && prevFrag.programDateTime) {
        frag.programDateTime = prevFrag.endProgramDateTime;
      }

      if (!Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(frag.programDateTime)) {
        frag.programDateTime = null;
        frag.rawProgramDateTime = null;
      }
    }

    /***/ }),

    /***/ "./src/loader/playlist-loader.ts":
    /*!***************************************!*\
      !*** ./src/loader/playlist-loader.ts ***!
      \***************************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony import */ var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/polyfills/number */ "./src/polyfills/number.ts");
    /* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./src/events.ts");
    /* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../errors */ "./src/errors.ts");
    /* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/logger */ "./src/utils/logger.ts");
    /* harmony import */ var _utils_mp4_tools__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/mp4-tools */ "./src/utils/mp4-tools.ts");
    /* harmony import */ var _m3u8_parser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./m3u8-parser */ "./src/loader/m3u8-parser.ts");
    /* harmony import */ var _types_loader__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../types/loader */ "./src/types/loader.ts");
    /* harmony import */ var _utils_attr_list__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/attr-list */ "./src/utils/attr-list.ts");



    /**
     * PlaylistLoader - delegate for media manifest/playlist loading tasks. Takes care of parsing media to internal data-models.
     *
     * Once loaded, dispatches events with parsed data-models of manifest/levels/audio/subtitle tracks.
     *
     * Uses loader(s) set in config to do actual internal loading of resource tasks.
     *
     * @module
     *
     */








    function mapContextToLevelType(context) {
      var type = context.type;

      switch (type) {
        case _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].AUDIO_TRACK:
          return _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].AUDIO;

        case _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].SUBTITLE_TRACK:
          return _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].SUBTITLE;

        default:
          return _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].MAIN;
      }
    }

    function getResponseUrl(response, context) {
      var url = response.url; // responseURL not supported on some browsers (it is used to detect URL redirection)
      // data-uri mode also not supported (but no need to detect redirection)

      if (url === undefined || url.indexOf('data:') === 0) {
        // fallback to initial URL
        url = context.url;
      }

      return url;
    }

    var PlaylistLoader = /*#__PURE__*/function () {
      function PlaylistLoader(hls) {
        this.hls = void 0;
        this.loaders = Object.create(null);
        this.hls = hls;
        this.registerListeners();
      }

      var _proto = PlaylistLoader.prototype;

      _proto.registerListeners = function registerListeners() {
        var hls = this.hls;
        hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MANIFEST_LOADING, this.onManifestLoading, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].LEVEL_LOADING, this.onLevelLoading, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].AUDIO_TRACK_LOADING, this.onAudioTrackLoading, this);
        hls.on(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].SUBTITLE_TRACK_LOADING, this.onSubtitleTrackLoading, this);
      };

      _proto.unregisterListeners = function unregisterListeners() {
        var hls = this.hls;
        hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MANIFEST_LOADING, this.onManifestLoading, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].LEVEL_LOADING, this.onLevelLoading, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].AUDIO_TRACK_LOADING, this.onAudioTrackLoading, this);
        hls.off(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].SUBTITLE_TRACK_LOADING, this.onSubtitleTrackLoading, this);
      }
      /**
       * Returns defaults or configured loader-type overloads (pLoader and loader config params)
       */
      ;

      _proto.createInternalLoader = function createInternalLoader(context) {
        var config = this.hls.config;
        var PLoader = config.pLoader;
        var Loader = config.loader;
        var InternalLoader = PLoader || Loader;
        var loader = new InternalLoader(config);
        context.loader = loader;
        this.loaders[context.type] = loader;
        return loader;
      };

      _proto.getInternalLoader = function getInternalLoader(context) {
        return this.loaders[context.type];
      };

      _proto.resetInternalLoader = function resetInternalLoader(contextType) {
        if (this.loaders[contextType]) {
          delete this.loaders[contextType];
        }
      }
      /**
       * Call `destroy` on all internal loader instances mapped (one per context type)
       */
      ;

      _proto.destroyInternalLoaders = function destroyInternalLoaders() {
        for (var contextType in this.loaders) {
          var loader = this.loaders[contextType];

          if (loader) {
            loader.destroy();
          }

          this.resetInternalLoader(contextType);
        }
      };

      _proto.destroy = function destroy() {
        this.unregisterListeners();
        this.destroyInternalLoaders();
      };

      _proto.onManifestLoading = function onManifestLoading(event, data) {
        var url = data.url;
        this.load({
          id: null,
          groupId: null,
          level: 0,
          responseType: 'text',
          type: _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].MANIFEST,
          url: url,
          deliveryDirectives: null
        });
      };

      _proto.onLevelLoading = function onLevelLoading(event, data) {
        var id = data.id,
            level = data.level,
            url = data.url,
            deliveryDirectives = data.deliveryDirectives;
        this.load({
          id: id,
          groupId: null,
          level: level,
          responseType: 'text',
          type: _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].LEVEL,
          url: url,
          deliveryDirectives: deliveryDirectives
        });
      };

      _proto.onAudioTrackLoading = function onAudioTrackLoading(event, data) {
        var id = data.id,
            groupId = data.groupId,
            url = data.url,
            deliveryDirectives = data.deliveryDirectives;
        this.load({
          id: id,
          groupId: groupId,
          level: null,
          responseType: 'text',
          type: _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].AUDIO_TRACK,
          url: url,
          deliveryDirectives: deliveryDirectives
        });
      };

      _proto.onSubtitleTrackLoading = function onSubtitleTrackLoading(event, data) {
        var id = data.id,
            groupId = data.groupId,
            url = data.url,
            deliveryDirectives = data.deliveryDirectives;
        this.load({
          id: id,
          groupId: groupId,
          level: null,
          responseType: 'text',
          type: _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].SUBTITLE_TRACK,
          url: url,
          deliveryDirectives: deliveryDirectives
        });
      };

      _proto.load = function load(context) {
        var _context$deliveryDire;

        var config = this.hls.config; // logger.debug(`[playlist-loader]: Loading playlist of type ${context.type}, level: ${context.level}, id: ${context.id}`);
        // Check if a loader for this context already exists

        var loader = this.getInternalLoader(context);

        if (loader) {
          var loaderContext = loader.context;

          if (loaderContext && loaderContext.url === context.url) {
            // same URL can't overlap
            _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].trace('[playlist-loader]: playlist request ongoing');
            return;
          }

          _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].log("[playlist-loader]: aborting previous loader for type: " + context.type);
          loader.abort();
        }

        var maxRetry;
        var timeout;
        var retryDelay;
        var maxRetryDelay; // apply different configs for retries depending on
        // context (manifest, level, audio/subs playlist)

        switch (context.type) {
          case _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].MANIFEST:
            maxRetry = config.manifestLoadingMaxRetry;
            timeout = config.manifestLoadingTimeOut;
            retryDelay = config.manifestLoadingRetryDelay;
            maxRetryDelay = config.manifestLoadingMaxRetryTimeout;
            break;

          case _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].LEVEL:
          case _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].AUDIO_TRACK:
          case _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].SUBTITLE_TRACK:
            // Manage retries in Level/Track Controller
            maxRetry = 0;
            timeout = config.levelLoadingTimeOut;
            break;

          default:
            maxRetry = config.levelLoadingMaxRetry;
            timeout = config.levelLoadingTimeOut;
            retryDelay = config.levelLoadingRetryDelay;
            maxRetryDelay = config.levelLoadingMaxRetryTimeout;
            break;
        }

        loader = this.createInternalLoader(context); // Override level/track timeout for LL-HLS requests
        // (the default of 10000ms is counter productive to blocking playlist reload requests)

        if ((_context$deliveryDire = context.deliveryDirectives) !== null && _context$deliveryDire !== void 0 && _context$deliveryDire.part) {
          var levelDetails;

          if (context.type === _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].LEVEL && context.level !== null) {
            levelDetails = this.hls.levels[context.level].details;
          } else if (context.type === _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].AUDIO_TRACK && context.id !== null) {
            levelDetails = this.hls.audioTracks[context.id].details;
          } else if (context.type === _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].SUBTITLE_TRACK && context.id !== null) {
            levelDetails = this.hls.subtitleTracks[context.id].details;
          }

          if (levelDetails) {
            var partTarget = levelDetails.partTarget;
            var targetDuration = levelDetails.targetduration;

            if (partTarget && targetDuration) {
              timeout = Math.min(Math.max(partTarget * 3, targetDuration * 0.8) * 1000, timeout);
            }
          }
        }

        var loaderConfig = {
          timeout: timeout,
          maxRetry: maxRetry,
          retryDelay: retryDelay,
          maxRetryDelay: maxRetryDelay,
          highWaterMark: 0
        };
        var loaderCallbacks = {
          onSuccess: this.loadsuccess.bind(this),
          onError: this.loaderror.bind(this),
          onTimeout: this.loadtimeout.bind(this)
        }; // logger.debug(`[playlist-loader]: Calling internal loader delegate for URL: ${context.url}`);

        loader.load(context, loaderConfig, loaderCallbacks);
      };

      _proto.loadsuccess = function loadsuccess(response, stats, context, networkDetails) {
        if (networkDetails === void 0) {
          networkDetails = null;
        }

        if (context.isSidxRequest) {
          this.handleSidxRequest(response, context);
          this.handlePlaylistLoaded(response, stats, context, networkDetails);
          return;
        }

        this.resetInternalLoader(context.type);
        var string = response.data; // Validate if it is an M3U8 at all

        if (string.indexOf('#EXTM3U') !== 0) {
          this.handleManifestParsingError(response, context, 'no EXTM3U delimiter', networkDetails);
          return;
        }

        stats.parsing.start = performance.now(); // Check if chunk-list or master. handle empty chunk list case (first EXTINF not signaled, but TARGETDURATION present)

        if (string.indexOf('#EXTINF:') > 0 || string.indexOf('#EXT-X-TARGETDURATION:') > 0) {
          this.handleTrackOrLevelPlaylist(response, stats, context, networkDetails);
        } else {
          this.handleMasterPlaylist(response, stats, context, networkDetails);
        }
      };

      _proto.loaderror = function loaderror(response, context, networkDetails) {
        if (networkDetails === void 0) {
          networkDetails = null;
        }

        this.handleNetworkError(context, networkDetails, false, response);
      };

      _proto.loadtimeout = function loadtimeout(stats, context, networkDetails) {
        if (networkDetails === void 0) {
          networkDetails = null;
        }

        this.handleNetworkError(context, networkDetails, true);
      };

      _proto.handleMasterPlaylist = function handleMasterPlaylist(response, stats, context, networkDetails) {
        var hls = this.hls;
        var string = response.data;
        var url = getResponseUrl(response, context);

        var _M3U8Parser$parseMast = _m3u8_parser__WEBPACK_IMPORTED_MODULE_5__["default"].parseMasterPlaylist(string, url),
            levels = _M3U8Parser$parseMast.levels,
            sessionData = _M3U8Parser$parseMast.sessionData;

        if (!levels.length) {
          this.handleManifestParsingError(response, context, 'no level found in manifest', networkDetails);
          return;
        } // multi level playlist, parse level info


        var audioGroups = levels.map(function (level) {
          return {
            id: level.attrs.AUDIO,
            audioCodec: level.audioCodec
          };
        });
        var subtitleGroups = levels.map(function (level) {
          return {
            id: level.attrs.SUBTITLES,
            textCodec: level.textCodec
          };
        });
        var audioTracks = _m3u8_parser__WEBPACK_IMPORTED_MODULE_5__["default"].parseMasterPlaylistMedia(string, url, 'AUDIO', audioGroups);
        var subtitles = _m3u8_parser__WEBPACK_IMPORTED_MODULE_5__["default"].parseMasterPlaylistMedia(string, url, 'SUBTITLES', subtitleGroups);
        var captions = _m3u8_parser__WEBPACK_IMPORTED_MODULE_5__["default"].parseMasterPlaylistMedia(string, url, 'CLOSED-CAPTIONS');

        if (audioTracks.length) {
          // check if we have found an audio track embedded in main playlist (audio track without URI attribute)
          var embeddedAudioFound = audioTracks.some(function (audioTrack) {
            return !audioTrack.url;
          }); // if no embedded audio track defined, but audio codec signaled in quality level,
          // we need to signal this main audio track this could happen with playlists with
          // alt audio rendition in which quality levels (main)
          // contains both audio+video. but with mixed audio track not signaled

          if (!embeddedAudioFound && levels[0].audioCodec && !levels[0].attrs.AUDIO) {
            _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].log('[playlist-loader]: audio codec signaled in quality level, but no embedded audio track signaled, create one');
            audioTracks.unshift({
              type: 'main',
              name: 'main',
              default: false,
              autoselect: false,
              forced: false,
              id: -1,
              attrs: new _utils_attr_list__WEBPACK_IMPORTED_MODULE_7__["AttrList"]({}),
              bitrate: 0,
              url: ''
            });
          }
        }

        hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MANIFEST_LOADED, {
          levels: levels,
          audioTracks: audioTracks,
          subtitles: subtitles,
          captions: captions,
          url: url,
          stats: stats,
          networkDetails: networkDetails,
          sessionData: sessionData
        });
      };

      _proto.handleTrackOrLevelPlaylist = function handleTrackOrLevelPlaylist(response, stats, context, networkDetails) {
        var hls = this.hls;
        var id = context.id,
            level = context.level,
            type = context.type;
        var url = getResponseUrl(response, context);
        var levelUrlId = Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(id) ? id : 0;
        var levelId = Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(level) ? level : levelUrlId;
        var levelType = mapContextToLevelType(context);
        var levelDetails = _m3u8_parser__WEBPACK_IMPORTED_MODULE_5__["default"].parseLevelPlaylist(response.data, url, levelId, levelType, levelUrlId);

        if (!levelDetails.fragments.length) {
          hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].ERROR, {
            type: _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorTypes"].NETWORK_ERROR,
            details: _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].LEVEL_EMPTY_ERROR,
            fatal: false,
            url: url,
            reason: 'no fragments found in level',
            level: typeof context.level === 'number' ? context.level : undefined
          });
          return;
        } // We have done our first request (Manifest-type) and receive
        // not a master playlist but a chunk-list (track/level)
        // We fire the manifest-loaded event anyway with the parsed level-details
        // by creating a single-level structure for it.


        if (type === _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].MANIFEST) {
          var singleLevel = {
            attrs: new _utils_attr_list__WEBPACK_IMPORTED_MODULE_7__["AttrList"]({}),
            bitrate: 0,
            details: levelDetails,
            name: '',
            url: url
          };
          hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].MANIFEST_LOADED, {
            levels: [singleLevel],
            audioTracks: [],
            url: url,
            stats: stats,
            networkDetails: networkDetails,
            sessionData: null
          });
        } // save parsing time


        stats.parsing.end = performance.now(); // in case we need SIDX ranges
        // return early after calling load for
        // the SIDX box.

        if (levelDetails.needSidxRanges) {
          var _levelDetails$fragmen;

          var sidxUrl = (_levelDetails$fragmen = levelDetails.fragments[0].initSegment) === null || _levelDetails$fragmen === void 0 ? void 0 : _levelDetails$fragmen.url;
          this.load({
            url: sidxUrl,
            isSidxRequest: true,
            type: type,
            level: level,
            levelDetails: levelDetails,
            id: id,
            groupId: null,
            rangeStart: 0,
            rangeEnd: 2048,
            responseType: 'arraybuffer',
            deliveryDirectives: null
          });
          return;
        } // extend the context with the new levelDetails property


        context.levelDetails = levelDetails;
        this.handlePlaylistLoaded(response, stats, context, networkDetails);
      };

      _proto.handleSidxRequest = function handleSidxRequest(response, context) {
        var sidxInfo = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_4__["parseSegmentIndex"])(new Uint8Array(response.data)); // if provided fragment does not contain sidx, early return

        if (!sidxInfo) {
          return;
        }

        var sidxReferences = sidxInfo.references;
        var levelDetails = context.levelDetails;
        sidxReferences.forEach(function (segmentRef, index) {
          var segRefInfo = segmentRef.info;
          var frag = levelDetails.fragments[index];

          if (frag.byteRange.length === 0) {
            frag.setByteRange(String(1 + segRefInfo.end - segRefInfo.start) + '@' + String(segRefInfo.start));
          }

          if (frag.initSegment) {
            frag.initSegment.setByteRange(String(sidxInfo.moovEndOffset) + '@0');
          }
        });
      };

      _proto.handleManifestParsingError = function handleManifestParsingError(response, context, reason, networkDetails) {
        this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].ERROR, {
          type: _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorTypes"].NETWORK_ERROR,
          details: _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].MANIFEST_PARSING_ERROR,
          fatal: context.type === _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].MANIFEST,
          url: response.url,
          reason: reason,
          response: response,
          context: context,
          networkDetails: networkDetails
        });
      };

      _proto.handleNetworkError = function handleNetworkError(context, networkDetails, timeout, response) {
        if (timeout === void 0) {
          timeout = false;
        }

        _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].warn("[playlist-loader]: A network " + (timeout ? 'timeout' : 'error') + " occurred while loading " + context.type + " level: " + context.level + " id: " + context.id + " group-id: \"" + context.groupId + "\"");
        var details = _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].UNKNOWN;
        var fatal = false;
        var loader = this.getInternalLoader(context);

        switch (context.type) {
          case _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].MANIFEST:
            details = timeout ? _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].MANIFEST_LOAD_TIMEOUT : _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].MANIFEST_LOAD_ERROR;
            fatal = true;
            break;

          case _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].LEVEL:
            details = timeout ? _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].LEVEL_LOAD_TIMEOUT : _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].LEVEL_LOAD_ERROR;
            fatal = false;
            break;

          case _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].AUDIO_TRACK:
            details = timeout ? _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].AUDIO_TRACK_LOAD_TIMEOUT : _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].AUDIO_TRACK_LOAD_ERROR;
            fatal = false;
            break;

          case _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].SUBTITLE_TRACK:
            details = timeout ? _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].SUBTITLE_TRACK_LOAD_TIMEOUT : _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorDetails"].SUBTITLE_LOAD_ERROR;
            fatal = false;
            break;
        }

        if (loader) {
          this.resetInternalLoader(context.type);
        }

        var errorData = {
          type: _errors__WEBPACK_IMPORTED_MODULE_2__["ErrorTypes"].NETWORK_ERROR,
          details: details,
          fatal: fatal,
          url: context.url,
          loader: loader,
          context: context,
          networkDetails: networkDetails
        };

        if (response) {
          errorData.response = response;
        }

        this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].ERROR, errorData);
      };

      _proto.handlePlaylistLoaded = function handlePlaylistLoaded(response, stats, context, networkDetails) {
        var type = context.type,
            level = context.level,
            id = context.id,
            groupId = context.groupId,
            loader = context.loader,
            levelDetails = context.levelDetails,
            deliveryDirectives = context.deliveryDirectives;

        if (!(levelDetails !== null && levelDetails !== void 0 && levelDetails.targetduration)) {
          this.handleManifestParsingError(response, context, 'invalid target duration', networkDetails);
          return;
        }

        if (!loader) {
          return;
        }

        if (levelDetails.live) {
          if (loader.getCacheAge) {
            levelDetails.ageHeader = loader.getCacheAge() || 0;
          }

          if (!loader.getCacheAge || isNaN(levelDetails.ageHeader)) {
            levelDetails.ageHeader = 0;
          }
        }

        switch (type) {
          case _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].MANIFEST:
          case _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].LEVEL:
            this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].LEVEL_LOADED, {
              details: levelDetails,
              level: level || 0,
              id: id || 0,
              stats: stats,
              networkDetails: networkDetails,
              deliveryDirectives: deliveryDirectives
            });
            break;

          case _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].AUDIO_TRACK:
            this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].AUDIO_TRACK_LOADED, {
              details: levelDetails,
              id: id || 0,
              groupId: groupId || '',
              stats: stats,
              networkDetails: networkDetails,
              deliveryDirectives: deliveryDirectives
            });
            break;

          case _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistContextType"].SUBTITLE_TRACK:
            this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["Events"].SUBTITLE_TRACK_LOADED, {
              details: levelDetails,
              id: id || 0,
              groupId: groupId || '',
              stats: stats,
              networkDetails: networkDetails,
              deliveryDirectives: deliveryDirectives
            });
            break;
        }
      };

      return PlaylistLoader;
    }();

    /* harmony default export */ __webpack_exports__["default"] = (PlaylistLoader);

    /***/ }),

    /***/ "./src/polyfills/number.ts":
    /*!*********************************!*\
      !*** ./src/polyfills/number.ts ***!
      \*********************************/
    /*! exports provided: isFiniteNumber, MAX_SAFE_INTEGER */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isFiniteNumber", function() { return isFiniteNumber; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAX_SAFE_INTEGER", function() { return MAX_SAFE_INTEGER; });
    var isFiniteNumber = Number.isFinite || function (value) {
      return typeof value === 'number' && isFinite(value);
    };
    var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;

    /***/ }),

    /***/ "./src/remux/aac-helper.ts":
    /*!*********************************!*\
      !*** ./src/remux/aac-helper.ts ***!
      \*********************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /**
     *  AAC helper
     */
    var AAC = /*#__PURE__*/function () {
      function AAC() {}

      AAC.getSilentFrame = function getSilentFrame(codec, channelCount) {
        switch (codec) {
          case 'mp4a.40.2':
            if (channelCount === 1) {
              return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x23, 0x80]);
            } else if (channelCount === 2) {
              return new Uint8Array([0x21, 0x00, 0x49, 0x90, 0x02, 0x19, 0x00, 0x23, 0x80]);
            } else if (channelCount === 3) {
              return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x8e]);
            } else if (channelCount === 4) {
              return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x80, 0x2c, 0x80, 0x08, 0x02, 0x38]);
            } else if (channelCount === 5) {
              return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x38]);
            } else if (channelCount === 6) {
              return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x00, 0xb2, 0x00, 0x20, 0x08, 0xe0]);
            }

            break;
          // handle HE-AAC below (mp4a.40.5 / mp4a.40.29)

          default:
            if (channelCount === 1) {
              // ffmpeg -y -f lavfi -i "aevalsrc=0:d=0.05" -c:a libfdk_aac -profile:a aac_he -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
              return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x4e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x1c, 0x6, 0xf1, 0xc1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);
            } else if (channelCount === 2) {
              // ffmpeg -y -f lavfi -i "aevalsrc=0|0:d=0.05" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
              return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);
            } else if (channelCount === 3) {
              // ffmpeg -y -f lavfi -i "aevalsrc=0|0|0:d=0.05" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
              return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);
            }

            break;
        }

        return undefined;
      };

      return AAC;
    }();

    /* harmony default export */ __webpack_exports__["default"] = (AAC);

    /***/ }),

    /***/ "./src/remux/mp4-generator.ts":
    /*!************************************!*\
      !*** ./src/remux/mp4-generator.ts ***!
      \************************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /**
     * Generate MP4 Box
     */
    var UINT32_MAX = Math.pow(2, 32) - 1;

    var MP4 = /*#__PURE__*/function () {
      function MP4() {}

      MP4.init = function init() {
        MP4.types = {
          avc1: [],
          // codingname
          avcC: [],
          btrt: [],
          dinf: [],
          dref: [],
          esds: [],
          ftyp: [],
          hdlr: [],
          mdat: [],
          mdhd: [],
          mdia: [],
          mfhd: [],
          minf: [],
          moof: [],
          moov: [],
          mp4a: [],
          '.mp3': [],
          mvex: [],
          mvhd: [],
          pasp: [],
          sdtp: [],
          stbl: [],
          stco: [],
          stsc: [],
          stsd: [],
          stsz: [],
          stts: [],
          tfdt: [],
          tfhd: [],
          traf: [],
          trak: [],
          trun: [],
          trex: [],
          tkhd: [],
          vmhd: [],
          smhd: []
        };
        var i;

        for (i in MP4.types) {
          if (MP4.types.hasOwnProperty(i)) {
            MP4.types[i] = [i.charCodeAt(0), i.charCodeAt(1), i.charCodeAt(2), i.charCodeAt(3)];
          }
        }

        var videoHdlr = new Uint8Array([0x00, // version 0
        0x00, 0x00, 0x00, // flags
        0x00, 0x00, 0x00, 0x00, // pre_defined
        0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'
        0x00, 0x00, 0x00, 0x00, // reserved
        0x00, 0x00, 0x00, 0x00, // reserved
        0x00, 0x00, 0x00, 0x00, // reserved
        0x56, 0x69, 0x64, 0x65, 0x6f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'VideoHandler'
        ]);
        var audioHdlr = new Uint8Array([0x00, // version 0
        0x00, 0x00, 0x00, // flags
        0x00, 0x00, 0x00, 0x00, // pre_defined
        0x73, 0x6f, 0x75, 0x6e, // handler_type: 'soun'
        0x00, 0x00, 0x00, 0x00, // reserved
        0x00, 0x00, 0x00, 0x00, // reserved
        0x00, 0x00, 0x00, 0x00, // reserved
        0x53, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'SoundHandler'
        ]);
        MP4.HDLR_TYPES = {
          video: videoHdlr,
          audio: audioHdlr
        };
        var dref = new Uint8Array([0x00, // version 0
        0x00, 0x00, 0x00, // flags
        0x00, 0x00, 0x00, 0x01, // entry_count
        0x00, 0x00, 0x00, 0x0c, // entry_size
        0x75, 0x72, 0x6c, 0x20, // 'url' type
        0x00, // version 0
        0x00, 0x00, 0x01 // entry_flags
        ]);
        var stco = new Uint8Array([0x00, // version
        0x00, 0x00, 0x00, // flags
        0x00, 0x00, 0x00, 0x00 // entry_count
        ]);
        MP4.STTS = MP4.STSC = MP4.STCO = stco;
        MP4.STSZ = new Uint8Array([0x00, // version
        0x00, 0x00, 0x00, // flags
        0x00, 0x00, 0x00, 0x00, // sample_size
        0x00, 0x00, 0x00, 0x00 // sample_count
        ]);
        MP4.VMHD = new Uint8Array([0x00, // version
        0x00, 0x00, 0x01, // flags
        0x00, 0x00, // graphicsmode
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // opcolor
        ]);
        MP4.SMHD = new Uint8Array([0x00, // version
        0x00, 0x00, 0x00, // flags
        0x00, 0x00, // balance
        0x00, 0x00 // reserved
        ]);
        MP4.STSD = new Uint8Array([0x00, // version 0
        0x00, 0x00, 0x00, // flags
        0x00, 0x00, 0x00, 0x01]); // entry_count

        var majorBrand = new Uint8Array([105, 115, 111, 109]); // isom

        var avc1Brand = new Uint8Array([97, 118, 99, 49]); // avc1

        var minorVersion = new Uint8Array([0, 0, 0, 1]);
        MP4.FTYP = MP4.box(MP4.types.ftyp, majorBrand, minorVersion, majorBrand, avc1Brand);
        MP4.DINF = MP4.box(MP4.types.dinf, MP4.box(MP4.types.dref, dref));
      };

      MP4.box = function box(type) {
        var size = 8;

        for (var _len = arguments.length, payload = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          payload[_key - 1] = arguments[_key];
        }

        var i = payload.length;
        var len = i; // calculate the total size we need to allocate

        while (i--) {
          size += payload[i].byteLength;
        }

        var result = new Uint8Array(size);
        result[0] = size >> 24 & 0xff;
        result[1] = size >> 16 & 0xff;
        result[2] = size >> 8 & 0xff;
        result[3] = size & 0xff;
        result.set(type, 4); // copy the payload into the result

        for (i = 0, size = 8; i < len; i++) {
          // copy payload[i] array @ offset size
          result.set(payload[i], size);
          size += payload[i].byteLength;
        }

        return result;
      };

      MP4.hdlr = function hdlr(type) {
        return MP4.box(MP4.types.hdlr, MP4.HDLR_TYPES[type]);
      };

      MP4.mdat = function mdat(data) {
        return MP4.box(MP4.types.mdat, data);
      };

      MP4.mdhd = function mdhd(timescale, duration) {
        duration *= timescale;
        var upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));
        var lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));
        return MP4.box(MP4.types.mdhd, new Uint8Array([0x01, // version 1
        0x00, 0x00, 0x00, // flags
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // creation_time
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // modification_time
        timescale >> 24 & 0xff, timescale >> 16 & 0xff, timescale >> 8 & 0xff, timescale & 0xff, // timescale
        upperWordDuration >> 24, upperWordDuration >> 16 & 0xff, upperWordDuration >> 8 & 0xff, upperWordDuration & 0xff, lowerWordDuration >> 24, lowerWordDuration >> 16 & 0xff, lowerWordDuration >> 8 & 0xff, lowerWordDuration & 0xff, 0x55, 0xc4, // 'und' language (undetermined)
        0x00, 0x00]));
      };

      MP4.mdia = function mdia(track) {
        return MP4.box(MP4.types.mdia, MP4.mdhd(track.timescale, track.duration), MP4.hdlr(track.type), MP4.minf(track));
      };

      MP4.mfhd = function mfhd(sequenceNumber) {
        return MP4.box(MP4.types.mfhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // flags
        sequenceNumber >> 24, sequenceNumber >> 16 & 0xff, sequenceNumber >> 8 & 0xff, sequenceNumber & 0xff // sequence_number
        ]));
      };

      MP4.minf = function minf(track) {
        if (track.type === 'audio') {
          return MP4.box(MP4.types.minf, MP4.box(MP4.types.smhd, MP4.SMHD), MP4.DINF, MP4.stbl(track));
        } else {
          return MP4.box(MP4.types.minf, MP4.box(MP4.types.vmhd, MP4.VMHD), MP4.DINF, MP4.stbl(track));
        }
      };

      MP4.moof = function moof(sn, baseMediaDecodeTime, track) {
        return MP4.box(MP4.types.moof, MP4.mfhd(sn), MP4.traf(track, baseMediaDecodeTime));
      }
      /**
       * @param tracks... (optional) {array} the tracks associated with this movie
       */
      ;

      MP4.moov = function moov(tracks) {
        var i = tracks.length;
        var boxes = [];

        while (i--) {
          boxes[i] = MP4.trak(tracks[i]);
        }

        return MP4.box.apply(null, [MP4.types.moov, MP4.mvhd(tracks[0].timescale, tracks[0].duration)].concat(boxes).concat(MP4.mvex(tracks)));
      };

      MP4.mvex = function mvex(tracks) {
        var i = tracks.length;
        var boxes = [];

        while (i--) {
          boxes[i] = MP4.trex(tracks[i]);
        }

        return MP4.box.apply(null, [MP4.types.mvex].concat(boxes));
      };

      MP4.mvhd = function mvhd(timescale, duration) {
        duration *= timescale;
        var upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));
        var lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));
        var bytes = new Uint8Array([0x01, // version 1
        0x00, 0x00, 0x00, // flags
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // creation_time
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // modification_time
        timescale >> 24 & 0xff, timescale >> 16 & 0xff, timescale >> 8 & 0xff, timescale & 0xff, // timescale
        upperWordDuration >> 24, upperWordDuration >> 16 & 0xff, upperWordDuration >> 8 & 0xff, upperWordDuration & 0xff, lowerWordDuration >> 24, lowerWordDuration >> 16 & 0xff, lowerWordDuration >> 8 & 0xff, lowerWordDuration & 0xff, 0x00, 0x01, 0x00, 0x00, // 1.0 rate
        0x01, 0x00, // 1.0 volume
        0x00, 0x00, // reserved
        0x00, 0x00, 0x00, 0x00, // reserved
        0x00, 0x00, 0x00, 0x00, // reserved
        0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // transformation: unity matrix
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pre_defined
        0xff, 0xff, 0xff, 0xff // next_track_ID
        ]);
        return MP4.box(MP4.types.mvhd, bytes);
      };

      MP4.sdtp = function sdtp(track) {
        var samples = track.samples || [];
        var bytes = new Uint8Array(4 + samples.length);
        var i;
        var flags; // leave the full box header (4 bytes) all zero
        // write the sample table

        for (i = 0; i < samples.length; i++) {
          flags = samples[i].flags;
          bytes[i + 4] = flags.dependsOn << 4 | flags.isDependedOn << 2 | flags.hasRedundancy;
        }

        return MP4.box(MP4.types.sdtp, bytes);
      };

      MP4.stbl = function stbl(track) {
        return MP4.box(MP4.types.stbl, MP4.stsd(track), MP4.box(MP4.types.stts, MP4.STTS), MP4.box(MP4.types.stsc, MP4.STSC), MP4.box(MP4.types.stsz, MP4.STSZ), MP4.box(MP4.types.stco, MP4.STCO));
      };

      MP4.avc1 = function avc1(track) {
        var sps = [];
        var pps = [];
        var i;
        var data;
        var len; // assemble the SPSs

        for (i = 0; i < track.sps.length; i++) {
          data = track.sps[i];
          len = data.byteLength;
          sps.push(len >>> 8 & 0xff);
          sps.push(len & 0xff); // SPS

          sps = sps.concat(Array.prototype.slice.call(data));
        } // assemble the PPSs


        for (i = 0; i < track.pps.length; i++) {
          data = track.pps[i];
          len = data.byteLength;
          pps.push(len >>> 8 & 0xff);
          pps.push(len & 0xff);
          pps = pps.concat(Array.prototype.slice.call(data));
        }

        var avcc = MP4.box(MP4.types.avcC, new Uint8Array([0x01, // version
        sps[3], // profile
        sps[4], // profile compat
        sps[5], // level
        0xfc | 3, // lengthSizeMinusOne, hard-coded to 4 bytes
        0xe0 | track.sps.length // 3bit reserved (111) + numOfSequenceParameterSets
        ].concat(sps).concat([track.pps.length // numOfPictureParameterSets
        ]).concat(pps))); // "PPS"

        var width = track.width;
        var height = track.height;
        var hSpacing = track.pixelRatio[0];
        var vSpacing = track.pixelRatio[1];
        return MP4.box(MP4.types.avc1, new Uint8Array([0x00, 0x00, 0x00, // reserved
        0x00, 0x00, 0x00, // reserved
        0x00, 0x01, // data_reference_index
        0x00, 0x00, // pre_defined
        0x00, 0x00, // reserved
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pre_defined
        width >> 8 & 0xff, width & 0xff, // width
        height >> 8 & 0xff, height & 0xff, // height
        0x00, 0x48, 0x00, 0x00, // horizresolution
        0x00, 0x48, 0x00, 0x00, // vertresolution
        0x00, 0x00, 0x00, 0x00, // reserved
        0x00, 0x01, // frame_count
        0x12, 0x64, 0x61, 0x69, 0x6c, // dailymotion/hls.js
        0x79, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x68, 0x6c, 0x73, 0x2e, 0x6a, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // compressorname
        0x00, 0x18, // depth = 24
        0x11, 0x11]), // pre_defined = -1
        avcc, MP4.box(MP4.types.btrt, new Uint8Array([0x00, 0x1c, 0x9c, 0x80, // bufferSizeDB
        0x00, 0x2d, 0xc6, 0xc0, // maxBitrate
        0x00, 0x2d, 0xc6, 0xc0])), // avgBitrate
        MP4.box(MP4.types.pasp, new Uint8Array([hSpacing >> 24, // hSpacing
        hSpacing >> 16 & 0xff, hSpacing >> 8 & 0xff, hSpacing & 0xff, vSpacing >> 24, // vSpacing
        vSpacing >> 16 & 0xff, vSpacing >> 8 & 0xff, vSpacing & 0xff])));
      };

      MP4.esds = function esds(track) {
        var configlen = track.config.length;
        return new Uint8Array([0x00, // version 0
        0x00, 0x00, 0x00, // flags
        0x03, // descriptor_type
        0x17 + configlen, // length
        0x00, 0x01, // es_id
        0x00, // stream_priority
        0x04, // descriptor_type
        0x0f + configlen, // length
        0x40, // codec : mpeg4_audio
        0x15, // stream_type
        0x00, 0x00, 0x00, // buffer_size
        0x00, 0x00, 0x00, 0x00, // maxBitrate
        0x00, 0x00, 0x00, 0x00, // avgBitrate
        0x05 // descriptor_type
        ].concat([configlen]).concat(track.config).concat([0x06, 0x01, 0x02])); // GASpecificConfig)); // length + audio config descriptor
      };

      MP4.mp4a = function mp4a(track) {
        var samplerate = track.samplerate;
        return MP4.box(MP4.types.mp4a, new Uint8Array([0x00, 0x00, 0x00, // reserved
        0x00, 0x00, 0x00, // reserved
        0x00, 0x01, // data_reference_index
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved
        0x00, track.channelCount, // channelcount
        0x00, 0x10, // sampleSize:16bits
        0x00, 0x00, 0x00, 0x00, // reserved2
        samplerate >> 8 & 0xff, samplerate & 0xff, //
        0x00, 0x00]), MP4.box(MP4.types.esds, MP4.esds(track)));
      };

      MP4.mp3 = function mp3(track) {
        var samplerate = track.samplerate;
        return MP4.box(MP4.types['.mp3'], new Uint8Array([0x00, 0x00, 0x00, // reserved
        0x00, 0x00, 0x00, // reserved
        0x00, 0x01, // data_reference_index
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved
        0x00, track.channelCount, // channelcount
        0x00, 0x10, // sampleSize:16bits
        0x00, 0x00, 0x00, 0x00, // reserved2
        samplerate >> 8 & 0xff, samplerate & 0xff, //
        0x00, 0x00]));
      };

      MP4.stsd = function stsd(track) {
        if (track.type === 'audio') {
          if (!track.isAAC && track.codec === 'mp3') {
            return MP4.box(MP4.types.stsd, MP4.STSD, MP4.mp3(track));
          }

          return MP4.box(MP4.types.stsd, MP4.STSD, MP4.mp4a(track));
        } else {
          return MP4.box(MP4.types.stsd, MP4.STSD, MP4.avc1(track));
        }
      };

      MP4.tkhd = function tkhd(track) {
        var id = track.id;
        var duration = track.duration * track.timescale;
        var width = track.width;
        var height = track.height;
        var upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));
        var lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));
        return MP4.box(MP4.types.tkhd, new Uint8Array([0x01, // version 1
        0x00, 0x00, 0x07, // flags
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // creation_time
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // modification_time
        id >> 24 & 0xff, id >> 16 & 0xff, id >> 8 & 0xff, id & 0xff, // track_ID
        0x00, 0x00, 0x00, 0x00, // reserved
        upperWordDuration >> 24, upperWordDuration >> 16 & 0xff, upperWordDuration >> 8 & 0xff, upperWordDuration & 0xff, lowerWordDuration >> 24, lowerWordDuration >> 16 & 0xff, lowerWordDuration >> 8 & 0xff, lowerWordDuration & 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved
        0x00, 0x00, // layer
        0x00, 0x00, // alternate_group
        0x00, 0x00, // non-audio track volume
        0x00, 0x00, // reserved
        0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // transformation: unity matrix
        width >> 8 & 0xff, width & 0xff, 0x00, 0x00, // width
        height >> 8 & 0xff, height & 0xff, 0x00, 0x00 // height
        ]));
      };

      MP4.traf = function traf(track, baseMediaDecodeTime) {
        var sampleDependencyTable = MP4.sdtp(track);
        var id = track.id;
        var upperWordBaseMediaDecodeTime = Math.floor(baseMediaDecodeTime / (UINT32_MAX + 1));
        var lowerWordBaseMediaDecodeTime = Math.floor(baseMediaDecodeTime % (UINT32_MAX + 1));
        return MP4.box(MP4.types.traf, MP4.box(MP4.types.tfhd, new Uint8Array([0x00, // version 0
        0x00, 0x00, 0x00, // flags
        id >> 24, id >> 16 & 0xff, id >> 8 & 0xff, id & 0xff // track_ID
        ])), MP4.box(MP4.types.tfdt, new Uint8Array([0x01, // version 1
        0x00, 0x00, 0x00, // flags
        upperWordBaseMediaDecodeTime >> 24, upperWordBaseMediaDecodeTime >> 16 & 0xff, upperWordBaseMediaDecodeTime >> 8 & 0xff, upperWordBaseMediaDecodeTime & 0xff, lowerWordBaseMediaDecodeTime >> 24, lowerWordBaseMediaDecodeTime >> 16 & 0xff, lowerWordBaseMediaDecodeTime >> 8 & 0xff, lowerWordBaseMediaDecodeTime & 0xff])), MP4.trun(track, sampleDependencyTable.length + 16 + // tfhd
        20 + // tfdt
        8 + // traf header
        16 + // mfhd
        8 + // moof header
        8), // mdat header
        sampleDependencyTable);
      }
      /**
       * Generate a track box.
       * @param track {object} a track definition
       * @return {Uint8Array} the track box
       */
      ;

      MP4.trak = function trak(track) {
        track.duration = track.duration || 0xffffffff;
        return MP4.box(MP4.types.trak, MP4.tkhd(track), MP4.mdia(track));
      };

      MP4.trex = function trex(track) {
        var id = track.id;
        return MP4.box(MP4.types.trex, new Uint8Array([0x00, // version 0
        0x00, 0x00, 0x00, // flags
        id >> 24, id >> 16 & 0xff, id >> 8 & 0xff, id & 0xff, // track_ID
        0x00, 0x00, 0x00, 0x01, // default_sample_description_index
        0x00, 0x00, 0x00, 0x00, // default_sample_duration
        0x00, 0x00, 0x00, 0x00, // default_sample_size
        0x00, 0x01, 0x00, 0x01 // default_sample_flags
        ]));
      };

      MP4.trun = function trun(track, offset) {
        var samples = track.samples || [];
        var len = samples.length;
        var arraylen = 12 + 16 * len;
        var array = new Uint8Array(arraylen);
        var i;
        var sample;
        var duration;
        var size;
        var flags;
        var cts;
        offset += 8 + arraylen;
        array.set([0x00, // version 0
        0x00, 0x0f, 0x01, // flags
        len >>> 24 & 0xff, len >>> 16 & 0xff, len >>> 8 & 0xff, len & 0xff, // sample_count
        offset >>> 24 & 0xff, offset >>> 16 & 0xff, offset >>> 8 & 0xff, offset & 0xff // data_offset
        ], 0);

        for (i = 0; i < len; i++) {
          sample = samples[i];
          duration = sample.duration;
          size = sample.size;
          flags = sample.flags;
          cts = sample.cts;
          array.set([duration >>> 24 & 0xff, duration >>> 16 & 0xff, duration >>> 8 & 0xff, duration & 0xff, // sample_duration
          size >>> 24 & 0xff, size >>> 16 & 0xff, size >>> 8 & 0xff, size & 0xff, // sample_size
          flags.isLeading << 2 | flags.dependsOn, flags.isDependedOn << 6 | flags.hasRedundancy << 4 | flags.paddingValue << 1 | flags.isNonSync, flags.degradPrio & 0xf0 << 8, flags.degradPrio & 0x0f, // sample_flags
          cts >>> 24 & 0xff, cts >>> 16 & 0xff, cts >>> 8 & 0xff, cts & 0xff // sample_composition_time_offset
          ], 12 + 16 * i);
        }

        return MP4.box(MP4.types.trun, array);
      };

      MP4.initSegment = function initSegment(tracks) {
        if (!MP4.types) {
          MP4.init();
        }

        var movie = MP4.moov(tracks);
        var result = new Uint8Array(MP4.FTYP.byteLength + movie.byteLength);
        result.set(MP4.FTYP);
        result.set(movie, MP4.FTYP.byteLength);
        return result;
      };

      return MP4;
    }();

    MP4.types = void 0;
    MP4.HDLR_TYPES = void 0;
    MP4.STTS = void 0;
    MP4.STSC = void 0;
    MP4.STCO = void 0;
    MP4.STSZ = void 0;
    MP4.VMHD = void 0;
    MP4.SMHD = void 0;
    MP4.STSD = void 0;
    MP4.FTYP = void 0;
    MP4.DINF = void 0;
    /* harmony default export */ __webpack_exports__["default"] = (MP4);

    /***/ }),

    /***/ "./src/remux/mp4-remuxer.ts":
    /*!**********************************!*\
      !*** ./src/remux/mp4-remuxer.ts ***!
      \**********************************/
    /*! exports provided: default, normalizePts */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MP4Remuxer; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalizePts", function() { return normalizePts; });
    /* harmony import */ var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/polyfills/number */ "./src/polyfills/number.ts");
    /* harmony import */ var _aac_helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./aac-helper */ "./src/remux/aac-helper.ts");
    /* harmony import */ var _mp4_generator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mp4-generator */ "./src/remux/mp4-generator.ts");
    /* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../events */ "./src/events.ts");
    /* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../errors */ "./src/errors.ts");
    /* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/logger */ "./src/utils/logger.ts");
    /* harmony import */ var _types_loader__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../types/loader */ "./src/types/loader.ts");
    /* harmony import */ var _utils_timescale_conversion__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/timescale-conversion */ "./src/utils/timescale-conversion.ts");


    function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }








    var MAX_SILENT_FRAME_DURATION = 10 * 1000; // 10 seconds

    var AAC_SAMPLES_PER_FRAME = 1024;
    var MPEG_AUDIO_SAMPLE_PER_FRAME = 1152;
    var chromeVersion = null;
    var safariWebkitVersion = null;
    var requiresPositiveDts = false;

    var MP4Remuxer = /*#__PURE__*/function () {
      function MP4Remuxer(observer, config, typeSupported, vendor) {

        this.observer = void 0;
        this.config = void 0;
        this.typeSupported = void 0;
        this.ISGenerated = false;
        this._initPTS = void 0;
        this._initDTS = void 0;
        this.nextAvcDts = null;
        this.nextAudioPts = null;
        this.isAudioContiguous = false;
        this.isVideoContiguous = false;
        this.observer = observer;
        this.config = config;
        this.typeSupported = typeSupported;
        this.ISGenerated = false;

        if (chromeVersion === null) {
          var userAgent = navigator.userAgent || '';
          var result = userAgent.match(/Chrome\/(\d+)/i);
          chromeVersion = result ? parseInt(result[1]) : 0;
        }

        if (safariWebkitVersion === null) {
          var _result = navigator.userAgent.match(/Safari\/(\d+)/i);

          safariWebkitVersion = _result ? parseInt(_result[1]) : 0;
        }

        requiresPositiveDts = !!chromeVersion && chromeVersion < 75 || !!safariWebkitVersion && safariWebkitVersion < 600;
      }

      var _proto = MP4Remuxer.prototype;

      _proto.destroy = function destroy() {};

      _proto.resetTimeStamp = function resetTimeStamp(defaultTimeStamp) {
        _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].log('[mp4-remuxer]: initPTS & initDTS reset');
        this._initPTS = this._initDTS = defaultTimeStamp;
      };

      _proto.resetNextTimestamp = function resetNextTimestamp() {
        _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].log('[mp4-remuxer]: reset next timestamp');
        this.isVideoContiguous = false;
        this.isAudioContiguous = false;
      };

      _proto.resetInitSegment = function resetInitSegment() {
        _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].log('[mp4-remuxer]: ISGenerated flag reset');
        this.ISGenerated = false;
      };

      _proto.getVideoStartPts = function getVideoStartPts(videoSamples) {
        var rolloverDetected = false;
        var startPTS = videoSamples.reduce(function (minPTS, sample) {
          var delta = sample.pts - minPTS;

          if (delta < -4294967296) {
            // 2^32, see PTSNormalize for reasoning, but we're hitting a rollover here, and we don't want that to impact the timeOffset calculation
            rolloverDetected = true;
            return normalizePts(minPTS, sample.pts);
          } else if (delta > 0) {
            return minPTS;
          } else {
            return sample.pts;
          }
        }, videoSamples[0].pts);

        if (rolloverDetected) {
          _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].debug('PTS rollover detected');
        }

        return startPTS;
      };

      _proto.remux = function remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, accurateTimeOffset, flush, playlistType) {
        var video;
        var audio;
        var initSegment;
        var text;
        var id3;
        var independent;
        var audioTimeOffset = timeOffset;
        var videoTimeOffset = timeOffset; // If we're remuxing audio and video progressively, wait until we've received enough samples for each track before proceeding.
        // This is done to synchronize the audio and video streams. We know if the current segment will have samples if the "pid"
        // parameter is greater than -1. The pid is set when the PMT is parsed, which contains the tracks list.
        // However, if the initSegment has already been generated, or we've reached the end of a segment (flush),
        // then we can remux one track without waiting for the other.

        var hasAudio = audioTrack.pid > -1;
        var hasVideo = videoTrack.pid > -1;
        var length = videoTrack.samples.length;
        var enoughAudioSamples = audioTrack.samples.length > 0;
        var enoughVideoSamples = length > 1;
        var canRemuxAvc = (!hasAudio || enoughAudioSamples) && (!hasVideo || enoughVideoSamples) || this.ISGenerated || flush;

        if (canRemuxAvc) {
          if (!this.ISGenerated) {
            initSegment = this.generateIS(audioTrack, videoTrack, timeOffset);
          }

          var isVideoContiguous = this.isVideoContiguous;
          var firstKeyFrameIndex = -1;

          if (enoughVideoSamples) {
            firstKeyFrameIndex = findKeyframeIndex(videoTrack.samples);

            if (!isVideoContiguous && this.config.forceKeyFrameOnDiscontinuity) {
              independent = true;

              if (firstKeyFrameIndex > 0) {
                _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].warn("[mp4-remuxer]: Dropped " + firstKeyFrameIndex + " out of " + length + " video samples due to a missing keyframe");
                var startPTS = this.getVideoStartPts(videoTrack.samples);
                videoTrack.samples = videoTrack.samples.slice(firstKeyFrameIndex);
                videoTrack.dropped += firstKeyFrameIndex;
                videoTimeOffset += (videoTrack.samples[0].pts - startPTS) / (videoTrack.timescale || 90000);
              } else if (firstKeyFrameIndex === -1) {
                _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].warn("[mp4-remuxer]: No keyframe found out of " + length + " video samples");
                independent = false;
              }
            }
          }

          if (this.ISGenerated) {
            if (enoughAudioSamples && enoughVideoSamples) {
              // timeOffset is expected to be the offset of the first timestamp of this fragment (first DTS)
              // if first audio DTS is not aligned with first video DTS then we need to take that into account
              // when providing timeOffset to remuxAudio / remuxVideo. if we don't do that, there might be a permanent / small
              // drift between audio and video streams
              var _startPTS = this.getVideoStartPts(videoTrack.samples);

              var tsDelta = normalizePts(audioTrack.samples[0].pts, _startPTS) - _startPTS;

              var audiovideoTimestampDelta = tsDelta / videoTrack.inputTimeScale;
              audioTimeOffset += Math.max(0, audiovideoTimestampDelta);
              videoTimeOffset += Math.max(0, -audiovideoTimestampDelta);
            } // Purposefully remuxing audio before video, so that remuxVideo can use nextAudioPts, which is calculated in remuxAudio.


            if (enoughAudioSamples) {
              // if initSegment was generated without audio samples, regenerate it again
              if (!audioTrack.samplerate) {
                _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].warn('[mp4-remuxer]: regenerate InitSegment as audio detected');
                initSegment = this.generateIS(audioTrack, videoTrack, timeOffset);
              }

              audio = this.remuxAudio(audioTrack, audioTimeOffset, this.isAudioContiguous, accurateTimeOffset, hasVideo || enoughVideoSamples || playlistType === _types_loader__WEBPACK_IMPORTED_MODULE_6__["PlaylistLevelType"].AUDIO ? videoTimeOffset : undefined);

              if (enoughVideoSamples) {
                var audioTrackLength = audio ? audio.endPTS - audio.startPTS : 0; // if initSegment was generated without video samples, regenerate it again

                if (!videoTrack.inputTimeScale) {
                  _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].warn('[mp4-remuxer]: regenerate InitSegment as video detected');
                  initSegment = this.generateIS(audioTrack, videoTrack, timeOffset);
                }

                video = this.remuxVideo(videoTrack, videoTimeOffset, isVideoContiguous, audioTrackLength);
              }
            } else if (enoughVideoSamples) {
              video = this.remuxVideo(videoTrack, videoTimeOffset, isVideoContiguous, 0);
            }

            if (video) {
              video.firstKeyFrame = firstKeyFrameIndex;
              video.independent = firstKeyFrameIndex !== -1;
            }
          }
        } // Allow ID3 and text to remux, even if more audio/video samples are required


        if (this.ISGenerated) {
          if (id3Track.samples.length) {
            id3 = this.remuxID3(id3Track, timeOffset);
          }

          if (textTrack.samples.length) {
            text = this.remuxText(textTrack, timeOffset);
          }
        }

        return {
          audio: audio,
          video: video,
          initSegment: initSegment,
          independent: independent,
          text: text,
          id3: id3
        };
      };

      _proto.generateIS = function generateIS(audioTrack, videoTrack, timeOffset) {
        var audioSamples = audioTrack.samples;
        var videoSamples = videoTrack.samples;
        var typeSupported = this.typeSupported;
        var tracks = {};
        var computePTSDTS = !Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(this._initPTS);
        var container = 'audio/mp4';
        var initPTS;
        var initDTS;
        var timescale;

        if (computePTSDTS) {
          initPTS = initDTS = Infinity;
        }

        if (audioTrack.config && audioSamples.length) {
          // let's use audio sampling rate as MP4 time scale.
          // rationale is that there is a integer nb of audio frames per audio sample (1024 for AAC)
          // using audio sampling rate here helps having an integer MP4 frame duration
          // this avoids potential rounding issue and AV sync issue
          audioTrack.timescale = audioTrack.samplerate;

          if (!audioTrack.isAAC) {
            if (typeSupported.mpeg) {
              // Chrome and Safari
              container = 'audio/mpeg';
              audioTrack.codec = '';
            } else if (typeSupported.mp3) {
              // Firefox
              audioTrack.codec = 'mp3';
            }
          }

          tracks.audio = {
            id: 'audio',
            container: container,
            codec: audioTrack.codec,
            initSegment: !audioTrack.isAAC && typeSupported.mpeg ? new Uint8Array(0) : _mp4_generator__WEBPACK_IMPORTED_MODULE_2__["default"].initSegment([audioTrack]),
            metadata: {
              channelCount: audioTrack.channelCount
            }
          };

          if (computePTSDTS) {
            timescale = audioTrack.inputTimeScale; // remember first PTS of this demuxing context. for audio, PTS = DTS

            initPTS = initDTS = audioSamples[0].pts - Math.round(timescale * timeOffset);
          }
        }

        if (videoTrack.sps && videoTrack.pps && videoSamples.length) {
          // let's use input time scale as MP4 video timescale
          // we use input time scale straight away to avoid rounding issues on frame duration / cts computation
          videoTrack.timescale = videoTrack.inputTimeScale;
          tracks.video = {
            id: 'main',
            container: 'video/mp4',
            codec: videoTrack.codec,
            initSegment: _mp4_generator__WEBPACK_IMPORTED_MODULE_2__["default"].initSegment([videoTrack]),
            metadata: {
              width: videoTrack.width,
              height: videoTrack.height
            }
          };

          if (computePTSDTS) {
            timescale = videoTrack.inputTimeScale;
            var startPTS = this.getVideoStartPts(videoSamples);
            var startOffset = Math.round(timescale * timeOffset);
            initDTS = Math.min(initDTS, normalizePts(videoSamples[0].dts, startPTS) - startOffset);
            initPTS = Math.min(initPTS, startPTS - startOffset);
          }
        }

        if (Object.keys(tracks).length) {
          this.ISGenerated = true;

          if (computePTSDTS) {
            this._initPTS = initPTS;
            this._initDTS = initDTS;
          }

          return {
            tracks: tracks,
            initPTS: initPTS,
            timescale: timescale
          };
        }
      };

      _proto.remuxVideo = function remuxVideo(track, timeOffset, contiguous, audioTrackLength) {
        var timeScale = track.inputTimeScale;
        var inputSamples = track.samples;
        var outputSamples = [];
        var nbSamples = inputSamples.length;
        var initPTS = this._initPTS;
        var nextAvcDts = this.nextAvcDts;
        var offset = 8;
        var mp4SampleDuration;
        var firstDTS;
        var lastDTS;
        var minPTS = Number.POSITIVE_INFINITY;
        var maxPTS = Number.NEGATIVE_INFINITY;
        var ptsDtsShift = 0;
        var sortSamples = false; // if parsed fragment is contiguous with last one, let's use last DTS value as reference

        if (!contiguous || nextAvcDts === null) {
          var pts = timeOffset * timeScale;
          var cts = inputSamples[0].pts - normalizePts(inputSamples[0].dts, inputSamples[0].pts); // if not contiguous, let's use target timeOffset

          nextAvcDts = pts - cts;
        } // PTS is coded on 33bits, and can loop from -2^32 to 2^32
        // PTSNormalize will make PTS/DTS value monotonic, we use last known DTS value as reference value


        for (var i = 0; i < nbSamples; i++) {
          var sample = inputSamples[i];
          sample.pts = normalizePts(sample.pts - initPTS, nextAvcDts);
          sample.dts = normalizePts(sample.dts - initPTS, nextAvcDts);

          if (sample.dts > sample.pts) {
            var PTS_DTS_SHIFT_TOLERANCE_90KHZ = 90000 * 0.2;
            ptsDtsShift = Math.max(Math.min(ptsDtsShift, sample.pts - sample.dts), -1 * PTS_DTS_SHIFT_TOLERANCE_90KHZ);
          }

          if (sample.dts < inputSamples[i > 0 ? i - 1 : i].dts) {
            sortSamples = true;
          }
        } // sort video samples by DTS then PTS then demux id order


        if (sortSamples) {
          inputSamples.sort(function (a, b) {
            var deltadts = a.dts - b.dts;
            var deltapts = a.pts - b.pts;
            return deltadts || deltapts;
          });
        } // Get first/last DTS


        firstDTS = inputSamples[0].dts;
        lastDTS = inputSamples[inputSamples.length - 1].dts; // on Safari let's signal the same sample duration for all samples
        // sample duration (as expected by trun MP4 boxes), should be the delta between sample DTS
        // set this constant duration as being the avg delta between consecutive DTS.

        var averageSampleDuration = Math.round((lastDTS - firstDTS) / (nbSamples - 1)); // handle broken streams with PTS < DTS, tolerance up 0.2 seconds

        if (ptsDtsShift < 0) {
          if (ptsDtsShift < averageSampleDuration * -2) {
            // Fix for "CNN special report, with CC" in test-streams (including Safari browser)
            // With large PTS < DTS errors such as this, we want to correct CTS while maintaining increasing DTS values
            _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].warn("PTS < DTS detected in video samples, offsetting DTS from PTS by " + Object(_utils_timescale_conversion__WEBPACK_IMPORTED_MODULE_7__["toMsFromMpegTsClock"])(-averageSampleDuration, true) + " ms");
            var lastDts = ptsDtsShift;

            for (var _i = 0; _i < nbSamples; _i++) {
              inputSamples[_i].dts = lastDts = Math.max(lastDts, inputSamples[_i].pts - averageSampleDuration);
              inputSamples[_i].pts = Math.max(lastDts, inputSamples[_i].pts);
            }
          } else {
            // Fix for "Custom IV with bad PTS DTS" in test-streams
            // With smaller PTS < DTS errors we can simply move all DTS back. This increases CTS without causing buffer gaps or decode errors in Safari
            _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].warn("PTS < DTS detected in video samples, shifting DTS by " + Object(_utils_timescale_conversion__WEBPACK_IMPORTED_MODULE_7__["toMsFromMpegTsClock"])(ptsDtsShift, true) + " ms to overcome this issue");

            for (var _i2 = 0; _i2 < nbSamples; _i2++) {
              inputSamples[_i2].dts = inputSamples[_i2].dts + ptsDtsShift;
            }
          }

          firstDTS = inputSamples[0].dts;
        } // if fragment are contiguous, detect hole/overlapping between fragments


        if (contiguous) {
          // check timestamp continuity across consecutive fragments (this is to remove inter-fragment gap/hole)
          var delta = firstDTS - nextAvcDts;
          var foundHole = delta > averageSampleDuration;
          var foundOverlap = delta < -1;

          if (foundHole || foundOverlap) {
            if (foundHole) {
              _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].warn("AVC: " + Object(_utils_timescale_conversion__WEBPACK_IMPORTED_MODULE_7__["toMsFromMpegTsClock"])(delta, true) + " ms (" + delta + "dts) hole between fragments detected, filling it");
            } else {
              _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].warn("AVC: " + Object(_utils_timescale_conversion__WEBPACK_IMPORTED_MODULE_7__["toMsFromMpegTsClock"])(-delta, true) + " ms (" + delta + "dts) overlapping between fragments detected");
            }

            firstDTS = nextAvcDts;
            var firstPTS = inputSamples[0].pts - delta;
            inputSamples[0].dts = firstDTS;
            inputSamples[0].pts = firstPTS;
            _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].log("Video: First PTS/DTS adjusted: " + Object(_utils_timescale_conversion__WEBPACK_IMPORTED_MODULE_7__["toMsFromMpegTsClock"])(firstPTS, true) + "/" + Object(_utils_timescale_conversion__WEBPACK_IMPORTED_MODULE_7__["toMsFromMpegTsClock"])(firstDTS, true) + ", delta: " + Object(_utils_timescale_conversion__WEBPACK_IMPORTED_MODULE_7__["toMsFromMpegTsClock"])(delta, true) + " ms");
          }
        }

        if (requiresPositiveDts) {
          firstDTS = Math.max(0, firstDTS);
        }

        var nbNalu = 0;
        var naluLen = 0;

        for (var _i3 = 0; _i3 < nbSamples; _i3++) {
          // compute total/avc sample length and nb of NAL units
          var _sample = inputSamples[_i3];
          var units = _sample.units;
          var nbUnits = units.length;
          var sampleLen = 0;

          for (var j = 0; j < nbUnits; j++) {
            sampleLen += units[j].data.length;
          }

          naluLen += sampleLen;
          nbNalu += nbUnits;
          _sample.length = sampleLen; // normalize PTS/DTS
          // ensure sample monotonic DTS

          _sample.dts = Math.max(_sample.dts, firstDTS); // ensure that computed value is greater or equal than sample DTS

          _sample.pts = Math.max(_sample.pts, _sample.dts, 0);
          minPTS = Math.min(_sample.pts, minPTS);
          maxPTS = Math.max(_sample.pts, maxPTS);
        }

        lastDTS = inputSamples[nbSamples - 1].dts;
        /* concatenate the video data and construct the mdat in place
          (need 8 more bytes to fill length and mpdat type) */

        var mdatSize = naluLen + 4 * nbNalu + 8;
        var mdat;

        try {
          mdat = new Uint8Array(mdatSize);
        } catch (err) {
          this.observer.emit(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].ERROR, _events__WEBPACK_IMPORTED_MODULE_3__["Events"].ERROR, {
            type: _errors__WEBPACK_IMPORTED_MODULE_4__["ErrorTypes"].MUX_ERROR,
            details: _errors__WEBPACK_IMPORTED_MODULE_4__["ErrorDetails"].REMUX_ALLOC_ERROR,
            fatal: false,
            bytes: mdatSize,
            reason: "fail allocating video mdat " + mdatSize
          });
          return;
        }

        var view = new DataView(mdat.buffer);
        view.setUint32(0, mdatSize);
        mdat.set(_mp4_generator__WEBPACK_IMPORTED_MODULE_2__["default"].types.mdat, 4);

        for (var _i4 = 0; _i4 < nbSamples; _i4++) {
          var avcSample = inputSamples[_i4];
          var avcSampleUnits = avcSample.units;
          var mp4SampleLength = 0; // convert NALU bitstream to MP4 format (prepend NALU with size field)

          for (var _j = 0, _nbUnits = avcSampleUnits.length; _j < _nbUnits; _j++) {
            var unit = avcSampleUnits[_j];
            var unitData = unit.data;
            var unitDataLen = unit.data.byteLength;
            view.setUint32(offset, unitDataLen);
            offset += 4;
            mdat.set(unitData, offset);
            offset += unitDataLen;
            mp4SampleLength += 4 + unitDataLen;
          } // expected sample duration is the Decoding Timestamp diff of consecutive samples


          if (_i4 < nbSamples - 1) {
            mp4SampleDuration = inputSamples[_i4 + 1].dts - avcSample.dts;
          } else {
            var config = this.config;
            var lastFrameDuration = avcSample.dts - inputSamples[_i4 > 0 ? _i4 - 1 : _i4].dts;

            if (config.stretchShortVideoTrack && this.nextAudioPts !== null) {
              // In some cases, a segment's audio track duration may exceed the video track duration.
              // Since we've already remuxed audio, and we know how long the audio track is, we look to
              // see if the delta to the next segment is longer than maxBufferHole.
              // If so, playback would potentially get stuck, so we artificially inflate
              // the duration of the last frame to minimize any potential gap between segments.
              var gapTolerance = Math.floor(config.maxBufferHole * timeScale);
              var deltaToFrameEnd = (audioTrackLength ? minPTS + audioTrackLength * timeScale : this.nextAudioPts) - avcSample.pts;

              if (deltaToFrameEnd > gapTolerance) {
                // We subtract lastFrameDuration from deltaToFrameEnd to try to prevent any video
                // frame overlap. maxBufferHole should be >> lastFrameDuration anyway.
                mp4SampleDuration = deltaToFrameEnd - lastFrameDuration;

                if (mp4SampleDuration < 0) {
                  mp4SampleDuration = lastFrameDuration;
                }

                _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].log("[mp4-remuxer]: It is approximately " + deltaToFrameEnd / 90 + " ms to the next segment; using duration " + mp4SampleDuration / 90 + " ms for the last video frame.");
              } else {
                mp4SampleDuration = lastFrameDuration;
              }
            } else {
              mp4SampleDuration = lastFrameDuration;
            }
          }

          var compositionTimeOffset = Math.round(avcSample.pts - avcSample.dts);
          outputSamples.push(new Mp4Sample(avcSample.key, mp4SampleDuration, mp4SampleLength, compositionTimeOffset));
        }

        if (outputSamples.length && chromeVersion && chromeVersion < 70) {
          // Chrome workaround, mark first sample as being a Random Access Point (keyframe) to avoid sourcebuffer append issue
          // https://code.google.com/p/chromium/issues/detail?id=229412
          var flags = outputSamples[0].flags;
          flags.dependsOn = 2;
          flags.isNonSync = 0;
        }

        console.assert(mp4SampleDuration !== undefined, 'mp4SampleDuration must be computed'); // next AVC sample DTS should be equal to last sample DTS + last sample duration (in PES timescale)

        this.nextAvcDts = nextAvcDts = lastDTS + mp4SampleDuration;
        this.isVideoContiguous = true;
        var moof = _mp4_generator__WEBPACK_IMPORTED_MODULE_2__["default"].moof(track.sequenceNumber++, firstDTS, _extends({}, track, {
          samples: outputSamples
        }));
        var type = 'video';
        var data = {
          data1: moof,
          data2: mdat,
          startPTS: minPTS / timeScale,
          endPTS: (maxPTS + mp4SampleDuration) / timeScale,
          startDTS: firstDTS / timeScale,
          endDTS: nextAvcDts / timeScale,
          type: type,
          hasAudio: false,
          hasVideo: true,
          nb: outputSamples.length,
          dropped: track.dropped
        };
        track.samples = [];
        track.dropped = 0;
        console.assert(mdat.length, 'MDAT length must not be zero');
        return data;
      };

      _proto.remuxAudio = function remuxAudio(track, timeOffset, contiguous, accurateTimeOffset, videoTimeOffset) {
        var inputTimeScale = track.inputTimeScale;
        var mp4timeScale = track.samplerate ? track.samplerate : inputTimeScale;
        var scaleFactor = inputTimeScale / mp4timeScale;
        var mp4SampleDuration = track.isAAC ? AAC_SAMPLES_PER_FRAME : MPEG_AUDIO_SAMPLE_PER_FRAME;
        var inputSampleDuration = mp4SampleDuration * scaleFactor;
        var initPTS = this._initPTS;
        var rawMPEG = !track.isAAC && this.typeSupported.mpeg;
        var outputSamples = [];
        var inputSamples = track.samples;
        var offset = rawMPEG ? 0 : 8;
        var nextAudioPts = this.nextAudioPts || -1; // window.audioSamples ? window.audioSamples.push(inputSamples.map(s => s.pts)) : (window.audioSamples = [inputSamples.map(s => s.pts)]);
        // for audio samples, also consider consecutive fragments as being contiguous (even if a level switch occurs),
        // for sake of clarity:
        // consecutive fragments are frags with
        //  - less than 100ms gaps between new time offset (if accurate) and next expected PTS OR
        //  - less than 20 audio frames distance
        // contiguous fragments are consecutive fragments from same quality level (same level, new SN = old SN + 1)
        // this helps ensuring audio continuity
        // and this also avoids audio glitches/cut when switching quality, or reporting wrong duration on first audio frame

        var timeOffsetMpegTS = timeOffset * inputTimeScale;
        this.isAudioContiguous = contiguous = contiguous || inputSamples.length && nextAudioPts > 0 && (accurateTimeOffset && Math.abs(timeOffsetMpegTS - nextAudioPts) < 9000 || Math.abs(normalizePts(inputSamples[0].pts - initPTS, timeOffsetMpegTS) - nextAudioPts) < 20 * inputSampleDuration); // compute normalized PTS

        inputSamples.forEach(function (sample) {
          sample.pts = normalizePts(sample.pts - initPTS, timeOffsetMpegTS);
        });

        if (!contiguous || nextAudioPts < 0) {
          // filter out sample with negative PTS that are not playable anyway
          // if we don't remove these negative samples, they will shift all audio samples forward.
          // leading to audio overlap between current / next fragment
          inputSamples = inputSamples.filter(function (sample) {
            return sample.pts >= 0;
          }); // in case all samples have negative PTS, and have been filtered out, return now

          if (!inputSamples.length) {
            return;
          }

          if (videoTimeOffset === 0) {
            // Set the start to 0 to match video so that start gaps larger than inputSampleDuration are filled with silence
            nextAudioPts = 0;
          } else if (accurateTimeOffset) {
            // When not seeking, not live, and LevelDetails.PTSKnown, use fragment start as predicted next audio PTS
            nextAudioPts = Math.max(0, timeOffsetMpegTS);
          } else {
            // if frags are not contiguous and if we cant trust time offset, let's use first sample PTS as next audio PTS
            nextAudioPts = inputSamples[0].pts;
          }
        } // If the audio track is missing samples, the frames seem to get "left-shifted" within the
        // resulting mp4 segment, causing sync issues and leaving gaps at the end of the audio segment.
        // In an effort to prevent this from happening, we inject frames here where there are gaps.
        // When possible, we inject a silent frame; when that's not possible, we duplicate the last
        // frame.


        if (track.isAAC) {
          var alignedWithVideo = videoTimeOffset !== undefined;
          var maxAudioFramesDrift = this.config.maxAudioFramesDrift;

          for (var i = 0, nextPts = nextAudioPts; i < inputSamples.length; i++) {
            // First, let's see how far off this frame is from where we expect it to be
            var sample = inputSamples[i];
            var pts = sample.pts;
            var delta = pts - nextPts;
            var duration = Math.abs(1000 * delta / inputTimeScale); // When remuxing with video, if we're overlapping by more than a duration, drop this sample to stay in sync

            if (delta <= -maxAudioFramesDrift * inputSampleDuration && alignedWithVideo) {
              if (i === 0) {
                _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].warn("Audio frame @ " + (pts / inputTimeScale).toFixed(3) + "s overlaps nextAudioPts by " + Math.round(1000 * delta / inputTimeScale) + " ms.");
                this.nextAudioPts = nextAudioPts = nextPts = pts;
              }
            } // eslint-disable-line brace-style
            // Insert missing frames if:
            // 1: We're more than maxAudioFramesDrift frame away
            // 2: Not more than MAX_SILENT_FRAME_DURATION away
            // 3: currentTime (aka nextPtsNorm) is not 0
            // 4: remuxing with video (videoTimeOffset !== undefined)
            else if (delta >= maxAudioFramesDrift * inputSampleDuration && duration < MAX_SILENT_FRAME_DURATION && alignedWithVideo) {
                var missing = Math.round(delta / inputSampleDuration); // Adjust nextPts so that silent samples are aligned with media pts. This will prevent media samples from
                // later being shifted if nextPts is based on timeOffset and delta is not a multiple of inputSampleDuration.

                nextPts = pts - missing * inputSampleDuration;

                if (nextPts < 0) {
                  missing--;
                  nextPts += inputSampleDuration;
                }

                if (i === 0) {
                  this.nextAudioPts = nextAudioPts = nextPts;
                }

                _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].warn("[mp4-remuxer]: Injecting " + missing + " audio frame @ " + (nextPts / inputTimeScale).toFixed(3) + "s due to " + Math.round(1000 * delta / inputTimeScale) + " ms gap.");

                for (var j = 0; j < missing; j++) {
                  var newStamp = Math.max(nextPts, 0);
                  var fillFrame = _aac_helper__WEBPACK_IMPORTED_MODULE_1__["default"].getSilentFrame(track.manifestCodec || track.codec, track.channelCount);

                  if (!fillFrame) {
                    _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].log('[mp4-remuxer]: Unable to get silent frame for given audio codec; duplicating last frame instead.');
                    fillFrame = sample.unit.subarray();
                  }

                  inputSamples.splice(i, 0, {
                    unit: fillFrame,
                    pts: newStamp
                  });
                  nextPts += inputSampleDuration;
                  i++;
                }
              }

            sample.pts = nextPts;
            nextPts += inputSampleDuration;
          }
        }

        var firstPTS = null;
        var lastPTS = null;
        var mdat;
        var mdatSize = 0;
        var sampleLength = inputSamples.length;

        while (sampleLength--) {
          mdatSize += inputSamples[sampleLength].unit.byteLength;
        }

        for (var _j2 = 0, _nbSamples = inputSamples.length; _j2 < _nbSamples; _j2++) {
          var audioSample = inputSamples[_j2];
          var unit = audioSample.unit;
          var _pts = audioSample.pts;

          if (lastPTS !== null) {
            // If we have more than one sample, set the duration of the sample to the "real" duration; the PTS diff with
            // the previous sample
            var prevSample = outputSamples[_j2 - 1];
            prevSample.duration = Math.round((_pts - lastPTS) / scaleFactor);
          } else {
            if (contiguous && track.isAAC) {
              // set PTS/DTS to expected PTS/DTS
              _pts = nextAudioPts;
            } // remember first PTS of our audioSamples


            firstPTS = _pts;

            if (mdatSize > 0) {
              /* concatenate the audio data and construct the mdat in place
                (need 8 more bytes to fill length and mdat type) */
              mdatSize += offset;

              try {
                mdat = new Uint8Array(mdatSize);
              } catch (err) {
                this.observer.emit(_events__WEBPACK_IMPORTED_MODULE_3__["Events"].ERROR, _events__WEBPACK_IMPORTED_MODULE_3__["Events"].ERROR, {
                  type: _errors__WEBPACK_IMPORTED_MODULE_4__["ErrorTypes"].MUX_ERROR,
                  details: _errors__WEBPACK_IMPORTED_MODULE_4__["ErrorDetails"].REMUX_ALLOC_ERROR,
                  fatal: false,
                  bytes: mdatSize,
                  reason: "fail allocating audio mdat " + mdatSize
                });
                return;
              }

              if (!rawMPEG) {
                var view = new DataView(mdat.buffer);
                view.setUint32(0, mdatSize);
                mdat.set(_mp4_generator__WEBPACK_IMPORTED_MODULE_2__["default"].types.mdat, 4);
              }
            } else {
              // no audio samples
              return;
            }
          }

          mdat.set(unit, offset);
          var unitLen = unit.byteLength;
          offset += unitLen; // Default the sample's duration to the computed mp4SampleDuration, which will either be 1024 for AAC or 1152 for MPEG
          // In the case that we have 1 sample, this will be the duration. If we have more than one sample, the duration
          // becomes the PTS diff with the previous sample

          outputSamples.push(new Mp4Sample(true, mp4SampleDuration, unitLen, 0));
          lastPTS = _pts;
        } // We could end up with no audio samples if all input samples were overlapping with the previously remuxed ones


        var nbSamples = outputSamples.length;

        if (!nbSamples) {
          return;
        } // The next audio sample PTS should be equal to last sample PTS + duration


        var lastSample = outputSamples[outputSamples.length - 1];
        this.nextAudioPts = nextAudioPts = lastPTS + scaleFactor * lastSample.duration; // Set the track samples from inputSamples to outputSamples before remuxing

        var moof = rawMPEG ? new Uint8Array(0) : _mp4_generator__WEBPACK_IMPORTED_MODULE_2__["default"].moof(track.sequenceNumber++, firstPTS / scaleFactor, _extends({}, track, {
          samples: outputSamples
        })); // Clear the track samples. This also clears the samples array in the demuxer, since the reference is shared

        track.samples = [];
        var start = firstPTS / inputTimeScale;
        var end = nextAudioPts / inputTimeScale;
        var type = 'audio';
        var audioData = {
          data1: moof,
          data2: mdat,
          startPTS: start,
          endPTS: end,
          startDTS: start,
          endDTS: end,
          type: type,
          hasAudio: true,
          hasVideo: false,
          nb: nbSamples
        };
        this.isAudioContiguous = true;
        console.assert(mdat.length, 'MDAT length must not be zero');
        return audioData;
      };

      _proto.remuxEmptyAudio = function remuxEmptyAudio(track, timeOffset, contiguous, videoData) {
        var inputTimeScale = track.inputTimeScale;
        var mp4timeScale = track.samplerate ? track.samplerate : inputTimeScale;
        var scaleFactor = inputTimeScale / mp4timeScale;
        var nextAudioPts = this.nextAudioPts; // sync with video's timestamp

        var startDTS = (nextAudioPts !== null ? nextAudioPts : videoData.startDTS * inputTimeScale) + this._initDTS;
        var endDTS = videoData.endDTS * inputTimeScale + this._initDTS; // one sample's duration value

        var frameDuration = scaleFactor * AAC_SAMPLES_PER_FRAME; // samples count of this segment's duration

        var nbSamples = Math.ceil((endDTS - startDTS) / frameDuration); // silent frame

        var silentFrame = _aac_helper__WEBPACK_IMPORTED_MODULE_1__["default"].getSilentFrame(track.manifestCodec || track.codec, track.channelCount);
        _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].warn('[mp4-remuxer]: remux empty Audio'); // Can't remux if we can't generate a silent frame...

        if (!silentFrame) {
          _utils_logger__WEBPACK_IMPORTED_MODULE_5__["logger"].trace('[mp4-remuxer]: Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec');
          return;
        }

        var samples = [];

        for (var i = 0; i < nbSamples; i++) {
          var stamp = startDTS + i * frameDuration;
          samples.push({
            unit: silentFrame,
            pts: stamp,
            dts: stamp
          });
        }

        track.samples = samples;
        return this.remuxAudio(track, timeOffset, contiguous, false);
      };

      _proto.remuxID3 = function remuxID3(track, timeOffset) {
        var length = track.samples.length;

        if (!length) {
          return;
        }

        var inputTimeScale = track.inputTimeScale;
        var initPTS = this._initPTS;
        var initDTS = this._initDTS;

        for (var index = 0; index < length; index++) {
          var sample = track.samples[index]; // setting id3 pts, dts to relative time
          // using this._initPTS and this._initDTS to calculate relative time

          sample.pts = normalizePts(sample.pts - initPTS, timeOffset * inputTimeScale) / inputTimeScale;
          sample.dts = normalizePts(sample.dts - initDTS, timeOffset * inputTimeScale) / inputTimeScale;
        }

        var samples = track.samples;
        track.samples = [];
        return {
          samples: samples
        };
      };

      _proto.remuxText = function remuxText(track, timeOffset) {
        var length = track.samples.length;

        if (!length) {
          return;
        }

        var inputTimeScale = track.inputTimeScale;
        var initPTS = this._initPTS;

        for (var index = 0; index < length; index++) {
          var sample = track.samples[index]; // setting text pts, dts to relative time
          // using this._initPTS and this._initDTS to calculate relative time

          sample.pts = normalizePts(sample.pts - initPTS, timeOffset * inputTimeScale) / inputTimeScale;
        }

        track.samples.sort(function (a, b) {
          return a.pts - b.pts;
        });
        var samples = track.samples;
        track.samples = [];
        return {
          samples: samples
        };
      };

      return MP4Remuxer;
    }();


    function normalizePts(value, reference) {
      var offset;

      if (reference === null) {
        return value;
      }

      if (reference < value) {
        // - 2^33
        offset = -8589934592;
      } else {
        // + 2^33
        offset = 8589934592;
      }
      /* PTS is 33bit (from 0 to 2^33 -1)
        if diff between value and reference is bigger than half of the amplitude (2^32) then it means that
        PTS looping occured. fill the gap */


      while (Math.abs(value - reference) > 4294967296) {
        value += offset;
      }

      return value;
    }

    function findKeyframeIndex(samples) {
      for (var i = 0; i < samples.length; i++) {
        if (samples[i].key) {
          return i;
        }
      }

      return -1;
    }

    var Mp4Sample = function Mp4Sample(isKeyframe, duration, size, cts) {
      this.size = void 0;
      this.duration = void 0;
      this.cts = void 0;
      this.flags = void 0;
      this.duration = duration;
      this.size = size;
      this.cts = cts;
      this.flags = new Mp4SampleFlags(isKeyframe);
    };

    var Mp4SampleFlags = function Mp4SampleFlags(isKeyframe) {
      this.isLeading = 0;
      this.isDependedOn = 0;
      this.hasRedundancy = 0;
      this.degradPrio = 0;
      this.dependsOn = 1;
      this.isNonSync = 1;
      this.dependsOn = isKeyframe ? 2 : 1;
      this.isNonSync = isKeyframe ? 0 : 1;
    };

    /***/ }),

    /***/ "./src/remux/passthrough-remuxer.ts":
    /*!******************************************!*\
      !*** ./src/remux/passthrough-remuxer.ts ***!
      \******************************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony import */ var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/polyfills/number */ "./src/polyfills/number.ts");
    /* harmony import */ var _utils_mp4_tools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/mp4-tools */ "./src/utils/mp4-tools.ts");
    /* harmony import */ var _loader_fragment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../loader/fragment */ "./src/loader/fragment.ts");
    /* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/logger */ "./src/utils/logger.ts");






    var PassThroughRemuxer = /*#__PURE__*/function () {
      function PassThroughRemuxer() {
        this.emitInitSegment = false;
        this.audioCodec = void 0;
        this.videoCodec = void 0;
        this.initData = void 0;
        this.initPTS = void 0;
        this.initTracks = void 0;
        this.lastEndDTS = null;
      }

      var _proto = PassThroughRemuxer.prototype;

      _proto.destroy = function destroy() {};

      _proto.resetTimeStamp = function resetTimeStamp(defaultInitPTS) {
        this.initPTS = defaultInitPTS;
        this.lastEndDTS = null;
      };

      _proto.resetNextTimestamp = function resetNextTimestamp() {
        this.lastEndDTS = null;
      };

      _proto.resetInitSegment = function resetInitSegment(initSegment, audioCodec, videoCodec) {
        this.audioCodec = audioCodec;
        this.videoCodec = videoCodec;
        this.generateInitSegment(initSegment);
        this.emitInitSegment = true;
      };

      _proto.generateInitSegment = function generateInitSegment(initSegment) {
        var audioCodec = this.audioCodec,
            videoCodec = this.videoCodec;

        if (!initSegment || !initSegment.byteLength) {
          this.initTracks = undefined;
          this.initData = undefined;
          return;
        }

        var initData = this.initData = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_1__["parseInitSegment"])(initSegment); // Get codec from initSegment or fallback to default

        if (!audioCodec) {
          audioCodec = getParsedTrackCodec(initData.audio, _loader_fragment__WEBPACK_IMPORTED_MODULE_2__["ElementaryStreamTypes"].AUDIO);
        }

        if (!videoCodec) {
          videoCodec = getParsedTrackCodec(initData.video, _loader_fragment__WEBPACK_IMPORTED_MODULE_2__["ElementaryStreamTypes"].VIDEO);
        }

        var tracks = {};

        if (initData.audio && initData.video) {
          tracks.audiovideo = {
            container: 'video/mp4',
            codec: audioCodec + ',' + videoCodec,
            initSegment: initSegment,
            id: 'main'
          };
        } else if (initData.audio) {
          tracks.audio = {
            container: 'audio/mp4',
            codec: audioCodec,
            initSegment: initSegment,
            id: 'audio'
          };
        } else if (initData.video) {
          tracks.video = {
            container: 'video/mp4',
            codec: videoCodec,
            initSegment: initSegment,
            id: 'main'
          };
        } else {
          _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].warn('[passthrough-remuxer.ts]: initSegment does not contain moov or trak boxes.');
        }

        this.initTracks = tracks;
      };

      _proto.remux = function remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset) {
        var initPTS = this.initPTS,
            lastEndDTS = this.lastEndDTS;
        var result = {
          audio: undefined,
          video: undefined,
          text: textTrack,
          id3: id3Track,
          initSegment: undefined
        }; // If we haven't yet set a lastEndDTS, or it was reset, set it to the provided timeOffset. We want to use the
        // lastEndDTS over timeOffset whenever possible; during progressive playback, the media source will not update
        // the media duration (which is what timeOffset is provided as) before we need to process the next chunk.

        if (!Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(lastEndDTS)) {
          lastEndDTS = this.lastEndDTS = timeOffset || 0;
        } // The binary segment data is added to the videoTrack in the mp4demuxer. We don't check to see if the data is only
        // audio or video (or both); adding it to video was an arbitrary choice.


        var data = videoTrack.samples;

        if (!data || !data.length) {
          return result;
        }

        var initSegment = {
          initPTS: undefined,
          timescale: 1
        };
        var initData = this.initData;

        if (!initData || !initData.length) {
          this.generateInitSegment(data);
          initData = this.initData;
        }

        if (!initData || !initData.length) {
          // We can't remux if the initSegment could not be generated
          _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].warn('[passthrough-remuxer.ts]: Failed to generate initSegment.');
          return result;
        }

        if (this.emitInitSegment) {
          initSegment.tracks = this.initTracks;
          this.emitInitSegment = false;
        }

        if (!Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(initPTS)) {
          this.initPTS = initSegment.initPTS = initPTS = computeInitPTS(initData, data, lastEndDTS);
        }

        var duration = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_1__["getDuration"])(data, initData);
        var startDTS = lastEndDTS;
        var endDTS = duration + startDTS;
        Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_1__["offsetStartDTS"])(initData, data, initPTS);

        if (duration > 0) {
          this.lastEndDTS = endDTS;
        } else {
          _utils_logger__WEBPACK_IMPORTED_MODULE_3__["logger"].warn('Duration parsed from mp4 should be greater than zero');
          this.resetNextTimestamp();
        }

        var hasAudio = !!initData.audio;
        var hasVideo = !!initData.video;
        var type = '';

        if (hasAudio) {
          type += 'audio';
        }

        if (hasVideo) {
          type += 'video';
        }

        var track = {
          data1: data,
          startPTS: startDTS,
          startDTS: startDTS,
          endPTS: endDTS,
          endDTS: endDTS,
          type: type,
          hasAudio: hasAudio,
          hasVideo: hasVideo,
          nb: 1,
          dropped: 0
        };
        result.audio = track.type === 'audio' ? track : undefined;
        result.video = track.type !== 'audio' ? track : undefined;
        result.text = textTrack;
        result.id3 = id3Track;
        result.initSegment = initSegment;
        return result;
      };

      return PassThroughRemuxer;
    }();

    var computeInitPTS = function computeInitPTS(initData, data, timeOffset) {
      return Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_1__["getStartDTS"])(initData, data) - timeOffset;
    };

    function getParsedTrackCodec(track, type) {
      var parsedCodec = track === null || track === void 0 ? void 0 : track.codec;

      if (parsedCodec && parsedCodec.length > 4) {
        return parsedCodec;
      } // Since mp4-tools cannot parse full codec string (see 'TODO: Parse codec details'... in mp4-tools)
      // Provide defaults based on codec type
      // This allows for some playback of some fmp4 playlists without CODECS defined in manifest


      if (parsedCodec === 'hvc1') {
        return 'hvc1.1.c.L120.90';
      }

      if (parsedCodec === 'av01') {
        return 'av01.0.04M.08';
      }

      if (parsedCodec === 'avc1' || type === _loader_fragment__WEBPACK_IMPORTED_MODULE_2__["ElementaryStreamTypes"].VIDEO) {
        return 'avc1.42e01e';
      }

      return 'mp4a.40.5';
    }

    /* harmony default export */ __webpack_exports__["default"] = (PassThroughRemuxer);

    /***/ }),

    /***/ "./src/task-loop.ts":
    /*!**************************!*\
      !*** ./src/task-loop.ts ***!
      \**************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return TaskLoop; });
    /**
     * Sub-class specialization of EventHandler base class.
     *
     * TaskLoop allows to schedule a task function being called (optionnaly repeatedly) on the main loop,
     * scheduled asynchroneously, avoiding recursive calls in the same tick.
     *
     * The task itself is implemented in `doTick`. It can be requested and called for single execution
     * using the `tick` method.
     *
     * It will be assured that the task execution method (`tick`) only gets called once per main loop "tick",
     * no matter how often it gets requested for execution. Execution in further ticks will be scheduled accordingly.
     *
     * If further execution requests have already been scheduled on the next tick, it can be checked with `hasNextTick`,
     * and cancelled with `clearNextTick`.
     *
     * The task can be scheduled as an interval repeatedly with a period as parameter (see `setInterval`, `clearInterval`).
     *
     * Sub-classes need to implement the `doTick` method which will effectively have the task execution routine.
     *
     * Further explanations:
     *
     * The baseclass has a `tick` method that will schedule the doTick call. It may be called synchroneously
     * only for a stack-depth of one. On re-entrant calls, sub-sequent calls are scheduled for next main loop ticks.
     *
     * When the task execution (`tick` method) is called in re-entrant way this is detected and
     * we are limiting the task execution per call stack to exactly one, but scheduling/post-poning further
     * task processing on the next main loop iteration (also known as "next tick" in the Node/JS runtime lingo).
     */
    var TaskLoop = /*#__PURE__*/function () {
      function TaskLoop() {
        this._boundTick = void 0;
        this._tickTimer = null;
        this._tickInterval = null;
        this._tickCallCount = 0;
        this._boundTick = this.tick.bind(this);
      }

      var _proto = TaskLoop.prototype;

      _proto.destroy = function destroy() {
        this.onHandlerDestroying();
        this.onHandlerDestroyed();
      };

      _proto.onHandlerDestroying = function onHandlerDestroying() {
        // clear all timers before unregistering from event bus
        this.clearNextTick();
        this.clearInterval();
      };

      _proto.onHandlerDestroyed = function onHandlerDestroyed() {}
      /**
       * @returns {boolean}
       */
      ;

      _proto.hasInterval = function hasInterval() {
        return !!this._tickInterval;
      }
      /**
       * @returns {boolean}
       */
      ;

      _proto.hasNextTick = function hasNextTick() {
        return !!this._tickTimer;
      }
      /**
       * @param {number} millis Interval time (ms)
       * @returns {boolean} True when interval has been scheduled, false when already scheduled (no effect)
       */
      ;

      _proto.setInterval = function setInterval(millis) {
        if (!this._tickInterval) {
          this._tickInterval = self.setInterval(this._boundTick, millis);
          return true;
        }

        return false;
      }
      /**
       * @returns {boolean} True when interval was cleared, false when none was set (no effect)
       */
      ;

      _proto.clearInterval = function clearInterval() {
        if (this._tickInterval) {
          self.clearInterval(this._tickInterval);
          this._tickInterval = null;
          return true;
        }

        return false;
      }
      /**
       * @returns {boolean} True when timeout was cleared, false when none was set (no effect)
       */
      ;

      _proto.clearNextTick = function clearNextTick() {
        if (this._tickTimer) {
          self.clearTimeout(this._tickTimer);
          this._tickTimer = null;
          return true;
        }

        return false;
      }
      /**
       * Will call the subclass doTick implementation in this main loop tick
       * or in the next one (via setTimeout(,0)) in case it has already been called
       * in this tick (in case this is a re-entrant call).
       */
      ;

      _proto.tick = function tick() {
        this._tickCallCount++;

        if (this._tickCallCount === 1) {
          this.doTick(); // re-entrant call to tick from previous doTick call stack
          // -> schedule a call on the next main loop iteration to process this task processing request

          if (this._tickCallCount > 1) {
            // make sure only one timer exists at any time at max
            this.tickImmediate();
          }

          this._tickCallCount = 0;
        }
      };

      _proto.tickImmediate = function tickImmediate() {
        this.clearNextTick();
        this._tickTimer = self.setTimeout(this._boundTick, 0);
      }
      /**
       * For subclass to implement task logic
       * @abstract
       */
      ;

      _proto.doTick = function doTick() {};

      return TaskLoop;
    }();



    /***/ }),

    /***/ "./src/types/level.ts":
    /*!****************************!*\
      !*** ./src/types/level.ts ***!
      \****************************/
    /*! exports provided: HlsSkip, getSkipValue, HlsUrlParameters, Level */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HlsSkip", function() { return HlsSkip; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSkipValue", function() { return getSkipValue; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HlsUrlParameters", function() { return HlsUrlParameters; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Level", function() { return Level; });
    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    var HlsSkip;

    (function (HlsSkip) {
      HlsSkip["No"] = "";
      HlsSkip["Yes"] = "YES";
      HlsSkip["v2"] = "v2";
    })(HlsSkip || (HlsSkip = {}));

    function getSkipValue(details, msn) {
      var canSkipUntil = details.canSkipUntil,
          canSkipDateRanges = details.canSkipDateRanges,
          endSN = details.endSN;
      var snChangeGoal = msn !== undefined ? msn - endSN : 0;

      if (canSkipUntil && snChangeGoal < canSkipUntil) {
        if (canSkipDateRanges) {
          return HlsSkip.v2;
        }

        return HlsSkip.Yes;
      }

      return HlsSkip.No;
    }
    var HlsUrlParameters = /*#__PURE__*/function () {
      function HlsUrlParameters(msn, part, skip) {
        this.msn = void 0;
        this.part = void 0;
        this.skip = void 0;
        this.msn = msn;
        this.part = part;
        this.skip = skip;
      }

      var _proto = HlsUrlParameters.prototype;

      _proto.addDirectives = function addDirectives(uri) {
        var url = new self.URL(uri);

        if (this.msn !== undefined) {
          url.searchParams.set('_HLS_msn', this.msn.toString());
        }

        if (this.part !== undefined) {
          url.searchParams.set('_HLS_part', this.part.toString());
        }

        if (this.skip) {
          url.searchParams.set('_HLS_skip', this.skip);
        }

        return url.toString();
      };

      return HlsUrlParameters;
    }();
    var Level = /*#__PURE__*/function () {
      function Level(data) {
        this.attrs = void 0;
        this.audioCodec = void 0;
        this.bitrate = void 0;
        this.codecSet = void 0;
        this.height = void 0;
        this.id = void 0;
        this.name = void 0;
        this.videoCodec = void 0;
        this.width = void 0;
        this.unknownCodecs = void 0;
        this.audioGroupIds = void 0;
        this.details = void 0;
        this.fragmentError = 0;
        this.loadError = 0;
        this.loaded = void 0;
        this.realBitrate = 0;
        this.textGroupIds = void 0;
        this.url = void 0;
        this._urlId = 0;
        this.url = [data.url];
        this.attrs = data.attrs;
        this.bitrate = data.bitrate;

        if (data.details) {
          this.details = data.details;
        }

        this.id = data.id || 0;
        this.name = data.name;
        this.width = data.width || 0;
        this.height = data.height || 0;
        this.audioCodec = data.audioCodec;
        this.videoCodec = data.videoCodec;
        this.unknownCodecs = data.unknownCodecs;
        this.codecSet = [data.videoCodec, data.audioCodec].filter(function (c) {
          return c;
        }).join(',').replace(/\.[^.,]+/g, '');
      }

      _createClass(Level, [{
        key: "maxBitrate",
        get: function get() {
          return Math.max(this.realBitrate, this.bitrate);
        }
      }, {
        key: "uri",
        get: function get() {
          return this.url[this._urlId] || '';
        }
      }, {
        key: "urlId",
        get: function get() {
          return this._urlId;
        },
        set: function set(value) {
          var newValue = value % this.url.length;

          if (this._urlId !== newValue) {
            this.details = undefined;
            this._urlId = newValue;
          }
        }
      }]);

      return Level;
    }();

    /***/ }),

    /***/ "./src/types/loader.ts":
    /*!*****************************!*\
      !*** ./src/types/loader.ts ***!
      \*****************************/
    /*! exports provided: PlaylistContextType, PlaylistLevelType */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlaylistContextType", function() { return PlaylistContextType; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlaylistLevelType", function() { return PlaylistLevelType; });
    var PlaylistContextType;

    (function (PlaylistContextType) {
      PlaylistContextType["MANIFEST"] = "manifest";
      PlaylistContextType["LEVEL"] = "level";
      PlaylistContextType["AUDIO_TRACK"] = "audioTrack";
      PlaylistContextType["SUBTITLE_TRACK"] = "subtitleTrack";
    })(PlaylistContextType || (PlaylistContextType = {}));

    var PlaylistLevelType;

    (function (PlaylistLevelType) {
      PlaylistLevelType["MAIN"] = "main";
      PlaylistLevelType["AUDIO"] = "audio";
      PlaylistLevelType["SUBTITLE"] = "subtitle";
    })(PlaylistLevelType || (PlaylistLevelType = {}));

    /***/ }),

    /***/ "./src/types/transmuxer.ts":
    /*!*********************************!*\
      !*** ./src/types/transmuxer.ts ***!
      \*********************************/
    /*! exports provided: ChunkMetadata */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChunkMetadata", function() { return ChunkMetadata; });
    var ChunkMetadata = function ChunkMetadata(level, sn, id, size, part, partial) {
      if (size === void 0) {
        size = 0;
      }

      if (part === void 0) {
        part = -1;
      }

      if (partial === void 0) {
        partial = false;
      }

      this.level = void 0;
      this.sn = void 0;
      this.part = void 0;
      this.id = void 0;
      this.size = void 0;
      this.partial = void 0;
      this.transmuxing = getNewPerformanceTiming();
      this.buffering = {
        audio: getNewPerformanceTiming(),
        video: getNewPerformanceTiming(),
        audiovideo: getNewPerformanceTiming()
      };
      this.level = level;
      this.sn = sn;
      this.id = id;
      this.size = size;
      this.part = part;
      this.partial = partial;
    };

    function getNewPerformanceTiming() {
      return {
        start: 0,
        executeStart: 0,
        executeEnd: 0,
        end: 0
      };
    }

    /***/ }),

    /***/ "./src/utils/attr-list.ts":
    /*!********************************!*\
      !*** ./src/utils/attr-list.ts ***!
      \********************************/
    /*! exports provided: AttrList */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AttrList", function() { return AttrList; });
    var DECIMAL_RESOLUTION_REGEX = /^(\d+)x(\d+)$/; // eslint-disable-line no-useless-escape

    var ATTR_LIST_REGEX = /\s*(.+?)\s*=((?:\".*?\")|.*?)(?:,|$)/g; // eslint-disable-line no-useless-escape
    // adapted from https://github.com/kanongil/node-m3u8parse/blob/master/attrlist.js

    var AttrList = /*#__PURE__*/function () {
      function AttrList(attrs) {
        if (typeof attrs === 'string') {
          attrs = AttrList.parseAttrList(attrs);
        }

        for (var attr in attrs) {
          if (attrs.hasOwnProperty(attr)) {
            this[attr] = attrs[attr];
          }
        }
      }

      var _proto = AttrList.prototype;

      _proto.decimalInteger = function decimalInteger(attrName) {
        var intValue = parseInt(this[attrName], 10);

        if (intValue > Number.MAX_SAFE_INTEGER) {
          return Infinity;
        }

        return intValue;
      };

      _proto.hexadecimalInteger = function hexadecimalInteger(attrName) {
        if (this[attrName]) {
          var stringValue = (this[attrName] || '0x').slice(2);
          stringValue = (stringValue.length & 1 ? '0' : '') + stringValue;
          var value = new Uint8Array(stringValue.length / 2);

          for (var i = 0; i < stringValue.length / 2; i++) {
            value[i] = parseInt(stringValue.slice(i * 2, i * 2 + 2), 16);
          }

          return value;
        } else {
          return null;
        }
      };

      _proto.hexadecimalIntegerAsNumber = function hexadecimalIntegerAsNumber(attrName) {
        var intValue = parseInt(this[attrName], 16);

        if (intValue > Number.MAX_SAFE_INTEGER) {
          return Infinity;
        }

        return intValue;
      };

      _proto.decimalFloatingPoint = function decimalFloatingPoint(attrName) {
        return parseFloat(this[attrName]);
      };

      _proto.optionalFloat = function optionalFloat(attrName, defaultValue) {
        var value = this[attrName];
        return value ? parseFloat(value) : defaultValue;
      };

      _proto.enumeratedString = function enumeratedString(attrName) {
        return this[attrName];
      };

      _proto.bool = function bool(attrName) {
        return this[attrName] === 'YES';
      };

      _proto.decimalResolution = function decimalResolution(attrName) {
        var res = DECIMAL_RESOLUTION_REGEX.exec(this[attrName]);

        if (res === null) {
          return undefined;
        }

        return {
          width: parseInt(res[1], 10),
          height: parseInt(res[2], 10)
        };
      };

      AttrList.parseAttrList = function parseAttrList(input) {
        var match;
        var attrs = {};
        var quote = '"';
        ATTR_LIST_REGEX.lastIndex = 0;

        while ((match = ATTR_LIST_REGEX.exec(input)) !== null) {
          var value = match[2];

          if (value.indexOf(quote) === 0 && value.lastIndexOf(quote) === value.length - 1) {
            value = value.slice(1, -1);
          }

          attrs[match[1]] = value;
        }

        return attrs;
      };

      return AttrList;
    }();

    /***/ }),

    /***/ "./src/utils/binary-search.ts":
    /*!************************************!*\
      !*** ./src/utils/binary-search.ts ***!
      \************************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    var BinarySearch = {
      /**
       * Searches for an item in an array which matches a certain condition.
       * This requires the condition to only match one item in the array,
       * and for the array to be ordered.
       *
       * @param {Array<T>} list The array to search.
       * @param {BinarySearchComparison<T>} comparisonFn
       *      Called and provided a candidate item as the first argument.
       *      Should return:
       *          > -1 if the item should be located at a lower index than the provided item.
       *          > 1 if the item should be located at a higher index than the provided item.
       *          > 0 if the item is the item you're looking for.
       *
       * @return {T | null} The object if it is found or null otherwise.
       */
      search: function search(list, comparisonFn) {
        var minIndex = 0;
        var maxIndex = list.length - 1;
        var currentIndex = null;
        var currentElement = null;

        while (minIndex <= maxIndex) {
          currentIndex = (minIndex + maxIndex) / 2 | 0;
          currentElement = list[currentIndex];
          var comparisonResult = comparisonFn(currentElement);

          if (comparisonResult > 0) {
            minIndex = currentIndex + 1;
          } else if (comparisonResult < 0) {
            maxIndex = currentIndex - 1;
          } else {
            return currentElement;
          }
        }

        return null;
      }
    };
    /* harmony default export */ __webpack_exports__["default"] = (BinarySearch);

    /***/ }),

    /***/ "./src/utils/buffer-helper.ts":
    /*!************************************!*\
      !*** ./src/utils/buffer-helper.ts ***!
      \************************************/
    /*! exports provided: BufferHelper */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BufferHelper", function() { return BufferHelper; });
    /* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./logger */ "./src/utils/logger.ts");
    /**
     * @module BufferHelper
     *
     * Providing methods dealing with buffer length retrieval for example.
     *
     * In general, a helper around HTML5 MediaElement TimeRanges gathered from `buffered` property.
     *
     * Also @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/buffered
     */

    var noopBuffered = {
      length: 0,
      start: function start() {
        return 0;
      },
      end: function end() {
        return 0;
      }
    };
    var BufferHelper = /*#__PURE__*/function () {
      function BufferHelper() {}

      /**
       * Return true if `media`'s buffered include `position`
       * @param {Bufferable} media
       * @param {number} position
       * @returns {boolean}
       */
      BufferHelper.isBuffered = function isBuffered(media, position) {
        try {
          if (media) {
            var buffered = BufferHelper.getBuffered(media);

            for (var i = 0; i < buffered.length; i++) {
              if (position >= buffered.start(i) && position <= buffered.end(i)) {
                return true;
              }
            }
          }
        } catch (error) {// this is to catch
          // InvalidStateError: Failed to read the 'buffered' property from 'SourceBuffer':
          // This SourceBuffer has been removed from the parent media source
        }

        return false;
      };

      BufferHelper.bufferInfo = function bufferInfo(media, pos, maxHoleDuration) {
        try {
          if (media) {
            var vbuffered = BufferHelper.getBuffered(media);
            var buffered = [];
            var i;

            for (i = 0; i < vbuffered.length; i++) {
              buffered.push({
                start: vbuffered.start(i),
                end: vbuffered.end(i)
              });
            }

            return this.bufferedInfo(buffered, pos, maxHoleDuration);
          }
        } catch (error) {// this is to catch
          // InvalidStateError: Failed to read the 'buffered' property from 'SourceBuffer':
          // This SourceBuffer has been removed from the parent media source
        }

        return {
          len: 0,
          start: pos,
          end: pos,
          nextStart: undefined
        };
      };

      BufferHelper.bufferedInfo = function bufferedInfo(buffered, pos, maxHoleDuration) {
        pos = Math.max(0, pos); // sort on buffer.start/smaller end (IE does not always return sorted buffered range)

        buffered.sort(function (a, b) {
          var diff = a.start - b.start;

          if (diff) {
            return diff;
          } else {
            return b.end - a.end;
          }
        });
        var buffered2 = [];

        if (maxHoleDuration) {
          // there might be some small holes between buffer time range
          // consider that holes smaller than maxHoleDuration are irrelevant and build another
          // buffer time range representations that discards those holes
          for (var i = 0; i < buffered.length; i++) {
            var buf2len = buffered2.length;

            if (buf2len) {
              var buf2end = buffered2[buf2len - 1].end; // if small hole (value between 0 or maxHoleDuration ) or overlapping (negative)

              if (buffered[i].start - buf2end < maxHoleDuration) {
                // merge overlapping time ranges
                // update lastRange.end only if smaller than item.end
                // e.g.  [ 1, 15] with  [ 2,8] => [ 1,15] (no need to modify lastRange.end)
                // whereas [ 1, 8] with  [ 2,15] => [ 1,15] ( lastRange should switch from [1,8] to [1,15])
                if (buffered[i].end > buf2end) {
                  buffered2[buf2len - 1].end = buffered[i].end;
                }
              } else {
                // big hole
                buffered2.push(buffered[i]);
              }
            } else {
              // first value
              buffered2.push(buffered[i]);
            }
          }
        } else {
          buffered2 = buffered;
        }

        var bufferLen = 0; // bufferStartNext can possibly be undefined based on the conditional logic below

        var bufferStartNext; // bufferStart and bufferEnd are buffer boundaries around current video position

        var bufferStart = pos;
        var bufferEnd = pos;

        for (var _i = 0; _i < buffered2.length; _i++) {
          var start = buffered2[_i].start;
          var end = buffered2[_i].end; // logger.log('buf start/end:' + buffered.start(i) + '/' + buffered.end(i));

          if (pos + maxHoleDuration >= start && pos < end) {
            // play position is inside this buffer TimeRange, retrieve end of buffer position and buffer length
            bufferStart = start;
            bufferEnd = end;
            bufferLen = bufferEnd - pos;
          } else if (pos + maxHoleDuration < start) {
            bufferStartNext = start;
            break;
          }
        }

        return {
          len: bufferLen,
          start: bufferStart || 0,
          end: bufferEnd || 0,
          nextStart: bufferStartNext
        };
      }
      /**
       * Safe method to get buffered property.
       * SourceBuffer.buffered may throw if SourceBuffer is removed from it's MediaSource
       */
      ;

      BufferHelper.getBuffered = function getBuffered(media) {
        try {
          return media.buffered;
        } catch (e) {
          _logger__WEBPACK_IMPORTED_MODULE_0__["logger"].log('failed to get media.buffered', e);
          return noopBuffered;
        }
      };

      return BufferHelper;
    }();

    /***/ }),

    /***/ "./src/utils/cea-608-parser.ts":
    /*!*************************************!*\
      !*** ./src/utils/cea-608-parser.ts ***!
      \*************************************/
    /*! exports provided: Row, CaptionScreen, default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Row", function() { return Row; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CaptionScreen", function() { return CaptionScreen; });
    /* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/logger */ "./src/utils/logger.ts");

    /**
     *
     * This code was ported from the dash.js project at:
     *   https://github.com/Dash-Industry-Forum/dash.js/blob/development/externals/cea608-parser.js
     *   https://github.com/Dash-Industry-Forum/dash.js/commit/8269b26a761e0853bb21d78780ed945144ecdd4d#diff-71bc295a2d6b6b7093a1d3290d53a4b2
     *
     * The original copyright appears below:
     *
     * The copyright in this software is being made available under the BSD License,
     * included below. This software may be subject to other third party and contributor
     * rights, including patent rights, and no such rights are granted under this license.
     *
     * Copyright (c) 2015-2016, DASH Industry Forum.
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification,
     * are permitted provided that the following conditions are met:
     *  1. Redistributions of source code must retain the above copyright notice, this
     *  list of conditions and the following disclaimer.
     *  * Redistributions in binary form must reproduce the above copyright notice,
     *  this list of conditions and the following disclaimer in the documentation and/or
     *  other materials provided with the distribution.
     *  2. Neither the name of Dash Industry Forum nor the names of its
     *  contributors may be used to endorse or promote products derived from this software
     *  without specific prior written permission.
     *
     *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
     *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
     *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
     *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
     *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
     *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
     *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
     *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     *  POSSIBILITY OF SUCH DAMAGE.
     */

    /**
     *  Exceptions from regular ASCII. CodePoints are mapped to UTF-16 codes
     */

    var specialCea608CharsCodes = {
      0x2a: 0xe1,
      // lowercase a, acute accent
      0x5c: 0xe9,
      // lowercase e, acute accent
      0x5e: 0xed,
      // lowercase i, acute accent
      0x5f: 0xf3,
      // lowercase o, acute accent
      0x60: 0xfa,
      // lowercase u, acute accent
      0x7b: 0xe7,
      // lowercase c with cedilla
      0x7c: 0xf7,
      // division symbol
      0x7d: 0xd1,
      // uppercase N tilde
      0x7e: 0xf1,
      // lowercase n tilde
      0x7f: 0x2588,
      // Full block
      // THIS BLOCK INCLUDES THE 16 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS
      // THAT COME FROM HI BYTE=0x11 AND LOW BETWEEN 0x30 AND 0x3F
      // THIS MEANS THAT \x50 MUST BE ADDED TO THE VALUES
      0x80: 0xae,
      // Registered symbol (R)
      0x81: 0xb0,
      // degree sign
      0x82: 0xbd,
      // 1/2 symbol
      0x83: 0xbf,
      // Inverted (open) question mark
      0x84: 0x2122,
      // Trademark symbol (TM)
      0x85: 0xa2,
      // Cents symbol
      0x86: 0xa3,
      // Pounds sterling
      0x87: 0x266a,
      // Music 8'th note
      0x88: 0xe0,
      // lowercase a, grave accent
      0x89: 0x20,
      // transparent space (regular)
      0x8a: 0xe8,
      // lowercase e, grave accent
      0x8b: 0xe2,
      // lowercase a, circumflex accent
      0x8c: 0xea,
      // lowercase e, circumflex accent
      0x8d: 0xee,
      // lowercase i, circumflex accent
      0x8e: 0xf4,
      // lowercase o, circumflex accent
      0x8f: 0xfb,
      // lowercase u, circumflex accent
      // THIS BLOCK INCLUDES THE 32 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS
      // THAT COME FROM HI BYTE=0x12 AND LOW BETWEEN 0x20 AND 0x3F
      0x90: 0xc1,
      // capital letter A with acute
      0x91: 0xc9,
      // capital letter E with acute
      0x92: 0xd3,
      // capital letter O with acute
      0x93: 0xda,
      // capital letter U with acute
      0x94: 0xdc,
      // capital letter U with diaresis
      0x95: 0xfc,
      // lowercase letter U with diaeresis
      0x96: 0x2018,
      // opening single quote
      0x97: 0xa1,
      // inverted exclamation mark
      0x98: 0x2a,
      // asterisk
      0x99: 0x2019,
      // closing single quote
      0x9a: 0x2501,
      // box drawings heavy horizontal
      0x9b: 0xa9,
      // copyright sign
      0x9c: 0x2120,
      // Service mark
      0x9d: 0x2022,
      // (round) bullet
      0x9e: 0x201c,
      // Left double quotation mark
      0x9f: 0x201d,
      // Right double quotation mark
      0xa0: 0xc0,
      // uppercase A, grave accent
      0xa1: 0xc2,
      // uppercase A, circumflex
      0xa2: 0xc7,
      // uppercase C with cedilla
      0xa3: 0xc8,
      // uppercase E, grave accent
      0xa4: 0xca,
      // uppercase E, circumflex
      0xa5: 0xcb,
      // capital letter E with diaresis
      0xa6: 0xeb,
      // lowercase letter e with diaresis
      0xa7: 0xce,
      // uppercase I, circumflex
      0xa8: 0xcf,
      // uppercase I, with diaresis
      0xa9: 0xef,
      // lowercase i, with diaresis
      0xaa: 0xd4,
      // uppercase O, circumflex
      0xab: 0xd9,
      // uppercase U, grave accent
      0xac: 0xf9,
      // lowercase u, grave accent
      0xad: 0xdb,
      // uppercase U, circumflex
      0xae: 0xab,
      // left-pointing double angle quotation mark
      0xaf: 0xbb,
      // right-pointing double angle quotation mark
      // THIS BLOCK INCLUDES THE 32 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS
      // THAT COME FROM HI BYTE=0x13 AND LOW BETWEEN 0x20 AND 0x3F
      0xb0: 0xc3,
      // Uppercase A, tilde
      0xb1: 0xe3,
      // Lowercase a, tilde
      0xb2: 0xcd,
      // Uppercase I, acute accent
      0xb3: 0xcc,
      // Uppercase I, grave accent
      0xb4: 0xec,
      // Lowercase i, grave accent
      0xb5: 0xd2,
      // Uppercase O, grave accent
      0xb6: 0xf2,
      // Lowercase o, grave accent
      0xb7: 0xd5,
      // Uppercase O, tilde
      0xb8: 0xf5,
      // Lowercase o, tilde
      0xb9: 0x7b,
      // Open curly brace
      0xba: 0x7d,
      // Closing curly brace
      0xbb: 0x5c,
      // Backslash
      0xbc: 0x5e,
      // Caret
      0xbd: 0x5f,
      // Underscore
      0xbe: 0x7c,
      // Pipe (vertical line)
      0xbf: 0x223c,
      // Tilde operator
      0xc0: 0xc4,
      // Uppercase A, umlaut
      0xc1: 0xe4,
      // Lowercase A, umlaut
      0xc2: 0xd6,
      // Uppercase O, umlaut
      0xc3: 0xf6,
      // Lowercase o, umlaut
      0xc4: 0xdf,
      // Esszett (sharp S)
      0xc5: 0xa5,
      // Yen symbol
      0xc6: 0xa4,
      // Generic currency sign
      0xc7: 0x2503,
      // Box drawings heavy vertical
      0xc8: 0xc5,
      // Uppercase A, ring
      0xc9: 0xe5,
      // Lowercase A, ring
      0xca: 0xd8,
      // Uppercase O, stroke
      0xcb: 0xf8,
      // Lowercase o, strok
      0xcc: 0x250f,
      // Box drawings heavy down and right
      0xcd: 0x2513,
      // Box drawings heavy down and left
      0xce: 0x2517,
      // Box drawings heavy up and right
      0xcf: 0x251b // Box drawings heavy up and left

    };
    /**
     * Utils
     */

    var getCharForByte = function getCharForByte(_byte) {
      var charCode = _byte;

      if (specialCea608CharsCodes.hasOwnProperty(_byte)) {
        charCode = specialCea608CharsCodes[_byte];
      }

      return String.fromCharCode(charCode);
    };

    var NR_ROWS = 15;
    var NR_COLS = 100; // Tables to look up row from PAC data

    var rowsLowCh1 = {
      0x11: 1,
      0x12: 3,
      0x15: 5,
      0x16: 7,
      0x17: 9,
      0x10: 11,
      0x13: 12,
      0x14: 14
    };
    var rowsHighCh1 = {
      0x11: 2,
      0x12: 4,
      0x15: 6,
      0x16: 8,
      0x17: 10,
      0x13: 13,
      0x14: 15
    };
    var rowsLowCh2 = {
      0x19: 1,
      0x1a: 3,
      0x1d: 5,
      0x1e: 7,
      0x1f: 9,
      0x18: 11,
      0x1b: 12,
      0x1c: 14
    };
    var rowsHighCh2 = {
      0x19: 2,
      0x1a: 4,
      0x1d: 6,
      0x1e: 8,
      0x1f: 10,
      0x1b: 13,
      0x1c: 15
    };
    var backgroundColors = ['white', 'green', 'blue', 'cyan', 'red', 'yellow', 'magenta', 'black', 'transparent'];
    var VerboseLevel;

    (function (VerboseLevel) {
      VerboseLevel[VerboseLevel["ERROR"] = 0] = "ERROR";
      VerboseLevel[VerboseLevel["TEXT"] = 1] = "TEXT";
      VerboseLevel[VerboseLevel["WARNING"] = 2] = "WARNING";
      VerboseLevel[VerboseLevel["INFO"] = 2] = "INFO";
      VerboseLevel[VerboseLevel["DEBUG"] = 3] = "DEBUG";
      VerboseLevel[VerboseLevel["DATA"] = 3] = "DATA";
    })(VerboseLevel || (VerboseLevel = {}));

    var CaptionsLogger = /*#__PURE__*/function () {
      function CaptionsLogger() {
        this.time = null;
        this.verboseLevel = VerboseLevel.ERROR;
      }

      var _proto = CaptionsLogger.prototype;

      _proto.log = function log(severity, msg) {
        if (this.verboseLevel >= severity) {
          _utils_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].log(this.time + " [" + severity + "] " + msg);
        }
      };

      return CaptionsLogger;
    }();

    var numArrayToHexArray = function numArrayToHexArray(numArray) {
      var hexArray = [];

      for (var j = 0; j < numArray.length; j++) {
        hexArray.push(numArray[j].toString(16));
      }

      return hexArray;
    };

    var PenState = /*#__PURE__*/function () {
      function PenState(foreground, underline, italics, background, flash) {
        this.foreground = void 0;
        this.underline = void 0;
        this.italics = void 0;
        this.background = void 0;
        this.flash = void 0;
        this.foreground = foreground || 'white';
        this.underline = underline || false;
        this.italics = italics || false;
        this.background = background || 'black';
        this.flash = flash || false;
      }

      var _proto2 = PenState.prototype;

      _proto2.reset = function reset() {
        this.foreground = 'white';
        this.underline = false;
        this.italics = false;
        this.background = 'black';
        this.flash = false;
      };

      _proto2.setStyles = function setStyles(styles) {
        var attribs = ['foreground', 'underline', 'italics', 'background', 'flash'];

        for (var i = 0; i < attribs.length; i++) {
          var style = attribs[i];

          if (styles.hasOwnProperty(style)) {
            this[style] = styles[style];
          }
        }
      };

      _proto2.isDefault = function isDefault() {
        return this.foreground === 'white' && !this.underline && !this.italics && this.background === 'black' && !this.flash;
      };

      _proto2.equals = function equals(other) {
        return this.foreground === other.foreground && this.underline === other.underline && this.italics === other.italics && this.background === other.background && this.flash === other.flash;
      };

      _proto2.copy = function copy(newPenState) {
        this.foreground = newPenState.foreground;
        this.underline = newPenState.underline;
        this.italics = newPenState.italics;
        this.background = newPenState.background;
        this.flash = newPenState.flash;
      };

      _proto2.toString = function toString() {
        return 'color=' + this.foreground + ', underline=' + this.underline + ', italics=' + this.italics + ', background=' + this.background + ', flash=' + this.flash;
      };

      return PenState;
    }();
    /**
     * Unicode character with styling and background.
     * @constructor
     */


    var StyledUnicodeChar = /*#__PURE__*/function () {
      function StyledUnicodeChar(uchar, foreground, underline, italics, background, flash) {
        this.uchar = void 0;
        this.penState = void 0;
        this.uchar = uchar || ' '; // unicode character

        this.penState = new PenState(foreground, underline, italics, background, flash);
      }

      var _proto3 = StyledUnicodeChar.prototype;

      _proto3.reset = function reset() {
        this.uchar = ' ';
        this.penState.reset();
      };

      _proto3.setChar = function setChar(uchar, newPenState) {
        this.uchar = uchar;
        this.penState.copy(newPenState);
      };

      _proto3.setPenState = function setPenState(newPenState) {
        this.penState.copy(newPenState);
      };

      _proto3.equals = function equals(other) {
        return this.uchar === other.uchar && this.penState.equals(other.penState);
      };

      _proto3.copy = function copy(newChar) {
        this.uchar = newChar.uchar;
        this.penState.copy(newChar.penState);
      };

      _proto3.isEmpty = function isEmpty() {
        return this.uchar === ' ' && this.penState.isDefault();
      };

      return StyledUnicodeChar;
    }();
    /**
     * CEA-608 row consisting of NR_COLS instances of StyledUnicodeChar.
     * @constructor
     */


    var Row = /*#__PURE__*/function () {
      function Row(logger) {
        this.chars = void 0;
        this.pos = void 0;
        this.currPenState = void 0;
        this.cueStartTime = void 0;
        this.logger = void 0;
        this.chars = [];

        for (var i = 0; i < NR_COLS; i++) {
          this.chars.push(new StyledUnicodeChar());
        }

        this.logger = logger;
        this.pos = 0;
        this.currPenState = new PenState();
      }

      var _proto4 = Row.prototype;

      _proto4.equals = function equals(other) {
        var equal = true;

        for (var i = 0; i < NR_COLS; i++) {
          if (!this.chars[i].equals(other.chars[i])) {
            equal = false;
            break;
          }
        }

        return equal;
      };

      _proto4.copy = function copy(other) {
        for (var i = 0; i < NR_COLS; i++) {
          this.chars[i].copy(other.chars[i]);
        }
      };

      _proto4.isEmpty = function isEmpty() {
        var empty = true;

        for (var i = 0; i < NR_COLS; i++) {
          if (!this.chars[i].isEmpty()) {
            empty = false;
            break;
          }
        }

        return empty;
      }
      /**
       *  Set the cursor to a valid column.
       */
      ;

      _proto4.setCursor = function setCursor(absPos) {
        if (this.pos !== absPos) {
          this.pos = absPos;
        }

        if (this.pos < 0) {
          this.logger.log(VerboseLevel.DEBUG, 'Negative cursor position ' + this.pos);
          this.pos = 0;
        } else if (this.pos > NR_COLS) {
          this.logger.log(VerboseLevel.DEBUG, 'Too large cursor position ' + this.pos);
          this.pos = NR_COLS;
        }
      }
      /**
       * Move the cursor relative to current position.
       */
      ;

      _proto4.moveCursor = function moveCursor(relPos) {
        var newPos = this.pos + relPos;

        if (relPos > 1) {
          for (var i = this.pos + 1; i < newPos + 1; i++) {
            this.chars[i].setPenState(this.currPenState);
          }
        }

        this.setCursor(newPos);
      }
      /**
       * Backspace, move one step back and clear character.
       */
      ;

      _proto4.backSpace = function backSpace() {
        this.moveCursor(-1);
        this.chars[this.pos].setChar(' ', this.currPenState);
      };

      _proto4.insertChar = function insertChar(_byte2) {
        if (_byte2 >= 0x90) {
          // Extended char
          this.backSpace();
        }

        var _char = getCharForByte(_byte2);

        if (this.pos >= NR_COLS) {
          this.logger.log(VerboseLevel.ERROR, 'Cannot insert ' + _byte2.toString(16) + ' (' + _char + ') at position ' + this.pos + '. Skipping it!');
          return;
        }

        this.chars[this.pos].setChar(_char, this.currPenState);
        this.moveCursor(1);
      };

      _proto4.clearFromPos = function clearFromPos(startPos) {
        var i;

        for (i = startPos; i < NR_COLS; i++) {
          this.chars[i].reset();
        }
      };

      _proto4.clear = function clear() {
        this.clearFromPos(0);
        this.pos = 0;
        this.currPenState.reset();
      };

      _proto4.clearToEndOfRow = function clearToEndOfRow() {
        this.clearFromPos(this.pos);
      };

      _proto4.getTextString = function getTextString() {
        var chars = [];
        var empty = true;

        for (var i = 0; i < NR_COLS; i++) {
          var _char2 = this.chars[i].uchar;

          if (_char2 !== ' ') {
            empty = false;
          }

          chars.push(_char2);
        }

        if (empty) {
          return '';
        } else {
          return chars.join('');
        }
      };

      _proto4.setPenStyles = function setPenStyles(styles) {
        this.currPenState.setStyles(styles);
        var currChar = this.chars[this.pos];
        currChar.setPenState(this.currPenState);
      };

      return Row;
    }();
    /**
     * Keep a CEA-608 screen of 32x15 styled characters
     * @constructor
     */

    var CaptionScreen = /*#__PURE__*/function () {
      function CaptionScreen(logger) {
        this.rows = void 0;
        this.currRow = void 0;
        this.nrRollUpRows = void 0;
        this.lastOutputScreen = void 0;
        this.logger = void 0;
        this.rows = [];

        for (var i = 0; i < NR_ROWS; i++) {
          this.rows.push(new Row(logger));
        } // Note that we use zero-based numbering (0-14)


        this.logger = logger;
        this.currRow = NR_ROWS - 1;
        this.nrRollUpRows = null;
        this.lastOutputScreen = null;
        this.reset();
      }

      var _proto5 = CaptionScreen.prototype;

      _proto5.reset = function reset() {
        for (var i = 0; i < NR_ROWS; i++) {
          this.rows[i].clear();
        }

        this.currRow = NR_ROWS - 1;
      };

      _proto5.equals = function equals(other) {
        var equal = true;

        for (var i = 0; i < NR_ROWS; i++) {
          if (!this.rows[i].equals(other.rows[i])) {
            equal = false;
            break;
          }
        }

        return equal;
      };

      _proto5.copy = function copy(other) {
        for (var i = 0; i < NR_ROWS; i++) {
          this.rows[i].copy(other.rows[i]);
        }
      };

      _proto5.isEmpty = function isEmpty() {
        var empty = true;

        for (var i = 0; i < NR_ROWS; i++) {
          if (!this.rows[i].isEmpty()) {
            empty = false;
            break;
          }
        }

        return empty;
      };

      _proto5.backSpace = function backSpace() {
        var row = this.rows[this.currRow];
        row.backSpace();
      };

      _proto5.clearToEndOfRow = function clearToEndOfRow() {
        var row = this.rows[this.currRow];
        row.clearToEndOfRow();
      }
      /**
       * Insert a character (without styling) in the current row.
       */
      ;

      _proto5.insertChar = function insertChar(_char3) {
        var row = this.rows[this.currRow];
        row.insertChar(_char3);
      };

      _proto5.setPen = function setPen(styles) {
        var row = this.rows[this.currRow];
        row.setPenStyles(styles);
      };

      _proto5.moveCursor = function moveCursor(relPos) {
        var row = this.rows[this.currRow];
        row.moveCursor(relPos);
      };

      _proto5.setCursor = function setCursor(absPos) {
        this.logger.log(VerboseLevel.INFO, 'setCursor: ' + absPos);
        var row = this.rows[this.currRow];
        row.setCursor(absPos);
      };

      _proto5.setPAC = function setPAC(pacData) {
        this.logger.log(VerboseLevel.INFO, 'pacData = ' + JSON.stringify(pacData));
        var newRow = pacData.row - 1;

        if (this.nrRollUpRows && newRow < this.nrRollUpRows - 1) {
          newRow = this.nrRollUpRows - 1;
        } // Make sure this only affects Roll-up Captions by checking this.nrRollUpRows


        if (this.nrRollUpRows && this.currRow !== newRow) {
          // clear all rows first
          for (var i = 0; i < NR_ROWS; i++) {
            this.rows[i].clear();
          } // Copy this.nrRollUpRows rows from lastOutputScreen and place it in the newRow location
          // topRowIndex - the start of rows to copy (inclusive index)


          var topRowIndex = this.currRow + 1 - this.nrRollUpRows; // We only copy if the last position was already shown.
          // We use the cueStartTime value to check this.

          var lastOutputScreen = this.lastOutputScreen;

          if (lastOutputScreen) {
            var prevLineTime = lastOutputScreen.rows[topRowIndex].cueStartTime;
            var time = this.logger.time;

            if (prevLineTime && time !== null && prevLineTime < time) {
              for (var _i = 0; _i < this.nrRollUpRows; _i++) {
                this.rows[newRow - this.nrRollUpRows + _i + 1].copy(lastOutputScreen.rows[topRowIndex + _i]);
              }
            }
          }
        }

        this.currRow = newRow;
        var row = this.rows[this.currRow];

        if (pacData.indent !== null) {
          var indent = pacData.indent;
          var prevPos = Math.max(indent - 1, 0);
          row.setCursor(pacData.indent);
          pacData.color = row.chars[prevPos].penState.foreground;
        }

        var styles = {
          foreground: pacData.color,
          underline: pacData.underline,
          italics: pacData.italics,
          background: 'black',
          flash: false
        };
        this.setPen(styles);
      }
      /**
       * Set background/extra foreground, but first do back_space, and then insert space (backwards compatibility).
       */
      ;

      _proto5.setBkgData = function setBkgData(bkgData) {
        this.logger.log(VerboseLevel.INFO, 'bkgData = ' + JSON.stringify(bkgData));
        this.backSpace();
        this.setPen(bkgData);
        this.insertChar(0x20); // Space
      };

      _proto5.setRollUpRows = function setRollUpRows(nrRows) {
        this.nrRollUpRows = nrRows;
      };

      _proto5.rollUp = function rollUp() {
        if (this.nrRollUpRows === null) {
          this.logger.log(VerboseLevel.DEBUG, 'roll_up but nrRollUpRows not set yet');
          return; // Not properly setup
        }

        this.logger.log(VerboseLevel.TEXT, this.getDisplayText());
        var topRowIndex = this.currRow + 1 - this.nrRollUpRows;
        var topRow = this.rows.splice(topRowIndex, 1)[0];
        topRow.clear();
        this.rows.splice(this.currRow, 0, topRow);
        this.logger.log(VerboseLevel.INFO, 'Rolling up'); // this.logger.log(VerboseLevel.TEXT, this.get_display_text())
      }
      /**
       * Get all non-empty rows with as unicode text.
       */
      ;

      _proto5.getDisplayText = function getDisplayText(asOneRow) {
        asOneRow = asOneRow || false;
        var displayText = [];
        var text = '';
        var rowNr = -1;

        for (var i = 0; i < NR_ROWS; i++) {
          var rowText = this.rows[i].getTextString();

          if (rowText) {
            rowNr = i + 1;

            if (asOneRow) {
              displayText.push('Row ' + rowNr + ": '" + rowText + "'");
            } else {
              displayText.push(rowText.trim());
            }
          }
        }

        if (displayText.length > 0) {
          if (asOneRow) {
            text = '[' + displayText.join(' | ') + ']';
          } else {
            text = displayText.join('\n');
          }
        }

        return text;
      };

      _proto5.getTextAndFormat = function getTextAndFormat() {
        return this.rows;
      };

      return CaptionScreen;
    }(); // var modes = ['MODE_ROLL-UP', 'MODE_POP-ON', 'MODE_PAINT-ON', 'MODE_TEXT'];

    var Cea608Channel = /*#__PURE__*/function () {
      function Cea608Channel(channelNumber, outputFilter, logger) {
        this.chNr = void 0;
        this.outputFilter = void 0;
        this.mode = void 0;
        this.verbose = void 0;
        this.displayedMemory = void 0;
        this.nonDisplayedMemory = void 0;
        this.lastOutputScreen = void 0;
        this.currRollUpRow = void 0;
        this.writeScreen = void 0;
        this.cueStartTime = void 0;
        this.logger = void 0;
        this.chNr = channelNumber;
        this.outputFilter = outputFilter;
        this.mode = null;
        this.verbose = 0;
        this.displayedMemory = new CaptionScreen(logger);
        this.nonDisplayedMemory = new CaptionScreen(logger);
        this.lastOutputScreen = new CaptionScreen(logger);
        this.currRollUpRow = this.displayedMemory.rows[NR_ROWS - 1];
        this.writeScreen = this.displayedMemory;
        this.mode = null;
        this.cueStartTime = null; // Keeps track of where a cue started.

        this.logger = logger;
      }

      var _proto6 = Cea608Channel.prototype;

      _proto6.reset = function reset() {
        this.mode = null;
        this.displayedMemory.reset();
        this.nonDisplayedMemory.reset();
        this.lastOutputScreen.reset();
        this.outputFilter.reset();
        this.currRollUpRow = this.displayedMemory.rows[NR_ROWS - 1];
        this.writeScreen = this.displayedMemory;
        this.mode = null;
        this.cueStartTime = null;
      };

      _proto6.getHandler = function getHandler() {
        return this.outputFilter;
      };

      _proto6.setHandler = function setHandler(newHandler) {
        this.outputFilter = newHandler;
      };

      _proto6.setPAC = function setPAC(pacData) {
        this.writeScreen.setPAC(pacData);
      };

      _proto6.setBkgData = function setBkgData(bkgData) {
        this.writeScreen.setBkgData(bkgData);
      };

      _proto6.setMode = function setMode(newMode) {
        if (newMode === this.mode) {
          return;
        }

        this.mode = newMode;
        this.logger.log(VerboseLevel.INFO, 'MODE=' + newMode);

        if (this.mode === 'MODE_POP-ON') {
          this.writeScreen = this.nonDisplayedMemory;
        } else {
          this.writeScreen = this.displayedMemory;
          this.writeScreen.reset();
        }

        if (this.mode !== 'MODE_ROLL-UP') {
          this.displayedMemory.nrRollUpRows = null;
          this.nonDisplayedMemory.nrRollUpRows = null;
        }

        this.mode = newMode;
      };

      _proto6.insertChars = function insertChars(chars) {
        for (var i = 0; i < chars.length; i++) {
          this.writeScreen.insertChar(chars[i]);
        }

        var screen = this.writeScreen === this.displayedMemory ? 'DISP' : 'NON_DISP';
        this.logger.log(VerboseLevel.INFO, screen + ': ' + this.writeScreen.getDisplayText(true));

        if (this.mode === 'MODE_PAINT-ON' || this.mode === 'MODE_ROLL-UP') {
          this.logger.log(VerboseLevel.TEXT, 'DISPLAYED: ' + this.displayedMemory.getDisplayText(true));
          this.outputDataUpdate();
        }
      };

      _proto6.ccRCL = function ccRCL() {
        // Resume Caption Loading (switch mode to Pop On)
        this.logger.log(VerboseLevel.INFO, 'RCL - Resume Caption Loading');
        this.setMode('MODE_POP-ON');
      };

      _proto6.ccBS = function ccBS() {
        // BackSpace
        this.logger.log(VerboseLevel.INFO, 'BS - BackSpace');

        if (this.mode === 'MODE_TEXT') {
          return;
        }

        this.writeScreen.backSpace();

        if (this.writeScreen === this.displayedMemory) {
          this.outputDataUpdate();
        }
      };

      _proto6.ccAOF = function ccAOF() {// Reserved (formerly Alarm Off)
      };

      _proto6.ccAON = function ccAON() {// Reserved (formerly Alarm On)
      };

      _proto6.ccDER = function ccDER() {
        // Delete to End of Row
        this.logger.log(VerboseLevel.INFO, 'DER- Delete to End of Row');
        this.writeScreen.clearToEndOfRow();
        this.outputDataUpdate();
      };

      _proto6.ccRU = function ccRU(nrRows) {
        // Roll-Up Captions-2,3,or 4 Rows
        this.logger.log(VerboseLevel.INFO, 'RU(' + nrRows + ') - Roll Up');
        this.writeScreen = this.displayedMemory;
        this.setMode('MODE_ROLL-UP');
        this.writeScreen.setRollUpRows(nrRows);
      };

      _proto6.ccFON = function ccFON() {
        // Flash On
        this.logger.log(VerboseLevel.INFO, 'FON - Flash On');
        this.writeScreen.setPen({
          flash: true
        });
      };

      _proto6.ccRDC = function ccRDC() {
        // Resume Direct Captioning (switch mode to PaintOn)
        this.logger.log(VerboseLevel.INFO, 'RDC - Resume Direct Captioning');
        this.setMode('MODE_PAINT-ON');
      };

      _proto6.ccTR = function ccTR() {
        // Text Restart in text mode (not supported, however)
        this.logger.log(VerboseLevel.INFO, 'TR');
        this.setMode('MODE_TEXT');
      };

      _proto6.ccRTD = function ccRTD() {
        // Resume Text Display in Text mode (not supported, however)
        this.logger.log(VerboseLevel.INFO, 'RTD');
        this.setMode('MODE_TEXT');
      };

      _proto6.ccEDM = function ccEDM() {
        // Erase Displayed Memory
        this.logger.log(VerboseLevel.INFO, 'EDM - Erase Displayed Memory');
        this.displayedMemory.reset();
        this.outputDataUpdate(true);
      };

      _proto6.ccCR = function ccCR() {
        // Carriage Return
        this.logger.log(VerboseLevel.INFO, 'CR - Carriage Return');
        this.writeScreen.rollUp();
        this.outputDataUpdate(true);
      };

      _proto6.ccENM = function ccENM() {
        // Erase Non-Displayed Memory
        this.logger.log(VerboseLevel.INFO, 'ENM - Erase Non-displayed Memory');
        this.nonDisplayedMemory.reset();
      };

      _proto6.ccEOC = function ccEOC() {
        // End of Caption (Flip Memories)
        this.logger.log(VerboseLevel.INFO, 'EOC - End Of Caption');

        if (this.mode === 'MODE_POP-ON') {
          var tmp = this.displayedMemory;
          this.displayedMemory = this.nonDisplayedMemory;
          this.nonDisplayedMemory = tmp;
          this.writeScreen = this.nonDisplayedMemory;
          this.logger.log(VerboseLevel.TEXT, 'DISP: ' + this.displayedMemory.getDisplayText());
        }

        this.outputDataUpdate(true);
      };

      _proto6.ccTO = function ccTO(nrCols) {
        // Tab Offset 1,2, or 3 columns
        this.logger.log(VerboseLevel.INFO, 'TO(' + nrCols + ') - Tab Offset');
        this.writeScreen.moveCursor(nrCols);
      };

      _proto6.ccMIDROW = function ccMIDROW(secondByte) {
        // Parse MIDROW command
        var styles = {
          flash: false
        };
        styles.underline = secondByte % 2 === 1;
        styles.italics = secondByte >= 0x2e;

        if (!styles.italics) {
          var colorIndex = Math.floor(secondByte / 2) - 0x10;
          var colors = ['white', 'green', 'blue', 'cyan', 'red', 'yellow', 'magenta'];
          styles.foreground = colors[colorIndex];
        } else {
          styles.foreground = 'white';
        }

        this.logger.log(VerboseLevel.INFO, 'MIDROW: ' + JSON.stringify(styles));
        this.writeScreen.setPen(styles);
      };

      _proto6.outputDataUpdate = function outputDataUpdate(dispatch) {
        if (dispatch === void 0) {
          dispatch = false;
        }

        var time = this.logger.time;

        if (time === null) {
          return;
        }

        if (this.outputFilter) {
          if (this.cueStartTime === null && !this.displayedMemory.isEmpty()) {
            // Start of a new cue
            this.cueStartTime = time;
          } else {
            if (!this.displayedMemory.equals(this.lastOutputScreen)) {
              this.outputFilter.newCue(this.cueStartTime, time, this.lastOutputScreen);

              if (dispatch && this.outputFilter.dispatchCue) {
                this.outputFilter.dispatchCue();
              }

              this.cueStartTime = this.displayedMemory.isEmpty() ? null : time;
            }
          }

          this.lastOutputScreen.copy(this.displayedMemory);
        }
      };

      _proto6.cueSplitAtTime = function cueSplitAtTime(t) {
        if (this.outputFilter) {
          if (!this.displayedMemory.isEmpty()) {
            if (this.outputFilter.newCue) {
              this.outputFilter.newCue(this.cueStartTime, t, this.displayedMemory);
            }

            this.cueStartTime = t;
          }
        }
      };

      return Cea608Channel;
    }();

    var Cea608Parser = /*#__PURE__*/function () {
      function Cea608Parser(field, out1, out2) {
        this.channels = void 0;
        this.currentChannel = 0;
        this.cmdHistory = void 0;
        this.logger = void 0;
        var logger = new CaptionsLogger();
        this.channels = [null, new Cea608Channel(field, out1, logger), new Cea608Channel(field + 1, out2, logger)];
        this.cmdHistory = createCmdHistory();
        this.logger = logger;
      }

      var _proto7 = Cea608Parser.prototype;

      _proto7.getHandler = function getHandler(channel) {
        return this.channels[channel].getHandler();
      };

      _proto7.setHandler = function setHandler(channel, newHandler) {
        this.channels[channel].setHandler(newHandler);
      }
      /**
       * Add data for time t in forms of list of bytes (unsigned ints). The bytes are treated as pairs.
       */
      ;

      _proto7.addData = function addData(time, byteList) {
        var cmdFound;
        var a;
        var b;
        var charsFound = false;
        this.logger.time = time;

        for (var i = 0; i < byteList.length; i += 2) {
          a = byteList[i] & 0x7f;
          b = byteList[i + 1] & 0x7f;

          if (a === 0 && b === 0) {
            continue;
          } else {
            this.logger.log(VerboseLevel.DATA, '[' + numArrayToHexArray([byteList[i], byteList[i + 1]]) + '] -> (' + numArrayToHexArray([a, b]) + ')');
          }

          cmdFound = this.parseCmd(a, b);

          if (!cmdFound) {
            cmdFound = this.parseMidrow(a, b);
          }

          if (!cmdFound) {
            cmdFound = this.parsePAC(a, b);
          }

          if (!cmdFound) {
            cmdFound = this.parseBackgroundAttributes(a, b);
          }

          if (!cmdFound) {
            charsFound = this.parseChars(a, b);

            if (charsFound) {
              var currChNr = this.currentChannel;

              if (currChNr && currChNr > 0) {
                var channel = this.channels[currChNr];
                channel.insertChars(charsFound);
              } else {
                this.logger.log(VerboseLevel.WARNING, 'No channel found yet. TEXT-MODE?');
              }
            }
          }

          if (!cmdFound && !charsFound) {
            this.logger.log(VerboseLevel.WARNING, "Couldn't parse cleaned data " + numArrayToHexArray([a, b]) + ' orig: ' + numArrayToHexArray([byteList[i], byteList[i + 1]]));
          }
        }
      }
      /**
       * Parse Command.
       * @returns {Boolean} Tells if a command was found
       */
      ;

      _proto7.parseCmd = function parseCmd(a, b) {
        var cmdHistory = this.cmdHistory;
        var cond1 = (a === 0x14 || a === 0x1c || a === 0x15 || a === 0x1d) && b >= 0x20 && b <= 0x2f;
        var cond2 = (a === 0x17 || a === 0x1f) && b >= 0x21 && b <= 0x23;

        if (!(cond1 || cond2)) {
          return false;
        }

        if (hasCmdRepeated(a, b, cmdHistory)) {
          setLastCmd(null, null, cmdHistory);
          this.logger.log(VerboseLevel.DEBUG, 'Repeated command (' + numArrayToHexArray([a, b]) + ') is dropped');
          return true;
        }

        var chNr = a === 0x14 || a === 0x15 || a === 0x17 ? 1 : 2;
        var channel = this.channels[chNr];

        if (a === 0x14 || a === 0x15 || a === 0x1c || a === 0x1d) {
          if (b === 0x20) {
            channel.ccRCL();
          } else if (b === 0x21) {
            channel.ccBS();
          } else if (b === 0x22) {
            channel.ccAOF();
          } else if (b === 0x23) {
            channel.ccAON();
          } else if (b === 0x24) {
            channel.ccDER();
          } else if (b === 0x25) {
            channel.ccRU(2);
          } else if (b === 0x26) {
            channel.ccRU(3);
          } else if (b === 0x27) {
            channel.ccRU(4);
          } else if (b === 0x28) {
            channel.ccFON();
          } else if (b === 0x29) {
            channel.ccRDC();
          } else if (b === 0x2a) {
            channel.ccTR();
          } else if (b === 0x2b) {
            channel.ccRTD();
          } else if (b === 0x2c) {
            channel.ccEDM();
          } else if (b === 0x2d) {
            channel.ccCR();
          } else if (b === 0x2e) {
            channel.ccENM();
          } else if (b === 0x2f) {
            channel.ccEOC();
          }
        } else {
          // a == 0x17 || a == 0x1F
          channel.ccTO(b - 0x20);
        }

        setLastCmd(a, b, cmdHistory);
        this.currentChannel = chNr;
        return true;
      }
      /**
       * Parse midrow styling command
       * @returns {Boolean}
       */
      ;

      _proto7.parseMidrow = function parseMidrow(a, b) {
        var chNr = 0;

        if ((a === 0x11 || a === 0x19) && b >= 0x20 && b <= 0x2f) {
          if (a === 0x11) {
            chNr = 1;
          } else {
            chNr = 2;
          }

          if (chNr !== this.currentChannel) {
            this.logger.log(VerboseLevel.ERROR, 'Mismatch channel in midrow parsing');
            return false;
          }

          var channel = this.channels[chNr];

          if (!channel) {
            return false;
          }

          channel.ccMIDROW(b);
          this.logger.log(VerboseLevel.DEBUG, 'MIDROW (' + numArrayToHexArray([a, b]) + ')');
          return true;
        }

        return false;
      }
      /**
       * Parse Preable Access Codes (Table 53).
       * @returns {Boolean} Tells if PAC found
       */
      ;

      _proto7.parsePAC = function parsePAC(a, b) {
        var row;
        var cmdHistory = this.cmdHistory;
        var case1 = (a >= 0x11 && a <= 0x17 || a >= 0x19 && a <= 0x1f) && b >= 0x40 && b <= 0x7f;
        var case2 = (a === 0x10 || a === 0x18) && b >= 0x40 && b <= 0x5f;

        if (!(case1 || case2)) {
          return false;
        }

        if (hasCmdRepeated(a, b, cmdHistory)) {
          setLastCmd(null, null, cmdHistory);
          return true; // Repeated commands are dropped (once)
        }

        var chNr = a <= 0x17 ? 1 : 2;

        if (b >= 0x40 && b <= 0x5f) {
          row = chNr === 1 ? rowsLowCh1[a] : rowsLowCh2[a];
        } else {
          // 0x60 <= b <= 0x7F
          row = chNr === 1 ? rowsHighCh1[a] : rowsHighCh2[a];
        }

        var channel = this.channels[chNr];

        if (!channel) {
          return false;
        }

        channel.setPAC(this.interpretPAC(row, b));
        setLastCmd(a, b, cmdHistory);
        this.currentChannel = chNr;
        return true;
      }
      /**
       * Interpret the second byte of the pac, and return the information.
       * @returns {Object} pacData with style parameters.
       */
      ;

      _proto7.interpretPAC = function interpretPAC(row, _byte3) {
        var pacIndex;
        var pacData = {
          color: null,
          italics: false,
          indent: null,
          underline: false,
          row: row
        };

        if (_byte3 > 0x5f) {
          pacIndex = _byte3 - 0x60;
        } else {
          pacIndex = _byte3 - 0x40;
        }

        pacData.underline = (pacIndex & 1) === 1;

        if (pacIndex <= 0xd) {
          pacData.color = ['white', 'green', 'blue', 'cyan', 'red', 'yellow', 'magenta', 'white'][Math.floor(pacIndex / 2)];
        } else if (pacIndex <= 0xf) {
          pacData.italics = true;
          pacData.color = 'white';
        } else {
          pacData.indent = Math.floor((pacIndex - 0x10) / 2) * 4;
        }

        return pacData; // Note that row has zero offset. The spec uses 1.
      }
      /**
       * Parse characters.
       * @returns An array with 1 to 2 codes corresponding to chars, if found. null otherwise.
       */
      ;

      _proto7.parseChars = function parseChars(a, b) {
        var channelNr;
        var charCodes = null;
        var charCode1 = null;

        if (a >= 0x19) {
          channelNr = 2;
          charCode1 = a - 8;
        } else {
          channelNr = 1;
          charCode1 = a;
        }

        if (charCode1 >= 0x11 && charCode1 <= 0x13) {
          // Special character
          var oneCode;

          if (charCode1 === 0x11) {
            oneCode = b + 0x50;
          } else if (charCode1 === 0x12) {
            oneCode = b + 0x70;
          } else {
            oneCode = b + 0x90;
          }

          this.logger.log(VerboseLevel.INFO, "Special char '" + getCharForByte(oneCode) + "' in channel " + channelNr);
          charCodes = [oneCode];
        } else if (a >= 0x20 && a <= 0x7f) {
          charCodes = b === 0 ? [a] : [a, b];
        }

        if (charCodes) {
          var hexCodes = numArrayToHexArray(charCodes);
          this.logger.log(VerboseLevel.DEBUG, 'Char codes =  ' + hexCodes.join(','));
          setLastCmd(a, b, this.cmdHistory);
        }

        return charCodes;
      }
      /**
       * Parse extended background attributes as well as new foreground color black.
       * @returns {Boolean} Tells if background attributes are found
       */
      ;

      _proto7.parseBackgroundAttributes = function parseBackgroundAttributes(a, b) {
        var case1 = (a === 0x10 || a === 0x18) && b >= 0x20 && b <= 0x2f;
        var case2 = (a === 0x17 || a === 0x1f) && b >= 0x2d && b <= 0x2f;

        if (!(case1 || case2)) {
          return false;
        }

        var index;
        var bkgData = {};

        if (a === 0x10 || a === 0x18) {
          index = Math.floor((b - 0x20) / 2);
          bkgData.background = backgroundColors[index];

          if (b % 2 === 1) {
            bkgData.background = bkgData.background + '_semi';
          }
        } else if (b === 0x2d) {
          bkgData.background = 'transparent';
        } else {
          bkgData.foreground = 'black';

          if (b === 0x2f) {
            bkgData.underline = true;
          }
        }

        var chNr = a <= 0x17 ? 1 : 2;
        var channel = this.channels[chNr];
        channel.setBkgData(bkgData);
        setLastCmd(a, b, this.cmdHistory);
        return true;
      }
      /**
       * Reset state of parser and its channels.
       */
      ;

      _proto7.reset = function reset() {
        for (var i = 0; i < Object.keys(this.channels).length; i++) {
          var channel = this.channels[i];

          if (channel) {
            channel.reset();
          }
        }

        this.cmdHistory = createCmdHistory();
      }
      /**
       * Trigger the generation of a cue, and the start of a new one if displayScreens are not empty.
       */
      ;

      _proto7.cueSplitAtTime = function cueSplitAtTime(t) {
        for (var i = 0; i < this.channels.length; i++) {
          var channel = this.channels[i];

          if (channel) {
            channel.cueSplitAtTime(t);
          }
        }
      };

      return Cea608Parser;
    }();

    function setLastCmd(a, b, cmdHistory) {
      cmdHistory.a = a;
      cmdHistory.b = b;
    }

    function hasCmdRepeated(a, b, cmdHistory) {
      return cmdHistory.a === a && cmdHistory.b === b;
    }

    function createCmdHistory() {
      return {
        a: null,
        b: null
      };
    }

    /* harmony default export */ __webpack_exports__["default"] = (Cea608Parser);

    /***/ }),

    /***/ "./src/utils/codecs.ts":
    /*!*****************************!*\
      !*** ./src/utils/codecs.ts ***!
      \*****************************/
    /*! exports provided: isCodecType, isCodecSupportedInMp4 */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isCodecType", function() { return isCodecType; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isCodecSupportedInMp4", function() { return isCodecSupportedInMp4; });
    // from http://mp4ra.org/codecs.html
    var sampleEntryCodesISO = {
      audio: {
        a3ds: true,
        'ac-3': true,
        'ac-4': true,
        alac: true,
        alaw: true,
        dra1: true,
        'dts+': true,
        'dts-': true,
        dtsc: true,
        dtse: true,
        dtsh: true,
        'ec-3': true,
        enca: true,
        g719: true,
        g726: true,
        m4ae: true,
        mha1: true,
        mha2: true,
        mhm1: true,
        mhm2: true,
        mlpa: true,
        mp4a: true,
        'raw ': true,
        Opus: true,
        samr: true,
        sawb: true,
        sawp: true,
        sevc: true,
        sqcp: true,
        ssmv: true,
        twos: true,
        ulaw: true
      },
      video: {
        avc1: true,
        avc2: true,
        avc3: true,
        avc4: true,
        avcp: true,
        av01: true,
        drac: true,
        dvav: true,
        dvhe: true,
        encv: true,
        hev1: true,
        hvc1: true,
        mjp2: true,
        mp4v: true,
        mvc1: true,
        mvc2: true,
        mvc3: true,
        mvc4: true,
        resv: true,
        rv60: true,
        s263: true,
        svc1: true,
        svc2: true,
        'vc-1': true,
        vp08: true,
        vp09: true
      },
      text: {
        stpp: true,
        wvtt: true
      }
    };
    function isCodecType(codec, type) {
      var typeCodes = sampleEntryCodesISO[type];
      return !!typeCodes && typeCodes[codec.slice(0, 4)] === true;
    }
    function isCodecSupportedInMp4(codec, type) {
      return MediaSource.isTypeSupported((type || 'video') + "/mp4;codecs=\"" + codec + "\"");
    }

    /***/ }),

    /***/ "./src/utils/cues.ts":
    /*!***************************!*\
      !*** ./src/utils/cues.ts ***!
      \***************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony import */ var _vttparser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vttparser */ "./src/utils/vttparser.ts");
    /* harmony import */ var _webvtt_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./webvtt-parser */ "./src/utils/webvtt-parser.ts");
    /* harmony import */ var _texttrack_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./texttrack-utils */ "./src/utils/texttrack-utils.ts");



    var WHITESPACE_CHAR = /\s/;
    var Cues = {
      newCue: function newCue(track, startTime, endTime, captionScreen) {
        var result = [];
        var row; // the type data states this is VTTCue, but it can potentially be a TextTrackCue on old browsers

        var cue;
        var indenting;
        var indent;
        var text;
        var Cue = self.VTTCue || self.TextTrackCue;

        for (var r = 0; r < captionScreen.rows.length; r++) {
          row = captionScreen.rows[r];
          indenting = true;
          indent = 0;
          text = '';

          if (!row.isEmpty()) {
            for (var c = 0; c < row.chars.length; c++) {
              if (WHITESPACE_CHAR.test(row.chars[c].uchar) && indenting) {
                indent++;
              } else {
                text += row.chars[c].uchar;
                indenting = false;
              }
            } // To be used for cleaning-up orphaned roll-up captions


            row.cueStartTime = startTime; // Give a slight bump to the endTime if it's equal to startTime to avoid a SyntaxError in IE

            if (startTime === endTime) {
              endTime += 0.0001;
            }

            if (indent >= 16) {
              indent--;
            } else {
              indent++;
            }

            var cueText = Object(_vttparser__WEBPACK_IMPORTED_MODULE_0__["fixLineBreaks"])(text.trim());
            var id = Object(_webvtt_parser__WEBPACK_IMPORTED_MODULE_1__["generateCueId"])(startTime, endTime, cueText); // If this cue already exists in the track do not push it

            if (!track || !track.cues || !track.cues.getCueById(id)) {
              cue = new Cue(startTime, endTime, cueText);
              cue.id = id;
              cue.line = r + 1;
              cue.align = 'left'; // Clamp the position between 10 and 80 percent (CEA-608 PAC indent code)
              // https://dvcs.w3.org/hg/text-tracks/raw-file/default/608toVTT/608toVTT.html#positioning-in-cea-608
              // Firefox throws an exception and captions break with out of bounds 0-100 values

              cue.position = 10 + Math.min(80, Math.floor(indent * 8 / 32) * 10);
              result.push(cue);
            }
          }
        }

        if (track && result.length) {
          // Sort bottom cues in reverse order so that they render in line order when overlapping in Chrome
          result.sort(function (cueA, cueB) {
            if (cueA.line === 'auto' || cueB.line === 'auto') {
              return 0;
            }

            if (cueA.line > 8 && cueB.line > 8) {
              return cueB.line - cueA.line;
            }

            return cueA.line - cueB.line;
          });
          result.forEach(function (cue) {
            return Object(_texttrack_utils__WEBPACK_IMPORTED_MODULE_2__["addCueToTrack"])(track, cue);
          });
        }

        return result;
      }
    };
    /* harmony default export */ __webpack_exports__["default"] = (Cues);

    /***/ }),

    /***/ "./src/utils/discontinuities.ts":
    /*!**************************************!*\
      !*** ./src/utils/discontinuities.ts ***!
      \**************************************/
    /*! exports provided: findFirstFragWithCC, shouldAlignOnDiscontinuities, findDiscontinuousReferenceFrag, adjustSlidingStart, alignStream, alignPDT */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findFirstFragWithCC", function() { return findFirstFragWithCC; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shouldAlignOnDiscontinuities", function() { return shouldAlignOnDiscontinuities; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findDiscontinuousReferenceFrag", function() { return findDiscontinuousReferenceFrag; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "adjustSlidingStart", function() { return adjustSlidingStart; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "alignStream", function() { return alignStream; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "alignPDT", function() { return alignPDT; });
    /* harmony import */ var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/polyfills/number */ "./src/polyfills/number.ts");
    /* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./logger */ "./src/utils/logger.ts");
    /* harmony import */ var _controller_level_helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../controller/level-helper */ "./src/controller/level-helper.ts");




    function findFirstFragWithCC(fragments, cc) {
      var firstFrag = null;

      for (var i = 0, len = fragments.length; i < len; i++) {
        var currentFrag = fragments[i];

        if (currentFrag && currentFrag.cc === cc) {
          firstFrag = currentFrag;
          break;
        }
      }

      return firstFrag;
    }
    function shouldAlignOnDiscontinuities(lastFrag, lastLevel, details) {
      if (lastLevel.details) {
        if (details.endCC > details.startCC || lastFrag && lastFrag.cc < details.startCC) {
          return true;
        }
      }

      return false;
    } // Find the first frag in the previous level which matches the CC of the first frag of the new level

    function findDiscontinuousReferenceFrag(prevDetails, curDetails) {
      var prevFrags = prevDetails.fragments;
      var curFrags = curDetails.fragments;

      if (!curFrags.length || !prevFrags.length) {
        _logger__WEBPACK_IMPORTED_MODULE_1__["logger"].log('No fragments to align');
        return;
      }

      var prevStartFrag = findFirstFragWithCC(prevFrags, curFrags[0].cc);

      if (!prevStartFrag || prevStartFrag && !prevStartFrag.startPTS) {
        _logger__WEBPACK_IMPORTED_MODULE_1__["logger"].log('No frag in previous level to align on');
        return;
      }

      return prevStartFrag;
    }

    function adjustFragmentStart(frag, sliding) {
      if (frag) {
        var start = frag.start + sliding;
        frag.start = frag.startPTS = start;
        frag.endPTS = start + frag.duration;
      }
    }

    function adjustSlidingStart(sliding, details) {
      // Update segments
      var fragments = details.fragments;

      for (var i = 0, len = fragments.length; i < len; i++) {
        adjustFragmentStart(fragments[i], sliding);
      } // Update LL-HLS parts at the end of the playlist


      if (details.fragmentHint) {
        adjustFragmentStart(details.fragmentHint, sliding);
      }

      details.alignedSliding = true;
    }
    /**
     * Using the parameters of the last level, this function computes PTS' of the new fragments so that they form a
     * contiguous stream with the last fragments.
     * The PTS of a fragment lets Hls.js know where it fits into a stream - by knowing every PTS, we know which fragment to
     * download at any given time. PTS is normally computed when the fragment is demuxed, so taking this step saves us time
     * and an extra download.
     * @param lastFrag
     * @param lastLevel
     * @param details
     */

    function alignStream(lastFrag, lastLevel, details) {
      if (!lastLevel) {
        return;
      }

      alignDiscontinuities(lastFrag, details, lastLevel);

      if (!details.alignedSliding && lastLevel.details) {
        // If the PTS wasn't figured out via discontinuity sequence that means there was no CC increase within the level.
        // Aligning via Program Date Time should therefore be reliable, since PDT should be the same within the same
        // discontinuity sequence.
        alignPDT(details, lastLevel.details);
      }

      if (!details.alignedSliding && lastLevel.details && !details.skippedSegments) {
        // Try to align on sn so that we pick a better start fragment.
        // Do not perform this on playlists with delta updates as this is only to align levels on switch
        // and adjustSliding only adjusts fragments after skippedSegments.
        Object(_controller_level_helper__WEBPACK_IMPORTED_MODULE_2__["adjustSliding"])(lastLevel.details, details);
      }
    }
    /**
     * Computes the PTS if a new level's fragments using the PTS of a fragment in the last level which shares the same
     * discontinuity sequence.
     * @param lastFrag - The last Fragment which shares the same discontinuity sequence
     * @param lastLevel - The details of the last loaded level
     * @param details - The details of the new level
     */

    function alignDiscontinuities(lastFrag, details, lastLevel) {
      if (shouldAlignOnDiscontinuities(lastFrag, lastLevel, details)) {
        var referenceFrag = findDiscontinuousReferenceFrag(lastLevel.details, details);

        if (referenceFrag && Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(referenceFrag.start)) {
          _logger__WEBPACK_IMPORTED_MODULE_1__["logger"].log("Adjusting PTS using last level due to CC increase within current level " + details.url);
          adjustSlidingStart(referenceFrag.start, details);
        }
      }
    }
    /**
     * Computes the PTS of a new level's fragments using the difference in Program Date Time from the last level.
     * @param details - The details of the new level
     * @param lastDetails - The details of the last loaded level
     */


    function alignPDT(details, lastDetails) {
      // This check protects the unsafe "!" usage below for null program date time access.
      if (!lastDetails.fragments.length || !details.hasProgramDateTime || !lastDetails.hasProgramDateTime) {
        return;
      } // if last level sliding is 1000 and its first frag PROGRAM-DATE-TIME is 2017-08-20 1:10:00 AM
      // and if new details first frag PROGRAM DATE-TIME is 2017-08-20 1:10:08 AM
      // then we can deduce that playlist B sliding is 1000+8 = 1008s


      var lastPDT = lastDetails.fragments[0].programDateTime; // hasProgramDateTime check above makes this safe.

      var newPDT = details.fragments[0].programDateTime; // date diff is in ms. frag.start is in seconds

      var sliding = (newPDT - lastPDT) / 1000 + lastDetails.fragments[0].start;

      if (sliding && Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(sliding)) {
        _logger__WEBPACK_IMPORTED_MODULE_1__["logger"].log("Adjusting PTS using programDateTime delta " + (newPDT - lastPDT) + "ms, sliding:" + sliding.toFixed(3) + " " + details.url + " ");
        adjustSlidingStart(sliding, details);
      }
    }

    /***/ }),

    /***/ "./src/utils/ewma-bandwidth-estimator.ts":
    /*!***********************************************!*\
      !*** ./src/utils/ewma-bandwidth-estimator.ts ***!
      \***********************************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony import */ var _utils_ewma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/ewma */ "./src/utils/ewma.ts");
    /*
     * EWMA Bandwidth Estimator
     *  - heavily inspired from shaka-player
     * Tracks bandwidth samples and estimates available bandwidth.
     * Based on the minimum of two exponentially-weighted moving averages with
     * different half-lives.
     */


    var EwmaBandWidthEstimator = /*#__PURE__*/function () {
      function EwmaBandWidthEstimator(slow, fast, defaultEstimate) {
        this.defaultEstimate_ = void 0;
        this.minWeight_ = void 0;
        this.minDelayMs_ = void 0;
        this.slow_ = void 0;
        this.fast_ = void 0;
        this.defaultEstimate_ = defaultEstimate;
        this.minWeight_ = 0.001;
        this.minDelayMs_ = 50;
        this.slow_ = new _utils_ewma__WEBPACK_IMPORTED_MODULE_0__["default"](slow);
        this.fast_ = new _utils_ewma__WEBPACK_IMPORTED_MODULE_0__["default"](fast);
      }

      var _proto = EwmaBandWidthEstimator.prototype;

      _proto.update = function update(slow, fast) {
        var slow_ = this.slow_,
            fast_ = this.fast_;

        if (this.slow_.halfLife !== slow) {
          this.slow_ = new _utils_ewma__WEBPACK_IMPORTED_MODULE_0__["default"](slow, slow_.getEstimate(), slow_.getTotalWeight());
        }

        if (this.fast_.halfLife !== fast) {
          this.fast_ = new _utils_ewma__WEBPACK_IMPORTED_MODULE_0__["default"](fast, fast_.getEstimate(), fast_.getTotalWeight());
        }
      };

      _proto.sample = function sample(durationMs, numBytes) {
        durationMs = Math.max(durationMs, this.minDelayMs_);
        var numBits = 8 * numBytes; // weight is duration in seconds

        var durationS = durationMs / 1000; // value is bandwidth in bits/s

        var bandwidthInBps = numBits / durationS;
        this.fast_.sample(durationS, bandwidthInBps);
        this.slow_.sample(durationS, bandwidthInBps);
      };

      _proto.canEstimate = function canEstimate() {
        var fast = this.fast_;
        return fast && fast.getTotalWeight() >= this.minWeight_;
      };

      _proto.getEstimate = function getEstimate() {
        if (this.canEstimate()) {
          // console.log('slow estimate:'+ Math.round(this.slow_.getEstimate()));
          // console.log('fast estimate:'+ Math.round(this.fast_.getEstimate()));
          // Take the minimum of these two estimates.  This should have the effect of
          // adapting down quickly, but up more slowly.
          return Math.min(this.fast_.getEstimate(), this.slow_.getEstimate());
        } else {
          return this.defaultEstimate_;
        }
      };

      _proto.destroy = function destroy() {};

      return EwmaBandWidthEstimator;
    }();

    /* harmony default export */ __webpack_exports__["default"] = (EwmaBandWidthEstimator);

    /***/ }),

    /***/ "./src/utils/ewma.ts":
    /*!***************************!*\
      !*** ./src/utils/ewma.ts ***!
      \***************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /*
     * compute an Exponential Weighted moving average
     * - https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average
     *  - heavily inspired from shaka-player
     */
    var EWMA = /*#__PURE__*/function () {
      //  About half of the estimated value will be from the last |halfLife| samples by weight.
      function EWMA(halfLife, estimate, weight) {
        if (estimate === void 0) {
          estimate = 0;
        }

        if (weight === void 0) {
          weight = 0;
        }

        this.halfLife = void 0;
        this.alpha_ = void 0;
        this.estimate_ = void 0;
        this.totalWeight_ = void 0;
        this.halfLife = halfLife; // Larger values of alpha expire historical data more slowly.

        this.alpha_ = halfLife ? Math.exp(Math.log(0.5) / halfLife) : 0;
        this.estimate_ = estimate;
        this.totalWeight_ = weight;
      }

      var _proto = EWMA.prototype;

      _proto.sample = function sample(weight, value) {
        var adjAlpha = Math.pow(this.alpha_, weight);
        this.estimate_ = value * (1 - adjAlpha) + adjAlpha * this.estimate_;
        this.totalWeight_ += weight;
      };

      _proto.getTotalWeight = function getTotalWeight() {
        return this.totalWeight_;
      };

      _proto.getEstimate = function getEstimate() {
        if (this.alpha_) {
          var zeroFactor = 1 - Math.pow(this.alpha_, this.totalWeight_);

          if (zeroFactor) {
            return this.estimate_ / zeroFactor;
          }
        }

        return this.estimate_;
      };

      return EWMA;
    }();

    /* harmony default export */ __webpack_exports__["default"] = (EWMA);

    /***/ }),

    /***/ "./src/utils/fetch-loader.ts":
    /*!***********************************!*\
      !*** ./src/utils/fetch-loader.ts ***!
      \***********************************/
    /*! exports provided: fetchSupported, default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fetchSupported", function() { return fetchSupported; });
    /* harmony import */ var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/polyfills/number */ "./src/polyfills/number.ts");
    /* harmony import */ var _loader_load_stats__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../loader/load-stats */ "./src/loader/load-stats.ts");
    /* harmony import */ var _demux_chunk_cache__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../demux/chunk-cache */ "./src/demux/chunk-cache.ts");



    function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

    function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

    function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

    function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



    function fetchSupported() {
      if ( // @ts-ignore
      self.fetch && self.AbortController && self.ReadableStream && self.Request) {
        try {
          new self.ReadableStream({}); // eslint-disable-line no-new

          return true;
        } catch (e) {
          /* noop */
        }
      }

      return false;
    }

    var FetchLoader = /*#__PURE__*/function () {
      function FetchLoader(config
      /* HlsConfig */
      ) {
        this.fetchSetup = void 0;
        this.requestTimeout = void 0;
        this.request = void 0;
        this.response = void 0;
        this.controller = void 0;
        this.context = void 0;
        this.config = null;
        this.callbacks = null;
        this.stats = void 0;
        this.loader = null;
        this.fetchSetup = config.fetchSetup || getRequest;
        this.controller = new self.AbortController();
        this.stats = new _loader_load_stats__WEBPACK_IMPORTED_MODULE_1__["LoadStats"]();
      }

      var _proto = FetchLoader.prototype;

      _proto.destroy = function destroy() {
        this.loader = this.callbacks = null;
        this.abortInternal();
      };

      _proto.abortInternal = function abortInternal() {
        var response = this.response;

        if (!response || !response.ok) {
          this.stats.aborted = true;
          this.controller.abort();
        }
      };

      _proto.abort = function abort() {
        var _this$callbacks;

        this.abortInternal();

        if ((_this$callbacks = this.callbacks) !== null && _this$callbacks !== void 0 && _this$callbacks.onAbort) {
          this.callbacks.onAbort(this.stats, this.context, this.response);
        }
      };

      _proto.load = function load(context, config, callbacks) {
        var _this = this;

        var stats = this.stats;

        if (stats.loading.start) {
          throw new Error('Loader can only be used once.');
        }

        stats.loading.start = self.performance.now();
        var initParams = getRequestParameters(context, this.controller.signal);
        var onProgress = callbacks.onProgress;
        var isArrayBuffer = context.responseType === 'arraybuffer';
        var LENGTH = isArrayBuffer ? 'byteLength' : 'length';
        this.context = context;
        this.config = config;
        this.callbacks = callbacks;
        this.request = this.fetchSetup(context, initParams);
        self.clearTimeout(this.requestTimeout);
        this.requestTimeout = self.setTimeout(function () {
          _this.abortInternal();

          callbacks.onTimeout(stats, context, _this.response);
        }, config.timeout);
        self.fetch(this.request).then(function (response) {
          _this.response = _this.loader = response;

          if (!response.ok) {
            var status = response.status,
                statusText = response.statusText;
            throw new FetchError(statusText || 'fetch, bad network response', status, response);
          }

          stats.loading.first = Math.max(self.performance.now(), stats.loading.start);
          stats.total = parseInt(response.headers.get('Content-Length') || '0');

          if (onProgress && Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(config.highWaterMark)) {
            return _this.loadProgressively(response, stats, context, config.highWaterMark, onProgress);
          }

          if (isArrayBuffer) {
            return response.arrayBuffer();
          }

          return response.text();
        }).then(function (responseData) {
          var response = _this.response;
          self.clearTimeout(_this.requestTimeout);
          stats.loading.end = Math.max(self.performance.now(), stats.loading.first);
          stats.loaded = stats.total = responseData[LENGTH];
          var loaderResponse = {
            url: response.url,
            data: responseData
          };

          if (onProgress && !Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(config.highWaterMark)) {
            onProgress(stats, context, responseData, response);
          }

          callbacks.onSuccess(loaderResponse, stats, context, response);
        }).catch(function (error) {
          self.clearTimeout(_this.requestTimeout);

          if (stats.aborted) {
            return;
          } // CORS errors result in an undefined code. Set it to 0 here to align with XHR's behavior


          var code = error.code || 0;
          callbacks.onError({
            code: code,
            text: error.message
          }, context, error.details);
        });
      };

      _proto.getCacheAge = function getCacheAge() {
        var result = null;

        if (this.response) {
          var ageHeader = this.response.headers.get('age');
          result = ageHeader ? parseFloat(ageHeader) : null;
        }

        return result;
      };

      _proto.loadProgressively = function loadProgressively(response, stats, context, highWaterMark, onProgress) {
        if (highWaterMark === void 0) {
          highWaterMark = 0;
        }

        var chunkCache = new _demux_chunk_cache__WEBPACK_IMPORTED_MODULE_2__["default"]();
        var reader = response.body.getReader();

        var pump = function pump() {
          return reader.read().then(function (data) {
            if (data.done) {
              if (chunkCache.dataLength) {
                onProgress(stats, context, chunkCache.flush(), response);
              }

              return Promise.resolve(new ArrayBuffer(0));
            }

            var chunk = data.value;
            var len = chunk.length;
            stats.loaded += len;

            if (len < highWaterMark || chunkCache.dataLength) {
              // The current chunk is too small to to be emitted or the cache already has data
              // Push it to the cache
              chunkCache.push(chunk);

              if (chunkCache.dataLength >= highWaterMark) {
                // flush in order to join the typed arrays
                onProgress(stats, context, chunkCache.flush(), response);
              }
            } else {
              // If there's nothing cached already, and the chache is large enough
              // just emit the progress event
              onProgress(stats, context, chunk, response);
            }

            return pump();
          }).catch(function () {
            /* aborted */
            return Promise.reject();
          });
        };

        return pump();
      };

      return FetchLoader;
    }();

    function getRequestParameters(context, signal) {
      var initParams = {
        method: 'GET',
        mode: 'cors',
        credentials: 'same-origin',
        signal: signal
      };

      if (context.rangeEnd) {
        initParams.headers = new self.Headers({
          Range: 'bytes=' + context.rangeStart + '-' + String(context.rangeEnd - 1)
        });
      }

      return initParams;
    }

    function getRequest(context, initParams) {
      return new self.Request(context.url, initParams);
    }

    var FetchError = /*#__PURE__*/function (_Error) {
      _inheritsLoose(FetchError, _Error);

      function FetchError(message, code, details) {
        var _this2;

        _this2 = _Error.call(this, message) || this;
        _this2.code = void 0;
        _this2.details = void 0;
        _this2.code = code;
        _this2.details = details;
        return _this2;
      }

      return FetchError;
    }( /*#__PURE__*/_wrapNativeSuper(Error));

    /* harmony default export */ __webpack_exports__["default"] = (FetchLoader);

    /***/ }),

    /***/ "./src/utils/imsc1-ttml-parser.ts":
    /*!****************************************!*\
      !*** ./src/utils/imsc1-ttml-parser.ts ***!
      \****************************************/
    /*! exports provided: IMSC1_CODEC, parseIMSC1 */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IMSC1_CODEC", function() { return IMSC1_CODEC; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseIMSC1", function() { return parseIMSC1; });
    /* harmony import */ var _mp4_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mp4-tools */ "./src/utils/mp4-tools.ts");
    /* harmony import */ var _vttparser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vttparser */ "./src/utils/vttparser.ts");
    /* harmony import */ var _vttcue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vttcue */ "./src/utils/vttcue.ts");
    /* harmony import */ var _demux_id3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../demux/id3 */ "./src/demux/id3.ts");
    /* harmony import */ var _timescale_conversion__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./timescale-conversion */ "./src/utils/timescale-conversion.ts");
    /* harmony import */ var _webvtt_parser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./webvtt-parser */ "./src/utils/webvtt-parser.ts");
    function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }







    var IMSC1_CODEC = 'stpp.ttml.im1t'; // Time format: h:m:s:frames(.subframes)

    var HMSF_REGEX = /^(\d{2,}):(\d{2}):(\d{2}):(\d{2})\.?(\d+)?$/; // Time format: hours, minutes, seconds, milliseconds, frames, ticks

    var TIME_UNIT_REGEX = /^(\d*(?:\.\d*)?)(h|m|s|ms|f|t)$/;
    var textAlignToLineAlign = {
      left: 'start',
      center: 'center',
      right: 'end',
      start: 'start',
      end: 'end'
    };
    function parseIMSC1(payload, initPTS, timescale, callBack, errorCallBack) {
      var results = Object(_mp4_tools__WEBPACK_IMPORTED_MODULE_0__["findBox"])(new Uint8Array(payload), ['mdat']);

      if (results.length === 0) {
        errorCallBack(new Error('Could not parse IMSC1 mdat'));
        return;
      }

      var mdat = results[0];
      var ttml = Object(_demux_id3__WEBPACK_IMPORTED_MODULE_3__["utf8ArrayToStr"])(new Uint8Array(payload, mdat.start, mdat.end - mdat.start));
      var syncTime = Object(_timescale_conversion__WEBPACK_IMPORTED_MODULE_4__["toTimescaleFromScale"])(initPTS, 1, timescale);

      try {
        callBack(parseTTML(ttml, syncTime));
      } catch (error) {
        errorCallBack(error);
      }
    }

    function parseTTML(ttml, syncTime) {
      var parser = new DOMParser();
      var xmlDoc = parser.parseFromString(ttml, 'text/xml');
      var tt = xmlDoc.getElementsByTagName('tt')[0];

      if (!tt) {
        throw new Error('Invalid ttml');
      }

      var defaultRateInfo = {
        frameRate: 30,
        subFrameRate: 1,
        frameRateMultiplier: 0,
        tickRate: 0
      };
      var rateInfo = Object.keys(defaultRateInfo).reduce(function (result, key) {
        result[key] = tt.getAttribute("ttp:" + key) || defaultRateInfo[key];
        return result;
      }, {});
      var trim = tt.getAttribute('xml:space') !== 'preserve';
      var styleElements = collectionToDictionary(getElementCollection(tt, 'styling', 'style'));
      var regionElements = collectionToDictionary(getElementCollection(tt, 'layout', 'region'));
      var cueElements = getElementCollection(tt, 'body', '[begin]');
      return [].map.call(cueElements, function (cueElement) {
        var cueText = getTextContent(cueElement, trim);

        if (!cueText || !cueElement.hasAttribute('begin')) {
          return null;
        }

        var startTime = parseTtmlTime(cueElement.getAttribute('begin'), rateInfo);
        var duration = parseTtmlTime(cueElement.getAttribute('dur'), rateInfo);
        var endTime = parseTtmlTime(cueElement.getAttribute('end'), rateInfo);

        if (startTime === null) {
          throw timestampParsingError(cueElement);
        }

        if (endTime === null) {
          if (duration === null) {
            throw timestampParsingError(cueElement);
          }

          endTime = startTime + duration;
        }

        var cue = new _vttcue__WEBPACK_IMPORTED_MODULE_2__["default"](startTime - syncTime, endTime - syncTime, cueText);
        cue.id = Object(_webvtt_parser__WEBPACK_IMPORTED_MODULE_5__["generateCueId"])(cue.startTime, cue.endTime, cue.text);
        var region = regionElements[cueElement.getAttribute('region')];
        var style = styleElements[cueElement.getAttribute('style')]; // TODO: Add regions to track and cue (origin and extend)
        // These values are hard-coded (for now) to simulate region settings in the demo

        cue.position = 10;
        cue.size = 80; // Apply styles to cue

        var styles = getTtmlStyles(region, style);
        var textAlign = styles.textAlign;

        if (textAlign) {
          // cue.positionAlign not settable in FF~2016
          var lineAlign = textAlignToLineAlign[textAlign];

          if (lineAlign) {
            cue.lineAlign = lineAlign;
          }

          cue.align = textAlign;
        }

        _extends(cue, styles);

        return cue;
      }).filter(function (cue) {
        return cue !== null;
      });
    }

    function getElementCollection(fromElement, parentName, childName) {
      var parent = fromElement.getElementsByTagName(parentName)[0];

      if (parent) {
        return [].slice.call(parent.querySelectorAll(childName));
      }

      return [];
    }

    function collectionToDictionary(elementsWithId) {
      return elementsWithId.reduce(function (dict, element) {
        var id = element.getAttribute('xml:id');

        if (id) {
          dict[id] = element;
        }

        return dict;
      }, {});
    }

    function getTextContent(element, trim) {
      return [].slice.call(element.childNodes).reduce(function (str, node, i) {
        var _node$childNodes;

        if (node.nodeName === 'br' && i) {
          return str + '\n';
        }

        if ((_node$childNodes = node.childNodes) !== null && _node$childNodes !== void 0 && _node$childNodes.length) {
          return getTextContent(node, trim);
        } else if (trim) {
          return str + node.textContent.trim().replace(/\s+/g, ' ');
        }

        return str + node.textContent;
      }, '');
    }

    function getTtmlStyles(region, style) {
      var ttsNs = 'http://www.w3.org/ns/ttml#styling';
      var styleAttributes = ['displayAlign', 'textAlign', 'color', 'backgroundColor', 'fontSize', 'fontFamily' // 'fontWeight',
      // 'lineHeight',
      // 'wrapOption',
      // 'fontStyle',
      // 'direction',
      // 'writingMode'
      ];
      return styleAttributes.reduce(function (styles, name) {
        var value = getAttributeNS(style, ttsNs, name) || getAttributeNS(region, ttsNs, name);

        if (value) {
          styles[name] = value;
        }

        return styles;
      }, {});
    }

    function getAttributeNS(element, ns, name) {
      return element.hasAttributeNS(ns, name) ? element.getAttributeNS(ns, name) : null;
    }

    function timestampParsingError(node) {
      return new Error("Could not parse ttml timestamp " + node);
    }

    function parseTtmlTime(timeAttributeValue, rateInfo) {
      if (!timeAttributeValue) {
        return null;
      }

      var seconds = Object(_vttparser__WEBPACK_IMPORTED_MODULE_1__["parseTimeStamp"])(timeAttributeValue);

      if (seconds === null) {
        if (HMSF_REGEX.test(timeAttributeValue)) {
          seconds = parseHoursMinutesSecondsFrames(timeAttributeValue, rateInfo);
        } else if (TIME_UNIT_REGEX.test(timeAttributeValue)) {
          seconds = parseTimeUnits(timeAttributeValue, rateInfo);
        }
      }

      return seconds;
    }

    function parseHoursMinutesSecondsFrames(timeAttributeValue, rateInfo) {
      var m = HMSF_REGEX.exec(timeAttributeValue);
      var frames = (m[4] | 0) + (m[5] | 0) / rateInfo.subFrameRate;
      return (m[1] | 0) * 3600 + (m[2] | 0) * 60 + (m[3] | 0) + frames / rateInfo.frameRate;
    }

    function parseTimeUnits(timeAttributeValue, rateInfo) {
      var m = TIME_UNIT_REGEX.exec(timeAttributeValue);
      var value = Number(m[1]);
      var unit = m[2];

      switch (unit) {
        case 'h':
          return value * 3600;

        case 'm':
          return value * 60;

        case 'ms':
          return value * 1000;

        case 'f':
          return value / rateInfo.frameRate;

        case 't':
          return value / rateInfo.tickRate;
      }

      return value;
    }

    /***/ }),

    /***/ "./src/utils/logger.ts":
    /*!*****************************!*\
      !*** ./src/utils/logger.ts ***!
      \*****************************/
    /*! exports provided: enableLogs, logger */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "enableLogs", function() { return enableLogs; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "logger", function() { return logger; });
    var noop = function noop() {};

    var fakeLogger = {
      trace: noop,
      debug: noop,
      log: noop,
      warn: noop,
      info: noop,
      error: noop
    };
    var exportedLogger = fakeLogger; // let lastCallTime;
    // function formatMsgWithTimeInfo(type, msg) {
    //   const now = Date.now();
    //   const diff = lastCallTime ? '+' + (now - lastCallTime) : '0';
    //   lastCallTime = now;
    //   msg = (new Date(now)).toISOString() + ' | [' +  type + '] > ' + msg + ' ( ' + diff + ' ms )';
    //   return msg;
    // }

    function consolePrintFn(type) {
      var func = self.console[type];

      if (func) {
        return func.bind(self.console, "[" + type + "] >");
      }

      return noop;
    }

    function exportLoggerFunctions(debugConfig) {
      for (var _len = arguments.length, functions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        functions[_key - 1] = arguments[_key];
      }

      functions.forEach(function (type) {
        exportedLogger[type] = debugConfig[type] ? debugConfig[type].bind(debugConfig) : consolePrintFn(type);
      });
    }

    function enableLogs(debugConfig) {
      // check that console is available
      if (self.console && debugConfig === true || typeof debugConfig === 'object') {
        exportLoggerFunctions(debugConfig, // Remove out from list here to hard-disable a log-level
        // 'trace',
        'debug', 'log', 'info', 'warn', 'error'); // Some browsers don't allow to use bind on console object anyway
        // fallback to default if needed

        try {
          exportedLogger.log();
        } catch (e) {
          exportedLogger = fakeLogger;
        }
      } else {
        exportedLogger = fakeLogger;
      }
    }
    var logger = exportedLogger;

    /***/ }),

    /***/ "./src/utils/mediakeys-helper.ts":
    /*!***************************************!*\
      !*** ./src/utils/mediakeys-helper.ts ***!
      \***************************************/
    /*! exports provided: KeySystems, requestMediaKeySystemAccess */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeySystems", function() { return KeySystems; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "requestMediaKeySystemAccess", function() { return requestMediaKeySystemAccess; });
    /**
     * @see https://developer.mozilla.org/en-US/docs/Web/API/Navigator/requestMediaKeySystemAccess
     */
    var KeySystems;

    (function (KeySystems) {
      KeySystems["WIDEVINE"] = "com.widevine.alpha";
      KeySystems["PLAYREADY"] = "com.microsoft.playready";
    })(KeySystems || (KeySystems = {}));

    var requestMediaKeySystemAccess = function () {
      if (typeof self !== 'undefined' && self.navigator && self.navigator.requestMediaKeySystemAccess) {
        return self.navigator.requestMediaKeySystemAccess.bind(self.navigator);
      } else {
        return null;
      }
    }();



    /***/ }),

    /***/ "./src/utils/mediasource-helper.ts":
    /*!*****************************************!*\
      !*** ./src/utils/mediasource-helper.ts ***!
      \*****************************************/
    /*! exports provided: getMediaSource */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMediaSource", function() { return getMediaSource; });
    /**
     * MediaSource helper
     */
    function getMediaSource() {
      return self.MediaSource || self.WebKitMediaSource;
    }

    /***/ }),

    /***/ "./src/utils/mp4-tools.ts":
    /*!********************************!*\
      !*** ./src/utils/mp4-tools.ts ***!
      \********************************/
    /*! exports provided: bin2str, readUint16, readUint32, writeUint32, findBox, parseSegmentIndex, parseInitSegment, getStartDTS, getDuration, computeRawDurationFromSamples, offsetStartDTS, segmentValidRange, appendUint8Array */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bin2str", function() { return bin2str; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readUint16", function() { return readUint16; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readUint32", function() { return readUint32; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "writeUint32", function() { return writeUint32; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findBox", function() { return findBox; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseSegmentIndex", function() { return parseSegmentIndex; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseInitSegment", function() { return parseInitSegment; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getStartDTS", function() { return getStartDTS; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDuration", function() { return getDuration; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeRawDurationFromSamples", function() { return computeRawDurationFromSamples; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "offsetStartDTS", function() { return offsetStartDTS; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "segmentValidRange", function() { return segmentValidRange; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "appendUint8Array", function() { return appendUint8Array; });
    /* harmony import */ var _typed_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./typed-array */ "./src/utils/typed-array.ts");
    /* harmony import */ var _loader_fragment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../loader/fragment */ "./src/loader/fragment.ts");


    var UINT32_MAX = Math.pow(2, 32) - 1;
    var push = [].push;
    function bin2str(data) {
      return String.fromCharCode.apply(null, data);
    }
    function readUint16(buffer, offset) {
      if ('data' in buffer) {
        offset += buffer.start;
        buffer = buffer.data;
      }

      var val = buffer[offset] << 8 | buffer[offset + 1];
      return val < 0 ? 65536 + val : val;
    }
    function readUint32(buffer, offset) {
      if ('data' in buffer) {
        offset += buffer.start;
        buffer = buffer.data;
      }

      var val = buffer[offset] << 24 | buffer[offset + 1] << 16 | buffer[offset + 2] << 8 | buffer[offset + 3];
      return val < 0 ? 4294967296 + val : val;
    }
    function writeUint32(buffer, offset, value) {
      if ('data' in buffer) {
        offset += buffer.start;
        buffer = buffer.data;
      }

      buffer[offset] = value >> 24;
      buffer[offset + 1] = value >> 16 & 0xff;
      buffer[offset + 2] = value >> 8 & 0xff;
      buffer[offset + 3] = value & 0xff;
    } // Find the data for a box specified by its path

    function findBox(input, path) {
      var results = [];

      if (!path.length) {
        // short-circuit the search for empty paths
        return results;
      }

      var data;
      var start;
      var end;

      if ('data' in input) {
        data = input.data;
        start = input.start;
        end = input.end;
      } else {
        data = input;
        start = 0;
        end = data.byteLength;
      }

      for (var i = start; i < end;) {
        var size = readUint32(data, i);
        var type = bin2str(data.subarray(i + 4, i + 8));
        var endbox = size > 1 ? i + size : end;

        if (type === path[0]) {
          if (path.length === 1) {
            // this is the end of the path and we've found the box we were
            // looking for
            results.push({
              data: data,
              start: i + 8,
              end: endbox
            });
          } else {
            // recursively search for the next box along the path
            var subresults = findBox({
              data: data,
              start: i + 8,
              end: endbox
            }, path.slice(1));

            if (subresults.length) {
              push.apply(results, subresults);
            }
          }
        }

        i = endbox;
      } // we've finished searching all of data


      return results;
    }
    function parseSegmentIndex(initSegment) {
      var moovBox = findBox(initSegment, ['moov']);
      var moov = moovBox[0];
      var moovEndOffset = moov ? moov.end : null; // we need this in case we need to chop of garbage of the end of current data

      var sidxBox = findBox(initSegment, ['sidx']);

      if (!sidxBox || !sidxBox[0]) {
        return null;
      }

      var references = [];
      var sidx = sidxBox[0];
      var version = sidx.data[0]; // set initial offset, we skip the reference ID (not needed)

      var index = version === 0 ? 8 : 16;
      var timescale = readUint32(sidx, index);
      index += 4; // TODO: parse earliestPresentationTime and firstOffset
      // usually zero in our case

      var earliestPresentationTime = 0;
      var firstOffset = 0;

      if (version === 0) {
        index += 8;
      } else {
        index += 16;
      } // skip reserved


      index += 2;
      var startByte = sidx.end + firstOffset;
      var referencesCount = readUint16(sidx, index);
      index += 2;

      for (var i = 0; i < referencesCount; i++) {
        var referenceIndex = index;
        var referenceInfo = readUint32(sidx, referenceIndex);
        referenceIndex += 4;
        var referenceSize = referenceInfo & 0x7fffffff;
        var referenceType = (referenceInfo & 0x80000000) >>> 31;

        if (referenceType === 1) {
          // eslint-disable-next-line no-console
          console.warn('SIDX has hierarchical references (not supported)');
          return null;
        }

        var subsegmentDuration = readUint32(sidx, referenceIndex);
        referenceIndex += 4;
        references.push({
          referenceSize: referenceSize,
          subsegmentDuration: subsegmentDuration,
          // unscaled
          info: {
            duration: subsegmentDuration / timescale,
            start: startByte,
            end: startByte + referenceSize - 1
          }
        });
        startByte += referenceSize; // Skipping 1 bit for |startsWithSap|, 3 bits for |sapType|, and 28 bits
        // for |sapDelta|.

        referenceIndex += 4; // skip to next ref

        index = referenceIndex;
      }

      return {
        earliestPresentationTime: earliestPresentationTime,
        timescale: timescale,
        version: version,
        referencesCount: referencesCount,
        references: references,
        moovEndOffset: moovEndOffset
      };
    }
    /**
     * Parses an MP4 initialization segment and extracts stream type and
     * timescale values for any declared tracks. Timescale values indicate the
     * number of clock ticks per second to assume for time-based values
     * elsewhere in the MP4.
     *
     * To determine the start time of an MP4, you need two pieces of
     * information: the timescale unit and the earliest base media decode
     * time. Multiple timescales can be specified within an MP4 but the
     * base media decode time is always expressed in the timescale from
     * the media header box for the track:
     * ```
     * moov > trak > mdia > mdhd.timescale
     * moov > trak > mdia > hdlr
     * ```
     * @param initSegment {Uint8Array} the bytes of the init segment
     * @return {InitData} a hash of track type to timescale values or null if
     * the init segment is malformed.
     */

    function parseInitSegment(initSegment) {
      var result = [];
      var traks = findBox(initSegment, ['moov', 'trak']);

      for (var i = 0; i < traks.length; i++) {
        var trak = traks[i];
        var tkhd = findBox(trak, ['tkhd'])[0];

        if (tkhd) {
          var version = tkhd.data[tkhd.start];

          var _index = version === 0 ? 12 : 20;

          var trackId = readUint32(tkhd, _index);
          var mdhd = findBox(trak, ['mdia', 'mdhd'])[0];

          if (mdhd) {
            version = mdhd.data[mdhd.start];
            _index = version === 0 ? 12 : 20;
            var timescale = readUint32(mdhd, _index);
            var hdlr = findBox(trak, ['mdia', 'hdlr'])[0];

            if (hdlr) {
              var hdlrType = bin2str(hdlr.data.subarray(hdlr.start + 8, hdlr.start + 12));
              var type = {
                soun: _loader_fragment__WEBPACK_IMPORTED_MODULE_1__["ElementaryStreamTypes"].AUDIO,
                vide: _loader_fragment__WEBPACK_IMPORTED_MODULE_1__["ElementaryStreamTypes"].VIDEO
              }[hdlrType];

              if (type) {
                // Parse codec details
                var stsd = findBox(trak, ['mdia', 'minf', 'stbl', 'stsd'])[0];
                var codec = void 0;

                if (stsd) {
                  codec = bin2str(stsd.data.subarray(stsd.start + 12, stsd.start + 16)); // TODO: Parse codec details to be able to build MIME type.
                  // stsd.start += 8;
                  // const codecBox = findBox(stsd, [codec])[0];
                  // if (codecBox) {
                  //   TODO: Codec parsing support for avc1, mp4a, hevc, av01...
                  // }
                }

                result[trackId] = {
                  timescale: timescale,
                  type: type
                };
                result[type] = {
                  timescale: timescale,
                  id: trackId,
                  codec: codec
                };
              }
            }
          }
        }
      }

      var trex = findBox(initSegment, ['moov', 'mvex', 'trex']);
      trex.forEach(function (trex) {
        var trackId = readUint32(trex, 4);
        var track = result[trackId];

        if (track) {
          track.default = {
            duration: readUint32(trex, 12),
            flags: readUint32(trex, 20)
          };
        }
      });
      return result;
    }
    /**
     * Determine the base media decode start time, in seconds, for an MP4
     * fragment. If multiple fragments are specified, the earliest time is
     * returned.
     *
     * The base media decode time can be parsed from track fragment
     * metadata:
     * ```
     * moof > traf > tfdt.baseMediaDecodeTime
     * ```
     * It requires the timescale value from the mdhd to interpret.
     *
     * @param initData {InitData} a hash of track type to timescale values
     * @param fmp4 {Uint8Array} the bytes of the mp4 fragment
     * @return {number} the earliest base media decode start time for the
     * fragment, in seconds
     */

    function getStartDTS(initData, fmp4) {
      // we need info from two children of each track fragment box
      return findBox(fmp4, ['moof', 'traf']).reduce(function (result, traf) {
        var tfdt = findBox(traf, ['tfdt'])[0];
        var version = tfdt.data[tfdt.start];
        var start = findBox(traf, ['tfhd']).reduce(function (result, tfhd) {
          // get the track id from the tfhd
          var id = readUint32(tfhd, 4);
          var track = initData[id];

          if (track) {
            var baseTime = readUint32(tfdt, 4);

            if (version === 1) {
              baseTime *= Math.pow(2, 32);
              baseTime += readUint32(tfdt, 8);
            } // assume a 90kHz clock if no timescale was specified


            var scale = track.timescale || 90e3; // convert base time to seconds

            var startTime = baseTime / scale;

            if (isFinite(startTime) && (result === null || startTime < result)) {
              return startTime;
            }
          }

          return result;
        }, null);

        if (start !== null && isFinite(start) && (result === null || start < result)) {
          return start;
        }

        return result;
      }, null) || 0;
    }
    /*
      For Reference:
      aligned(8) class TrackFragmentHeaderBox
               extends FullBox(‘tfhd’, 0, tf_flags){
         unsigned int(32)  track_ID;
         // all the following are optional fields
         unsigned int(64)  base_data_offset;
         unsigned int(32)  sample_description_index;
         unsigned int(32)  default_sample_duration;
         unsigned int(32)  default_sample_size;
         unsigned int(32)  default_sample_flags
      }
     */

    function getDuration(data, initData) {
      var rawDuration = 0;
      var videoDuration = 0;
      var audioDuration = 0;
      var trafs = findBox(data, ['moof', 'traf']);

      for (var i = 0; i < trafs.length; i++) {
        var traf = trafs[i]; // There is only one tfhd & trun per traf
        // This is true for CMAF style content, and we should perhaps check the ftyp
        // and only look for a single trun then, but for ISOBMFF we should check
        // for multiple track runs.

        var tfhd = findBox(traf, ['tfhd'])[0]; // get the track id from the tfhd

        var id = readUint32(tfhd, 4);
        var track = initData[id];

        if (!track) {
          continue;
        }

        var trackDefault = track.default;
        var tfhdFlags = readUint32(tfhd, 0) | (trackDefault === null || trackDefault === void 0 ? void 0 : trackDefault.flags);
        var sampleDuration = trackDefault === null || trackDefault === void 0 ? void 0 : trackDefault.duration;

        if (tfhdFlags & 0x000008) {
          // 0x000008 indicates the presence of the default_sample_duration field
          if (tfhdFlags & 0x000002) {
            // 0x000002 indicates the presence of the sample_description_index field, which precedes default_sample_duration
            // If present, the default_sample_duration exists at byte offset 12
            sampleDuration = readUint32(tfhd, 12);
          } else {
            // Otherwise, the duration is at byte offset 8
            sampleDuration = readUint32(tfhd, 8);
          }
        } // assume a 90kHz clock if no timescale was specified


        var timescale = track.timescale || 90e3;
        var truns = findBox(traf, ['trun']);

        for (var j = 0; j < truns.length; j++) {
          if (sampleDuration) {
            var sampleCount = readUint32(truns[j], 4);
            rawDuration = sampleDuration * sampleCount;
          } else {
            rawDuration = computeRawDurationFromSamples(truns[j]);
          }

          if (track.type === _loader_fragment__WEBPACK_IMPORTED_MODULE_1__["ElementaryStreamTypes"].VIDEO) {
            videoDuration += rawDuration / timescale;
          } else if (track.type === _loader_fragment__WEBPACK_IMPORTED_MODULE_1__["ElementaryStreamTypes"].AUDIO) {
            audioDuration += rawDuration / timescale;
          }
        }
      }

      if (videoDuration === 0 && audioDuration === 0) {
        // If duration samples are not available in the traf use sidx subsegment_duration
        var sidx = parseSegmentIndex(data);

        if (sidx !== null && sidx !== void 0 && sidx.references) {
          return sidx.references.reduce(function (dur, ref) {
            return dur + ref.info.duration || 0;
          }, 0);
        }
      }

      if (videoDuration) {
        return videoDuration;
      }

      return audioDuration;
    }
    /*
      For Reference:
      aligned(8) class TrackRunBox
               extends FullBox(‘trun’, version, tr_flags) {
         unsigned int(32)  sample_count;
         // the following are optional fields
         signed int(32) data_offset;
         unsigned int(32)  first_sample_flags;
         // all fields in the following array are optional
         {
            unsigned int(32)  sample_duration;
            unsigned int(32)  sample_size;
            unsigned int(32)  sample_flags
            if (version == 0)
               { unsigned int(32)
            else
               { signed int(32)
         }[ sample_count ]
      }
     */

    function computeRawDurationFromSamples(trun) {
      var flags = readUint32(trun, 0); // Flags are at offset 0, non-optional sample_count is at offset 4. Therefore we start 8 bytes in.
      // Each field is an int32, which is 4 bytes

      var offset = 8; // data-offset-present flag

      if (flags & 0x000001) {
        offset += 4;
      } // first-sample-flags-present flag


      if (flags & 0x000004) {
        offset += 4;
      }

      var duration = 0;
      var sampleCount = readUint32(trun, 4);

      for (var i = 0; i < sampleCount; i++) {
        // sample-duration-present flag
        if (flags & 0x000100) {
          var sampleDuration = readUint32(trun, offset);
          duration += sampleDuration;
          offset += 4;
        } // sample-size-present flag


        if (flags & 0x000200) {
          offset += 4;
        } // sample-flags-present flag


        if (flags & 0x000400) {
          offset += 4;
        } // sample-composition-time-offsets-present flag


        if (flags & 0x000800) {
          offset += 4;
        }
      }

      return duration;
    }
    function offsetStartDTS(initData, fmp4, timeOffset) {
      findBox(fmp4, ['moof', 'traf']).forEach(function (traf) {
        findBox(traf, ['tfhd']).forEach(function (tfhd) {
          // get the track id from the tfhd
          var id = readUint32(tfhd, 4);
          var track = initData[id];

          if (!track) {
            return;
          } // assume a 90kHz clock if no timescale was specified


          var timescale = track.timescale || 90e3; // get the base media decode time from the tfdt

          findBox(traf, ['tfdt']).forEach(function (tfdt) {
            var version = tfdt.data[tfdt.start];
            var baseMediaDecodeTime = readUint32(tfdt, 4);

            if (version === 0) {
              writeUint32(tfdt, 4, baseMediaDecodeTime - timeOffset * timescale);
            } else {
              baseMediaDecodeTime *= Math.pow(2, 32);
              baseMediaDecodeTime += readUint32(tfdt, 8);
              baseMediaDecodeTime -= timeOffset * timescale;
              baseMediaDecodeTime = Math.max(baseMediaDecodeTime, 0);
              var upper = Math.floor(baseMediaDecodeTime / (UINT32_MAX + 1));
              var lower = Math.floor(baseMediaDecodeTime % (UINT32_MAX + 1));
              writeUint32(tfdt, 4, upper);
              writeUint32(tfdt, 8, lower);
            }
          });
        });
      });
    } // TODO: Check if the last moof+mdat pair is part of the valid range

    function segmentValidRange(data) {
      var segmentedRange = {
        valid: null,
        remainder: null
      };
      var moofs = findBox(data, ['moof']);

      if (!moofs) {
        return segmentedRange;
      } else if (moofs.length < 2) {
        segmentedRange.remainder = data;
        return segmentedRange;
      }

      var last = moofs[moofs.length - 1]; // Offset by 8 bytes; findBox offsets the start by as much

      segmentedRange.valid = Object(_typed_array__WEBPACK_IMPORTED_MODULE_0__["sliceUint8"])(data, 0, last.start - 8);
      segmentedRange.remainder = Object(_typed_array__WEBPACK_IMPORTED_MODULE_0__["sliceUint8"])(data, last.start - 8);
      return segmentedRange;
    }
    function appendUint8Array(data1, data2) {
      var temp = new Uint8Array(data1.length + data2.length);
      temp.set(data1);
      temp.set(data2, data1.length);
      return temp;
    }

    /***/ }),

    /***/ "./src/utils/output-filter.ts":
    /*!************************************!*\
      !*** ./src/utils/output-filter.ts ***!
      \************************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return OutputFilter; });
    var OutputFilter = /*#__PURE__*/function () {
      function OutputFilter(timelineController, trackName) {
        this.timelineController = void 0;
        this.cueRanges = [];
        this.trackName = void 0;
        this.startTime = null;
        this.endTime = null;
        this.screen = null;
        this.timelineController = timelineController;
        this.trackName = trackName;
      }

      var _proto = OutputFilter.prototype;

      _proto.dispatchCue = function dispatchCue() {
        if (this.startTime === null) {
          return;
        }

        this.timelineController.addCues(this.trackName, this.startTime, this.endTime, this.screen, this.cueRanges);
        this.startTime = null;
      };

      _proto.newCue = function newCue(startTime, endTime, screen) {
        if (this.startTime === null || this.startTime > startTime) {
          this.startTime = startTime;
        }

        this.endTime = endTime;
        this.screen = screen;
        this.timelineController.createCaptionsTrack(this.trackName);
      };

      _proto.reset = function reset() {
        this.cueRanges = [];
      };

      return OutputFilter;
    }();



    /***/ }),

    /***/ "./src/utils/texttrack-utils.ts":
    /*!**************************************!*\
      !*** ./src/utils/texttrack-utils.ts ***!
      \**************************************/
    /*! exports provided: sendAddTrackEvent, addCueToTrack, clearCurrentCues, removeCuesInRange, getCuesInRange */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sendAddTrackEvent", function() { return sendAddTrackEvent; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addCueToTrack", function() { return addCueToTrack; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clearCurrentCues", function() { return clearCurrentCues; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeCuesInRange", function() { return removeCuesInRange; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCuesInRange", function() { return getCuesInRange; });
    /* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./logger */ "./src/utils/logger.ts");

    function sendAddTrackEvent(track, videoEl) {
      var event;

      try {
        event = new Event('addtrack');
      } catch (err) {
        // for IE11
        event = document.createEvent('Event');
        event.initEvent('addtrack', false, false);
      }

      event.track = track;
      videoEl.dispatchEvent(event);
    }
    function addCueToTrack(track, cue) {
      // Sometimes there are cue overlaps on segmented vtts so the same
      // cue can appear more than once in different vtt files.
      // This avoid showing duplicated cues with same timecode and text.
      var mode = track.mode;

      if (mode === 'disabled') {
        track.mode = 'hidden';
      }

      if (track.cues && !track.cues.getCueById(cue.id)) {
        try {
          track.addCue(cue);

          if (!track.cues.getCueById(cue.id)) {
            throw new Error("addCue is failed for: " + cue);
          }
        } catch (err) {
          _logger__WEBPACK_IMPORTED_MODULE_0__["logger"].debug("[texttrack-utils]: " + err);
          var textTrackCue = new self.TextTrackCue(cue.startTime, cue.endTime, cue.text);
          textTrackCue.id = cue.id;
          track.addCue(textTrackCue);
        }
      }

      if (mode === 'disabled') {
        track.mode = mode;
      }
    }
    function clearCurrentCues(track) {
      // When track.mode is disabled, track.cues will be null.
      // To guarantee the removal of cues, we need to temporarily
      // change the mode to hidden
      var mode = track.mode;

      if (mode === 'disabled') {
        track.mode = 'hidden';
      }

      if (track.cues) {
        for (var i = track.cues.length; i--;) {
          track.removeCue(track.cues[i]);
        }
      }

      if (mode === 'disabled') {
        track.mode = mode;
      }
    }
    function removeCuesInRange(track, start, end) {
      var mode = track.mode;

      if (mode === 'disabled') {
        track.mode = 'hidden';
      }

      if (track.cues && track.cues.length > 0) {
        var cues = getCuesInRange(track.cues, start, end);

        for (var i = 0; i < cues.length; i++) {
          track.removeCue(cues[i]);
        }
      }

      if (mode === 'disabled') {
        track.mode = mode;
      }
    } // Find first cue starting after given time.
    // Modified version of binary search O(log(n)).

    function getFirstCueIndexAfterTime(cues, time) {
      // If first cue starts after time, start there
      if (time < cues[0].startTime) {
        return 0;
      } // If the last cue ends before time there is no overlap


      var len = cues.length - 1;

      if (time > cues[len].endTime) {
        return -1;
      }

      var left = 0;
      var right = len;

      while (left <= right) {
        var mid = Math.floor((right + left) / 2);

        if (time < cues[mid].startTime) {
          right = mid - 1;
        } else if (time > cues[mid].startTime && left < len) {
          left = mid + 1;
        } else {
          // If it's not lower or higher, it must be equal.
          return mid;
        }
      } // At this point, left and right have swapped.
      // No direct match was found, left or right element must be the closest. Check which one has the smallest diff.


      return cues[left].startTime - time < time - cues[right].startTime ? left : right;
    }

    function getCuesInRange(cues, start, end) {
      var cuesFound = [];
      var firstCueInRange = getFirstCueIndexAfterTime(cues, start);

      if (firstCueInRange > -1) {
        for (var i = firstCueInRange, len = cues.length; i < len; i++) {
          var cue = cues[i];

          if (cue.startTime >= start && cue.endTime <= end) {
            cuesFound.push(cue);
          } else if (cue.startTime > end) {
            return cuesFound;
          }
        }
      }

      return cuesFound;
    }

    /***/ }),

    /***/ "./src/utils/time-ranges.ts":
    /*!**********************************!*\
      !*** ./src/utils/time-ranges.ts ***!
      \**********************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /**
     *  TimeRanges to string helper
     */
    var TimeRanges = {
      toString: function toString(r) {
        var log = '';
        var len = r.length;

        for (var i = 0; i < len; i++) {
          log += '[' + r.start(i).toFixed(3) + ',' + r.end(i).toFixed(3) + ']';
        }

        return log;
      }
    };
    /* harmony default export */ __webpack_exports__["default"] = (TimeRanges);

    /***/ }),

    /***/ "./src/utils/timescale-conversion.ts":
    /*!*******************************************!*\
      !*** ./src/utils/timescale-conversion.ts ***!
      \*******************************************/
    /*! exports provided: toTimescaleFromBase, toTimescaleFromScale, toMsFromMpegTsClock, toMpegTsClockFromTimescale */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toTimescaleFromBase", function() { return toTimescaleFromBase; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toTimescaleFromScale", function() { return toTimescaleFromScale; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toMsFromMpegTsClock", function() { return toMsFromMpegTsClock; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toMpegTsClockFromTimescale", function() { return toMpegTsClockFromTimescale; });
    var MPEG_TS_CLOCK_FREQ_HZ = 90000;
    function toTimescaleFromBase(value, destScale, srcBase, round) {
      if (srcBase === void 0) {
        srcBase = 1;
      }

      if (round === void 0) {
        round = false;
      }

      var result = value * destScale * srcBase; // equivalent to `(value * scale) / (1 / base)`

      return round ? Math.round(result) : result;
    }
    function toTimescaleFromScale(value, destScale, srcScale, round) {
      if (srcScale === void 0) {
        srcScale = 1;
      }

      if (round === void 0) {
        round = false;
      }

      return toTimescaleFromBase(value, destScale, 1 / srcScale, round);
    }
    function toMsFromMpegTsClock(value, round) {
      if (round === void 0) {
        round = false;
      }

      return toTimescaleFromBase(value, 1000, 1 / MPEG_TS_CLOCK_FREQ_HZ, round);
    }
    function toMpegTsClockFromTimescale(value, srcScale) {
      if (srcScale === void 0) {
        srcScale = 1;
      }

      return toTimescaleFromBase(value, MPEG_TS_CLOCK_FREQ_HZ, 1 / srcScale);
    }

    /***/ }),

    /***/ "./src/utils/typed-array.ts":
    /*!**********************************!*\
      !*** ./src/utils/typed-array.ts ***!
      \**********************************/
    /*! exports provided: sliceUint8 */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sliceUint8", function() { return sliceUint8; });
    function sliceUint8(array, start, end) {
      // @ts-expect-error This polyfills IE11 usage of Uint8Array slice.
      // It always exists in the TypeScript definition so fails, but it fails at runtime on IE11.
      return Uint8Array.prototype.slice ? array.slice(start, end) : new Uint8Array(Array.prototype.slice.call(array, start, end));
    }

    /***/ }),

    /***/ "./src/utils/vttcue.ts":
    /*!*****************************!*\
      !*** ./src/utils/vttcue.ts ***!
      \*****************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /**
     * Copyright 2013 vtt.js Contributors
     *
     * Licensed under the Apache License, Version 2.0 (the 'License');
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an 'AS IS' BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /* harmony default export */ __webpack_exports__["default"] = ((function () {
      if (typeof self !== 'undefined' && self.VTTCue) {
        return self.VTTCue;
      }

      var AllowedDirections = ['', 'lr', 'rl'];
      var AllowedAlignments = ['start', 'middle', 'end', 'left', 'right'];

      function isAllowedValue(allowed, value) {
        if (typeof value !== 'string') {
          return false;
        } // necessary for assuring the generic conforms to the Array interface


        if (!Array.isArray(allowed)) {
          return false;
        } // reset the type so that the next narrowing works well


        var lcValue = value.toLowerCase(); // use the allow list to narrow the type to a specific subset of strings

        if (~allowed.indexOf(lcValue)) {
          return lcValue;
        }

        return false;
      }

      function findDirectionSetting(value) {
        return isAllowedValue(AllowedDirections, value);
      }

      function findAlignSetting(value) {
        return isAllowedValue(AllowedAlignments, value);
      }

      function extend(obj) {
        for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          rest[_key - 1] = arguments[_key];
        }

        var i = 1;

        for (; i < arguments.length; i++) {
          var cobj = arguments[i];

          for (var p in cobj) {
            obj[p] = cobj[p];
          }
        }

        return obj;
      }

      function VTTCue(startTime, endTime, text) {
        var cue = this;
        var baseObj = {
          enumerable: true
        };
        /**
         * Shim implementation specific properties. These properties are not in
         * the spec.
         */
        // Lets us know when the VTTCue's data has changed in such a way that we need
        // to recompute its display state. This lets us compute its display state
        // lazily.

        cue.hasBeenReset = false;
        /**
         * VTTCue and TextTrackCue properties
         * http://dev.w3.org/html5/webvtt/#vttcue-interface
         */

        var _id = '';
        var _pauseOnExit = false;
        var _startTime = startTime;
        var _endTime = endTime;
        var _text = text;
        var _region = null;
        var _vertical = '';
        var _snapToLines = true;
        var _line = 'auto';
        var _lineAlign = 'start';
        var _position = 50;
        var _positionAlign = 'middle';
        var _size = 50;
        var _align = 'middle';
        Object.defineProperty(cue, 'id', extend({}, baseObj, {
          get: function get() {
            return _id;
          },
          set: function set(value) {
            _id = '' + value;
          }
        }));
        Object.defineProperty(cue, 'pauseOnExit', extend({}, baseObj, {
          get: function get() {
            return _pauseOnExit;
          },
          set: function set(value) {
            _pauseOnExit = !!value;
          }
        }));
        Object.defineProperty(cue, 'startTime', extend({}, baseObj, {
          get: function get() {
            return _startTime;
          },
          set: function set(value) {
            if (typeof value !== 'number') {
              throw new TypeError('Start time must be set to a number.');
            }

            _startTime = value;
            this.hasBeenReset = true;
          }
        }));
        Object.defineProperty(cue, 'endTime', extend({}, baseObj, {
          get: function get() {
            return _endTime;
          },
          set: function set(value) {
            if (typeof value !== 'number') {
              throw new TypeError('End time must be set to a number.');
            }

            _endTime = value;
            this.hasBeenReset = true;
          }
        }));
        Object.defineProperty(cue, 'text', extend({}, baseObj, {
          get: function get() {
            return _text;
          },
          set: function set(value) {
            _text = '' + value;
            this.hasBeenReset = true;
          }
        })); // todo: implement VTTRegion polyfill?

        Object.defineProperty(cue, 'region', extend({}, baseObj, {
          get: function get() {
            return _region;
          },
          set: function set(value) {
            _region = value;
            this.hasBeenReset = true;
          }
        }));
        Object.defineProperty(cue, 'vertical', extend({}, baseObj, {
          get: function get() {
            return _vertical;
          },
          set: function set(value) {
            var setting = findDirectionSetting(value); // Have to check for false because the setting an be an empty string.

            if (setting === false) {
              throw new SyntaxError('An invalid or illegal string was specified.');
            }

            _vertical = setting;
            this.hasBeenReset = true;
          }
        }));
        Object.defineProperty(cue, 'snapToLines', extend({}, baseObj, {
          get: function get() {
            return _snapToLines;
          },
          set: function set(value) {
            _snapToLines = !!value;
            this.hasBeenReset = true;
          }
        }));
        Object.defineProperty(cue, 'line', extend({}, baseObj, {
          get: function get() {
            return _line;
          },
          set: function set(value) {
            if (typeof value !== 'number' && value !== 'auto') {
              throw new SyntaxError('An invalid number or illegal string was specified.');
            }

            _line = value;
            this.hasBeenReset = true;
          }
        }));
        Object.defineProperty(cue, 'lineAlign', extend({}, baseObj, {
          get: function get() {
            return _lineAlign;
          },
          set: function set(value) {
            var setting = findAlignSetting(value);

            if (!setting) {
              throw new SyntaxError('An invalid or illegal string was specified.');
            }

            _lineAlign = setting;
            this.hasBeenReset = true;
          }
        }));
        Object.defineProperty(cue, 'position', extend({}, baseObj, {
          get: function get() {
            return _position;
          },
          set: function set(value) {
            if (value < 0 || value > 100) {
              throw new Error('Position must be between 0 and 100.');
            }

            _position = value;
            this.hasBeenReset = true;
          }
        }));
        Object.defineProperty(cue, 'positionAlign', extend({}, baseObj, {
          get: function get() {
            return _positionAlign;
          },
          set: function set(value) {
            var setting = findAlignSetting(value);

            if (!setting) {
              throw new SyntaxError('An invalid or illegal string was specified.');
            }

            _positionAlign = setting;
            this.hasBeenReset = true;
          }
        }));
        Object.defineProperty(cue, 'size', extend({}, baseObj, {
          get: function get() {
            return _size;
          },
          set: function set(value) {
            if (value < 0 || value > 100) {
              throw new Error('Size must be between 0 and 100.');
            }

            _size = value;
            this.hasBeenReset = true;
          }
        }));
        Object.defineProperty(cue, 'align', extend({}, baseObj, {
          get: function get() {
            return _align;
          },
          set: function set(value) {
            var setting = findAlignSetting(value);

            if (!setting) {
              throw new SyntaxError('An invalid or illegal string was specified.');
            }

            _align = setting;
            this.hasBeenReset = true;
          }
        }));
        /**
         * Other <track> spec defined properties
         */
        // http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#text-track-cue-display-state

        cue.displayState = undefined;
      }
      /**
       * VTTCue methods
       */


      VTTCue.prototype.getCueAsHTML = function () {
        // Assume WebVTT.convertCueToDOMTree is on the global.
        var WebVTT = self.WebVTT;
        return WebVTT.convertCueToDOMTree(self, this.text);
      }; // this is a polyfill hack


      return VTTCue;
    })());

    /***/ }),

    /***/ "./src/utils/vttparser.ts":
    /*!********************************!*\
      !*** ./src/utils/vttparser.ts ***!
      \********************************/
    /*! exports provided: parseTimeStamp, fixLineBreaks, VTTParser */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseTimeStamp", function() { return parseTimeStamp; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fixLineBreaks", function() { return fixLineBreaks; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VTTParser", function() { return VTTParser; });
    /* harmony import */ var _vttcue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vttcue */ "./src/utils/vttcue.ts");
    /*
     * Source: https://github.com/mozilla/vtt.js/blob/master/dist/vtt.js
     */


    var StringDecoder = /*#__PURE__*/function () {
      function StringDecoder() {}

      var _proto = StringDecoder.prototype;

      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      _proto.decode = function decode(data, options) {
        if (!data) {
          return '';
        }

        if (typeof data !== 'string') {
          throw new Error('Error - expected string data.');
        }

        return decodeURIComponent(encodeURIComponent(data));
      };

      return StringDecoder;
    }(); // Try to parse input as a time stamp.


    function parseTimeStamp(input) {
      function computeSeconds(h, m, s, f) {
        return (h | 0) * 3600 + (m | 0) * 60 + (s | 0) + parseFloat(f || 0);
      }

      var m = input.match(/^(?:(\d+):)?(\d{2}):(\d{2})(\.\d+)?/);

      if (!m) {
        return null;
      }

      if (parseFloat(m[2]) > 59) {
        // Timestamp takes the form of [hours]:[minutes].[milliseconds]
        // First position is hours as it's over 59.
        return computeSeconds(m[2], m[3], 0, m[4]);
      } // Timestamp takes the form of [hours (optional)]:[minutes]:[seconds].[milliseconds]


      return computeSeconds(m[1], m[2], m[3], m[4]);
    } // A settings object holds key/value pairs and will ignore anything but the first
    // assignment to a specific key.

    var Settings = /*#__PURE__*/function () {
      function Settings() {
        this.values = Object.create(null);
      }

      var _proto2 = Settings.prototype;

      // Only accept the first assignment to any key.
      _proto2.set = function set(k, v) {
        if (!this.get(k) && v !== '') {
          this.values[k] = v;
        }
      } // Return the value for a key, or a default value.
      // If 'defaultKey' is passed then 'dflt' is assumed to be an object with
      // a number of possible default values as properties where 'defaultKey' is
      // the key of the property that will be chosen; otherwise it's assumed to be
      // a single value.
      ;

      _proto2.get = function get(k, dflt, defaultKey) {
        if (defaultKey) {
          return this.has(k) ? this.values[k] : dflt[defaultKey];
        }

        return this.has(k) ? this.values[k] : dflt;
      } // Check whether we have a value for a key.
      ;

      _proto2.has = function has(k) {
        return k in this.values;
      } // Accept a setting if its one of the given alternatives.
      ;

      _proto2.alt = function alt(k, v, a) {
        for (var n = 0; n < a.length; ++n) {
          if (v === a[n]) {
            this.set(k, v);
            break;
          }
        }
      } // Accept a setting if its a valid (signed) integer.
      ;

      _proto2.integer = function integer(k, v) {
        if (/^-?\d+$/.test(v)) {
          // integer
          this.set(k, parseInt(v, 10));
        }
      } // Accept a setting if its a valid percentage.
      ;

      _proto2.percent = function percent(k, v) {
        if (/^([\d]{1,3})(\.[\d]*)?%$/.test(v)) {
          var percent = parseFloat(v);

          if (percent >= 0 && percent <= 100) {
            this.set(k, percent);
            return true;
          }
        }

        return false;
      };

      return Settings;
    }(); // Helper function to parse input into groups separated by 'groupDelim', and
    // interpret each group as a key/value pair separated by 'keyValueDelim'.


    function parseOptions(input, callback, keyValueDelim, groupDelim) {
      var groups = groupDelim ? input.split(groupDelim) : [input];

      for (var i in groups) {
        if (typeof groups[i] !== 'string') {
          continue;
        }

        var kv = groups[i].split(keyValueDelim);

        if (kv.length !== 2) {
          continue;
        }

        var _k = kv[0];
        var _v = kv[1];
        callback(_k, _v);
      }
    }

    var defaults = new _vttcue__WEBPACK_IMPORTED_MODULE_0__["default"](0, 0, ''); // 'middle' was changed to 'center' in the spec: https://github.com/w3c/webvtt/pull/244
    //  Safari doesn't yet support this change, but FF and Chrome do.

    var center = defaults.align === 'middle' ? 'middle' : 'center';

    function parseCue(input, cue, regionList) {
      // Remember the original input if we need to throw an error.
      var oInput = input; // 4.1 WebVTT timestamp

      function consumeTimeStamp() {
        var ts = parseTimeStamp(input);

        if (ts === null) {
          throw new Error('Malformed timestamp: ' + oInput);
        } // Remove time stamp from input.


        input = input.replace(/^[^\sa-zA-Z-]+/, '');
        return ts;
      } // 4.4.2 WebVTT cue settings


      function consumeCueSettings(input, cue) {
        var settings = new Settings();
        parseOptions(input, function (k, v) {
          var vals;

          switch (k) {
            case 'region':
              // Find the last region we parsed with the same region id.
              for (var i = regionList.length - 1; i >= 0; i--) {
                if (regionList[i].id === v) {
                  settings.set(k, regionList[i].region);
                  break;
                }
              }

              break;

            case 'vertical':
              settings.alt(k, v, ['rl', 'lr']);
              break;

            case 'line':
              vals = v.split(',');
              settings.integer(k, vals[0]);

              if (settings.percent(k, vals[0])) {
                settings.set('snapToLines', false);
              }

              settings.alt(k, vals[0], ['auto']);

              if (vals.length === 2) {
                settings.alt('lineAlign', vals[1], ['start', center, 'end']);
              }

              break;

            case 'position':
              vals = v.split(',');
              settings.percent(k, vals[0]);

              if (vals.length === 2) {
                settings.alt('positionAlign', vals[1], ['start', center, 'end', 'line-left', 'line-right', 'auto']);
              }

              break;

            case 'size':
              settings.percent(k, v);
              break;

            case 'align':
              settings.alt(k, v, ['start', center, 'end', 'left', 'right']);
              break;
          }
        }, /:/, /\s/); // Apply default values for any missing fields.

        cue.region = settings.get('region', null);
        cue.vertical = settings.get('vertical', '');
        var line = settings.get('line', 'auto');

        if (line === 'auto' && defaults.line === -1) {
          // set numeric line number for Safari
          line = -1;
        }

        cue.line = line;
        cue.lineAlign = settings.get('lineAlign', 'start');
        cue.snapToLines = settings.get('snapToLines', true);
        cue.size = settings.get('size', 100);
        cue.align = settings.get('align', center);
        var position = settings.get('position', 'auto');

        if (position === 'auto' && defaults.position === 50) {
          // set numeric position for Safari
          position = cue.align === 'start' || cue.align === 'left' ? 0 : cue.align === 'end' || cue.align === 'right' ? 100 : 50;
        }

        cue.position = position;
      }

      function skipWhitespace() {
        input = input.replace(/^\s+/, '');
      } // 4.1 WebVTT cue timings.


      skipWhitespace();
      cue.startTime = consumeTimeStamp(); // (1) collect cue start time

      skipWhitespace();

      if (input.substr(0, 3) !== '-->') {
        // (3) next characters must match '-->'
        throw new Error("Malformed time stamp (time stamps must be separated by '-->'): " + oInput);
      }

      input = input.substr(3);
      skipWhitespace();
      cue.endTime = consumeTimeStamp(); // (5) collect cue end time
      // 4.1 WebVTT cue settings list.

      skipWhitespace();
      consumeCueSettings(input, cue);
    }

    function fixLineBreaks(input) {
      return input.replace(/<br(?: \/)?>/gi, '\n');
    }
    var VTTParser = /*#__PURE__*/function () {
      function VTTParser() {
        this.state = 'INITIAL';
        this.buffer = '';
        this.decoder = new StringDecoder();
        this.regionList = [];
        this.cue = null;
        this.oncue = void 0;
        this.onparsingerror = void 0;
        this.onflush = void 0;
      }

      var _proto3 = VTTParser.prototype;

      _proto3.parse = function parse(data) {
        var _this = this; // If there is no data then we won't decode it, but will just try to parse
        // whatever is in buffer already. This may occur in circumstances, for
        // example when flush() is called.


        if (data) {
          // Try to decode the data that we received.
          _this.buffer += _this.decoder.decode(data, {
            stream: true
          });
        }

        function collectNextLine() {
          var buffer = _this.buffer;
          var pos = 0;
          buffer = fixLineBreaks(buffer);

          while (pos < buffer.length && buffer[pos] !== '\r' && buffer[pos] !== '\n') {
            ++pos;
          }

          var line = buffer.substr(0, pos); // Advance the buffer early in case we fail below.

          if (buffer[pos] === '\r') {
            ++pos;
          }

          if (buffer[pos] === '\n') {
            ++pos;
          }

          _this.buffer = buffer.substr(pos);
          return line;
        } // 3.2 WebVTT metadata header syntax


        function parseHeader(input) {
          parseOptions(input, function (k, v) {// switch (k) {
            // case 'region':
            // 3.3 WebVTT region metadata header syntax
            // console.log('parse region', v);
            // parseRegion(v);
            // break;
            // }
          }, /:/);
        } // 5.1 WebVTT file parsing.


        try {
          var line = '';

          if (_this.state === 'INITIAL') {
            // We can't start parsing until we have the first line.
            if (!/\r\n|\n/.test(_this.buffer)) {
              return this;
            }

            line = collectNextLine(); // strip of UTF-8 BOM if any
            // https://en.wikipedia.org/wiki/Byte_order_mark#UTF-8

            var m = line.match(/^(ï»¿)?WEBVTT([ \t].*)?$/);

            if (!m || !m[0]) {
              throw new Error('Malformed WebVTT signature.');
            }

            _this.state = 'HEADER';
          }

          var alreadyCollectedLine = false;

          while (_this.buffer) {
            // We can't parse a line until we have the full line.
            if (!/\r\n|\n/.test(_this.buffer)) {
              return this;
            }

            if (!alreadyCollectedLine) {
              line = collectNextLine();
            } else {
              alreadyCollectedLine = false;
            }

            switch (_this.state) {
              case 'HEADER':
                // 13-18 - Allow a header (metadata) under the WEBVTT line.
                if (/:/.test(line)) {
                  parseHeader(line);
                } else if (!line) {
                  // An empty line terminates the header and starts the body (cues).
                  _this.state = 'ID';
                }

                continue;

              case 'NOTE':
                // Ignore NOTE blocks.
                if (!line) {
                  _this.state = 'ID';
                }

                continue;

              case 'ID':
                // Check for the start of NOTE blocks.
                if (/^NOTE($|[ \t])/.test(line)) {
                  _this.state = 'NOTE';
                  break;
                } // 19-29 - Allow any number of line terminators, then initialize new cue values.


                if (!line) {
                  continue;
                }

                _this.cue = new _vttcue__WEBPACK_IMPORTED_MODULE_0__["default"](0, 0, '');
                _this.state = 'CUE'; // 30-39 - Check if self line contains an optional identifier or timing data.

                if (line.indexOf('-->') === -1) {
                  _this.cue.id = line;
                  continue;
                }

              // Process line as start of a cue.

              /* falls through */

              case 'CUE':
                // 40 - Collect cue timings and settings.
                if (!_this.cue) {
                  _this.state = 'BADCUE';
                  continue;
                }

                try {
                  parseCue(line, _this.cue, _this.regionList);
                } catch (e) {
                  // In case of an error ignore rest of the cue.
                  _this.cue = null;
                  _this.state = 'BADCUE';
                  continue;
                }

                _this.state = 'CUETEXT';
                continue;

              case 'CUETEXT':
                {
                  var hasSubstring = line.indexOf('-->') !== -1; // 34 - If we have an empty line then report the cue.
                  // 35 - If we have the special substring '-->' then report the cue,
                  // but do not collect the line as we need to process the current
                  // one as a new cue.

                  if (!line || hasSubstring && (alreadyCollectedLine = true)) {
                    // We are done parsing self cue.
                    if (_this.oncue && _this.cue) {
                      _this.oncue(_this.cue);
                    }

                    _this.cue = null;
                    _this.state = 'ID';
                    continue;
                  }

                  if (_this.cue === null) {
                    continue;
                  }

                  if (_this.cue.text) {
                    _this.cue.text += '\n';
                  }

                  _this.cue.text += line;
                }
                continue;

              case 'BADCUE':
                // 54-62 - Collect and discard the remaining cue.
                if (!line) {
                  _this.state = 'ID';
                }

            }
          }
        } catch (e) {
          // If we are currently parsing a cue, report what we have.
          if (_this.state === 'CUETEXT' && _this.cue && _this.oncue) {
            _this.oncue(_this.cue);
          }

          _this.cue = null; // Enter BADWEBVTT state if header was not parsed correctly otherwise
          // another exception occurred so enter BADCUE state.

          _this.state = _this.state === 'INITIAL' ? 'BADWEBVTT' : 'BADCUE';
        }

        return this;
      };

      _proto3.flush = function flush() {
        var _this = this;

        try {
          // Finish decoding the stream.
          // _this.buffer += _this.decoder.decode();
          // Synthesize the end of the current cue or region.
          if (_this.cue || _this.state === 'HEADER') {
            _this.buffer += '\n\n';

            _this.parse();
          } // If we've flushed, parsed, and we're still on the INITIAL state then
          // that means we don't have enough of the stream to parse the first
          // line.


          if (_this.state === 'INITIAL' || _this.state === 'BADWEBVTT') {
            throw new Error('Malformed WebVTT signature.');
          }
        } catch (e) {
          if (_this.onparsingerror) {
            _this.onparsingerror(e);
          }
        }

        if (_this.onflush) {
          _this.onflush();
        }

        return this;
      };

      return VTTParser;
    }();

    /***/ }),

    /***/ "./src/utils/webvtt-parser.ts":
    /*!************************************!*\
      !*** ./src/utils/webvtt-parser.ts ***!
      \************************************/
    /*! exports provided: generateCueId, parseWebVTT */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "generateCueId", function() { return generateCueId; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseWebVTT", function() { return parseWebVTT; });
    /* harmony import */ var _home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/polyfills/number */ "./src/polyfills/number.ts");
    /* harmony import */ var _vttparser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vttparser */ "./src/utils/vttparser.ts");
    /* harmony import */ var _demux_id3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../demux/id3 */ "./src/demux/id3.ts");
    /* harmony import */ var _timescale_conversion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./timescale-conversion */ "./src/utils/timescale-conversion.ts");
    /* harmony import */ var _remux_mp4_remuxer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../remux/mp4-remuxer */ "./src/remux/mp4-remuxer.ts");








    var LINEBREAKS = /\r\n|\n\r|\n|\r/g; // String.prototype.startsWith is not supported in IE11

    var startsWith = function startsWith(inputString, searchString, position) {
      if (position === void 0) {
        position = 0;
      }

      return inputString.substr(position, searchString.length) === searchString;
    };

    var cueString2millis = function cueString2millis(timeString) {
      var ts = parseInt(timeString.substr(-3));
      var secs = parseInt(timeString.substr(-6, 2));
      var mins = parseInt(timeString.substr(-9, 2));
      var hours = timeString.length > 9 ? parseInt(timeString.substr(0, timeString.indexOf(':'))) : 0;

      if (!Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(ts) || !Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(secs) || !Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(mins) || !Object(_home_runner_work_hls_js_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__["isFiniteNumber"])(hours)) {
        throw Error("Malformed X-TIMESTAMP-MAP: Local:" + timeString);
      }

      ts += 1000 * secs;
      ts += 60 * 1000 * mins;
      ts += 60 * 60 * 1000 * hours;
      return ts;
    }; // From https://github.com/darkskyapp/string-hash


    var hash = function hash(text) {
      var hash = 5381;
      var i = text.length;

      while (i) {
        hash = hash * 33 ^ text.charCodeAt(--i);
      }

      return (hash >>> 0).toString();
    }; // Create a unique hash id for a cue based on start/end times and text.
    // This helps timeline-controller to avoid showing repeated captions.


    function generateCueId(startTime, endTime, text) {
      return hash(startTime.toString()) + hash(endTime.toString()) + hash(text);
    }

    var calculateOffset = function calculateOffset(vttCCs, cc, presentationTime) {
      var currCC = vttCCs[cc];
      var prevCC = vttCCs[currCC.prevCC]; // This is the first discontinuity or cues have been processed since the last discontinuity
      // Offset = current discontinuity time

      if (!prevCC || !prevCC.new && currCC.new) {
        vttCCs.ccOffset = vttCCs.presentationOffset = currCC.start;
        currCC.new = false;
        return;
      } // There have been discontinuities since cues were last parsed.
      // Offset = time elapsed


      while ((_prevCC = prevCC) !== null && _prevCC !== void 0 && _prevCC.new) {
        var _prevCC;

        vttCCs.ccOffset += currCC.start - prevCC.start;
        currCC.new = false;
        currCC = prevCC;
        prevCC = vttCCs[currCC.prevCC];
      }

      vttCCs.presentationOffset = presentationTime;
    };

    function parseWebVTT(vttByteArray, initPTS, timescale, vttCCs, cc, timeOffset, callBack, errorCallBack) {
      var parser = new _vttparser__WEBPACK_IMPORTED_MODULE_1__["VTTParser"](); // Convert byteArray into string, replacing any somewhat exotic linefeeds with "\n", then split on that character.
      // Uint8Array.prototype.reduce is not implemented in IE11

      var vttLines = Object(_demux_id3__WEBPACK_IMPORTED_MODULE_2__["utf8ArrayToStr"])(new Uint8Array(vttByteArray)).trim().replace(LINEBREAKS, '\n').split('\n');
      var cues = [];
      var initPTS90Hz = Object(_timescale_conversion__WEBPACK_IMPORTED_MODULE_3__["toMpegTsClockFromTimescale"])(initPTS, timescale);
      var cueTime = '00:00.000';
      var timestampMapMPEGTS = 0;
      var timestampMapLOCAL = 0;
      var parsingError;
      var inHeader = true;
      var timestampMap = false;

      parser.oncue = function (cue) {
        // Adjust cue timing; clamp cues to start no earlier than - and drop cues that don't end after - 0 on timeline.
        var currCC = vttCCs[cc];
        var cueOffset = vttCCs.ccOffset; // Calculate subtitle PTS offset

        var webVttMpegTsMapOffset = (timestampMapMPEGTS - initPTS90Hz) / 90000; // Update offsets for new discontinuities

        if (currCC !== null && currCC !== void 0 && currCC.new) {
          if (timestampMapLOCAL !== undefined) {
            // When local time is provided, offset = discontinuity start time - local time
            cueOffset = vttCCs.ccOffset = currCC.start;
          } else {
            calculateOffset(vttCCs, cc, webVttMpegTsMapOffset);
          }
        }

        if (webVttMpegTsMapOffset) {
          // If we have MPEGTS, offset = presentation time + discontinuity offset
          cueOffset = webVttMpegTsMapOffset - vttCCs.presentationOffset;
        }

        if (timestampMap) {
          var duration = cue.endTime - cue.startTime;
          var startTime = Object(_remux_mp4_remuxer__WEBPACK_IMPORTED_MODULE_4__["normalizePts"])((cue.startTime + cueOffset - timestampMapLOCAL) * 90000, timeOffset * 90000) / 90000;
          cue.startTime = startTime;
          cue.endTime = startTime + duration;
        } //trim trailing webvtt block whitespaces


        var text = cue.text.trim(); // Fix encoding of special characters

        cue.text = decodeURIComponent(encodeURIComponent(text)); // If the cue was not assigned an id from the VTT file (line above the content), create one.

        if (!cue.id) {
          cue.id = generateCueId(cue.startTime, cue.endTime, text);
        }

        if (cue.endTime > 0) {
          cues.push(cue);
        }
      };

      parser.onparsingerror = function (error) {
        parsingError = error;
      };

      parser.onflush = function () {
        if (parsingError) {
          errorCallBack(parsingError);
          return;
        }

        callBack(cues);
      }; // Go through contents line by line.


      vttLines.forEach(function (line) {
        if (inHeader) {
          // Look for X-TIMESTAMP-MAP in header.
          if (startsWith(line, 'X-TIMESTAMP-MAP=')) {
            // Once found, no more are allowed anyway, so stop searching.
            inHeader = false;
            timestampMap = true; // Extract LOCAL and MPEGTS.

            line.substr(16).split(',').forEach(function (timestamp) {
              if (startsWith(timestamp, 'LOCAL:')) {
                cueTime = timestamp.substr(6);
              } else if (startsWith(timestamp, 'MPEGTS:')) {
                timestampMapMPEGTS = parseInt(timestamp.substr(7));
              }
            });

            try {
              // Convert cue time to seconds
              timestampMapLOCAL = cueString2millis(cueTime) / 1000;
            } catch (error) {
              timestampMap = false;
              parsingError = error;
            } // Return without parsing X-TIMESTAMP-MAP line.


            return;
          } else if (line === '') {
            inHeader = false;
          }
        } // Parse line by default.


        parser.parse(line + '\n');
      });
      parser.flush();
    }

    /***/ }),

    /***/ "./src/utils/xhr-loader.ts":
    /*!*********************************!*\
      !*** ./src/utils/xhr-loader.ts ***!
      \*********************************/
    /*! exports provided: default */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/logger */ "./src/utils/logger.ts");
    /* harmony import */ var _loader_load_stats__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../loader/load-stats */ "./src/loader/load-stats.ts");


    var AGE_HEADER_LINE_REGEX = /^age:\s*[\d.]+\s*$/m;

    var XhrLoader = /*#__PURE__*/function () {
      function XhrLoader(config
      /* HlsConfig */
      ) {
        this.xhrSetup = void 0;
        this.requestTimeout = void 0;
        this.retryTimeout = void 0;
        this.retryDelay = void 0;
        this.config = null;
        this.callbacks = null;
        this.context = void 0;
        this.loader = null;
        this.stats = void 0;
        this.xhrSetup = config ? config.xhrSetup : null;
        this.stats = new _loader_load_stats__WEBPACK_IMPORTED_MODULE_1__["LoadStats"]();
        this.retryDelay = 0;
      }

      var _proto = XhrLoader.prototype;

      _proto.destroy = function destroy() {
        this.callbacks = null;
        this.abortInternal();
        this.loader = null;
        this.config = null;
      };

      _proto.abortInternal = function abortInternal() {
        var loader = this.loader;
        self.clearTimeout(this.requestTimeout);
        self.clearTimeout(this.retryTimeout);

        if (loader) {
          loader.onreadystatechange = null;
          loader.onprogress = null;

          if (loader.readyState !== 4) {
            this.stats.aborted = true;
            loader.abort();
          }
        }
      };

      _proto.abort = function abort() {
        var _this$callbacks;

        this.abortInternal();

        if ((_this$callbacks = this.callbacks) !== null && _this$callbacks !== void 0 && _this$callbacks.onAbort) {
          this.callbacks.onAbort(this.stats, this.context, this.loader);
        }
      };

      _proto.load = function load(context, config, callbacks) {
        if (this.stats.loading.start) {
          throw new Error('Loader can only be used once.');
        }

        this.stats.loading.start = self.performance.now();
        this.context = context;
        this.config = config;
        this.callbacks = callbacks;
        this.retryDelay = config.retryDelay;
        this.loadInternal();
      };

      _proto.loadInternal = function loadInternal() {
        var config = this.config,
            context = this.context;

        if (!config) {
          return;
        }

        var xhr = this.loader = new self.XMLHttpRequest();
        var stats = this.stats;
        stats.loading.first = 0;
        stats.loaded = 0;
        var xhrSetup = this.xhrSetup;

        try {
          if (xhrSetup) {
            try {
              xhrSetup(xhr, context.url);
            } catch (e) {
              // fix xhrSetup: (xhr, url) => {xhr.setRequestHeader("Content-Language", "test");}
              // not working, as xhr.setRequestHeader expects xhr.readyState === OPEN
              xhr.open('GET', context.url, true);
              xhrSetup(xhr, context.url);
            }
          }

          if (!xhr.readyState) {
            xhr.open('GET', context.url, true);
          }
        } catch (e) {
          // IE11 throws an exception on xhr.open if attempting to access an HTTP resource over HTTPS
          this.callbacks.onError({
            code: xhr.status,
            text: e.message
          }, context, xhr);
          return;
        }

        if (context.rangeEnd) {
          xhr.setRequestHeader('Range', 'bytes=' + context.rangeStart + '-' + (context.rangeEnd - 1));
        }

        xhr.onreadystatechange = this.readystatechange.bind(this);
        xhr.onprogress = this.loadprogress.bind(this);
        xhr.responseType = context.responseType; // setup timeout before we perform request

        self.clearTimeout(this.requestTimeout);
        this.requestTimeout = self.setTimeout(this.loadtimeout.bind(this), config.timeout);
        xhr.send();
      };

      _proto.readystatechange = function readystatechange() {
        var context = this.context,
            xhr = this.loader,
            stats = this.stats;

        if (!context || !xhr) {
          return;
        }

        var readyState = xhr.readyState;
        var config = this.config; // don't proceed if xhr has been aborted

        if (stats.aborted) {
          return;
        } // >= HEADERS_RECEIVED


        if (readyState >= 2) {
          // clear xhr timeout and rearm it if readyState less than 4
          self.clearTimeout(this.requestTimeout);

          if (stats.loading.first === 0) {
            stats.loading.first = Math.max(self.performance.now(), stats.loading.start);
          }

          if (readyState === 4) {
            xhr.onreadystatechange = null;
            xhr.onprogress = null;
            var status = xhr.status; // http status between 200 to 299 are all successful

            if (status >= 200 && status < 300) {
              stats.loading.end = Math.max(self.performance.now(), stats.loading.first);
              var data;
              var len;

              if (context.responseType === 'arraybuffer') {
                data = xhr.response;
                len = data.byteLength;
              } else {
                data = xhr.responseText;
                len = data.length;
              }

              stats.loaded = stats.total = len;

              if (!this.callbacks) {
                return;
              }

              var onProgress = this.callbacks.onProgress;

              if (onProgress) {
                onProgress(stats, context, data, xhr);
              }

              if (!this.callbacks) {
                return;
              }

              var response = {
                url: xhr.responseURL,
                data: data
              };
              this.callbacks.onSuccess(response, stats, context, xhr);
            } else {
              // if max nb of retries reached or if http status between 400 and 499 (such error cannot be recovered, retrying is useless), return error
              if (stats.retry >= config.maxRetry || status >= 400 && status < 499) {
                _utils_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].error(status + " while loading " + context.url);
                this.callbacks.onError({
                  code: status,
                  text: xhr.statusText
                }, context, xhr);
              } else {
                // retry
                _utils_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].warn(status + " while loading " + context.url + ", retrying in " + this.retryDelay + "..."); // abort and reset internal state

                this.abortInternal();
                this.loader = null; // schedule retry

                self.clearTimeout(this.retryTimeout);
                this.retryTimeout = self.setTimeout(this.loadInternal.bind(this), this.retryDelay); // set exponential backoff

                this.retryDelay = Math.min(2 * this.retryDelay, config.maxRetryDelay);
                stats.retry++;
              }
            }
          } else {
            // readyState >= 2 AND readyState !==4 (readyState = HEADERS_RECEIVED || LOADING) rearm timeout as xhr not finished yet
            self.clearTimeout(this.requestTimeout);
            this.requestTimeout = self.setTimeout(this.loadtimeout.bind(this), config.timeout);
          }
        }
      };

      _proto.loadtimeout = function loadtimeout() {
        _utils_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].warn("timeout while loading " + this.context.url);
        var callbacks = this.callbacks;

        if (callbacks) {
          this.abortInternal();
          callbacks.onTimeout(this.stats, this.context, this.loader);
        }
      };

      _proto.loadprogress = function loadprogress(event) {
        var stats = this.stats;
        stats.loaded = event.loaded;

        if (event.lengthComputable) {
          stats.total = event.total;
        }
      };

      _proto.getCacheAge = function getCacheAge() {
        var result = null;

        if (this.loader && AGE_HEADER_LINE_REGEX.test(this.loader.getAllResponseHeaders())) {
          var ageHeader = this.loader.getResponseHeader('age');
          result = ageHeader ? parseFloat(ageHeader) : null;
        }

        return result;
      };

      return XhrLoader;
    }();

    /* harmony default export */ __webpack_exports__["default"] = (XhrLoader);

    /***/ })

    /******/ })["default"];
    });

    });

    var HLS = /*@__PURE__*/getDefaultExportFromCjs(hls);

    /* src/pages/necromance.svelte generated by Svelte v3.38.2 */

    const { Object: Object_1 } = globals;
    const file$4 = "src/pages/necromance.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[7] = list[i];
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[7] = list[i];
    	return child_ctx;
    }

    function get_each_context_2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[7] = list[i];
    	return child_ctx;
    }

    function get_each_context_3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[14] = list[i];
    	return child_ctx;
    }

    function get_each_context_4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[17] = list[i];
    	return child_ctx;
    }

    function get_each_context_5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[20] = list[i];
    	return child_ctx;
    }

    // (136:10) {#if section.toLowerCase() == 'world'}
    function create_if_block_1(ctx) {
    	let picture;
    	let current;

    	picture = new Picture({
    			props: {
    				imgClass: "world-img center",
    				globalSettings,
    				imageId: "necromance-scenery",
    				loadLazy: true
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(picture.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(picture, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(picture.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(picture.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(picture, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(136:10) {#if section.toLowerCase() == 'world'}",
    		ctx
    	});

    	return block;
    }

    // (141:14) {#each content.text.split(' ').map(v => v.replace(/\\/g, ' ')) as unit}
    function create_each_block_5(ctx) {
    	let t_value = /*unit*/ ctx[20] + "";
    	let t;
    	let wbr;

    	const block = {
    		c: function create() {
    			t = text$1(t_value);
    			wbr = element("wbr");
    			attr_dev(wbr, "class", "svelte-xg79cg");
    			add_location(wbr, file$4, 141, 22, 5368);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    			insert_dev(target, wbr, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(wbr);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_5.name,
    		type: "each",
    		source: "(141:14) {#each content.text.split(' ').map(v => v.replace(/\\\\/g, ' ')) as unit}",
    		ctx
    	});

    	return block;
    }

    // (139:10) {#each textContent[section] as content}
    function create_each_block_4(ctx) {
    	let p;
    	let each_value_5 = /*content*/ ctx[17].text.split(" ").map(func);
    	validate_each_argument(each_value_5);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_5.length; i += 1) {
    		each_blocks[i] = create_each_block_5(get_each_context_5(ctx, each_value_5, i));
    	}

    	const block = {
    		c: function create() {
    			p = element("p");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(p, "class", "spawn svelte-xg79cg");

    			attr_dev(p, "style", /*content*/ ctx[17].color
    			? "color: " + /*content*/ ctx[17].color
    			: "");

    			add_location(p, file$4, 139, 12, 5187);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(p, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*textContent, Object*/ 16) {
    				each_value_5 = /*content*/ ctx[17].text.split(" ").map(func);
    				validate_each_argument(each_value_5);
    				let i;

    				for (i = 0; i < each_value_5.length; i += 1) {
    					const child_ctx = get_each_context_5(ctx, each_value_5, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_5(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(p, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_5.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_4.name,
    		type: "each",
    		source: "(139:10) {#each textContent[section] as content}",
    		ctx
    	});

    	return block;
    }

    // (133:6) {#each Object.keys(textContent) as section}
    function create_each_block_3(ctx) {
    	let section;
    	let h2;
    	let t0_value = /*section*/ ctx[14].toUpperCase() + "";
    	let t0;
    	let t1;
    	let show_if = /*section*/ ctx[14].toLowerCase() == "world";
    	let t2;
    	let current;
    	let if_block = show_if && create_if_block_1(ctx);
    	let each_value_4 = /*textContent*/ ctx[4][/*section*/ ctx[14]];
    	validate_each_argument(each_value_4);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_4.length; i += 1) {
    		each_blocks[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
    	}

    	const block = {
    		c: function create() {
    			section = element("section");
    			h2 = element("h2");
    			t0 = text$1(t0_value);
    			t1 = space();
    			if (if_block) if_block.c();
    			t2 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(h2, "class", "copy spawn svelte-xg79cg");
    			add_location(h2, file$4, 134, 10, 4895);
    			attr_dev(section, "class", "" + (/*section*/ ctx[14] + " center use-wbr" + " svelte-xg79cg"));
    			attr_dev(section, "id", /*section*/ ctx[14]);
    			add_location(section, file$4, 133, 8, 4829);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, h2);
    			append_dev(h2, t0);
    			append_dev(section, t1);
    			if (if_block) if_block.m(section, null);
    			append_dev(section, t2);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(section, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (show_if) if_block.p(ctx, dirty);

    			if (dirty & /*textContent, Object*/ 16) {
    				each_value_4 = /*textContent*/ ctx[4][/*section*/ ctx[14]];
    				validate_each_argument(each_value_4);
    				let i;

    				for (i = 0; i < each_value_4.length; i += 1) {
    					const child_ctx = get_each_context_4(ctx, each_value_4, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_4(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(section, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_4.length;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if (if_block) if_block.d();
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_3.name,
    		type: "each",
    		source: "(133:6) {#each Object.keys(textContent) as section}",
    		ctx
    	});

    	return block;
    }

    // (171:12) {#each ["敵弾を", "スレスレで", "避けて", "“れーぞく”！"] as chunk}
    function create_each_block_2(ctx) {
    	let t;
    	let wbr;

    	const block = {
    		c: function create() {
    			t = text$1(/*chunk*/ ctx[7]);
    			wbr = element("wbr");
    			attr_dev(wbr, "class", "onPortrait svelte-xg79cg");
    			add_location(wbr, file$4, 171, 21, 6682);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    			insert_dev(target, wbr, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(wbr);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2.name,
    		type: "each",
    		source: "(171:12) {#each [\\\"敵弾を\\\", \\\"スレスレで\\\", \\\"避けて\\\", \\\"“れーぞく”！\\\"] as chunk}",
    		ctx
    	});

    	return block;
    }

    // (179:12) {#each ["ド派手な", "魔法で", "敵を", "一掃！"] as chunk}
    function create_each_block_1(ctx) {
    	let t;
    	let wbr;

    	const block = {
    		c: function create() {
    			t = text$1(/*chunk*/ ctx[7]);
    			wbr = element("wbr");
    			attr_dev(wbr, "class", "onPortrait svelte-xg79cg");
    			add_location(wbr, file$4, 179, 21, 7062);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    			insert_dev(target, wbr, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(wbr);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(179:12) {#each [\\\"ド派手な\\\", \\\"魔法で\\\", \\\"敵を\\\", \\\"一掃！\\\"] as chunk}",
    		ctx
    	});

    	return block;
    }

    // (187:12) {#each ["ステージの", "最後には", "凶悪な", "魔物が！"] as chunk}
    function create_each_block$1(ctx) {
    	let t;
    	let wbr;

    	const block = {
    		c: function create() {
    			t = text$1(/*chunk*/ ctx[7]);
    			wbr = element("wbr");
    			attr_dev(wbr, "class", "onPortrait svelte-xg79cg");
    			add_location(wbr, file$4, 187, 21, 7446);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    			insert_dev(target, wbr, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(wbr);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(187:12) {#each [\\\"ステージの\\\", \\\"最後には\\\", \\\"凶悪な\\\", \\\"魔物が！\\\"] as chunk}",
    		ctx
    	});

    	return block;
    }

    // (199:8) {#if loadTwitterWidget}
    function create_if_block$1(ctx) {
    	let script;
    	let script_src_value;

    	const block = {
    		c: function create() {
    			script = element("script");
    			script.async = true;
    			if (script.src !== (script_src_value = "https://platform.twitter.com/widgets.js")) attr_dev(script, "src", script_src_value);
    			attr_dev(script, "charset", "utf-8");
    			attr_dev(script, "class", "svelte-xg79cg");
    			add_location(script, file$4, 199, 10, 8008);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, script, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(script);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(199:8) {#if loadTwitterWidget}",
    		ctx
    	});

    	return block;
    }

    // (202:8) <Button Class="necromance-twitter-button" bg="#1da1f3" target="https://twitter.com/intent/follow?original_referer=https%3A%2F%2Fpublish.twitter.com%2F%3FbuttonType%3DFollowButton%26query%3D%2540necromance_chan%26widget%3DButton&ref_src=twsrc%5Etfw&region=follow_link&screen_name=necromance_chan&tw_p=followbutton">
    function create_default_slot_2(ctx) {
    	let img;
    	let img_src_value;
    	let t;

    	const block = {
    		c: function create() {
    			img = element("img");
    			t = text$1("\n          フォロー");
    			attr_dev(img, "class", "twitter-icon svelte-xg79cg");
    			if (img.src !== (img_src_value = "" + (globalSettings.imageDirectory + "twitter.svg"))) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "Twitterのアイコン");
    			attr_dev(img, "width", "2499");
    			attr_dev(img, "height", "2032");
    			add_location(img, file$4, 202, 10, 8441);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2.name,
    		type: "slot",
    		source: "(202:8) <Button Class=\\\"necromance-twitter-button\\\" bg=\\\"#1da1f3\\\" target=\\\"https://twitter.com/intent/follow?original_referer=https%3A%2F%2Fpublish.twitter.com%2F%3FbuttonType%3DFollowButton%26query%3D%2540necromance_chan%26widget%3DButton&ref_src=twsrc%5Etfw&region=follow_link&screen_name=necromance_chan&tw_p=followbutton\\\">",
    		ctx
    	});

    	return block;
    }

    // (242:6) <Button Class="necromance-share-buttons" bg="#1da1f3" target="https://twitter.com/intent/tweet?hashtags=ぞくロマ%20%23れーぞくネクロマンスちゃん&original_referer=https%3A%2F%2Fpublish.twitter.com%2F%3FbuttonHashtag%3D%25E3%2581%259E%25E3%2581%258F%25E3%2583%25AD%25E3%2583%259E%2520%2523%25E3%2582%258C%25E3%2583%25BC%25E3%2581%259E%25E3%2581%258F%25E3%2583%258D%25E3%2582%25AF%25E3%2583%25AD%25E3%2583%259E%25E3%2583%25B3%25E3%2582%25B9%25E3%2581%25A1%25E3%2582%2583%25E3%2582%2593%26buttonRecommendation%3Dnecromance_chan%26buttonText%3D%25E3%2582%258C%25E3%2583%25BC%25E3%2581%259E%25E3%2581%258F%25E5%2585%25A8%25E6%2596%25B9%25E4%25BD%258DSTG%25E3%2580%258E%25E3%2582%258C%25E3%2583%25BC%25E3%2581%259E%25E3%2581%258F%25EF%25BC%2581%25E3%2583%258D%25E3%2582%25AF%25E3%2583%25AD%25E3%2583%259E%25E3%2583%25B3%25E3%2582%25B9%25E3%2581%25A1%25E3%2582%2583%25E3%2582%2593%25E3%2580%258F%25E5%2585%25AC%25E5%25BC%258F%25E3%2582%25B5%25E3%2582%25A4%25E3%2583%2588%26buttonType%3DTweetButton%26buttonUrl%3Dhttps%253A%252F%252Fsuperstarmine.ga%252Fnecromance%252F%26buttonVia%3Dnecromance_chan%26widget%3DButton&ref_src=twsrc%5Etfw&related=necromance_chan&text=れーぞく全方位STG『れーぞく！ネクロマンスちゃん』公式サイト&tw_p=tweetbutton&url=https%3A%2F%2Fsuperstarmine.ga%2Fnecromance%2F&via=necromance_chan">
    function create_default_slot_1(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "class", "share-icon svelte-xg79cg");
    			if (img.src !== (img_src_value = "" + (globalSettings.imageDirectory + "twitter.svg"))) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "Twitterのアイコン");
    			attr_dev(img, "width", "2499");
    			attr_dev(img, "height", "2032");
    			add_location(img, file$4, 242, 8, 10914);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1.name,
    		type: "slot",
    		source: "(242:6) <Button Class=\\\"necromance-share-buttons\\\" bg=\\\"#1da1f3\\\" target=\\\"https://twitter.com/intent/tweet?hashtags=ぞくロマ%20%23れーぞくネクロマンスちゃん&original_referer=https%3A%2F%2Fpublish.twitter.com%2F%3FbuttonHashtag%3D%25E3%2581%259E%25E3%2581%258F%25E3%2583%25AD%25E3%2583%259E%2520%2523%25E3%2582%258C%25E3%2583%25BC%25E3%2581%259E%25E3%2581%258F%25E3%2583%258D%25E3%2582%25AF%25E3%2583%25AD%25E3%2583%259E%25E3%2583%25B3%25E3%2582%25B9%25E3%2581%25A1%25E3%2582%2583%25E3%2582%2593%26buttonRecommendation%3Dnecromance_chan%26buttonText%3D%25E3%2582%258C%25E3%2583%25BC%25E3%2581%259E%25E3%2581%258F%25E5%2585%25A8%25E6%2596%25B9%25E4%25BD%258DSTG%25E3%2580%258E%25E3%2582%258C%25E3%2583%25BC%25E3%2581%259E%25E3%2581%258F%25EF%25BC%2581%25E3%2583%258D%25E3%2582%25AF%25E3%2583%25AD%25E3%2583%259E%25E3%2583%25B3%25E3%2582%25B9%25E3%2581%25A1%25E3%2582%2583%25E3%2582%2593%25E3%2580%258F%25E5%2585%25AC%25E5%25BC%258F%25E3%2582%25B5%25E3%2582%25A4%25E3%2583%2588%26buttonType%3DTweetButton%26buttonUrl%3Dhttps%253A%252F%252Fsuperstarmine.ga%252Fnecromance%252F%26buttonVia%3Dnecromance_chan%26widget%3DButton&ref_src=twsrc%5Etfw&related=necromance_chan&text=れーぞく全方位STG『れーぞく！ネクロマンスちゃん』公式サイト&tw_p=tweetbutton&url=https%3A%2F%2Fsuperstarmine.ga%2Fnecromance%2F&via=necromance_chan\\\">",
    		ctx
    	});

    	return block;
    }

    // (245:6) <Button Class="necromance-share-buttons" bg="#1877f2" target="https://www.facebook.com/sharer/sharer.php?kid_directed_site=0&sdk=joey&u=https%3A%2F%2Fsuperstarmine.ga%2Fnecromance%2F&display=popup&ref=plugin&src=share_button">
    function create_default_slot(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "class", "share-icon svelte-xg79cg");
    			if (img.src !== (img_src_value = "" + (globalSettings.imageDirectory + "facebook.svg"))) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "Facebookのアイコン");
    			attr_dev(img, "width", "971");
    			attr_dev(img, "height", "965");
    			add_location(img, file$4, 245, 8, 11291);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(245:6) <Button Class=\\\"necromance-share-buttons\\\" bg=\\\"#1877f2\\\" target=\\\"https://www.facebook.com/sharer/sharer.php?kid_directed_site=0&sdk=joey&u=https%3A%2F%2Fsuperstarmine.ga%2Fnecromance%2F&display=popup&ref=plugin&src=share_button\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$4(ctx) {
    	let nheader;
    	let t0;
    	let main;
    	let div1;
    	let video;
    	let t1;
    	let div0;
    	let t2;
    	let picture0;
    	let t3;
    	let div15;
    	let article;
    	let section0;
    	let h20;
    	let t5;
    	let div2;
    	let yframe;
    	let t6;
    	let t7;
    	let section1;
    	let h21;
    	let t9;
    	let div6;
    	let picture1;
    	let t10;
    	let div5;
    	let div3;
    	let h3;
    	let t12;
    	let span;
    	let t14;
    	let div4;
    	let p0;
    	let t16;
    	let p1;
    	let t18;
    	let p2;
    	let t20;
    	let p3;
    	let t22;
    	let section2;
    	let h22;
    	let t24;
    	let div8;
    	let picture2;
    	let t25;
    	let div7;
    	let t26;
    	let div10;
    	let picture3;
    	let t27;
    	let div9;
    	let t28;
    	let div12;
    	let picture4;
    	let t29;
    	let div11;
    	let t30;
    	let section3;
    	let picture5;
    	let t31;
    	let div13;
    	let h23;
    	let t33;
    	let a0;
    	let t35;
    	let t36;
    	let button0;
    	let t37;
    	let div14;
    	let t38;
    	let section5;
    	let picture6;
    	let t39;
    	let div16;
    	let table;
    	let tr0;
    	let td0;
    	let t41;
    	let td1;
    	let t42;
    	let wbr0;
    	let t43;
    	let t44;
    	let tr1;
    	let td2;
    	let t46;
    	let td3;
    	let t48;
    	let tr2;
    	let td4;
    	let t50;
    	let td5;
    	let t51;
    	let wbr1;
    	let t52;
    	let wbr2;
    	let t53;
    	let t54;
    	let tr3;
    	let td6;
    	let t56;
    	let td7;
    	let t58;
    	let tr4;
    	let td8;
    	let t60;
    	let td9;
    	let a1;
    	let t61;
    	let wbr3;
    	let t62;
    	let t63;
    	let section4;
    	let button1;
    	let t64;
    	let button2;
    	let t65;
    	let footer;
    	let current;

    	nheader = new Nav_header({
    			props: {
    				contents: /*headerConfig*/ ctx[2].contents,
    				globalSettings
    			},
    			$$inline: true
    		});

    	picture0 = new Picture({
    			props: {
    				imgClass: "necromance_logo",
    				sizes: "" + (/*$sync*/ ctx[1].standardWidth + "vw"),
    				globalSettings,
    				imageId: "necromance_logo",
    				width: "1643",
    				height: "630",
    				loadLazy: true
    			},
    			$$inline: true
    		});

    	yframe = new Youtube_iframe({
    			props: {
    				contents: {},
    				globalSettings,
    				id: "foh7rj5YI_E",
    				sizes: "@media (orientation: portrait) " + /*$sync*/ ctx[1].standardWidth + "vw, " + /*$sync*/ ctx[1].standardWidth * 0.975 / 2 + "vw"
    			},
    			$$inline: true
    		});

    	let each_value_3 = Object.keys(/*textContent*/ ctx[4]);
    	validate_each_argument(each_value_3);
    	let each_blocks_3 = [];

    	for (let i = 0; i < each_value_3.length; i += 1) {
    		each_blocks_3[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
    	}

    	const out = i => transition_out(each_blocks_3[i], 1, 1, () => {
    		each_blocks_3[i] = null;
    	});

    	picture1 = new Picture({
    			props: {
    				imgClass: "character_profile-img",
    				pictureClass: "character_profile-picture",
    				globalSettings,
    				imageId: "necromance_smile_alpha",
    				loadLazy: true
    			},
    			$$inline: true
    		});

    	picture2 = new Picture({
    			props: {
    				imgClass: "system-img",
    				pictureClass: "system-picture",
    				globalSettings,
    				imageId: "necromance-system1",
    				loadLazy: true
    			},
    			$$inline: true
    		});

    	let each_value_2 = ["敵弾を", "スレスレで", "避けて", "“れーぞく”！"];
    	validate_each_argument(each_value_2);
    	let each_blocks_2 = [];

    	for (let i = 0; i < 4; i += 1) {
    		each_blocks_2[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
    	}

    	picture3 = new Picture({
    			props: {
    				imgClass: "system-img",
    				pictureClass: "system-picture",
    				globalSettings,
    				imageId: "necromance-system2",
    				loadLazy: true
    			},
    			$$inline: true
    		});

    	let each_value_1 = ["ド派手な", "魔法で", "敵を", "一掃！"];
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < 4; i += 1) {
    		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	picture4 = new Picture({
    			props: {
    				imgClass: "system-img",
    				pictureClass: "system-picture",
    				globalSettings,
    				imageId: "necromance-system3",
    				loadLazy: true
    			},
    			$$inline: true
    		});

    	let each_value = ["ステージの", "最後には", "凶悪な", "魔物が！"];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < 4; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	picture5 = new Picture({
    			props: {
    				imgClass: "twitter-bg-img center",
    				globalSettings,
    				imageId: "necromance-scenery",
    				loadLazy: true
    			},
    			$$inline: true
    		});

    	let if_block = /*loadTwitterWidget*/ ctx[0] && create_if_block$1(ctx);

    	button0 = new Button({
    			props: {
    				Class: "necromance-twitter-button",
    				bg: "#1da1f3",
    				target: "https://twitter.com/intent/follow?original_referer=https%3A%2F%2Fpublish.twitter.com%2F%3FbuttonType%3DFollowButton%26query%3D%2540necromance_chan%26widget%3DButton&ref_src=twsrc%5Etfw&region=follow_link&screen_name=necromance_chan&tw_p=followbutton",
    				$$slots: { default: [create_default_slot_2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	picture6 = new Picture({
    			props: {
    				imgClass: "footer-necromance_logo",
    				globalSettings,
    				imageId: "necromance_logo",
    				width: "1643",
    				height: "630",
    				loadLazy: true
    			},
    			$$inline: true
    		});

    	button1 = new Button({
    			props: {
    				Class: "necromance-share-buttons",
    				bg: "#1da1f3",
    				target: "https://twitter.com/intent/tweet?hashtags=ぞくロマ%20%23れーぞくネクロマンスちゃん&original_referer=https%3A%2F%2Fpublish.twitter.com%2F%3FbuttonHashtag%3D%25E3%2581%259E%25E3%2581%258F%25E3%2583%25AD%25E3%2583%259E%2520%2523%25E3%2582%258C%25E3%2583%25BC%25E3%2581%259E%25E3%2581%258F%25E3%2583%258D%25E3%2582%25AF%25E3%2583%25AD%25E3%2583%259E%25E3%2583%25B3%25E3%2582%25B9%25E3%2581%25A1%25E3%2582%2583%25E3%2582%2593%26buttonRecommendation%3Dnecromance_chan%26buttonText%3D%25E3%2582%258C%25E3%2583%25BC%25E3%2581%259E%25E3%2581%258F%25E5%2585%25A8%25E6%2596%25B9%25E4%25BD%258DSTG%25E3%2580%258E%25E3%2582%258C%25E3%2583%25BC%25E3%2581%259E%25E3%2581%258F%25EF%25BC%2581%25E3%2583%258D%25E3%2582%25AF%25E3%2583%25AD%25E3%2583%259E%25E3%2583%25B3%25E3%2582%25B9%25E3%2581%25A1%25E3%2582%2583%25E3%2582%2593%25E3%2580%258F%25E5%2585%25AC%25E5%25BC%258F%25E3%2582%25B5%25E3%2582%25A4%25E3%2583%2588%26buttonType%3DTweetButton%26buttonUrl%3Dhttps%253A%252F%252Fsuperstarmine.ga%252Fnecromance%252F%26buttonVia%3Dnecromance_chan%26widget%3DButton&ref_src=twsrc%5Etfw&related=necromance_chan&text=れーぞく全方位STG『れーぞく！ネクロマンスちゃん』公式サイト&tw_p=tweetbutton&url=https%3A%2F%2Fsuperstarmine.ga%2Fnecromance%2F&via=necromance_chan",
    				$$slots: { default: [create_default_slot_1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button2 = new Button({
    			props: {
    				Class: "necromance-share-buttons",
    				bg: "#1877f2",
    				target: "https://www.facebook.com/sharer/sharer.php?kid_directed_site=0&sdk=joey&u=https%3A%2F%2Fsuperstarmine.ga%2Fnecromance%2F&display=popup&ref=plugin&src=share_button",
    				$$slots: { default: [create_default_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	footer = new Footer({
    			props: { contents: /*footerConfig*/ ctx[3] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(nheader.$$.fragment);
    			t0 = space();
    			main = element("main");
    			div1 = element("div");
    			video = element("video");
    			t1 = space();
    			div0 = element("div");
    			t2 = space();
    			create_component(picture0.$$.fragment);
    			t3 = space();
    			div15 = element("div");
    			article = element("article");
    			section0 = element("section");
    			h20 = element("h2");
    			h20.textContent = "PV";
    			t5 = space();
    			div2 = element("div");
    			create_component(yframe.$$.fragment);
    			t6 = space();

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				each_blocks_3[i].c();
    			}

    			t7 = space();
    			section1 = element("section");
    			h21 = element("h2");
    			h21.textContent = "CHARACTERS";
    			t9 = space();
    			div6 = element("div");
    			create_component(picture1.$$.fragment);
    			t10 = space();
    			div5 = element("div");
    			div3 = element("div");
    			h3 = element("h3");
    			h3.textContent = "ネクロマンス";
    			t12 = space();
    			span = element("span");
    			span.textContent = "NECROMANCE";
    			t14 = space();
    			div4 = element("div");
    			p0 = element("p");
    			p0.textContent = "胸元と頭のリボンがトレードマークの女の子。14歳くらいに見える。";
    			t16 = space();
    			p1 = element("p");
    			p1.textContent = "尊大な態度とそれに不釣り合いな体躯で、学者の前に現れる。";
    			t18 = space();
    			p2 = element("p");
    			p2.textContent = "とある魔女を恨み、復讐を誓っているらしいが——。";
    			t20 = space();
    			p3 = element("p");
    			p3.textContent = "さらに個性豊かなキャラクターが続々登場！";
    			t22 = space();
    			section2 = element("section");
    			h22 = element("h2");
    			h22.textContent = "SYSTEM";
    			t24 = space();
    			div8 = element("div");
    			create_component(picture2.$$.fragment);
    			t25 = space();
    			div7 = element("div");

    			for (let i = 0; i < 4; i += 1) {
    				each_blocks_2[i].c();
    			}

    			t26 = space();
    			div10 = element("div");
    			create_component(picture3.$$.fragment);
    			t27 = space();
    			div9 = element("div");

    			for (let i = 0; i < 4; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t28 = space();
    			div12 = element("div");
    			create_component(picture4.$$.fragment);
    			t29 = space();
    			div11 = element("div");

    			for (let i = 0; i < 4; i += 1) {
    				each_blocks[i].c();
    			}

    			t30 = space();
    			section3 = element("section");
    			create_component(picture5.$$.fragment);
    			t31 = space();
    			div13 = element("div");
    			h23 = element("h2");
    			h23.textContent = "公式Twitter";
    			t33 = space();
    			a0 = element("a");
    			a0.textContent = "ゲーム『れーぞく！ネクロマンスちゃん』公式アカウントのツイート";
    			t35 = space();
    			if (if_block) if_block.c();
    			t36 = space();
    			create_component(button0.$$.fragment);
    			t37 = space();
    			div14 = element("div");
    			t38 = space();
    			section5 = element("section");
    			create_component(picture6.$$.fragment);
    			t39 = space();
    			div16 = element("div");
    			table = element("table");
    			tr0 = element("tr");
    			td0 = element("td");
    			td0.textContent = "タイトル";
    			t41 = space();
    			td1 = element("td");
    			t42 = text$1("れーぞく！");
    			wbr0 = element("wbr");
    			t43 = text$1("ネクロマンスちゃん");
    			t44 = space();
    			tr1 = element("tr");
    			td2 = element("td");
    			td2.textContent = "プラットフォーム";
    			t46 = space();
    			td3 = element("td");
    			td3.textContent = "Windows / Mac";
    			t48 = space();
    			tr2 = element("tr");
    			td4 = element("td");
    			td4.textContent = "ジャンル";
    			t50 = space();
    			td5 = element("td");
    			t51 = text$1("れーぞく");
    			wbr1 = element("wbr");
    			t52 = text$1("全方位");
    			wbr2 = element("wbr");
    			t53 = text$1("シューティング");
    			t54 = space();
    			tr3 = element("tr");
    			td6 = element("td");
    			td6.textContent = "プレイ人数";
    			t56 = space();
    			td7 = element("td");
    			td7.textContent = "1人";
    			t58 = space();
    			tr4 = element("tr");
    			td8 = element("td");
    			td8.textContent = "制作";
    			t60 = space();
    			td9 = element("td");
    			a1 = element("a");
    			t61 = text$1("スーパー");
    			wbr3 = element("wbr");
    			t62 = text$1("スターマイン");
    			t63 = space();
    			section4 = element("section");
    			create_component(button1.$$.fragment);
    			t64 = space();
    			create_component(button2.$$.fragment);
    			t65 = space();
    			create_component(footer.$$.fragment);
    			attr_dev(video, "class", "hero svelte-xg79cg");
    			video.loop = true;
    			video.autoplay = true;
    			video.playsInline = true;
    			video.muted = true;
    			add_location(video, file$4, 120, 4, 4150);
    			attr_dev(div0, "class", "filter-layer svelte-xg79cg");
    			add_location(div0, file$4, 121, 4, 4215);
    			attr_dev(div1, "class", "video-hero svelte-xg79cg");
    			add_location(div1, file$4, 119, 2, 4121);
    			attr_dev(h20, "class", "copy svelte-xg79cg");
    			add_location(h20, file$4, 127, 8, 4508);
    			attr_dev(div2, "class", "youtube-embed svelte-xg79cg");
    			add_location(div2, file$4, 128, 8, 4541);
    			attr_dev(section0, "class", "pv svelte-xg79cg");
    			attr_dev(section0, "id", "pv");
    			add_location(section0, file$4, 126, 6, 4471);
    			attr_dev(h21, "class", "copy spawn svelte-xg79cg");
    			add_location(h21, file$4, 148, 8, 5523);
    			attr_dev(h3, "class", "svelte-xg79cg");
    			add_location(h3, file$4, 153, 14, 5884);
    			attr_dev(span, "class", "svelte-xg79cg");
    			add_location(span, file$4, 154, 14, 5914);
    			attr_dev(div3, "class", "character_profile-text-name svelte-xg79cg");
    			add_location(div3, file$4, 152, 12, 5828);
    			attr_dev(p0, "class", "svelte-xg79cg");
    			add_location(p0, file$4, 157, 14, 6032);
    			attr_dev(p1, "class", "svelte-xg79cg");
    			add_location(p1, file$4, 158, 14, 6086);
    			attr_dev(p2, "class", "svelte-xg79cg");
    			add_location(p2, file$4, 159, 14, 6136);
    			attr_dev(div4, "class", "character_profile-text-description svelte-xg79cg");
    			add_location(div4, file$4, 156, 12, 5969);
    			attr_dev(div5, "class", "character_profile-text svelte-xg79cg");
    			add_location(div5, file$4, 151, 10, 5779);
    			attr_dev(div6, "class", "character_profile spawn svelte-xg79cg");
    			add_location(div6, file$4, 149, 8, 5570);
    			attr_dev(p3, "class", "center svelte-xg79cg");
    			add_location(p3, file$4, 163, 8, 6227);
    			attr_dev(section1, "class", "characters svelte-xg79cg");
    			attr_dev(section1, "id", "characters");
    			add_location(section1, file$4, 147, 6, 5470);
    			attr_dev(h22, "class", "copy spawn svelte-xg79cg");
    			add_location(h22, file$4, 166, 8, 6338);
    			attr_dev(div7, "class", "system-text use-wbr svelte-xg79cg");
    			add_location(div7, file$4, 169, 10, 6563);
    			attr_dev(div8, "class", "system-container spawn svelte-xg79cg");
    			add_location(div8, file$4, 167, 8, 6381);
    			attr_dev(div9, "class", "system-text use-wbr svelte-xg79cg");
    			add_location(div9, file$4, 177, 10, 6949);
    			attr_dev(div10, "class", "system-container spawn svelte-xg79cg");
    			add_location(div10, file$4, 175, 8, 6767);
    			attr_dev(div11, "class", "system-text use-wbr svelte-xg79cg");
    			add_location(div11, file$4, 185, 10, 7329);
    			attr_dev(div12, "class", "system-container spawn svelte-xg79cg");
    			add_location(div12, file$4, 183, 8, 7147);
    			attr_dev(section2, "class", "system svelte-xg79cg");
    			attr_dev(section2, "id", "system");
    			add_location(section2, file$4, 165, 6, 6293);
    			attr_dev(article, "class", "svelte-xg79cg");
    			add_location(article, file$4, 125, 4, 4455);
    			attr_dev(h23, "class", "copy svelte-xg79cg");
    			add_location(h23, file$4, 196, 8, 7746);
    			attr_dev(a0, "class", "twitter-timeline svelte-xg79cg");
    			attr_dev(a0, "data-width", "300");
    			attr_dev(a0, "data-height", "600");
    			attr_dev(a0, "data-theme", "dark");
    			attr_dev(a0, "href", "https://twitter.com/necromance_chan?ref_src=twsrc%5Etfw");
    			add_location(a0, file$4, 197, 8, 7786);
    			attr_dev(div13, "class", "content svelte-xg79cg");
    			add_location(div13, file$4, 195, 6, 7716);
    			attr_dev(div14, "class", "background-transition svelte-xg79cg");
    			add_location(div14, file$4, 206, 6, 8615);
    			attr_dev(section3, "class", "twitter svelte-xg79cg");
    			attr_dev(section3, "id", "twitter");
    			add_location(section3, file$4, 193, 4, 7559);
    			attr_dev(div15, "class", "article-background svelte-xg79cg");
    			add_location(div15, file$4, 124, 2, 4418);
    			attr_dev(td0, "class", "svelte-xg79cg");
    			add_location(td0, file$4, 214, 10, 8934);
    			attr_dev(wbr0, "class", "svelte-xg79cg");
    			add_location(wbr0, file$4, 216, 17, 8996);
    			attr_dev(td1, "class", "use-wbr svelte-xg79cg");
    			add_location(td1, file$4, 215, 10, 8958);
    			attr_dev(tr0, "class", "svelte-xg79cg");
    			add_location(tr0, file$4, 213, 8, 8919);
    			attr_dev(td2, "class", "svelte-xg79cg");
    			add_location(td2, file$4, 220, 10, 9064);
    			attr_dev(td3, "class", "svelte-xg79cg");
    			add_location(td3, file$4, 221, 10, 9092);
    			attr_dev(tr1, "class", "svelte-xg79cg");
    			add_location(tr1, file$4, 219, 8, 9049);
    			attr_dev(td4, "class", "svelte-xg79cg");
    			add_location(td4, file$4, 224, 10, 9152);
    			attr_dev(wbr1, "class", "svelte-xg79cg");
    			add_location(wbr1, file$4, 226, 16, 9213);
    			attr_dev(wbr2, "class", "svelte-xg79cg");
    			add_location(wbr2, file$4, 226, 24, 9221);
    			attr_dev(td5, "class", "use-wbr svelte-xg79cg");
    			add_location(td5, file$4, 225, 10, 9176);
    			attr_dev(tr2, "class", "svelte-xg79cg");
    			add_location(tr2, file$4, 223, 8, 9137);
    			attr_dev(td6, "class", "svelte-xg79cg");
    			add_location(td6, file$4, 230, 10, 9287);
    			attr_dev(td7, "class", "svelte-xg79cg");
    			add_location(td7, file$4, 231, 10, 9312);
    			attr_dev(tr3, "class", "svelte-xg79cg");
    			add_location(tr3, file$4, 229, 8, 9272);
    			attr_dev(td8, "class", "svelte-xg79cg");
    			add_location(td8, file$4, 234, 10, 9361);
    			attr_dev(wbr3, "class", "svelte-xg79cg");
    			add_location(wbr3, file$4, 236, 119, 9548);
    			attr_dev(a1, "href", "javascript:location.assign(location.origin);");
    			set_style(a1, "color", "white");
    			set_style(a1, "text-decoration", "underline");
    			attr_dev(a1, "class", "svelte-xg79cg");
    			add_location(a1, file$4, 236, 14, 9443);
    			attr_dev(td9, "class", "svelte-xg79cg");
    			add_location(td9, file$4, 236, 10, 9439);
    			attr_dev(tr4, "class", "svelte-xg79cg");
    			add_location(tr4, file$4, 233, 8, 9346);
    			attr_dev(table, "class", "specs svelte-xg79cg");
    			add_location(table, file$4, 212, 6, 8889);
    			attr_dev(div16, "class", "info svelte-xg79cg");
    			add_location(div16, file$4, 211, 4, 8864);
    			attr_dev(section4, "class", "share svelte-xg79cg");
    			add_location(section4, file$4, 240, 4, 9613);
    			attr_dev(section5, "class", "article-footer svelte-xg79cg");
    			attr_dev(section5, "id", "info");
    			add_location(section5, file$4, 209, 2, 8683);
    			set_style(main, "--transitionDuration", globalSettings.transitionDuration + "ms");
    			set_style(main, "--standardWidth", /*$sync*/ ctx[1].standardWidth + "vw");
    			attr_dev(main, "class", "svelte-xg79cg");
    			add_location(main, file$4, 118, 0, 4003);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(nheader, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, main, anchor);
    			append_dev(main, div1);
    			append_dev(div1, video);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			append_dev(div1, t2);
    			mount_component(picture0, div1, null);
    			append_dev(main, t3);
    			append_dev(main, div15);
    			append_dev(div15, article);
    			append_dev(article, section0);
    			append_dev(section0, h20);
    			append_dev(section0, t5);
    			append_dev(section0, div2);
    			mount_component(yframe, div2, null);
    			append_dev(article, t6);

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				each_blocks_3[i].m(article, null);
    			}

    			append_dev(article, t7);
    			append_dev(article, section1);
    			append_dev(section1, h21);
    			append_dev(section1, t9);
    			append_dev(section1, div6);
    			mount_component(picture1, div6, null);
    			append_dev(div6, t10);
    			append_dev(div6, div5);
    			append_dev(div5, div3);
    			append_dev(div3, h3);
    			append_dev(div3, t12);
    			append_dev(div3, span);
    			append_dev(div5, t14);
    			append_dev(div5, div4);
    			append_dev(div4, p0);
    			append_dev(div4, t16);
    			append_dev(div4, p1);
    			append_dev(div4, t18);
    			append_dev(div4, p2);
    			append_dev(section1, t20);
    			append_dev(section1, p3);
    			append_dev(article, t22);
    			append_dev(article, section2);
    			append_dev(section2, h22);
    			append_dev(section2, t24);
    			append_dev(section2, div8);
    			mount_component(picture2, div8, null);
    			append_dev(div8, t25);
    			append_dev(div8, div7);

    			for (let i = 0; i < 4; i += 1) {
    				each_blocks_2[i].m(div7, null);
    			}

    			append_dev(section2, t26);
    			append_dev(section2, div10);
    			mount_component(picture3, div10, null);
    			append_dev(div10, t27);
    			append_dev(div10, div9);

    			for (let i = 0; i < 4; i += 1) {
    				each_blocks_1[i].m(div9, null);
    			}

    			append_dev(section2, t28);
    			append_dev(section2, div12);
    			mount_component(picture4, div12, null);
    			append_dev(div12, t29);
    			append_dev(div12, div11);

    			for (let i = 0; i < 4; i += 1) {
    				each_blocks[i].m(div11, null);
    			}

    			append_dev(div15, t30);
    			append_dev(div15, section3);
    			mount_component(picture5, section3, null);
    			append_dev(section3, t31);
    			append_dev(section3, div13);
    			append_dev(div13, h23);
    			append_dev(div13, t33);
    			append_dev(div13, a0);
    			append_dev(div13, t35);
    			if (if_block) if_block.m(div13, null);
    			append_dev(div13, t36);
    			mount_component(button0, div13, null);
    			append_dev(section3, t37);
    			append_dev(section3, div14);
    			append_dev(main, t38);
    			append_dev(main, section5);
    			mount_component(picture6, section5, null);
    			append_dev(section5, t39);
    			append_dev(section5, div16);
    			append_dev(div16, table);
    			append_dev(table, tr0);
    			append_dev(tr0, td0);
    			append_dev(tr0, t41);
    			append_dev(tr0, td1);
    			append_dev(td1, t42);
    			append_dev(td1, wbr0);
    			append_dev(td1, t43);
    			append_dev(table, t44);
    			append_dev(table, tr1);
    			append_dev(tr1, td2);
    			append_dev(tr1, t46);
    			append_dev(tr1, td3);
    			append_dev(table, t48);
    			append_dev(table, tr2);
    			append_dev(tr2, td4);
    			append_dev(tr2, t50);
    			append_dev(tr2, td5);
    			append_dev(td5, t51);
    			append_dev(td5, wbr1);
    			append_dev(td5, t52);
    			append_dev(td5, wbr2);
    			append_dev(td5, t53);
    			append_dev(table, t54);
    			append_dev(table, tr3);
    			append_dev(tr3, td6);
    			append_dev(tr3, t56);
    			append_dev(tr3, td7);
    			append_dev(table, t58);
    			append_dev(table, tr4);
    			append_dev(tr4, td8);
    			append_dev(tr4, t60);
    			append_dev(tr4, td9);
    			append_dev(td9, a1);
    			append_dev(a1, t61);
    			append_dev(a1, wbr3);
    			append_dev(a1, t62);
    			append_dev(section5, t63);
    			append_dev(section5, section4);
    			mount_component(button1, section4, null);
    			append_dev(section4, t64);
    			mount_component(button2, section4, null);
    			append_dev(main, t65);
    			mount_component(footer, main, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const picture0_changes = {};
    			if (dirty & /*$sync*/ 2) picture0_changes.sizes = "" + (/*$sync*/ ctx[1].standardWidth + "vw");
    			picture0.$set(picture0_changes);
    			const yframe_changes = {};
    			if (dirty & /*$sync*/ 2) yframe_changes.sizes = "@media (orientation: portrait) " + /*$sync*/ ctx[1].standardWidth + "vw, " + /*$sync*/ ctx[1].standardWidth * 0.975 / 2 + "vw";
    			yframe.$set(yframe_changes);

    			if (dirty & /*Object, textContent, globalSettings*/ 16) {
    				each_value_3 = Object.keys(/*textContent*/ ctx[4]);
    				validate_each_argument(each_value_3);
    				let i;

    				for (i = 0; i < each_value_3.length; i += 1) {
    					const child_ctx = get_each_context_3(ctx, each_value_3, i);

    					if (each_blocks_3[i]) {
    						each_blocks_3[i].p(child_ctx, dirty);
    						transition_in(each_blocks_3[i], 1);
    					} else {
    						each_blocks_3[i] = create_each_block_3(child_ctx);
    						each_blocks_3[i].c();
    						transition_in(each_blocks_3[i], 1);
    						each_blocks_3[i].m(article, t7);
    					}
    				}

    				group_outros();

    				for (i = each_value_3.length; i < each_blocks_3.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (/*loadTwitterWidget*/ ctx[0]) {
    				if (if_block) ; else {
    					if_block = create_if_block$1(ctx);
    					if_block.c();
    					if_block.m(div13, t36);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			const button0_changes = {};

    			if (dirty & /*$$scope*/ 8388608) {
    				button0_changes.$$scope = { dirty, ctx };
    			}

    			button0.$set(button0_changes);
    			const button1_changes = {};

    			if (dirty & /*$$scope*/ 8388608) {
    				button1_changes.$$scope = { dirty, ctx };
    			}

    			button1.$set(button1_changes);
    			const button2_changes = {};

    			if (dirty & /*$$scope*/ 8388608) {
    				button2_changes.$$scope = { dirty, ctx };
    			}

    			button2.$set(button2_changes);

    			if (!current || dirty & /*$sync*/ 2) {
    				set_style(main, "--standardWidth", /*$sync*/ ctx[1].standardWidth + "vw");
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(nheader.$$.fragment, local);
    			transition_in(picture0.$$.fragment, local);
    			transition_in(yframe.$$.fragment, local);

    			for (let i = 0; i < each_value_3.length; i += 1) {
    				transition_in(each_blocks_3[i]);
    			}

    			transition_in(picture1.$$.fragment, local);
    			transition_in(picture2.$$.fragment, local);
    			transition_in(picture3.$$.fragment, local);
    			transition_in(picture4.$$.fragment, local);
    			transition_in(picture5.$$.fragment, local);
    			transition_in(button0.$$.fragment, local);
    			transition_in(picture6.$$.fragment, local);
    			transition_in(button1.$$.fragment, local);
    			transition_in(button2.$$.fragment, local);
    			transition_in(footer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(nheader.$$.fragment, local);
    			transition_out(picture0.$$.fragment, local);
    			transition_out(yframe.$$.fragment, local);
    			each_blocks_3 = each_blocks_3.filter(Boolean);

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				transition_out(each_blocks_3[i]);
    			}

    			transition_out(picture1.$$.fragment, local);
    			transition_out(picture2.$$.fragment, local);
    			transition_out(picture3.$$.fragment, local);
    			transition_out(picture4.$$.fragment, local);
    			transition_out(picture5.$$.fragment, local);
    			transition_out(button0.$$.fragment, local);
    			transition_out(picture6.$$.fragment, local);
    			transition_out(button1.$$.fragment, local);
    			transition_out(button2.$$.fragment, local);
    			transition_out(footer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(nheader, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(main);
    			destroy_component(picture0);
    			destroy_component(yframe);
    			destroy_each(each_blocks_3, detaching);
    			destroy_component(picture1);
    			destroy_component(picture2);
    			destroy_each(each_blocks_2, detaching);
    			destroy_component(picture3);
    			destroy_each(each_blocks_1, detaching);
    			destroy_component(picture4);
    			destroy_each(each_blocks, detaching);
    			destroy_component(picture5);
    			if (if_block) if_block.d();
    			destroy_component(button0);
    			destroy_component(picture6);
    			destroy_component(button1);
    			destroy_component(button2);
    			destroy_component(footer);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const func = v => v.replace(/\\/g, " ");

    function instance$4($$self, $$props, $$invalidate) {
    	let $sync;
    	validate_store(sync, "sync");
    	component_subscribe($$self, sync, $$value => $$invalidate(1, $sync = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Necromance", slots, []);

    	const headerConfig = {
    			sectionType: "navHeader",
    			themeColor: "#fff",
    			contents: {
    				imageId: "ssm-logo-landscape",
    				aspectRatio: { width: 157213, height: 60041 },
    				imageExtensionsShort: ["svg"],
    				items: [
    					{ id: "pv", label: "PV" },
    					{ id: "world", label: "世界観" },
    					{ id: "story", label: "ストーリー" },
    					{ id: "characters", label: "キャラクター" },
    					{ id: "system", label: "システム" },
    					{ id: "twitter", label: "公式Twitter" },
    					{ id: "info", label: "情報" }
    				]
    			}
    		},
    		footerConfig = {
    			copyright: ["&copy; 2021", "HIBIKI CUBE", "スーパースターマイン"],
    			codeLicense: {
    				license: "mpl-2.0",
    				linkLabel: "GitHub",
    				url: "https://github.com/HIBIKI-CUBE/superstarmine-web"
    			},
    			assetsLicense: { ccType: "by-nd" },
    			anchorColor: "#f2b807",
    			backgroundColor: "#2c2643"
    		},
    		textContent = {
    			world: [
    				{ text: "伝承の 時代から 幾星霜——" },
    				{
    					text: "屈強な 木々が 生い茂る その 森には、 だれもが 怖じ恐れる 妖女が 棲む という 言伝がある。"
    				},
    				{
    					text: "彼の者は 人々に、 畏怖を 込めて こう呼ばれた—— \\“\\魔女\\”\\と。"
    				}
    			],
    			story: [
    				{
    					text: "魔女伝説の 調査のため、 森を 訪れた 民俗学者 の男。 しかし 現れたのは、 『自称』 天才魔女 の女の子！？"
    				},
    				{
    					text: "「アンタ、 魔女に キョーミ あるんでしょ？ いいわ、 アタシが 連れてって あげる！」",
    					color: "#f2b807"
    				},
    				{
    					text: "謎の少女と 学者は 魔女伝説の 全容を 明らかにするため、 魔物 うごめく 森の奥を 目指す——！。"
    				}
    			]
    		};

    	addEventListener("load", () => {
    		(d => {
    			var config = {
    					kitId: "egn6fhp",
    					scriptTimeout: 3000,
    					async: !0
    				},
    				h = d.documentElement,
    				t = setTimeout(
    					() => {
    						h.className = h.className.replace(/\bwf-loading\b/g, "") + " wf-inactive";
    					},
    					config.scriptTimeout
    				),
    				tk = d.createElement("script"),
    				f = !1,
    				s = d.getElementsByTagName("script")[0],
    				a;

    			h.className += " wf-loading";
    			tk.src = "https://use.typekit.net/" + config.kitId + ".js";
    			tk.async = !0;

    			tk.onload = tk.onreadystatechange = function () {
    				a = this.readyState;
    				if (f || a && a != "complete" && a != "loaded") return;
    				f = !0;
    				clearTimeout(t);

    				try {
    					Typekit.load(config);
    				} catch(e) {
    					
    				}
    			};

    			s.parentNode.insertBefore(tk, s);
    		})(document);
    	});

    	const videoSourceUrl = (location.hostname == "localhost"
    	? ""
    	: "https://dev.superstarmine.ga") + "/video/necromance_hero.m3u8";

    	const hls = new HLS({ "startFragPrefetch": true });

    	if (HLS.isSupported()) {
    		hls.loadSource(videoSourceUrl);
    	}

    	let loadTwitterWidget = false;

    	onMount(() => {
    		scrollTo(0, 0);
    		const video = document.querySelector("video.hero");

    		if (HLS.isSupported()) {
    			hls.attachMedia(video);

    			hls.on(HLS.Events.MEDIA_ATTACHED, () => {
    				video.play();
    			});
    		} else if (video.canPlayType("application/vnd.apple.mpegurl")) {
    			video.src = videoSourceUrl;
    		}

    		video.load();
    		video.addEventListener("loadedmetadata", () => video.play());
    		video.addEventListener("canplay", () => video.play());

    		const twitterObserver = new IntersectionObserver(e => {
    				if (e[0].isIntersecting && !loadTwitterWidget) {
    					$$invalidate(0, loadTwitterWidget = true);
    					twitterObserver.unobserve(document.querySelector(".twitter-timeline"));
    				}
    			},
    		{ rootMargin: "50%" });

    		twitterObserver.observe(document.querySelector(".twitter-timeline"));

    		const scrollSpawner = new IntersectionObserver(e => {
    				e.forEach(v => {
    					if (v.isIntersecting) {
    						v.target.classList.add("spawned");
    						scrollSpawner.unobserve(v.target);
    					}
    				});
    			},
    		{ rootMargin: "-40% 0px" });

    		document.querySelectorAll(".spawn").forEach(v => {
    			scrollSpawner.observe(v);
    		});
    	});

    	const writable_props = [];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Necromance> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		Nheader: Nav_header,
    		Button,
    		Footer,
    		Picture,
    		HLS,
    		onMount,
    		Yframe: Youtube_iframe,
    		globalSettings,
    		sync,
    		headerConfig,
    		footerConfig,
    		textContent,
    		videoSourceUrl,
    		hls,
    		loadTwitterWidget,
    		$sync
    	});

    	$$self.$inject_state = $$props => {
    		if ("loadTwitterWidget" in $$props) $$invalidate(0, loadTwitterWidget = $$props.loadTwitterWidget);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [loadTwitterWidget, $sync, headerConfig, footerConfig, textContent];
    }

    class Necromance extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Necromance",
    			options,
    			id: create_fragment$4.name
    		});
    	}
    }

    /* src/components/lines.svelte generated by Svelte v3.38.2 */

    const file$3 = "src/components/lines.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[1] = list[i];
    	return child_ctx;
    }

    // (6:0) {#each string.split(" ") as chunk}
    function create_each_block(ctx) {
    	let span;
    	let t_value = /*chunk*/ ctx[1] + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text$1(t_value);
    			attr_dev(span, "class", "svelte-1cntuzd");
    			add_location(span, file$3, 6, 2, 106);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*string*/ 1 && t_value !== (t_value = /*chunk*/ ctx[1] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(6:0) {#each string.split(\\\" \\\") as chunk}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$3(ctx) {
    	let each_1_anchor;
    	let each_value = /*string*/ ctx[0].split(" ");
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*string*/ 1) {
    				each_value = /*string*/ ctx[0].split(" ");
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Lines", slots, []);
    	let { string = "" } = $$props;
    	const writable_props = ["string"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Lines> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("string" in $$props) $$invalidate(0, string = $$props.string);
    	};

    	$$self.$capture_state = () => ({ string });

    	$$self.$inject_state = $$props => {
    		if ("string" in $$props) $$invalidate(0, string = $$props.string);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [string];
    }

    class Lines extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, { string: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Lines",
    			options,
    			id: create_fragment$3.name
    		});
    	}

    	get string() {
    		throw new Error("<Lines>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set string(value) {
    		throw new Error("<Lines>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/pages/newcromance/index.svelte generated by Svelte v3.38.2 */
    const file$2 = "src/pages/newcromance/index.svelte";

    function create_fragment$2(ctx) {
    	let meta0;
    	let meta1;
    	let link0;
    	let link1;
    	let link2;
    	let link3;
    	let link4;
    	let link5;
    	let t0;
    	let nav;
    	let div0;
    	let img0;
    	let img0_src_value;
    	let t1;
    	let div2;
    	let div1;
    	let svg0;
    	let path0;
    	let t2;
    	let section0;
    	let div3;
    	let img1;
    	let img1_src_value;
    	let t3;
    	let img2;
    	let img2_src_value;
    	let t4;
    	let img3;
    	let img3_src_value;
    	let t5;
    	let img4;
    	let img4_src_value;
    	let t6;
    	let img5;
    	let img5_src_value;
    	let t7;
    	let img6;
    	let img6_src_value;
    	let t8;
    	let div4;
    	let svg1;
    	let path1;
    	let t9;
    	let main;
    	let section1;
    	let div6;
    	let div5;
    	let iframe;
    	let iframe_src_value;
    	let t10;
    	let section2;
    	let div8;
    	let div7;
    	let h20;
    	let t12;
    	let span0;
    	let t14;
    	let ul;
    	let li0;
    	let span1;
    	let t16;
    	let p0;
    	let t18;
    	let p1;
    	let t20;
    	let li1;
    	let span2;
    	let t22;
    	let p2;
    	let t24;
    	let p3;
    	let t26;
    	let li2;
    	let span3;
    	let t28;
    	let p4;
    	let t30;
    	let p5;
    	let t32;
    	let section3;
    	let div17;
    	let div9;
    	let h21;
    	let t34;
    	let span4;
    	let t36;
    	let div12;
    	let div10;
    	let p6;
    	let lines0;
    	let t37;
    	let p7;
    	let lines1;
    	let t38;
    	let p8;
    	let lines2;
    	let t39;
    	let p9;
    	let lines3;
    	let t40;
    	let div11;
    	let img7;
    	let img7_src_value;
    	let t41;
    	let div13;
    	let t42;
    	let div16;
    	let div14;
    	let img8;
    	let img8_src_value;
    	let t43;
    	let div15;
    	let p10;
    	let lines4;
    	let t44;
    	let p11;
    	let lines5;
    	let t45;
    	let p12;
    	let lines6;
    	let t46;
    	let p13;
    	let t47;
    	let p14;
    	let lines7;
    	let t48;
    	let section4;
    	let div23;
    	let div18;
    	let h22;
    	let t50;
    	let span5;
    	let t52;
    	let div22;
    	let div21;
    	let div19;
    	let img9;
    	let img9_src_value;
    	let t53;
    	let div20;
    	let h3;
    	let t55;
    	let p15;
    	let t57;
    	let p16;
    	let t58;
    	let br0;
    	let t59;
    	let br1;
    	let t60;
    	let br2;
    	let t61;
    	let br3;
    	let t62;
    	let p17;
    	let t64;
    	let section5;
    	let div26;
    	let div24;
    	let h23;
    	let t66;
    	let span6;
    	let t68;
    	let div25;
    	let p18;
    	let lines8;
    	let t69;
    	let p19;
    	let lines9;
    	let t70;
    	let a0;
    	let t72;
    	let div29;
    	let div27;
    	let img10;
    	let img10_src_value;
    	let t73;
    	let img11;
    	let img11_src_value;
    	let t74;
    	let div28;
    	let a1;
    	let svg2;
    	let path2;
    	let t75;
    	let a2;
    	let svg3;
    	let path3;
    	let t76;
    	let footer;
    	let div30;
    	let img12;
    	let img12_src_value;
    	let t77;
    	let p20;
    	let t79;
    	let hr;
    	let t80;
    	let p21;
    	let t81;
    	let a3;
    	let t83;
    	let br4;
    	let t84;
    	let a4;
    	let t86;
    	let t87;
    	let p22;
    	let t88;
    	let br5;
    	let t89;
    	let current;

    	lines0 = new Lines({
    			props: { string: "伝承の時代から 幾星霜──" },
    			$$inline: true
    		});

    	lines1 = new Lines({
    			props: {
    				string: "何人も寄りつかぬ 険阻な山々に囲まれた 広大な樹林、 “フレーダーマオスの森”。"
    			},
    			$$inline: true
    		});

    	lines2 = new Lines({
    			props: {
    				string: "屈強な木々が生い茂る その森には、 だれもが怖じ恐れる 妖女が棲むという 言伝がある。"
    			},
    			$$inline: true
    		});

    	lines3 = new Lines({
    			props: {
    				string: "彼の者は人々に、 畏怖を込めて こう呼ばれた── “魔女”と。"
    			},
    			$$inline: true
    		});

    	lines4 = new Lines({
    			props: { string: "そんな魔女伝説の調査のため、 森を訪れた 民俗学者のあなた。" },
    			$$inline: true
    		});

    	lines5 = new Lines({
    			props: { string: "しかし現れたのは、 『自称』天才魔女の 女の子！？" },
    			$$inline: true
    		});

    	lines6 = new Lines({
    			props: { string: "アンタ、 魔女にキョーミ あるんでしょ？" },
    			$$inline: true
    		});

    	lines7 = new Lines({
    			props: {
    				string: "謎の少女と学者は 魔女伝説の全容を 明らかにするため、 魔物うごめく 森の奥を目指す──"
    			},
    			$$inline: true
    		});

    	lines8 = new Lines({
    			props: {
    				string: "Discordの公式コミュニティー では 開発陣より情報を 先行公開中！"
    			},
    			$$inline: true
    		});

    	lines9 = new Lines({
    			props: { string: "参加して最新情報を ゲットしよう！" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			meta0 = element("meta");
    			meta1 = element("meta");
    			link0 = element("link");
    			link1 = element("link");
    			link2 = element("link");
    			link3 = element("link");
    			link4 = element("link");
    			link5 = element("link");
    			t0 = space();
    			nav = element("nav");
    			div0 = element("div");
    			img0 = element("img");
    			t1 = space();
    			div2 = element("div");
    			div1 = element("div");
    			svg0 = svg_element("svg");
    			path0 = svg_element("path");
    			t2 = space();
    			section0 = element("section");
    			div3 = element("div");
    			img1 = element("img");
    			t3 = space();
    			img2 = element("img");
    			t4 = space();
    			img3 = element("img");
    			t5 = space();
    			img4 = element("img");
    			t6 = space();
    			img5 = element("img");
    			t7 = space();
    			img6 = element("img");
    			t8 = space();
    			div4 = element("div");
    			svg1 = svg_element("svg");
    			path1 = svg_element("path");
    			t9 = space();
    			main = element("main");
    			section1 = element("section");
    			div6 = element("div");
    			div5 = element("div");
    			iframe = element("iframe");
    			t10 = space();
    			section2 = element("section");
    			div8 = element("div");
    			div7 = element("div");
    			h20 = element("h2");
    			h20.textContent = "News";
    			t12 = space();
    			span0 = element("span");
    			span0.textContent = "ニュース";
    			t14 = space();
    			ul = element("ul");
    			li0 = element("li");
    			span1 = element("span");
    			span1.textContent = "2021/09/01";
    			t16 = space();
    			p0 = element("p");
    			p0.textContent = "れーぞく！ネクロマンスちゃん 特設サイトをリニューアルしました！";
    			t18 = space();
    			p1 = element("p");
    			p1.textContent = "新しいサイトを宜しくお願いします！";
    			t20 = space();
    			li1 = element("li");
    			span2 = element("span");
    			span2.textContent = "2021/09/01";
    			t22 = space();
    			p2 = element("p");
    			p2.textContent = "れーぞく！ネクロマンスちゃん 特設サイトをリニューアルしました！";
    			t24 = space();
    			p3 = element("p");
    			p3.textContent = "新しいサイトを宜しくお願いします！";
    			t26 = space();
    			li2 = element("li");
    			span3 = element("span");
    			span3.textContent = "2021/09/01";
    			t28 = space();
    			p4 = element("p");
    			p4.textContent = "れーぞく！ネクロマンスちゃん 特設サイトをリニューアルしました！";
    			t30 = space();
    			p5 = element("p");
    			p5.textContent = "新しいサイトを宜しくお願いします！";
    			t32 = space();
    			section3 = element("section");
    			div17 = element("div");
    			div9 = element("div");
    			h21 = element("h2");
    			h21.textContent = "World";
    			t34 = space();
    			span4 = element("span");
    			span4.textContent = "ワールド";
    			t36 = space();
    			div12 = element("div");
    			div10 = element("div");
    			p6 = element("p");
    			create_component(lines0.$$.fragment);
    			t37 = space();
    			p7 = element("p");
    			create_component(lines1.$$.fragment);
    			t38 = space();
    			p8 = element("p");
    			create_component(lines2.$$.fragment);
    			t39 = space();
    			p9 = element("p");
    			create_component(lines3.$$.fragment);
    			t40 = space();
    			div11 = element("div");
    			img7 = element("img");
    			t41 = space();
    			div13 = element("div");
    			t42 = space();
    			div16 = element("div");
    			div14 = element("div");
    			img8 = element("img");
    			t43 = space();
    			div15 = element("div");
    			p10 = element("p");
    			create_component(lines4.$$.fragment);
    			t44 = space();
    			p11 = element("p");
    			create_component(lines5.$$.fragment);
    			t45 = space();
    			p12 = element("p");
    			create_component(lines6.$$.fragment);
    			t46 = space();
    			p13 = element("p");
    			t47 = space();
    			p14 = element("p");
    			create_component(lines7.$$.fragment);
    			t48 = space();
    			section4 = element("section");
    			div23 = element("div");
    			div18 = element("div");
    			h22 = element("h2");
    			h22.textContent = "CHARACTERS";
    			t50 = space();
    			span5 = element("span");
    			span5.textContent = "キャラクター";
    			t52 = space();
    			div22 = element("div");
    			div21 = element("div");
    			div19 = element("div");
    			img9 = element("img");
    			t53 = space();
    			div20 = element("div");
    			h3 = element("h3");
    			h3.textContent = "NECROMANCE";
    			t55 = space();
    			p15 = element("p");
    			p15.textContent = "ネクロマンス";
    			t57 = space();
    			p16 = element("p");
    			t58 = text$1("胸元と頭のリボンがトレードマークの女の子。");
    			br0 = element("br");
    			t59 = text$1("\n                  14歳くらいに見える。");
    			br1 = element("br");
    			t60 = text$1("\n                  尊大な態度とそれに不釣り合いな体躯で、学者の前に現れる。");
    			br2 = element("br");
    			t61 = text$1("\n                  とある魔女を恨み、復讐を誓っているらしいが——。");
    			br3 = element("br");
    			t62 = space();
    			p17 = element("p");
    			p17.textContent = "さらに個性豊かなキャラクターが続々登場！";
    			t64 = space();
    			section5 = element("section");
    			div26 = element("div");
    			div24 = element("div");
    			h23 = element("h2");
    			h23.textContent = "DISCORD";
    			t66 = space();
    			span6 = element("span");
    			span6.textContent = "ディスコード";
    			t68 = space();
    			div25 = element("div");
    			p18 = element("p");
    			create_component(lines8.$$.fragment);
    			t69 = space();
    			p19 = element("p");
    			create_component(lines9.$$.fragment);
    			t70 = space();
    			a0 = element("a");
    			a0.textContent = "サーバーに参加する";
    			t72 = space();
    			div29 = element("div");
    			div27 = element("div");
    			img10 = element("img");
    			t73 = space();
    			img11 = element("img");
    			t74 = space();
    			div28 = element("div");
    			a1 = element("a");
    			svg2 = svg_element("svg");
    			path2 = svg_element("path");
    			t75 = space();
    			a2 = element("a");
    			svg3 = svg_element("svg");
    			path3 = svg_element("path");
    			t76 = space();
    			footer = element("footer");
    			div30 = element("div");
    			img12 = element("img");
    			t77 = space();
    			p20 = element("p");
    			p20.textContent = "© 2021 HIBIKI CUBE, かずえもん, スーパースターマイン";
    			t79 = space();
    			hr = element("hr");
    			t80 = space();
    			p21 = element("p");
    			t81 = text$1("このWebサイトのソースコードは Mozilla Public License 2.0ライセンス の下で提供されており ");
    			a3 = element("a");
    			a3.textContent = "GitHub";
    			t83 = text$1(" から入手して利用できます。");
    			br4 = element("br");
    			t84 = text$1("\n          The source code of this web site is licensed under a Mozilla Public License 2.0 and available at ");
    			a4 = element("a");
    			a4.textContent = "GitHub";
    			t86 = text$1(".");
    			t87 = space();
    			p22 = element("p");
    			t88 = text$1("全てのソースコード以外の画像や動画などのリソースは クリエイティブ・コモンズ 表示 - 改変禁止 4.0 国際 ライセンス の下に提供されています。");
    			br5 = element("br");
    			t89 = text$1("\n          All non-source code resources such as images and videos are licensed under a Creative Commons Attribution-NoDerivatives 4.0 International License.");
    			attr_dev(meta0, "charset", "UTF-8");
    			add_location(meta0, file$2, 5, 4, 93);
    			attr_dev(meta1, "name", "viewport");
    			attr_dev(meta1, "content", "width=device-width, initial-scale=1");
    			add_location(meta1, file$2, 6, 4, 122);
    			document.title = "れーぞく！ネクロマンスちゃん";
    			attr_dev(link0, "rel", "preconnect");
    			attr_dev(link0, "href", "https://fonts.googleapis.com");
    			add_location(link0, file$2, 8, 4, 231);
    			attr_dev(link1, "rel", "preconnect");
    			attr_dev(link1, "href", "https://fonts.gstatic.com");
    			attr_dev(link1, "crossorigin", "");
    			add_location(link1, file$2, 9, 4, 295);
    			attr_dev(link2, "rel", "stylesheet");
    			attr_dev(link2, "href", "/src/pages/newcromance/style/reset.css");
    			add_location(link2, file$2, 10, 4, 368);
    			attr_dev(link3, "href", "https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@400;700&display=swap");
    			attr_dev(link3, "rel", "stylesheet");
    			add_location(link3, file$2, 11, 4, 442);
    			attr_dev(link4, "rel", "stylesheet");
    			attr_dev(link4, "href", "https://use.typekit.net/lkm8uks.css");
    			add_location(link4, file$2, 12, 4, 557);
    			attr_dev(link5, "rel", "stylesheet");
    			attr_dev(link5, "href", "/src/pages/newcromance/style/style.css");
    			add_location(link5, file$2, 13, 4, 628);
    			attr_dev(img0, "class", "nav__logo");
    			if (img0.src !== (img0_src_value = "/src/pages/newcromance/img/SSM_LOGO.png")) attr_dev(img0, "src", img0_src_value);
    			add_location(img0, file$2, 17, 8, 775);
    			attr_dev(div0, "class", "nav__left");
    			add_location(div0, file$2, 16, 6, 743);
    			attr_dev(path0, "fill", "#56449A");
    			attr_dev(path0, "d", "M3,6H21V8H3V6M3,11H21V13H3V11M3,16H21V18H3V16Z");
    			add_location(path0, file$2, 22, 12, 1031);
    			set_style(svg0, "width", "40px");
    			set_style(svg0, "height", "40px");
    			attr_dev(svg0, "viewBox", "0 0 24 24");
    			add_location(svg0, file$2, 21, 10, 962);
    			attr_dev(div1, "class", "nav__menu-button");
    			set_style(div1, "display", "none");
    			add_location(div1, file$2, 20, 8, 899);
    			attr_dev(div2, "class", "nav__right");
    			add_location(div2, file$2, 19, 6, 866);
    			attr_dev(nav, "class", "nav");
    			add_location(nav, file$2, 15, 4, 719);
    			attr_dev(img1, "class", "hero-section__logo");
    			if (img1.src !== (img1_src_value = "/src/pages/newcromance/img/ぞくロマロゴ_Ver3.png")) attr_dev(img1, "src", img1_src_value);
    			add_location(img1, file$2, 29, 8, 1256);
    			attr_dev(img2, "class", "hero-section__necromance");
    			if (img2.src !== (img2_src_value = "/src/pages/newcromance/img/necromance.png")) attr_dev(img2, "src", img2_src_value);
    			add_location(img2, file$2, 30, 8, 1346);
    			attr_dev(img3, "class", "hero-section__enemy01");
    			if (img3.src !== (img3_src_value = "/src/pages/newcromance/img/enemy01.png")) attr_dev(img3, "src", img3_src_value);
    			add_location(img3, file$2, 31, 8, 1441);
    			attr_dev(img4, "class", "hero-section__enemy02");
    			if (img4.src !== (img4_src_value = "/src/pages/newcromance/img/enemy02.png")) attr_dev(img4, "src", img4_src_value);
    			add_location(img4, file$2, 32, 8, 1530);
    			attr_dev(img5, "class", "hero-section__enemy03");
    			if (img5.src !== (img5_src_value = "/src/pages/newcromance/img/enemy03.png")) attr_dev(img5, "src", img5_src_value);
    			add_location(img5, file$2, 33, 8, 1619);
    			attr_dev(img6, "class", "hero-section__enemy04");
    			if (img6.src !== (img6_src_value = "/src/pages/newcromance/img/enemy04.png")) attr_dev(img6, "src", img6_src_value);
    			add_location(img6, file$2, 34, 8, 1708);
    			attr_dev(div3, "class", "hero-section__elements");
    			add_location(div3, file$2, 28, 6, 1211);
    			attr_dev(path1, "d", "M342.816 63.56C404.683 74.35 464.587 93.69 526.283 105.42C614.165 122.14 705.685 123.15 793.429 105.81C878.699 89 967.115 48 1051.37 27.17C1126.09 8.69 1207.67 1.08 1280 24.17V120H0V92.65C109.297 53.7958 227.854 43.7355 342.816 63.56Z");
    			attr_dev(path1, "fill", "#56449A");
    			add_location(path1, file$2, 38, 10, 1994);
    			attr_dev(svg1, "viewBox", "0 0 1280 120");
    			attr_dev(svg1, "preserveAspectRatio", "none");
    			attr_dev(svg1, "xmlns", "http://www.w3.org/2000/svg");
    			set_style(svg1, "position", "absolute");
    			set_style(svg1, "bottom", "0");
    			add_location(svg1, file$2, 37, 8, 1858);
    			attr_dev(div4, "class", "hero-section__shape-divider");
    			add_location(div4, file$2, 36, 6, 1808);
    			attr_dev(section0, "class", "section hero-section");
    			add_location(section0, file$2, 27, 4, 1166);
    			attr_dev(iframe, "class", "movie-section__iframe");
    			attr_dev(iframe, "width", "560");
    			attr_dev(iframe, "height", "315");
    			if (iframe.src !== (iframe_src_value = "https://www.youtube.com/embed/foh7rj5YI_E")) attr_dev(iframe, "src", iframe_src_value);
    			attr_dev(iframe, "title", "YouTube video player");
    			attr_dev(iframe, "frameborder", "0");
    			attr_dev(iframe, "allow", "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture");
    			iframe.allowFullscreen = true;
    			add_location(iframe, file$2, 46, 12, 2464);
    			attr_dev(div5, "class", "movie-section__video-wrapper");
    			add_location(div5, file$2, 45, 10, 2409);
    			attr_dev(div6, "class", "content");
    			add_location(div6, file$2, 44, 8, 2377);
    			attr_dev(section1, "class", "section movie-section");
    			add_location(section1, file$2, 43, 6, 2329);
    			add_location(h20, file$2, 53, 12, 2911);
    			add_location(span0, file$2, 54, 12, 2937);
    			attr_dev(div7, "class", "heading");
    			add_location(div7, file$2, 52, 10, 2877);
    			attr_dev(span1, "class", "news-item__date");
    			add_location(span1, file$2, 58, 14, 3063);
    			attr_dev(p0, "class", "news-item__heading");
    			add_location(p0, file$2, 59, 14, 3125);
    			attr_dev(p1, "class", "news-item__text");
    			add_location(p1, file$2, 60, 14, 3206);
    			attr_dev(li0, "class", "news-item");
    			add_location(li0, file$2, 57, 12, 3026);
    			attr_dev(span2, "class", "news-item__date");
    			add_location(span2, file$2, 63, 14, 3322);
    			attr_dev(p2, "class", "news-item__heading");
    			add_location(p2, file$2, 64, 14, 3384);
    			attr_dev(p3, "class", "news-item__text");
    			add_location(p3, file$2, 65, 14, 3465);
    			attr_dev(li1, "class", "news-item");
    			add_location(li1, file$2, 62, 12, 3285);
    			attr_dev(span3, "class", "news-item__date");
    			add_location(span3, file$2, 68, 14, 3581);
    			attr_dev(p4, "class", "news-item__heading");
    			add_location(p4, file$2, 69, 14, 3643);
    			attr_dev(p5, "class", "news-item__text");
    			add_location(p5, file$2, 70, 14, 3724);
    			attr_dev(li2, "class", "news-item");
    			add_location(li2, file$2, 67, 12, 3544);
    			attr_dev(ul, "class", "news-section__list");
    			add_location(ul, file$2, 56, 10, 2982);
    			attr_dev(div8, "class", "content");
    			add_location(div8, file$2, 51, 8, 2845);
    			attr_dev(section2, "class", "section news-section");
    			add_location(section2, file$2, 50, 6, 2798);
    			add_location(h21, file$2, 78, 12, 3959);
    			add_location(span4, file$2, 79, 12, 3986);
    			attr_dev(div9, "class", "heading");
    			add_location(div9, file$2, 77, 10, 3925);
    			attr_dev(p6, "data-align", "left");
    			attr_dev(p6, "data-slidein", "left");
    			add_location(p6, file$2, 83, 14, 4124);
    			attr_dev(p7, "data-align", "left");
    			attr_dev(p7, "data-slidein", "left");
    			add_location(p7, file$2, 86, 14, 4248);
    			attr_dev(p8, "data-align", "left");
    			attr_dev(p8, "data-slidein", "left");
    			add_location(p8, file$2, 89, 14, 4399);
    			attr_dev(p9, "data-align", "left");
    			attr_dev(p9, "data-slidein", "left");
    			add_location(p9, file$2, 92, 14, 4553);
    			attr_dev(div10, "class", "filled-sentence");
    			add_location(div10, file$2, 82, 12, 4080);
    			if (img7.src !== (img7_src_value = "/src/pages/newcromance/img/enemies.png")) attr_dev(img7, "src", img7_src_value);
    			add_location(img7, file$2, 97, 14, 4768);
    			attr_dev(div11, "class", "world-section__block01__img");
    			add_location(div11, file$2, 96, 12, 4712);
    			attr_dev(div12, "class", "world-section__block01");
    			add_location(div12, file$2, 81, 10, 4031);
    			set_style(div13, "height", "80px");
    			add_location(div13, file$2, 100, 10, 4865);
    			if (img8.src !== (img8_src_value = "/src/pages/newcromance/img/necromance_doya.png")) attr_dev(img8, "src", img8_src_value);
    			add_location(img8, file$2, 103, 14, 5014);
    			attr_dev(div14, "class", "world-section__block02__img");
    			add_location(div14, file$2, 102, 12, 4958);
    			attr_dev(p10, "data-align", "right");
    			attr_dev(p10, "data-slidein", "right");
    			add_location(p10, file$2, 106, 14, 5148);
    			attr_dev(p11, "data-align", "right");
    			attr_dev(p11, "data-slidein", "right");
    			add_location(p11, file$2, 109, 14, 5291);
    			attr_dev(p12, "class", "text--necro");
    			attr_dev(p12, "data-align", "right");
    			attr_dev(p12, "data-slidein", "right");
    			add_location(p12, file$2, 112, 14, 5429);
    			attr_dev(p13, "class", "text--necro");
    			attr_dev(p13, "data-align", "right");
    			attr_dev(p13, "data-slidein", "right");
    			add_location(p13, file$2, 115, 14, 5582);
    			attr_dev(p14, "data-align", "right");
    			attr_dev(p14, "data-slidein", "right");
    			add_location(p14, file$2, 117, 14, 5679);
    			attr_dev(div15, "class", "filled-sentence");
    			add_location(div15, file$2, 105, 12, 5104);
    			attr_dev(div16, "class", "world-section__block02");
    			add_location(div16, file$2, 101, 10, 4909);
    			attr_dev(div17, "class", "content");
    			add_location(div17, file$2, 76, 8, 3893);
    			attr_dev(section3, "class", "section world-section");
    			add_location(section3, file$2, 75, 6, 3845);
    			add_location(h22, file$2, 127, 12, 6031);
    			add_location(span5, file$2, 128, 12, 6063);
    			attr_dev(div18, "class", "heading heading--center");
    			add_location(div18, file$2, 126, 10, 5981);
    			if (img9.src !== (img9_src_value = "/src/pages/newcromance/img/Necromance_smile_alpha_shadow.png")) attr_dev(img9, "src", img9_src_value);
    			add_location(img9, file$2, 133, 16, 6242);
    			attr_dev(div19, "class", "character__figure");
    			add_location(div19, file$2, 132, 14, 6194);
    			attr_dev(h3, "class", "character__spell");
    			add_location(h3, file$2, 136, 16, 6403);
    			attr_dev(p15, "class", "character__name");
    			add_location(p15, file$2, 139, 16, 6500);
    			add_location(br0, file$2, 143, 39, 6658);
    			add_location(br1, file$2, 144, 29, 6692);
    			add_location(br2, file$2, 145, 46, 6743);
    			add_location(br3, file$2, 146, 42, 6790);
    			attr_dev(p16, "class", "character__intro");
    			add_location(p16, file$2, 142, 16, 6590);
    			attr_dev(div20, "class", "character__description");
    			add_location(div20, file$2, 135, 14, 6350);
    			attr_dev(div21, "class", "character__contents");
    			add_location(div21, file$2, 131, 12, 6146);
    			attr_dev(div22, "class", "character");
    			add_location(div22, file$2, 130, 10, 6110);
    			attr_dev(p17, "class", "characters-section__more");
    			add_location(p17, file$2, 151, 10, 6883);
    			attr_dev(div23, "class", "content");
    			add_location(div23, file$2, 125, 8, 5949);
    			attr_dev(section4, "class", "section characters-section");
    			add_location(section4, file$2, 124, 6, 5896);
    			add_location(h23, file$2, 167, 12, 7348);
    			add_location(span6, file$2, 168, 12, 7377);
    			attr_dev(div24, "class", "heading");
    			add_location(div24, file$2, 166, 10, 7314);
    			attr_dev(p18, "data-align", "center");
    			attr_dev(p18, "data-slidein", "left");
    			add_location(p18, file$2, 171, 12, 7466);
    			attr_dev(p19, "data-align", "center");
    			attr_dev(p19, "data-slidein", "left");
    			add_location(p19, file$2, 174, 12, 7609);
    			attr_dev(div25, "class", "filled-sentence");
    			add_location(div25, file$2, 170, 10, 7424);
    			attr_dev(a0, "class", "button button--discord");
    			set_style(a0, "margin-top", "60px");
    			attr_dev(a0, "href", "https://discord.gg/FvZvX8gEDx");
    			add_location(a0, file$2, 178, 10, 7748);
    			attr_dev(div26, "class", "content");
    			add_location(div26, file$2, 165, 8, 7282);
    			attr_dev(section5, "class", "section discord-section");
    			add_location(section5, file$2, 164, 6, 7232);
    			attr_dev(main, "class", "main");
    			add_location(main, file$2, 42, 4, 2303);
    			attr_dev(img10, "class", "share-section__mini-necromance");
    			if (img10.src !== (img10_src_value = "/src/pages/newcromance/img/mini_necromance.png")) attr_dev(img10, "src", img10_src_value);
    			add_location(img10, file$2, 194, 8, 8237);
    			attr_dev(img11, "class", "share-section__text");
    			if (img11.src !== (img11_src_value = "/src/pages/newcromance/img/シェアしなさいよね！.png")) attr_dev(img11, "src", img11_src_value);
    			attr_dev(img11, "alt", "シェアしなさいよね！");
    			add_location(img11, file$2, 195, 8, 8345);
    			attr_dev(div27, "class", "share-section__dialogue");
    			add_location(div27, file$2, 193, 6, 8191);
    			attr_dev(path2, "fill", "currentColor");
    			attr_dev(path2, "d", "M22.46,6C21.69,6.35 20.86,6.58 20,6.69C20.88,6.16 21.56,5.32 21.88,4.31C21.05,4.81 20.13,5.16 19.16,5.36C18.37,4.5 17.26,4 16,4C13.65,4 11.73,5.92 11.73,8.29C11.73,8.63 11.77,8.96 11.84,9.27C8.28,9.09 5.11,7.38 3,4.79C2.63,5.42 2.42,6.16 2.42,6.94C2.42,8.43 3.17,9.75 4.33,10.5C3.62,10.5 2.96,10.3 2.38,10C2.38,10 2.38,10 2.38,10.03C2.38,12.11 3.86,13.85 5.82,14.24C5.46,14.34 5.08,14.39 4.69,14.39C4.42,14.39 4.15,14.36 3.89,14.31C4.43,16 6,17.26 7.89,17.29C6.43,18.45 4.58,19.13 2.56,19.13C2.22,19.13 1.88,19.11 1.54,19.07C3.44,20.29 5.7,21 8.12,21C16,21 20.33,14.46 20.33,8.79C20.33,8.6 20.33,8.42 20.32,8.23C21.16,7.63 21.88,6.87 22.46,6Z");
    			add_location(path2, file$2, 200, 12, 9194);
    			set_style(svg2, "width", "24px");
    			set_style(svg2, "height", "24px");
    			attr_dev(svg2, "viewBox", "0 0 24 24");
    			add_location(svg2, file$2, 199, 10, 9125);
    			attr_dev(a1, "class", "share-section__button--twitter");
    			attr_dev(a1, "href", "https://twitter.com/intent/tweet?text=%E3%82%8C%E3%83%BC%E3%81%9E%E3%81%8F%E5%85%A8%E6%96%B9%E4%BD%8DSTG%E3%80%8E%E3%82%8C%E3%83%BC%E3%81%9E%E3%81%8F%EF%BC%81%E3%83%8D%E3%82%AF%E3%83%AD%E3%83%9E%E3%83%B3%E3%82%B9%E3%81%A1%E3%82%83%E3%82%93%E3%80%8F%E5%85%AC%E5%BC%8F%E3%82%B5%E3%82%A4%E3%83%88%20https%3A%2F%2Fsuperstarmine.com%2Fnecromance%2F%20%23%E3%81%9E%E3%81%8F%E3%83%AD%E3%83%9E%20%23%E3%82%8C%E3%83%BC%E3%81%9E%E3%81%8F%E3%83%8D%E3%82%AF%E3%83%AD%E3%83%9E%E3%83%B3%E3%82%B9%E3%81%A1%E3%82%83%E3%82%93%20%40necromance_chan%E3%82%88%E3%82%8A%20");
    			add_location(a1, file$2, 198, 8, 8514);
    			attr_dev(path3, "fill", "currentColor");
    			attr_dev(path3, "d", "M12 2.04C6.5 2.04 2 6.53 2 12.06C2 17.06 5.66 21.21 10.44 21.96V14.96H7.9V12.06H10.44V9.85C10.44 7.34 11.93 5.96 14.22 5.96C15.31 5.96 16.45 6.15 16.45 6.15V8.62H15.19C13.95 8.62 13.56 9.39 13.56 10.18V12.06H16.34L15.89 14.96H13.56V21.96A10 10 0 0 0 22 12.06C22 6.53 17.5 2.04 12 2.04Z");
    			add_location(path3, file$2, 205, 12, 10202);
    			set_style(svg3, "width", "24px");
    			set_style(svg3, "height", "24px");
    			attr_dev(svg3, "viewBox", "0 0 24 24");
    			add_location(svg3, file$2, 204, 10, 10133);
    			attr_dev(a2, "class", "share-section__button--facebook");
    			attr_dev(a2, "href", "https://www.facebook.com/sharer/sharer.php?kid_directed_site=0&sdk=joey&u=https%3A%2F%2Fsuperstarmine.com%2Fnecromance%2F&display=popup&ref=plugin&src=share_button");
    			add_location(a2, file$2, 203, 8, 9908);
    			attr_dev(div28, "class", "share-section__share-buttons");
    			add_location(div28, file$2, 197, 6, 8463);
    			attr_dev(div29, "class", "share-section");
    			add_location(div29, file$2, 192, 4, 8157);
    			attr_dev(img12, "class", "footer__circle-logo");
    			if (img12.src !== (img12_src_value = "/src/pages/newcromance/img/新ロゴ_W_横_v2_a.png")) attr_dev(img12, "src", img12_src_value);
    			attr_dev(img12, "alt", "サークルロゴ");
    			add_location(img12, file$2, 212, 8, 10639);
    			attr_dev(p20, "class", "footer__copyright");
    			add_location(p20, file$2, 213, 8, 10744);
    			attr_dev(hr, "class", "footer__divider");
    			add_location(hr, file$2, 214, 8, 10828);
    			attr_dev(a3, "href", "https://github.com/SuperStarMine/web-v3");
    			add_location(a3, file$2, 216, 70, 10963);
    			add_location(br4, file$2, 216, 144, 11037);
    			attr_dev(a4, "href", "https://github.com/SuperStarMine/web-v3");
    			add_location(a4, file$2, 217, 107, 11149);
    			attr_dev(p21, "class", "footer__license");
    			add_location(p21, file$2, 215, 8, 10865);
    			add_location(br5, file$2, 220, 84, 11344);
    			attr_dev(p22, "class", "footer__license");
    			add_location(p22, file$2, 219, 8, 11232);
    			attr_dev(div30, "class", "content");
    			add_location(div30, file$2, 211, 6, 10609);
    			attr_dev(footer, "class", "footer");
    			add_location(footer, file$2, 210, 4, 10579);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			append_dev(document.head, meta0);
    			append_dev(document.head, meta1);
    			append_dev(document.head, link0);
    			append_dev(document.head, link1);
    			append_dev(document.head, link2);
    			append_dev(document.head, link3);
    			append_dev(document.head, link4);
    			append_dev(document.head, link5);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, nav, anchor);
    			append_dev(nav, div0);
    			append_dev(div0, img0);
    			append_dev(nav, t1);
    			append_dev(nav, div2);
    			append_dev(div2, div1);
    			append_dev(div1, svg0);
    			append_dev(svg0, path0);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, section0, anchor);
    			append_dev(section0, div3);
    			append_dev(div3, img1);
    			append_dev(div3, t3);
    			append_dev(div3, img2);
    			append_dev(div3, t4);
    			append_dev(div3, img3);
    			append_dev(div3, t5);
    			append_dev(div3, img4);
    			append_dev(div3, t6);
    			append_dev(div3, img5);
    			append_dev(div3, t7);
    			append_dev(div3, img6);
    			append_dev(section0, t8);
    			append_dev(section0, div4);
    			append_dev(div4, svg1);
    			append_dev(svg1, path1);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, main, anchor);
    			append_dev(main, section1);
    			append_dev(section1, div6);
    			append_dev(div6, div5);
    			append_dev(div5, iframe);
    			append_dev(main, t10);
    			append_dev(main, section2);
    			append_dev(section2, div8);
    			append_dev(div8, div7);
    			append_dev(div7, h20);
    			append_dev(div7, t12);
    			append_dev(div7, span0);
    			append_dev(div8, t14);
    			append_dev(div8, ul);
    			append_dev(ul, li0);
    			append_dev(li0, span1);
    			append_dev(li0, t16);
    			append_dev(li0, p0);
    			append_dev(li0, t18);
    			append_dev(li0, p1);
    			append_dev(ul, t20);
    			append_dev(ul, li1);
    			append_dev(li1, span2);
    			append_dev(li1, t22);
    			append_dev(li1, p2);
    			append_dev(li1, t24);
    			append_dev(li1, p3);
    			append_dev(ul, t26);
    			append_dev(ul, li2);
    			append_dev(li2, span3);
    			append_dev(li2, t28);
    			append_dev(li2, p4);
    			append_dev(li2, t30);
    			append_dev(li2, p5);
    			append_dev(main, t32);
    			append_dev(main, section3);
    			append_dev(section3, div17);
    			append_dev(div17, div9);
    			append_dev(div9, h21);
    			append_dev(div9, t34);
    			append_dev(div9, span4);
    			append_dev(div17, t36);
    			append_dev(div17, div12);
    			append_dev(div12, div10);
    			append_dev(div10, p6);
    			mount_component(lines0, p6, null);
    			append_dev(div10, t37);
    			append_dev(div10, p7);
    			mount_component(lines1, p7, null);
    			append_dev(div10, t38);
    			append_dev(div10, p8);
    			mount_component(lines2, p8, null);
    			append_dev(div10, t39);
    			append_dev(div10, p9);
    			mount_component(lines3, p9, null);
    			append_dev(div12, t40);
    			append_dev(div12, div11);
    			append_dev(div11, img7);
    			append_dev(div17, t41);
    			append_dev(div17, div13);
    			append_dev(div17, t42);
    			append_dev(div17, div16);
    			append_dev(div16, div14);
    			append_dev(div14, img8);
    			append_dev(div16, t43);
    			append_dev(div16, div15);
    			append_dev(div15, p10);
    			mount_component(lines4, p10, null);
    			append_dev(div15, t44);
    			append_dev(div15, p11);
    			mount_component(lines5, p11, null);
    			append_dev(div15, t45);
    			append_dev(div15, p12);
    			mount_component(lines6, p12, null);
    			append_dev(div15, t46);
    			append_dev(div15, p13);
    			append_dev(div15, t47);
    			append_dev(div15, p14);
    			mount_component(lines7, p14, null);
    			append_dev(main, t48);
    			append_dev(main, section4);
    			append_dev(section4, div23);
    			append_dev(div23, div18);
    			append_dev(div18, h22);
    			append_dev(div18, t50);
    			append_dev(div18, span5);
    			append_dev(div23, t52);
    			append_dev(div23, div22);
    			append_dev(div22, div21);
    			append_dev(div21, div19);
    			append_dev(div19, img9);
    			append_dev(div21, t53);
    			append_dev(div21, div20);
    			append_dev(div20, h3);
    			append_dev(div20, t55);
    			append_dev(div20, p15);
    			append_dev(div20, t57);
    			append_dev(div20, p16);
    			append_dev(p16, t58);
    			append_dev(p16, br0);
    			append_dev(p16, t59);
    			append_dev(p16, br1);
    			append_dev(p16, t60);
    			append_dev(p16, br2);
    			append_dev(p16, t61);
    			append_dev(p16, br3);
    			append_dev(div23, t62);
    			append_dev(div23, p17);
    			append_dev(main, t64);
    			append_dev(main, section5);
    			append_dev(section5, div26);
    			append_dev(div26, div24);
    			append_dev(div24, h23);
    			append_dev(div24, t66);
    			append_dev(div24, span6);
    			append_dev(div26, t68);
    			append_dev(div26, div25);
    			append_dev(div25, p18);
    			mount_component(lines8, p18, null);
    			append_dev(div25, t69);
    			append_dev(div25, p19);
    			mount_component(lines9, p19, null);
    			append_dev(div26, t70);
    			append_dev(div26, a0);
    			insert_dev(target, t72, anchor);
    			insert_dev(target, div29, anchor);
    			append_dev(div29, div27);
    			append_dev(div27, img10);
    			append_dev(div27, t73);
    			append_dev(div27, img11);
    			append_dev(div29, t74);
    			append_dev(div29, div28);
    			append_dev(div28, a1);
    			append_dev(a1, svg2);
    			append_dev(svg2, path2);
    			append_dev(div28, t75);
    			append_dev(div28, a2);
    			append_dev(a2, svg3);
    			append_dev(svg3, path3);
    			insert_dev(target, t76, anchor);
    			insert_dev(target, footer, anchor);
    			append_dev(footer, div30);
    			append_dev(div30, img12);
    			append_dev(div30, t77);
    			append_dev(div30, p20);
    			append_dev(div30, t79);
    			append_dev(div30, hr);
    			append_dev(div30, t80);
    			append_dev(div30, p21);
    			append_dev(p21, t81);
    			append_dev(p21, a3);
    			append_dev(p21, t83);
    			append_dev(p21, br4);
    			append_dev(p21, t84);
    			append_dev(p21, a4);
    			append_dev(p21, t86);
    			append_dev(div30, t87);
    			append_dev(div30, p22);
    			append_dev(p22, t88);
    			append_dev(p22, br5);
    			append_dev(p22, t89);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(lines0.$$.fragment, local);
    			transition_in(lines1.$$.fragment, local);
    			transition_in(lines2.$$.fragment, local);
    			transition_in(lines3.$$.fragment, local);
    			transition_in(lines4.$$.fragment, local);
    			transition_in(lines5.$$.fragment, local);
    			transition_in(lines6.$$.fragment, local);
    			transition_in(lines7.$$.fragment, local);
    			transition_in(lines8.$$.fragment, local);
    			transition_in(lines9.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(lines0.$$.fragment, local);
    			transition_out(lines1.$$.fragment, local);
    			transition_out(lines2.$$.fragment, local);
    			transition_out(lines3.$$.fragment, local);
    			transition_out(lines4.$$.fragment, local);
    			transition_out(lines5.$$.fragment, local);
    			transition_out(lines6.$$.fragment, local);
    			transition_out(lines7.$$.fragment, local);
    			transition_out(lines8.$$.fragment, local);
    			transition_out(lines9.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			detach_dev(meta0);
    			detach_dev(meta1);
    			detach_dev(link0);
    			detach_dev(link1);
    			detach_dev(link2);
    			detach_dev(link3);
    			detach_dev(link4);
    			detach_dev(link5);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(nav);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(section0);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(main);
    			destroy_component(lines0);
    			destroy_component(lines1);
    			destroy_component(lines2);
    			destroy_component(lines3);
    			destroy_component(lines4);
    			destroy_component(lines5);
    			destroy_component(lines6);
    			destroy_component(lines7);
    			destroy_component(lines8);
    			destroy_component(lines9);
    			if (detaching) detach_dev(t72);
    			if (detaching) detach_dev(div29);
    			if (detaching) detach_dev(t76);
    			if (detaching) detach_dev(footer);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Newcromance", slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Newcromance> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ Lines });
    	return [];
    }

    class Newcromance extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Newcromance",
    			options,
    			id: create_fragment$2.name
    		});
    	}
    }

    /* src/pages/notfound.svelte generated by Svelte v3.38.2 */

    const file$1 = "src/pages/notfound.svelte";

    function create_fragment$1(ctx) {
    	let h1;
    	let t1;
    	let p;
    	let t2_value = Math.round(/*eta*/ ctx[0] / 1000) + "";
    	let t2;
    	let t3;

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "お探しのページは見つかりませんでした";
    			t1 = space();
    			p = element("p");
    			t2 = text$1(t2_value);
    			t3 = text$1("秒後にトップページに戻ります");
    			add_location(h1, file$1, 15, 0, 302);
    			add_location(p, file$1, 16, 0, 330);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, p, anchor);
    			append_dev(p, t2);
    			append_dev(p, t3);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*eta*/ 1 && t2_value !== (t2_value = Math.round(/*eta*/ ctx[0] / 1000) + "")) set_data_dev(t2, t2_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Notfound", slots, []);
    	let last = performance.now();
    	let eta = 5000;

    	const cowntdown = time => {
    		$$invalidate(0, eta -= time - last);
    		last = time;

    		if (eta <= 500) {
    			location.replace(location.origin);
    			return;
    		}

    		requestAnimationFrame(cowntdown);
    	};

    	requestAnimationFrame(cowntdown);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Notfound> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ last, eta, cowntdown });

    	$$self.$inject_state = $$props => {
    		if ("last" in $$props) last = $$props.last;
    		if ("eta" in $$props) $$invalidate(0, eta = $$props.eta);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [eta];
    }

    class Notfound extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Notfound",
    			options,
    			id: create_fragment$1.name
    		});
    	}
    }

    /* src/App.svelte generated by Svelte v3.38.2 */

    const { console: console_1 } = globals;
    const file = "src/App.svelte";

    // (49:2) {#if loadAnalytics}
    function create_if_block(ctx) {
    	let link;
    	let t;
    	let script;
    	let script_src_value;

    	const block = {
    		c: function create() {
    			link = element("link");
    			t = space();
    			script = element("script");
    			attr_dev(link, "rel", "preconnect");
    			attr_dev(link, "href", "https://www.google-analytics.com");
    			add_location(link, file, 49, 4, 1655);
    			script.async = true;
    			if (script.src !== (script_src_value = "https://www.googletagmanager.com/gtag/js?id=UA-158103398-1")) attr_dev(script, "src", script_src_value);
    			add_location(script, file, 50, 4, 1723);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, link, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, script, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(link);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(script);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(49:2) {#if loadAnalytics}",
    		ctx
    	});

    	return block;
    }

    function create_fragment(ctx) {
    	let if_block_anchor;
    	let t;
    	let router;
    	let current;
    	let if_block = /*loadAnalytics*/ ctx[0] && create_if_block(ctx);

    	router = new Router({
    			props: { routes: /*routes*/ ctx[1] },
    			$$inline: true
    		});

    	router.$on("routeLoaded", /*analyticsLoader*/ ctx[2]);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    			t = space();
    			create_component(router.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(document.head, null);
    			append_dev(document.head, if_block_anchor);
    			insert_dev(target, t, anchor);
    			mount_component(router, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(router.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(router.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			detach_dev(if_block_anchor);
    			if (detaching) detach_dev(t);
    			destroy_component(router, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let $sync;
    	validate_store(sync, "sync");
    	component_subscribe($$self, sync, $$value => $$invalidate(3, $sync = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("App", slots, []);
    	let loadAnalytics = location.hostname != "localhost";

    	const routes = {
    		"/": Pages,
    		"/necromance/": Necromance,
    		"/newcromance/": Newcromance,
    		"*": Notfound
    	};

    	function analyticsLoader() {
    		if (loadAnalytics) {
    			window.dataLayer = window.dataLayer || [];

    			function gtag() {
    				dataLayer.push(arguments);
    			}

    			gtag("js", new Date());

    			gtag("config", "UA-158103398-1", {
    				"page_path": location.pathname + location.hash
    			});
    		}
    	}

    	set_store_value(sync, $sync.standardWidth = null, $sync);
    	const defautlStandardWidth = globalSettings.standardWidths[globalSettings.standardWidths.findIndex(v => v.mediaQuery == "default")].value;

    	globalSettings.standardWidths.forEach((v, i, array) => {
    		if (v.mediaQuery && v.mediaQuery != "default") {
    			let media = matchMedia(`(${v.mediaQuery})`);

    			try {
    				media.addEventListener("change", e => set_store_value(sync, $sync.standardWidth = e.matches ? v.value : defautlStandardWidth, $sync));
    			} catch(e1) {
    				try {
    					media.addEventListener(e => set_store_value(sync, $sync.standardWidth = e.matches ? v.value : defautlStandardWidth, $sync));
    				} catch(e2) {
    					console.error(e2);
    				}
    			}
    		}

    		if (i == array.length - 1 && !$sync.standardWidth) set_store_value(sync, $sync.standardWidth = defautlStandardWidth, $sync);
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		Router,
    		globalSettings,
    		sync,
    		Index: Pages,
    		Necromance,
    		Newcromance,
    		NotFound: Notfound,
    		loadAnalytics,
    		routes,
    		analyticsLoader,
    		defautlStandardWidth,
    		$sync
    	});

    	$$self.$inject_state = $$props => {
    		if ("loadAnalytics" in $$props) $$invalidate(0, loadAnalytics = $$props.loadAnalytics);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [loadAnalytics, routes, analyticsLoader];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});
    	}
    }

    const app = new App({
      target: document.body,
      props: {
      }
    });

    return app;

}());
//# sourceMappingURL=bundle.js.map
